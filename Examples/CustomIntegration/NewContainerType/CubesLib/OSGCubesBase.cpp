/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Cubes!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OpenSG/OSGConfig.h"




#include "OSGCubesBase.h"
#include "OSGCubes.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Cubes
    A simple type that can render cubes of a given size and color at a
    given location.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Pnt3f           CubesBase::_mfPosition
    The cubes' positions.
*/

/*! \var Real32          CubesBase::_mfLength
    The cubes' sizes.
*/

/*! \var Color3f         CubesBase::_mfColor
    The cubes' colors.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<Cubes *, nsOSG>::_type(
    "CubesPtr", 
    "MaterialDrawablePtr", 
    Cubes::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(Cubes *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Cubes *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Cubes *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void CubesBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFPnt3f::Description(
        MFPnt3f::getClassType(),
        "position",
        "The cubes' positions.\n",
        PositionFieldId, PositionFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Cubes::editHandlePosition),
        static_cast<FieldGetMethodSig >(&Cubes::getHandlePosition));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "length",
        "The cubes' sizes.\n",
        LengthFieldId, LengthFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Cubes::editHandleLength),
        static_cast<FieldGetMethodSig >(&Cubes::getHandleLength));

    oType.addInitialDesc(pDesc);

    pDesc = new MFColor3f::Description(
        MFColor3f::getClassType(),
        "color",
        "The cubes' colors.\n",
        ColorFieldId, ColorFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Cubes::editHandleColor),
        static_cast<FieldGetMethodSig >(&Cubes::getHandleColor));

    oType.addInitialDesc(pDesc);
}


CubesBase::TypeObject CubesBase::_type(
    CubesBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&CubesBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&Cubes::initMethod),
    reinterpret_cast<ExitContainerF>(&Cubes::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&Cubes::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"Cubes\"\n"
    "   parent=\"MaterialDrawable\"\n"
    "   library=\"CubesLib\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"false\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   structure=\"concrete\"\n"
    "   >\n"
    "  A simple type that can render cubes of a given size and color at a\n"
    "  given location.\n"
    "  <Field\n"
    "     name=\"position\"\n"
    "     category=\"data\"\n"
    "     type=\"Pnt3f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    The cubes' positions.\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"length\"\n"
    "     category=\"data\"\n"
    "     type=\"Real32\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    The cubes' sizes.\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"color\"\n"
    "     category=\"data\"\n"
    "     type=\"Color3f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    The cubes' colors.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "A simple type that can render cubes of a given size and color at a\n"
    "given location.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CubesBase::getType(void)
{
    return _type;
}

const FieldContainerType &CubesBase::getType(void) const
{
    return _type;
}

UInt32 CubesBase::getContainerSize(void) const
{
    return sizeof(Cubes);
}

/*------------------------- decorator get ------------------------------*/


MFPnt3f *CubesBase::editMFPosition(void)
{
    editMField(PositionFieldMask, _mfPosition);

    return &_mfPosition;
}

const MFPnt3f *CubesBase::getMFPosition(void) const
{
    return &_mfPosition;
}


MFReal32 *CubesBase::editMFLength(void)
{
    editMField(LengthFieldMask, _mfLength);

    return &_mfLength;
}

const MFReal32 *CubesBase::getMFLength(void) const
{
    return &_mfLength;
}


MFColor3f *CubesBase::editMFColor(void)
{
    editMField(ColorFieldMask, _mfColor);

    return &_mfColor;
}

const MFColor3f *CubesBase::getMFColor(void) const
{
    return &_mfColor;
}






/*------------------------------ access -----------------------------------*/

SizeT CubesBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _mfPosition.getBinSize();
    }
    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        returnValue += _mfLength.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _mfColor.getBinSize();
    }

    return returnValue;
}

void CubesBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _mfPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        _mfLength.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _mfColor.copyToBin(pMem);
    }
}

void CubesBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        editMField(PositionFieldMask, _mfPosition);
        _mfPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        editMField(LengthFieldMask, _mfLength);
        _mfLength.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        editMField(ColorFieldMask, _mfColor);
        _mfColor.copyFromBin(pMem);
    }
}

//! create a new instance of the class
CubesTransitPtr CubesBase::createLocal(BitVector bFlags)
{
    CubesTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<Cubes>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
CubesTransitPtr CubesBase::createDependent(BitVector bFlags)
{
    CubesTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<Cubes>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
CubesTransitPtr CubesBase::create(void)
{
    CubesTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<Cubes>(tmpPtr);
    }

    return fc;
}

Cubes *CubesBase::createEmptyLocal(BitVector bFlags)
{
    Cubes *returnValue;

    newPtr<Cubes>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
Cubes *CubesBase::createEmpty(void)
{
    Cubes *returnValue;

    newPtr<Cubes>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr CubesBase::shallowCopyLocal(
    BitVector bFlags) const
{
    Cubes *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Cubes *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr CubesBase::shallowCopyDependent(
    BitVector bFlags) const
{
    Cubes *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Cubes *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr CubesBase::shallowCopy(void) const
{
    Cubes *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const Cubes *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

CubesBase::CubesBase(void) :
    Inherited(),
    _mfPosition               (),
    _mfLength                 (),
    _mfColor                  ()
{
}

CubesBase::CubesBase(const CubesBase &source) :
    Inherited(source),
    _mfPosition               (source._mfPosition               ),
    _mfLength                 (source._mfLength                 ),
    _mfColor                  (source._mfColor                  )
{
}


/*-------------------------- destructors ----------------------------------*/

CubesBase::~CubesBase(void)
{
}


GetFieldHandlePtr CubesBase::getHandlePosition        (void) const
{
    MFPnt3f::GetHandlePtr returnValue(
        new  MFPnt3f::GetHandle(
             &_mfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             const_cast<CubesBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CubesBase::editHandlePosition       (void)
{
    MFPnt3f::EditHandlePtr returnValue(
        new  MFPnt3f::EditHandle(
             &_mfPosition,
             this->getType().getFieldDesc(PositionFieldId),
             this));


    editMField(PositionFieldMask, _mfPosition);

    return returnValue;
}

GetFieldHandlePtr CubesBase::getHandleLength          (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfLength,
             this->getType().getFieldDesc(LengthFieldId),
             const_cast<CubesBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CubesBase::editHandleLength         (void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfLength,
             this->getType().getFieldDesc(LengthFieldId),
             this));


    editMField(LengthFieldMask, _mfLength);

    return returnValue;
}

GetFieldHandlePtr CubesBase::getHandleColor           (void) const
{
    MFColor3f::GetHandlePtr returnValue(
        new  MFColor3f::GetHandle(
             &_mfColor,
             this->getType().getFieldDesc(ColorFieldId),
             const_cast<CubesBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CubesBase::editHandleColor          (void)
{
    MFColor3f::EditHandlePtr returnValue(
        new  MFColor3f::EditHandle(
             &_mfColor,
             this->getType().getFieldDesc(ColorFieldId),
             this));


    editMField(ColorFieldMask, _mfColor);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CubesBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Cubes *pThis = static_cast<Cubes *>(this);

    pThis->execSync(static_cast<Cubes *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *CubesBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    Cubes *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Cubes *>(pRefAspect),
                  dynamic_cast<const Cubes *>(this));

    return returnValue;
}
#endif

void CubesBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfPosition.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfLength.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfColor.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
