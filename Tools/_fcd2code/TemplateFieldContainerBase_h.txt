/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
@@if hasAuthors
@!AuthorsCommentText!@
@@else // hasAuthors
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
@@endif // hasAuthors
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class @!Classname!@
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSG@!CLASSNAME!@BASE_H_
#define _OSG@!CLASSNAME!@BASE_H_
#ifdef __sgi
#pragma once
#endif


#include "@!HeaderPrefix!@@!Package!@Config.h"
@@if isInLibrary
#include "OSG@!Libname!@Def.h"
@@endif // isInLibrary

//#include "@!HeaderPrefix!@OSGBaseTypes.h"

#include "@!ParentHeaderPrefix!@OSG@!nsParentFilePrefix!@@!Parent!@.h" // Parent

@@if !isDecorator
  @@BeginFieldLoop@@
    @@if field.needFieldInclude
#include @!field.FieldInclude:30!@ // @!field.Name!@ type
    @@endif  //field.needFieldInclude
  @@EndFieldLoop@@
@@else // !isDecorator
#include "OSG@!Parent!@Fields.h" // Decoratee type
@@endif // !isDecorator

#include "OSG@!nsFilePrefix!@@!Classname!@Fields.h"
@@if hasMixinParent

#include "@!MixinHeader!@"
@@endif

@!LIBNAMESPACE!@_BEGIN_NAMESPACE

@!IMPORTNAMESPACE!@
class @!Classname!@;

//! \brief @!Classname!@ Base Class.

@@if hasMixinParent
  @@if isInLibrary
class OSG_@!LIBNAME!@_DLLMAPPING @!Classname!@Base : public @!MixinParent!@
  @@else // isInLibrary
class @!Classname!@Base : public @!MixinParent!@
@@endif // isInLibrary
@@else // hasMixinParent
  @@if isInLibrary
class OSG_@!LIBNAME!@_DLLMAPPING @!Classname!@Base : public @!Parent!@
  @@else // isInLibrary
class @!Classname!@Base : public @!Parent!@
  @@endif // isInLibrary
@@endif // hasMixinParent
{
  public:

@@if hasMixinParent
    typedef @!MixinParent!@ Inherited;
@@else
    typedef @!Parent!@ Inherited;
@@endif
    typedef @!Parent!@ ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(@!Classname!@);

    /*==========================  PUBLIC  =================================*/

  public:

@@if isDecorator
    enum
    {
        DecorateeFieldId        = Inherited::NextFieldId,
        NextFieldId             = DecorateeFieldId          + 1
    };

    static const OSG::BitVector DecorateeFieldMask =
        (TypeTraits<BitVector>::One << DecorateeFieldId);
@@else // isDecorator
 @@if hasFields
    enum
    {
  @@BeginFieldLoop
   @@if field.isFirstField
        @!field.Name!@FieldId = Inherited::NextFieldId,
    @@if field.isLastField
        NextFieldId = @!field.Name!@FieldId + 1
                @@endif // field.isLastField
    @@else // field.isFirstField
        @!field.Name!@FieldId = @!field.prevField.Name!@FieldId + 1,
     @@if field.isLastField
        NextFieldId = @!field.Name!@FieldId + 1
     @@endif // field.isLastField
    @@endif // field.isFirstField
  @@EndFieldLoop
    };

  @@BeginFieldLoop
    static const OSG::BitVector @!field.Name!@FieldMask =
        (TypeTraits<BitVector>::One << @!field.Name!@FieldId);
  @@EndFieldLoop
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
  @@BeginFieldLoop
    typedef @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:15!@ @!field.CARD!@@!field.Name!@Type;
  @@EndFieldLoop
 @@endif // hasFields
@@endif // isDecorator

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
@@if hasPublicFields
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

 @@if isDecorator
    @!MethodType:7!@       const SFUnrec@!Parent!@Ptr *getSFDecoratee(void) const;
 @@endif // isDecorator
 @@BeginFieldLoop@@
  @@if field.isPublicRead
   @@if field.isPtrField
    @@if !field.isParentField
    @!field.MethodType:7!@ const @!field.CARD!@@!field.FieldTypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@(void) const;
     @@if field.ptrFieldStandardAccess
      @@if field.isPublicWrite
    @!field.MethodType:7!@       @!field.CARD!@@!field.FieldTypeCaps:17!@ *edit@!field.CARD!@@!field.Name:15!@(void);
      @@endif // field.isPublicWrite
     @@endif // field.ptrFieldStandardAccess
     @@if field.isSField
      @@if field.ptrFieldNullCheckAccess
       @@if field.isPublicWrite
    @!field.MethodType:7!@       @!field.CARD!@@!field.FieldTypeCaps:17!@ *edit@!field.CARD!@@!field.Name:15!@(void);
       @@endif // field.isPublicWrite
      @@endif // field.ptrFieldNullCheckAccess
     @@endif //  field.isSField
    @@endif // !field.isParentField
   @@else // field.isPtrField

   @@if field.isPublicWrite
    @!field.MethodType:7!@       @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:17!@ *edit@!field.CARD!@@!field.Name:15!@(void);
   @@endif // field.isPublicWrite
    @!field.MethodType:7!@ const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void) const;
   @@endif // field.isPtrField
  @@endif // field.isPublicRead
 @@EndFieldLoop@@

 @@if isDecorator
    @!MethodType:7!@             @!Parent!@ *getDecoratee(void) const;
 @@endif // isDecorator
 @@BeginFieldLoop@@
  @@if field.isPublicRead
   @@if field.isSField

    @@if field.isPtrField
    @!field.MethodType:7!@       @!field.Type!@ get@!field.Name:15!@(void) const;
    @@else // field.isPtrField
     @@if field.isPublicWrite
    @!field.MethodType:7!@       @!field.FullType:19!@ &edit@!field.Name:15!@(void);
     @@endif // field.isPublicWrite
    @!field.MethodType:7!@ @!field.RetConst!@ @!field.FullType:19!@ @!field.RetRef!@get@!field.Name:15!@ (void) const;
    @@endif // field.isPtrField
   @@else // field.isSField

    @@if field.isPtrField
    @!field.MethodType:7!@       @!field.Type!@ get@!field.Name:15!@(const UInt32 index) const;
    @@else // field.isPtrField
     @@if field.isPublicWrite
    @!field.MethodType:7!@ @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:17!@::reference       edit@!field.Name:15!@(const UInt32 index);
     @@endif // field.isPublicWrite
    @!field.MethodType:7!@ @!field.RetConst!@ @!field.FullType:19!@ @!field.RetRef!@get@!field.Name:15!@ (const UInt32 index) const;
    @@endif // field.isPtrField
   @@endif // field.isSField
  @@endif // field.isPublicRead
 @@EndFieldLoop@@

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

 @@if isDecorator
    @!MethodType:7!@       void setDecoratee      (@!Parent!@ * const value);
 @@endif // isDecorator
 @@BeginSFFieldLoop@@
  @@if field.isPublic
   @@if field.isPtrField
    @@if !field.isParentField
     @@if !field.ptrFieldCustomAccess
      @@if field.PassFieldMask
    @!field.MethodType:7!@ void set@!field.Name:15!@(@!field.Type!@ const value,
                    const UInt16        uiStoredInFieldId = InvalidParentEPos);
      @@else // field.PassFieldMask
    @!field.MethodType:7!@ void set@!field.Name:15!@(@!field.Type!@ const value);
      @@endif // field.PassFieldMask
     @@endif // !field.ptrFieldCustomAccess
    @@endif // !field.isParentField
   @@else // field.isPtrField
    @!field.MethodType:7!@ void set@!field.Name:15!@(const @!field.FullType!@ @!field.ArgRef!@value);
   @@endif // field.isPtrField
  @@endif // field.isPublic
 @@EndSFFieldLoop@@

    /*! \}                                                                 */
 @@if hasPtrFields
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
 @@endif // hasPtrFields
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

 @@BeginMFFieldLoop@@
  @@if field.isPublic
   @@if field.isPtrField
    @@if !field.isParentField
     @@if field.ptrFieldStandardAccess
    void @!field.PushToField:15!@           (@!field.Type!@ const value   );
    void @!field.AssignMField:15!@          (const @!field.TypeNamespace!@@!field.CARD!@@!field.FieldTypeCaps:15!@ &value);
    void @!field.RemoveFromMFieldIndex:15!@ (UInt32               uiIndex );
    void @!field.RemoveFromMFieldObject:15!@(@!field.Type!@ const value   );
    void @!field.ClearField:15!@            (void                         );

     @@endif // field.ptrFieldStandardAccess
     @@if field.ptrFieldNullCheckAccess
    void @!field.PushToField:15!@           (@!field.Type!@ const value   );
    void @!field.AssignMField:15!@          (const @!field.TypeNamespace!@@!field.CARD!@@!field.FieldTypeCaps:15!@ &value);
    void @!field.ClearField:15!@            (void                         );
    void @!field.InsertIntoMField:15!@      (UInt32               uiIndex,
                                             @!field.Type!@ const value   );
    void @!field.ReplaceInMFieldIndex:15!@  (      UInt32         uiIndex,
                                             @!field.Type!@ const value   );
    void @!field.ReplaceInMFieldObject:15!@ (@!field.Type!@ const pOldElem,
                                             @!field.Type!@ const pNewElem);
    void @!field.RemoveFromMFieldIndex:15!@ (UInt32               uiIndex );
    void @!field.RemoveFromMFieldObject:15!@(@!field.Type!@ const value   );

     @@endif // field.ptrFieldNullCheckAccess
    @@endif // !field.isParentField
   @@endif // field.isPtrField
  @@endif // field.isPublic
 @@EndMFFieldLoop@@
    /*! \}                                                                 */
@@endif // hasPublicFields
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
@@if !isAbstract
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  @!Classname!@TransitPtr  create          (void);
    static  @!Classname!@           *createEmpty     (void);

    static  @!Classname!@TransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  @!Classname!@            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  @!Classname!@TransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
@@endif // !isAbstract
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

@@if hasFields
    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

 @@if isDecorator
    SFUnrec@!Parent!@Ptr _sfDecoratee;
 @@else // isDecorator
  @@BeginFieldLoop@@
   @@if !field.isStoreless
    @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:15!@ _@!field.VarName!@;
   @@endif // !field.isStoreless
  @@EndFieldLoop@@
 @@endif // isDecorator

    /*! \}                                                                 */
@@endif // hasFields
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    @!Classname!@Base(void);
    @!Classname!@Base(const @!Classname!@Base &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~@!Classname!@Base(void);

@@if isDynFCDerived
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                        Type                                  */
    /*! \{                                                                 */

    virtual       TypeObject &getFinalType(void);
    virtual const TypeObject &getFinalType(void) const;

@@endif
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

@@if hasPtrFields
    void onCreate(const @!Classname!@ *source = NULL);
@@endif // hasPtrFields

    /*! \}                                                                 */
@@if hasParentFields
    /*---------------------------------------------------------------------*/
    /*! \name Parent linking                                               */
    /*! \{                                                                 */

    virtual bool linkParent  (FieldContainer * const pParent,
                              UInt16           const childFieldId,
                              UInt16           const parentFieldId);
    virtual bool unlinkParent(FieldContainer * const pParent,
                              UInt16           const parentFieldId);

    /*! \}                                                                 */
@@endif // @!hasParentPtrFields!@
@@if hasChildFields
    /*---------------------------------------------------------------------*/
    /*! \name Child linking                                                */
    /*! \{                                                                 */

    virtual bool unlinkChild(FieldContainer * const pChild,
                             UInt16           const childFieldId);

    /*! \}                                                                 */
@@endif // @!hasChildPtrFields!@
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

@@if isDecorator
    GetFieldHandlePtr  getHandleDecoratee (void) const;
    EditFieldHandlePtr editHandleDecoratee(void);

@@endif // isDecorator
@@BeginFieldLoop@@
    @!field.MethodType!@ GetFieldHandlePtr  getHandle@!field.Name:15!@ (void) const;
    @!field.MethodType!@ EditFieldHandlePtr editHandle@!field.Name:15!@(void);
@@EndFieldLoop@@

    /*! \}                                                                 */
@@if hasProtectedFields
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

 @@BeginFieldLoop@@
  @@if field.isProtected
   @@if field.isPtrField
    @@if !field.isParentField
     @@if !field.isPublicRead
    @!field.MethodType:7!@ const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void) const;
     @@endif // !field.isPublicRead
     @@if field.ptrFieldStandardAccess
    @!field.MethodType:7!@       @!field.CARD!@@!field.FieldTypeCaps:17!@ *edit@!field.CARD!@@!field.Name:15!@(void);
     @@endif // field.ptrFieldStandardAccess
     @@if field.isSField
      @@if field.ptrFieldNullCheckAccess
    @!field.MethodType:7!@       @!field.CARD!@@!field.FieldTypeCaps:17!@ *edit@!field.CARD!@@!field.Name:15!@(void);
      @@endif // field.ptrFieldNullCheckAccess
     @@endif // field.isSField 
    @@endif // !field.isParentField
   @@else // field.isPtrField

    @!field.MethodType:7!@       @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:17!@ *edit@!field.CARD!@@!field.Name:15!@(void);
    @@if !field.isPublicRead
    @!field.MethodType:7!@ const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void) const;
    @@endif // !field.isPublicRead
   @@endif // field.isPtrField
  @@endif // field.isProtected
 @@EndFieldLoop@@

 @@BeginFieldLoop@@
  @@if field.isProtected
   @@if field.isSField

    @@if field.isPtrField
     @@if !field.isPublicRead
    @!field.MethodType:7!@       @!field.FullType!@ get@!field.Name:15!@(void) const;
     @@endif // !field.isPublicRead
    @@else // field.isPtrField
    @!field.MethodType:7!@       @!field.FullType:19!@ &edit@!field.Name:15!@(void);
     @@if !field.isPublicRead
    @!field.MethodType:7!@ @!field.RetConst!@ @!field.FullType:19!@ @!field.RetRef!@get@!field.Name:15!@ (void) const;
     @@endif // !field.isPublicRead
    @@endif // field.isPtrField
   @@else // field.isSField

    @@if field.isPtrField
     @@if !field.isPublicRead
    @!field.MethodType:7!@       @!field.Type!@ get@!field.Name:15!@(const UInt32 index) const;
     @@endif // !field.isPublicRead
    @@else // field.isPtrField
    @!field.MethodType:7!@       @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:17!@::reference edit@!field.Name:15!@(const UInt32 index);
     @@if !field.isPublicRead
    @!field.MethodType:7!@ @!field.RetConst!@ @!field.FullType:19!@ @!field.RetRef!@get@!field.Name:15!@ (const UInt32 index) const;
     @@endif // !field.isPublicRead
    @@endif // field.isPtrField
   @@endif // field.isSField
  @@endif // field.isProtected
 @@EndFieldLoop@@

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

 @@BeginSFFieldLoop@@
  @@if field.isProtected
   @@if field.isPtrField
    @@if !field.isParentField
     @@if !field.ptrFieldCustomAccess
    @!field.MethodType:7!@ void set@!field.Name:15!@(@!field.Type!@ const value);
     @@endif // !field.ptrFieldCustomAccess
    @@endif // !field.isParentField
   @@else // field.isPtrField
    @!field.MethodType:7!@ void set@!field.Name:15!@(const @!field.FullType!@ @!field.ArgRef!@value);
   @@endif // field.isPtrField
  @@endif // field.isProtected
 @@EndSFFieldLoop@@

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

 @@BeginMFFieldLoop@@
  @@if field.isProtected
   @@if field.isPtrField
    @@if !field.isParentField
     @@if field.ptrFieldStandardAccess
    void @!field.PushToField:15!@           (@!field.Type!@ const value   );
    void @!field.AssignMField:15!@           (const @!field.TypeNamespace!@@!field.CARD!@@!field.FieldTypeCaps:15!@ &value);
    void @!field.RemoveFromMFieldIndex:15!@ (UInt32                uiIndex );
    void @!field.RemoveFromMFieldObject:15!@(@!field.Type!@ const value   );
    void @!field.ClearField:15!@            (void                          );

     @@endif // field.ptrFieldStandardAccess
     @@if field.ptrFieldNullCheckAccess
    void @!field.PushToField:15!@           (@!field.Type!@ const value   );
    void @!field.AssignMField:15!@          (const @!field.TypeNamespace!@@!field.CARD!@@!field.FieldTypeCaps:15!@ &value);
    void @!field.ClearField:15!@            (void                          );
    void @!field.InsertIntoMField:15!@      (UInt32         uiIndex,
                                             @!field.Type!@ const value   );
    void @!field.ReplaceInMFieldIndex:15!@  (UInt32         uiIndex,
                                             @!field.Type!@ const value   );
    void @!field.ReplaceInMFieldObject:15!@ (@!field.Type!@ const pOldElem,
                                             @!field.Type!@ const pNewElem);
    void @!field.RemoveFromMFieldIndex:15!@ (UInt32                uiIndex );
    void @!field.RemoveFromMFieldObject:15!@(@!field.Type!@ const value   );

     @@endif // field.ptrFieldNullCheckAccess
    @@endif // !field.isParentField
   @@endif // field.isPtrField
  @@endif // field.isProtected
 @@EndMFFieldLoop@@
    /*! \}                                                                 */
@@endif // hasProtectedFields
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      @!Classname!@Base *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */
@@if !isAbstract

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif
@@endif // !isAbstract

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const @!Classname!@Base &source);
};

typedef @!Classname!@Base *@!Classname!@BaseP;
@@if isNodeCore

typedef CoredNodeRefPtr  <@!Classname!@> @!Classname!@NodeRefPtr;
typedef CoredNodeMTRefPtr<@!Classname!@> @!Classname!@NodeMTRefPtr;
@@endif

@!LIBNAMESPACE!@_END_NAMESPACE

#endif /* _OSG@!CLASSNAME!@BASE_H_ */
