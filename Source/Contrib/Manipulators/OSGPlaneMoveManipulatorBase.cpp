/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PlaneMoveManipulator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGPlaneMoveManipulatorBase.h"
#include "OSGPlaneMoveManipulator.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PlaneMoveManipulator
    The PlaneMoveHandle is used for moving objects in a plane and rotating them around one axis.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt16          PlaneMoveManipulatorBase::_sfAxis
    Rotation axis to rotate around (0:X, 1:Y, 2:Z). Translation plane is defined by the other two axes. *** Not implemented yet ***
*/

/*! \var Vec3f           PlaneMoveManipulatorBase::_sfBaseTranslation
    Translation value at the beginning of manipulation.
*/

/*! \var Quaternion      PlaneMoveManipulatorBase::_sfBaseRotation
    Rotation value at the beginning of manipulation.
*/

/*! \var Pnt3f           PlaneMoveManipulatorBase::_sfClickPoint
    Point clicked on to start manipulation.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<PlaneMoveManipulator *, nsOSG>::_type(
    "PlaneMoveManipulatorPtr", 
    "ManipulatorPtr", 
    PlaneMoveManipulator::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(PlaneMoveManipulator *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PlaneMoveManipulatorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(),
        "axis",
        "Rotation axis to rotate around (0:X, 1:Y, 2:Z). Translation plane is defined by the other two axes. *** Not implemented yet ***\n",
        AxisFieldId, AxisFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PlaneMoveManipulator::editHandleAxis),
        static_cast<FieldGetMethodSig >(&PlaneMoveManipulator::getHandleAxis));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "baseTranslation",
        "Translation value at the beginning of manipulation.\n",
        BaseTranslationFieldId, BaseTranslationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PlaneMoveManipulator::editHandleBaseTranslation),
        static_cast<FieldGetMethodSig >(&PlaneMoveManipulator::getHandleBaseTranslation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFQuaternion::Description(
        SFQuaternion::getClassType(),
        "baseRotation",
        "Rotation value at the beginning of manipulation.\n",
        BaseRotationFieldId, BaseRotationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PlaneMoveManipulator::editHandleBaseRotation),
        static_cast<FieldGetMethodSig >(&PlaneMoveManipulator::getHandleBaseRotation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "clickPoint",
        "Point clicked on to start manipulation.\n",
        ClickPointFieldId, ClickPointFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PlaneMoveManipulator::editHandleClickPoint),
        static_cast<FieldGetMethodSig >(&PlaneMoveManipulator::getHandleClickPoint));

    oType.addInitialDesc(pDesc);
}


PlaneMoveManipulatorBase::TypeObject PlaneMoveManipulatorBase::_type(
    PlaneMoveManipulatorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&PlaneMoveManipulatorBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&PlaneMoveManipulator::initMethod),
    reinterpret_cast<ExitContainerF>(&PlaneMoveManipulator::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&PlaneMoveManipulator::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"PlaneMoveManipulator\"\n"
    "\tparent=\"Manipulator\"\n"
    "\tlibrary=\"ContribGUI\"\n"
    "\tpointerfieldtypes=\"none\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"true\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"axis\"\n"
    "\t\ttype=\"UInt16\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "                defaultValue=\"1\"\n"
    "\t>\n"
    "\tRotation axis to rotate around (0:X, 1:Y, 2:Z). Translation plane is defined by the other two axes. *** Not implemented yet ***\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"baseTranslation\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\tTranslation value at the beginning of manipulation.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"baseRotation\"\n"
    "\t\ttype=\"Quaternion\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\tRotation value at the beginning of manipulation.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"clickPoint\"\n"
    "\t\ttype=\"Pnt3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\tPoint clicked on to start manipulation.\n"
    "\t</Field>\n"
    "The PlaneMoveHandle is used for moving objects in a plane and rotating them around one axis.\n"
    "</FieldContainer>\n",
    "The PlaneMoveHandle is used for moving objects in a plane and rotating them around one axis.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PlaneMoveManipulatorBase::getType(void)
{
    return _type;
}

const FieldContainerType &PlaneMoveManipulatorBase::getType(void) const
{
    return _type;
}

UInt32 PlaneMoveManipulatorBase::getContainerSize(void) const
{
    return sizeof(PlaneMoveManipulator);
}

/*------------------------- decorator get ------------------------------*/


SFUInt16 *PlaneMoveManipulatorBase::editSFAxis(void)
{
    editSField(AxisFieldMask);

    return &_sfAxis;
}

const SFUInt16 *PlaneMoveManipulatorBase::getSFAxis(void) const
{
    return &_sfAxis;
}


SFVec3f *PlaneMoveManipulatorBase::editSFBaseTranslation(void)
{
    editSField(BaseTranslationFieldMask);

    return &_sfBaseTranslation;
}

const SFVec3f *PlaneMoveManipulatorBase::getSFBaseTranslation(void) const
{
    return &_sfBaseTranslation;
}


SFQuaternion *PlaneMoveManipulatorBase::editSFBaseRotation(void)
{
    editSField(BaseRotationFieldMask);

    return &_sfBaseRotation;
}

const SFQuaternion *PlaneMoveManipulatorBase::getSFBaseRotation(void) const
{
    return &_sfBaseRotation;
}


SFPnt3f *PlaneMoveManipulatorBase::editSFClickPoint(void)
{
    editSField(ClickPointFieldMask);

    return &_sfClickPoint;
}

const SFPnt3f *PlaneMoveManipulatorBase::getSFClickPoint(void) const
{
    return &_sfClickPoint;
}






/*------------------------------ access -----------------------------------*/

SizeT PlaneMoveManipulatorBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        returnValue += _sfAxis.getBinSize();
    }
    if(FieldBits::NoField != (BaseTranslationFieldMask & whichField))
    {
        returnValue += _sfBaseTranslation.getBinSize();
    }
    if(FieldBits::NoField != (BaseRotationFieldMask & whichField))
    {
        returnValue += _sfBaseRotation.getBinSize();
    }
    if(FieldBits::NoField != (ClickPointFieldMask & whichField))
    {
        returnValue += _sfClickPoint.getBinSize();
    }

    return returnValue;
}

void PlaneMoveManipulatorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        _sfAxis.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BaseTranslationFieldMask & whichField))
    {
        _sfBaseTranslation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BaseRotationFieldMask & whichField))
    {
        _sfBaseRotation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClickPointFieldMask & whichField))
    {
        _sfClickPoint.copyToBin(pMem);
    }
}

void PlaneMoveManipulatorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        editSField(AxisFieldMask);
        _sfAxis.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BaseTranslationFieldMask & whichField))
    {
        editSField(BaseTranslationFieldMask);
        _sfBaseTranslation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BaseRotationFieldMask & whichField))
    {
        editSField(BaseRotationFieldMask);
        _sfBaseRotation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClickPointFieldMask & whichField))
    {
        editSField(ClickPointFieldMask);
        _sfClickPoint.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PlaneMoveManipulatorTransitPtr PlaneMoveManipulatorBase::createLocal(BitVector bFlags)
{
    PlaneMoveManipulatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PlaneMoveManipulator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PlaneMoveManipulatorTransitPtr PlaneMoveManipulatorBase::createDependent(BitVector bFlags)
{
    PlaneMoveManipulatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PlaneMoveManipulator>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PlaneMoveManipulatorTransitPtr PlaneMoveManipulatorBase::create(void)
{
    PlaneMoveManipulatorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PlaneMoveManipulator>(tmpPtr);
    }

    return fc;
}

PlaneMoveManipulator *PlaneMoveManipulatorBase::createEmptyLocal(BitVector bFlags)
{
    PlaneMoveManipulator *returnValue;

    newPtr<PlaneMoveManipulator>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PlaneMoveManipulator *PlaneMoveManipulatorBase::createEmpty(void)
{
    PlaneMoveManipulator *returnValue;

    newPtr<PlaneMoveManipulator>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr PlaneMoveManipulatorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PlaneMoveManipulator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PlaneMoveManipulator *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PlaneMoveManipulatorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PlaneMoveManipulator *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PlaneMoveManipulator *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PlaneMoveManipulatorBase::shallowCopy(void) const
{
    PlaneMoveManipulator *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PlaneMoveManipulator *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

PlaneMoveManipulatorBase::PlaneMoveManipulatorBase(void) :
    Inherited(),
    _sfAxis                   (UInt16(1)),
    _sfBaseTranslation        (),
    _sfBaseRotation           (),
    _sfClickPoint             ()
{
}

PlaneMoveManipulatorBase::PlaneMoveManipulatorBase(const PlaneMoveManipulatorBase &source) :
    Inherited(source),
    _sfAxis                   (source._sfAxis                   ),
    _sfBaseTranslation        (source._sfBaseTranslation        ),
    _sfBaseRotation           (source._sfBaseRotation           ),
    _sfClickPoint             (source._sfClickPoint             )
{
}


/*-------------------------- destructors ----------------------------------*/

PlaneMoveManipulatorBase::~PlaneMoveManipulatorBase(void)
{
}


GetFieldHandlePtr PlaneMoveManipulatorBase::getHandleAxis            (void) const
{
    SFUInt16::GetHandlePtr returnValue(
        new  SFUInt16::GetHandle(
             &_sfAxis,
             this->getType().getFieldDesc(AxisFieldId),
             const_cast<PlaneMoveManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PlaneMoveManipulatorBase::editHandleAxis           (void)
{
    SFUInt16::EditHandlePtr returnValue(
        new  SFUInt16::EditHandle(
             &_sfAxis,
             this->getType().getFieldDesc(AxisFieldId),
             this));


    editSField(AxisFieldMask);

    return returnValue;
}

GetFieldHandlePtr PlaneMoveManipulatorBase::getHandleBaseTranslation (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfBaseTranslation,
             this->getType().getFieldDesc(BaseTranslationFieldId),
             const_cast<PlaneMoveManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PlaneMoveManipulatorBase::editHandleBaseTranslation(void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfBaseTranslation,
             this->getType().getFieldDesc(BaseTranslationFieldId),
             this));


    editSField(BaseTranslationFieldMask);

    return returnValue;
}

GetFieldHandlePtr PlaneMoveManipulatorBase::getHandleBaseRotation    (void) const
{
    SFQuaternion::GetHandlePtr returnValue(
        new  SFQuaternion::GetHandle(
             &_sfBaseRotation,
             this->getType().getFieldDesc(BaseRotationFieldId),
             const_cast<PlaneMoveManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PlaneMoveManipulatorBase::editHandleBaseRotation   (void)
{
    SFQuaternion::EditHandlePtr returnValue(
        new  SFQuaternion::EditHandle(
             &_sfBaseRotation,
             this->getType().getFieldDesc(BaseRotationFieldId),
             this));


    editSField(BaseRotationFieldMask);

    return returnValue;
}

GetFieldHandlePtr PlaneMoveManipulatorBase::getHandleClickPoint      (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfClickPoint,
             this->getType().getFieldDesc(ClickPointFieldId),
             const_cast<PlaneMoveManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PlaneMoveManipulatorBase::editHandleClickPoint     (void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfClickPoint,
             this->getType().getFieldDesc(ClickPointFieldId),
             this));


    editSField(ClickPointFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void PlaneMoveManipulatorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PlaneMoveManipulator *pThis = static_cast<PlaneMoveManipulator *>(this);

    pThis->execSync(static_cast<PlaneMoveManipulator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PlaneMoveManipulatorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PlaneMoveManipulator *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PlaneMoveManipulator *>(pRefAspect),
                  dynamic_cast<const PlaneMoveManipulator *>(this));

    return returnValue;
}
#endif

void PlaneMoveManipulatorBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
