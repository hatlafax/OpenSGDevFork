/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Manipulator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGNode.h"                    // Target Class
#include "OSGViewport.h"                // Viewport Class
#include "OSGMaterial.h"                // MaterialX Class

#include "OSGManipulatorBase.h"
#include "OSGManipulator.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Manipulator
    Baseclass for all Manipulators
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Node *          ManipulatorBase::_sfTarget
    The target node to be manipulated.
*/

/*! \var bool            ManipulatorBase::_sfEnablePivot
    Flag to enable the pivot point manipulation.
*/

/*! \var Node *          ManipulatorBase::_sfActiveSubHandle
    the active sub handle
*/

/*! \var Pnt2f           ManipulatorBase::_sfLastMousePos
    Last mouse position (in pixel, although 2f is used!)
*/

/*! \var Viewport *      ManipulatorBase::_sfViewport
    
*/

/*! \var bool            ManipulatorBase::_sfActive
    
*/

/*! \var Vec3f           ManipulatorBase::_sfLength
    The length of the three axes in one vector
*/

/*! \var Pnt3f           ManipulatorBase::_sfPivot
    The position of the pivot point, in local object coordinates.
*/

/*! \var Node *          ManipulatorBase::_sfHandleXNode
    The node for the x-handle geometry
*/

/*! \var Node *          ManipulatorBase::_sfHandleYNode
    The node for the y-handle geometry
*/

/*! \var Node *          ManipulatorBase::_sfHandleZNode
    The node for the z-handle geometry
*/

/*! \var Node *          ManipulatorBase::_sfHandlePNode
    The node for the pivot geometry
*/

/*! \var Node *          ManipulatorBase::_sfTransXNode
    The node for the x-handle transform
*/

/*! \var Node *          ManipulatorBase::_sfTransYNode
    The node for the y-handle transform
*/

/*! \var Node *          ManipulatorBase::_sfTransZNode
    The node for the z-handle transform
*/

/*! \var Node *          ManipulatorBase::_sfPivotNode
    The node for the pivot transform
*/

/*! \var Material *      ManipulatorBase::_sfMaterialX
    material for the x-axis geometry
*/

/*! \var Material *      ManipulatorBase::_sfMaterialY
    material for the y-axis geometry
*/

/*! \var Material *      ManipulatorBase::_sfMaterialZ
    material for the z-axis geometry
*/

/*! \var Material *      ManipulatorBase::_sfMaterialPivot
    material for the pivot geometry
*/

/*! \var Node *          ManipulatorBase::_sfAxisLinesN
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<Manipulator *, nsOSG>::_type(
    "ManipulatorPtr", 
    "TransformPtr", 
    Manipulator::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(Manipulator *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Manipulator *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Manipulator *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ManipulatorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "target",
        "The target node to be manipulated.\n",
        TargetFieldId, TargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleTarget),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "enablePivot",
        "Flag to enable the pivot point manipulation.\n",
        EnablePivotFieldId, EnablePivotFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleEnablePivot),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleEnablePivot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "activeSubHandle",
        "the active sub handle\n",
        ActiveSubHandleFieldId, ActiveSubHandleFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleActiveSubHandle),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleActiveSubHandle));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt2f::Description(
        SFPnt2f::getClassType(),
        "lastMousePos",
        "Last mouse position (in pixel, although 2f is used!)\n",
        LastMousePosFieldId, LastMousePosFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleLastMousePos),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleLastMousePos));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecViewportPtr::Description(
        SFUnrecViewportPtr::getClassType(),
        "viewport",
        "",
        ViewportFieldId, ViewportFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleViewport),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleViewport));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "active",
        "",
        ActiveFieldId, ActiveFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleActive),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleActive));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "length",
        "The length of the three axes in one vector\n",
        LengthFieldId, LengthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleLength),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleLength));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "pivot",
        "The position of the pivot point, in local object coordinates.\n",
        PivotFieldId, PivotFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandlePivot),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandlePivot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "handleXNode",
        "The node for the x-handle geometry\n",
        HandleXNodeFieldId, HandleXNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleHandleXNode),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleHandleXNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "handleYNode",
        "The node for the y-handle geometry\n",
        HandleYNodeFieldId, HandleYNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleHandleYNode),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleHandleYNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "handleZNode",
        "The node for the z-handle geometry\n",
        HandleZNodeFieldId, HandleZNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleHandleZNode),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleHandleZNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "handlePNode",
        "The node for the pivot geometry\n",
        HandlePNodeFieldId, HandlePNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleHandlePNode),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleHandlePNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "transXNode",
        "The node for the x-handle transform\n",
        TransXNodeFieldId, TransXNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleTransXNode),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleTransXNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "transYNode",
        "The node for the y-handle transform\n",
        TransYNodeFieldId, TransYNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleTransYNode),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleTransYNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "transZNode",
        "The node for the z-handle transform\n",
        TransZNodeFieldId, TransZNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleTransZNode),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleTransZNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "pivotNode",
        "The node for the pivot transform\n",
        PivotNodeFieldId, PivotNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandlePivotNode),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandlePivotNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMaterialPtr::Description(
        SFUnrecMaterialPtr::getClassType(),
        "materialX",
        "material for the x-axis geometry\n",
        MaterialXFieldId, MaterialXFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleMaterialX),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleMaterialX));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMaterialPtr::Description(
        SFUnrecMaterialPtr::getClassType(),
        "materialY",
        "material for the y-axis geometry\n",
        MaterialYFieldId, MaterialYFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleMaterialY),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleMaterialY));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMaterialPtr::Description(
        SFUnrecMaterialPtr::getClassType(),
        "materialZ",
        "material for the z-axis geometry\n",
        MaterialZFieldId, MaterialZFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleMaterialZ),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleMaterialZ));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMaterialPtr::Description(
        SFUnrecMaterialPtr::getClassType(),
        "materialPivot",
        "material for the pivot geometry\n",
        MaterialPivotFieldId, MaterialPivotFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleMaterialPivot),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleMaterialPivot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "axisLinesN",
        "",
        AxisLinesNFieldId, AxisLinesNFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Manipulator::editHandleAxisLinesN),
        static_cast<FieldGetMethodSig >(&Manipulator::getHandleAxisLinesN));

    oType.addInitialDesc(pDesc);
}


ManipulatorBase::TypeObject ManipulatorBase::_type(
    ManipulatorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    reinterpret_cast<InitContainerF>(&Manipulator::initMethod),
    reinterpret_cast<ExitContainerF>(&Manipulator::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&Manipulator::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Manipulator\"\n"
    "\tparent=\"Transform\"\n"
    "\tlibrary=\"ContribGUI\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "Baseclass for all Manipulators\n"
    "\t<Field\n"
    "\t\tname=\"target\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The target node to be manipulated.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"enablePivot\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "                defaultValue=\"false\"\n"
    "\t>\n"
    "        Flag to enable the pivot point manipulation.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"activeSubHandle\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tthe active sub handle\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"lastMousePos\"\n"
    "\t\ttype=\"Pnt2f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\tLast mouse position (in pixel, although 2f is used!)\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"viewport\"\n"
    "\t\ttype=\"ViewportPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"active\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"length\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1,1,1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe length of the three axes in one vector\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"pivot\"\n"
    "\t\ttype=\"Pnt3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe position of the pivot point, in local object coordinates.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"handleXNode\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe node for the x-handle geometry\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"handleYNode\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe node for the y-handle geometry\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"handleZNode\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe node for the z-handle geometry\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"handlePNode\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe node for the pivot geometry\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"transXNode\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe node for the x-handle transform\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"transYNode\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe node for the y-handle transform\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"transZNode\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe node for the z-handle transform\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"pivotNode\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe node for the pivot transform\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"materialX\"\n"
    "\t\ttype=\"MaterialPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tmaterial for the x-axis geometry\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"materialY\"\n"
    "\t\ttype=\"MaterialPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tmaterial for the y-axis geometry\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"materialZ\"\n"
    "\t\ttype=\"MaterialPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tmaterial for the z-axis geometry\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"materialPivot\"\n"
    "\t\ttype=\"MaterialPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tmaterial for the pivot geometry\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"axisLinesN\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Baseclass for all Manipulators\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ManipulatorBase::getType(void)
{
    return _type;
}

const FieldContainerType &ManipulatorBase::getType(void) const
{
    return _type;
}

UInt32 ManipulatorBase::getContainerSize(void) const
{
    return sizeof(Manipulator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the Manipulator::_sfTarget field.
const SFUnrecNodePtr *ManipulatorBase::getSFTarget(void) const
{
    return &_sfTarget;
}

SFUnrecNodePtr      *ManipulatorBase::editSFTarget         (void)
{
    editSField(TargetFieldMask);

    return &_sfTarget;
}

//! Get the value of the Manipulator::_sfTarget field.
Node * ManipulatorBase::getTarget(void) const
{
    return _sfTarget.getValue();
}

//! Set the value of the Manipulator::_sfTarget field.
void ManipulatorBase::setTarget(Node * const value)
{
    editSField(TargetFieldMask);

    _sfTarget.setValue(value);
}


SFBool *ManipulatorBase::editSFEnablePivot(void)
{
    editSField(EnablePivotFieldMask);

    return &_sfEnablePivot;
}

const SFBool *ManipulatorBase::getSFEnablePivot(void) const
{
    return &_sfEnablePivot;
}


//! Get the Manipulator::_sfActiveSubHandle field.
const SFUnrecNodePtr *ManipulatorBase::getSFActiveSubHandle(void) const
{
    return &_sfActiveSubHandle;
}

SFUnrecNodePtr      *ManipulatorBase::editSFActiveSubHandle(void)
{
    editSField(ActiveSubHandleFieldMask);

    return &_sfActiveSubHandle;
}

//! Get the value of the Manipulator::_sfActiveSubHandle field.
Node * ManipulatorBase::getActiveSubHandle(void) const
{
    return _sfActiveSubHandle.getValue();
}

//! Set the value of the Manipulator::_sfActiveSubHandle field.
void ManipulatorBase::setActiveSubHandle(Node * const value)
{
    editSField(ActiveSubHandleFieldMask);

    _sfActiveSubHandle.setValue(value);
}


SFPnt2f *ManipulatorBase::editSFLastMousePos(void)
{
    editSField(LastMousePosFieldMask);

    return &_sfLastMousePos;
}

const SFPnt2f *ManipulatorBase::getSFLastMousePos(void) const
{
    return &_sfLastMousePos;
}


//! Get the Manipulator::_sfViewport field.
const SFUnrecViewportPtr *ManipulatorBase::getSFViewport(void) const
{
    return &_sfViewport;
}

SFUnrecViewportPtr  *ManipulatorBase::editSFViewport       (void)
{
    editSField(ViewportFieldMask);

    return &_sfViewport;
}

//! Get the value of the Manipulator::_sfViewport field.
Viewport * ManipulatorBase::getViewport(void) const
{
    return _sfViewport.getValue();
}

//! Set the value of the Manipulator::_sfViewport field.
void ManipulatorBase::setViewport(Viewport * const value)
{
    editSField(ViewportFieldMask);

    _sfViewport.setValue(value);
}


SFBool *ManipulatorBase::editSFActive(void)
{
    editSField(ActiveFieldMask);

    return &_sfActive;
}

const SFBool *ManipulatorBase::getSFActive(void) const
{
    return &_sfActive;
}


SFVec3f *ManipulatorBase::editSFLength(void)
{
    editSField(LengthFieldMask);

    return &_sfLength;
}

const SFVec3f *ManipulatorBase::getSFLength(void) const
{
    return &_sfLength;
}


SFPnt3f *ManipulatorBase::editSFPivot(void)
{
    editSField(PivotFieldMask);

    return &_sfPivot;
}

const SFPnt3f *ManipulatorBase::getSFPivot(void) const
{
    return &_sfPivot;
}


//! Get the Manipulator::_sfHandleXNode field.
const SFUnrecNodePtr *ManipulatorBase::getSFHandleXNode(void) const
{
    return &_sfHandleXNode;
}

SFUnrecNodePtr      *ManipulatorBase::editSFHandleXNode    (void)
{
    editSField(HandleXNodeFieldMask);

    return &_sfHandleXNode;
}

//! Get the value of the Manipulator::_sfHandleXNode field.
Node * ManipulatorBase::getHandleXNode(void) const
{
    return _sfHandleXNode.getValue();
}

//! Set the value of the Manipulator::_sfHandleXNode field.
void ManipulatorBase::setHandleXNode(Node * const value)
{
    editSField(HandleXNodeFieldMask);

    _sfHandleXNode.setValue(value);
}


//! Get the Manipulator::_sfHandleYNode field.
const SFUnrecNodePtr *ManipulatorBase::getSFHandleYNode(void) const
{
    return &_sfHandleYNode;
}

SFUnrecNodePtr      *ManipulatorBase::editSFHandleYNode    (void)
{
    editSField(HandleYNodeFieldMask);

    return &_sfHandleYNode;
}

//! Get the value of the Manipulator::_sfHandleYNode field.
Node * ManipulatorBase::getHandleYNode(void) const
{
    return _sfHandleYNode.getValue();
}

//! Set the value of the Manipulator::_sfHandleYNode field.
void ManipulatorBase::setHandleYNode(Node * const value)
{
    editSField(HandleYNodeFieldMask);

    _sfHandleYNode.setValue(value);
}


//! Get the Manipulator::_sfHandleZNode field.
const SFUnrecNodePtr *ManipulatorBase::getSFHandleZNode(void) const
{
    return &_sfHandleZNode;
}

SFUnrecNodePtr      *ManipulatorBase::editSFHandleZNode    (void)
{
    editSField(HandleZNodeFieldMask);

    return &_sfHandleZNode;
}

//! Get the value of the Manipulator::_sfHandleZNode field.
Node * ManipulatorBase::getHandleZNode(void) const
{
    return _sfHandleZNode.getValue();
}

//! Set the value of the Manipulator::_sfHandleZNode field.
void ManipulatorBase::setHandleZNode(Node * const value)
{
    editSField(HandleZNodeFieldMask);

    _sfHandleZNode.setValue(value);
}


//! Get the Manipulator::_sfHandlePNode field.
const SFUnrecNodePtr *ManipulatorBase::getSFHandlePNode(void) const
{
    return &_sfHandlePNode;
}

SFUnrecNodePtr      *ManipulatorBase::editSFHandlePNode    (void)
{
    editSField(HandlePNodeFieldMask);

    return &_sfHandlePNode;
}

//! Get the value of the Manipulator::_sfHandlePNode field.
Node * ManipulatorBase::getHandlePNode(void) const
{
    return _sfHandlePNode.getValue();
}

//! Set the value of the Manipulator::_sfHandlePNode field.
void ManipulatorBase::setHandlePNode(Node * const value)
{
    editSField(HandlePNodeFieldMask);

    _sfHandlePNode.setValue(value);
}


//! Get the Manipulator::_sfTransXNode field.
const SFUnrecNodePtr *ManipulatorBase::getSFTransXNode(void) const
{
    return &_sfTransXNode;
}

SFUnrecNodePtr      *ManipulatorBase::editSFTransXNode     (void)
{
    editSField(TransXNodeFieldMask);

    return &_sfTransXNode;
}

//! Get the value of the Manipulator::_sfTransXNode field.
Node * ManipulatorBase::getTransXNode(void) const
{
    return _sfTransXNode.getValue();
}

//! Set the value of the Manipulator::_sfTransXNode field.
void ManipulatorBase::setTransXNode(Node * const value)
{
    editSField(TransXNodeFieldMask);

    _sfTransXNode.setValue(value);
}


//! Get the Manipulator::_sfTransYNode field.
const SFUnrecNodePtr *ManipulatorBase::getSFTransYNode(void) const
{
    return &_sfTransYNode;
}

SFUnrecNodePtr      *ManipulatorBase::editSFTransYNode     (void)
{
    editSField(TransYNodeFieldMask);

    return &_sfTransYNode;
}

//! Get the value of the Manipulator::_sfTransYNode field.
Node * ManipulatorBase::getTransYNode(void) const
{
    return _sfTransYNode.getValue();
}

//! Set the value of the Manipulator::_sfTransYNode field.
void ManipulatorBase::setTransYNode(Node * const value)
{
    editSField(TransYNodeFieldMask);

    _sfTransYNode.setValue(value);
}


//! Get the Manipulator::_sfTransZNode field.
const SFUnrecNodePtr *ManipulatorBase::getSFTransZNode(void) const
{
    return &_sfTransZNode;
}

SFUnrecNodePtr      *ManipulatorBase::editSFTransZNode     (void)
{
    editSField(TransZNodeFieldMask);

    return &_sfTransZNode;
}

//! Get the value of the Manipulator::_sfTransZNode field.
Node * ManipulatorBase::getTransZNode(void) const
{
    return _sfTransZNode.getValue();
}

//! Set the value of the Manipulator::_sfTransZNode field.
void ManipulatorBase::setTransZNode(Node * const value)
{
    editSField(TransZNodeFieldMask);

    _sfTransZNode.setValue(value);
}


//! Get the Manipulator::_sfPivotNode field.
const SFUnrecNodePtr *ManipulatorBase::getSFPivotNode(void) const
{
    return &_sfPivotNode;
}

SFUnrecNodePtr      *ManipulatorBase::editSFPivotNode      (void)
{
    editSField(PivotNodeFieldMask);

    return &_sfPivotNode;
}

//! Get the value of the Manipulator::_sfPivotNode field.
Node * ManipulatorBase::getPivotNode(void) const
{
    return _sfPivotNode.getValue();
}

//! Set the value of the Manipulator::_sfPivotNode field.
void ManipulatorBase::setPivotNode(Node * const value)
{
    editSField(PivotNodeFieldMask);

    _sfPivotNode.setValue(value);
}


//! Get the Manipulator::_sfMaterialX field.
const SFUnrecMaterialPtr *ManipulatorBase::getSFMaterialX(void) const
{
    return &_sfMaterialX;
}

SFUnrecMaterialPtr  *ManipulatorBase::editSFMaterialX      (void)
{
    editSField(MaterialXFieldMask);

    return &_sfMaterialX;
}

//! Get the value of the Manipulator::_sfMaterialX field.
Material * ManipulatorBase::getMaterialX(void) const
{
    return _sfMaterialX.getValue();
}

//! Set the value of the Manipulator::_sfMaterialX field.
void ManipulatorBase::setMaterialX(Material * const value)
{
    editSField(MaterialXFieldMask);

    _sfMaterialX.setValue(value);
}


//! Get the Manipulator::_sfMaterialY field.
const SFUnrecMaterialPtr *ManipulatorBase::getSFMaterialY(void) const
{
    return &_sfMaterialY;
}

SFUnrecMaterialPtr  *ManipulatorBase::editSFMaterialY      (void)
{
    editSField(MaterialYFieldMask);

    return &_sfMaterialY;
}

//! Get the value of the Manipulator::_sfMaterialY field.
Material * ManipulatorBase::getMaterialY(void) const
{
    return _sfMaterialY.getValue();
}

//! Set the value of the Manipulator::_sfMaterialY field.
void ManipulatorBase::setMaterialY(Material * const value)
{
    editSField(MaterialYFieldMask);

    _sfMaterialY.setValue(value);
}


//! Get the Manipulator::_sfMaterialZ field.
const SFUnrecMaterialPtr *ManipulatorBase::getSFMaterialZ(void) const
{
    return &_sfMaterialZ;
}

SFUnrecMaterialPtr  *ManipulatorBase::editSFMaterialZ      (void)
{
    editSField(MaterialZFieldMask);

    return &_sfMaterialZ;
}

//! Get the value of the Manipulator::_sfMaterialZ field.
Material * ManipulatorBase::getMaterialZ(void) const
{
    return _sfMaterialZ.getValue();
}

//! Set the value of the Manipulator::_sfMaterialZ field.
void ManipulatorBase::setMaterialZ(Material * const value)
{
    editSField(MaterialZFieldMask);

    _sfMaterialZ.setValue(value);
}


//! Get the Manipulator::_sfMaterialPivot field.
const SFUnrecMaterialPtr *ManipulatorBase::getSFMaterialPivot(void) const
{
    return &_sfMaterialPivot;
}

SFUnrecMaterialPtr  *ManipulatorBase::editSFMaterialPivot  (void)
{
    editSField(MaterialPivotFieldMask);

    return &_sfMaterialPivot;
}

//! Get the value of the Manipulator::_sfMaterialPivot field.
Material * ManipulatorBase::getMaterialPivot(void) const
{
    return _sfMaterialPivot.getValue();
}

//! Set the value of the Manipulator::_sfMaterialPivot field.
void ManipulatorBase::setMaterialPivot(Material * const value)
{
    editSField(MaterialPivotFieldMask);

    _sfMaterialPivot.setValue(value);
}


//! Get the Manipulator::_sfAxisLinesN field.
const SFUnrecNodePtr *ManipulatorBase::getSFAxisLinesN(void) const
{
    return &_sfAxisLinesN;
}

SFUnrecNodePtr      *ManipulatorBase::editSFAxisLinesN     (void)
{
    editSField(AxisLinesNFieldMask);

    return &_sfAxisLinesN;
}

//! Get the value of the Manipulator::_sfAxisLinesN field.
Node * ManipulatorBase::getAxisLinesN(void) const
{
    return _sfAxisLinesN.getValue();
}

//! Set the value of the Manipulator::_sfAxisLinesN field.
void ManipulatorBase::setAxisLinesN(Node * const value)
{
    editSField(AxisLinesNFieldMask);

    _sfAxisLinesN.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT ManipulatorBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TargetFieldMask & whichField))
    {
        returnValue += _sfTarget.getBinSize();
    }
    if(FieldBits::NoField != (EnablePivotFieldMask & whichField))
    {
        returnValue += _sfEnablePivot.getBinSize();
    }
    if(FieldBits::NoField != (ActiveSubHandleFieldMask & whichField))
    {
        returnValue += _sfActiveSubHandle.getBinSize();
    }
    if(FieldBits::NoField != (LastMousePosFieldMask & whichField))
    {
        returnValue += _sfLastMousePos.getBinSize();
    }
    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        returnValue += _sfViewport.getBinSize();
    }
    if(FieldBits::NoField != (ActiveFieldMask & whichField))
    {
        returnValue += _sfActive.getBinSize();
    }
    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        returnValue += _sfLength.getBinSize();
    }
    if(FieldBits::NoField != (PivotFieldMask & whichField))
    {
        returnValue += _sfPivot.getBinSize();
    }
    if(FieldBits::NoField != (HandleXNodeFieldMask & whichField))
    {
        returnValue += _sfHandleXNode.getBinSize();
    }
    if(FieldBits::NoField != (HandleYNodeFieldMask & whichField))
    {
        returnValue += _sfHandleYNode.getBinSize();
    }
    if(FieldBits::NoField != (HandleZNodeFieldMask & whichField))
    {
        returnValue += _sfHandleZNode.getBinSize();
    }
    if(FieldBits::NoField != (HandlePNodeFieldMask & whichField))
    {
        returnValue += _sfHandlePNode.getBinSize();
    }
    if(FieldBits::NoField != (TransXNodeFieldMask & whichField))
    {
        returnValue += _sfTransXNode.getBinSize();
    }
    if(FieldBits::NoField != (TransYNodeFieldMask & whichField))
    {
        returnValue += _sfTransYNode.getBinSize();
    }
    if(FieldBits::NoField != (TransZNodeFieldMask & whichField))
    {
        returnValue += _sfTransZNode.getBinSize();
    }
    if(FieldBits::NoField != (PivotNodeFieldMask & whichField))
    {
        returnValue += _sfPivotNode.getBinSize();
    }
    if(FieldBits::NoField != (MaterialXFieldMask & whichField))
    {
        returnValue += _sfMaterialX.getBinSize();
    }
    if(FieldBits::NoField != (MaterialYFieldMask & whichField))
    {
        returnValue += _sfMaterialY.getBinSize();
    }
    if(FieldBits::NoField != (MaterialZFieldMask & whichField))
    {
        returnValue += _sfMaterialZ.getBinSize();
    }
    if(FieldBits::NoField != (MaterialPivotFieldMask & whichField))
    {
        returnValue += _sfMaterialPivot.getBinSize();
    }
    if(FieldBits::NoField != (AxisLinesNFieldMask & whichField))
    {
        returnValue += _sfAxisLinesN.getBinSize();
    }

    return returnValue;
}

void ManipulatorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TargetFieldMask & whichField))
    {
        _sfTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnablePivotFieldMask & whichField))
    {
        _sfEnablePivot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ActiveSubHandleFieldMask & whichField))
    {
        _sfActiveSubHandle.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LastMousePosFieldMask & whichField))
    {
        _sfLastMousePos.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        _sfViewport.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ActiveFieldMask & whichField))
    {
        _sfActive.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        _sfLength.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PivotFieldMask & whichField))
    {
        _sfPivot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HandleXNodeFieldMask & whichField))
    {
        _sfHandleXNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HandleYNodeFieldMask & whichField))
    {
        _sfHandleYNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HandleZNodeFieldMask & whichField))
    {
        _sfHandleZNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HandlePNodeFieldMask & whichField))
    {
        _sfHandlePNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TransXNodeFieldMask & whichField))
    {
        _sfTransXNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TransYNodeFieldMask & whichField))
    {
        _sfTransYNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TransZNodeFieldMask & whichField))
    {
        _sfTransZNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PivotNodeFieldMask & whichField))
    {
        _sfPivotNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaterialXFieldMask & whichField))
    {
        _sfMaterialX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaterialYFieldMask & whichField))
    {
        _sfMaterialY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaterialZFieldMask & whichField))
    {
        _sfMaterialZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaterialPivotFieldMask & whichField))
    {
        _sfMaterialPivot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AxisLinesNFieldMask & whichField))
    {
        _sfAxisLinesN.copyToBin(pMem);
    }
}

void ManipulatorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TargetFieldMask & whichField))
    {
        editSField(TargetFieldMask);
        _sfTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnablePivotFieldMask & whichField))
    {
        editSField(EnablePivotFieldMask);
        _sfEnablePivot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ActiveSubHandleFieldMask & whichField))
    {
        editSField(ActiveSubHandleFieldMask);
        _sfActiveSubHandle.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LastMousePosFieldMask & whichField))
    {
        editSField(LastMousePosFieldMask);
        _sfLastMousePos.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ViewportFieldMask & whichField))
    {
        editSField(ViewportFieldMask);
        _sfViewport.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ActiveFieldMask & whichField))
    {
        editSField(ActiveFieldMask);
        _sfActive.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LengthFieldMask & whichField))
    {
        editSField(LengthFieldMask);
        _sfLength.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PivotFieldMask & whichField))
    {
        editSField(PivotFieldMask);
        _sfPivot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HandleXNodeFieldMask & whichField))
    {
        editSField(HandleXNodeFieldMask);
        _sfHandleXNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HandleYNodeFieldMask & whichField))
    {
        editSField(HandleYNodeFieldMask);
        _sfHandleYNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HandleZNodeFieldMask & whichField))
    {
        editSField(HandleZNodeFieldMask);
        _sfHandleZNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HandlePNodeFieldMask & whichField))
    {
        editSField(HandlePNodeFieldMask);
        _sfHandlePNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TransXNodeFieldMask & whichField))
    {
        editSField(TransXNodeFieldMask);
        _sfTransXNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TransYNodeFieldMask & whichField))
    {
        editSField(TransYNodeFieldMask);
        _sfTransYNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TransZNodeFieldMask & whichField))
    {
        editSField(TransZNodeFieldMask);
        _sfTransZNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PivotNodeFieldMask & whichField))
    {
        editSField(PivotNodeFieldMask);
        _sfPivotNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaterialXFieldMask & whichField))
    {
        editSField(MaterialXFieldMask);
        _sfMaterialX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaterialYFieldMask & whichField))
    {
        editSField(MaterialYFieldMask);
        _sfMaterialY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaterialZFieldMask & whichField))
    {
        editSField(MaterialZFieldMask);
        _sfMaterialZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaterialPivotFieldMask & whichField))
    {
        editSField(MaterialPivotFieldMask);
        _sfMaterialPivot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AxisLinesNFieldMask & whichField))
    {
        editSField(AxisLinesNFieldMask);
        _sfAxisLinesN.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

ManipulatorBase::ManipulatorBase(void) :
    Inherited(),
    _sfTarget                 (NULL),
    _sfEnablePivot            (bool(false)),
    _sfActiveSubHandle        (NULL),
    _sfLastMousePos           (),
    _sfViewport               (NULL),
    _sfActive                 (),
    _sfLength                 (Vec3f(1,1,1)),
    _sfPivot                  (Pnt3f(0,0,0)),
    _sfHandleXNode            (NULL),
    _sfHandleYNode            (NULL),
    _sfHandleZNode            (NULL),
    _sfHandlePNode            (NULL),
    _sfTransXNode             (NULL),
    _sfTransYNode             (NULL),
    _sfTransZNode             (NULL),
    _sfPivotNode              (NULL),
    _sfMaterialX              (NULL),
    _sfMaterialY              (NULL),
    _sfMaterialZ              (NULL),
    _sfMaterialPivot          (NULL),
    _sfAxisLinesN             (NULL)
{
}

ManipulatorBase::ManipulatorBase(const ManipulatorBase &source) :
    Inherited(source),
    _sfTarget                 (NULL),
    _sfEnablePivot            (source._sfEnablePivot            ),
    _sfActiveSubHandle        (NULL),
    _sfLastMousePos           (source._sfLastMousePos           ),
    _sfViewport               (NULL),
    _sfActive                 (source._sfActive                 ),
    _sfLength                 (source._sfLength                 ),
    _sfPivot                  (source._sfPivot                  ),
    _sfHandleXNode            (NULL),
    _sfHandleYNode            (NULL),
    _sfHandleZNode            (NULL),
    _sfHandlePNode            (NULL),
    _sfTransXNode             (NULL),
    _sfTransYNode             (NULL),
    _sfTransZNode             (NULL),
    _sfPivotNode              (NULL),
    _sfMaterialX              (NULL),
    _sfMaterialY              (NULL),
    _sfMaterialZ              (NULL),
    _sfMaterialPivot          (NULL),
    _sfAxisLinesN             (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

ManipulatorBase::~ManipulatorBase(void)
{
}

void ManipulatorBase::onCreate(const Manipulator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Manipulator *pThis = static_cast<Manipulator *>(this);

        pThis->setTarget(source->getTarget());

        pThis->setActiveSubHandle(source->getActiveSubHandle());

        pThis->setViewport(source->getViewport());

        pThis->setHandleXNode(source->getHandleXNode());

        pThis->setHandleYNode(source->getHandleYNode());

        pThis->setHandleZNode(source->getHandleZNode());

        pThis->setHandlePNode(source->getHandlePNode());

        pThis->setTransXNode(source->getTransXNode());

        pThis->setTransYNode(source->getTransYNode());

        pThis->setTransZNode(source->getTransZNode());

        pThis->setPivotNode(source->getPivotNode());

        pThis->setMaterialX(source->getMaterialX());

        pThis->setMaterialY(source->getMaterialY());

        pThis->setMaterialZ(source->getMaterialZ());

        pThis->setMaterialPivot(source->getMaterialPivot());

        pThis->setAxisLinesN(source->getAxisLinesN());
    }
}

GetFieldHandlePtr ManipulatorBase::getHandleTarget          (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfTarget,
             this->getType().getFieldDesc(TargetFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleTarget         (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfTarget,
             this->getType().getFieldDesc(TargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setTarget,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(TargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleEnablePivot     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnablePivot,
             this->getType().getFieldDesc(EnablePivotFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleEnablePivot    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnablePivot,
             this->getType().getFieldDesc(EnablePivotFieldId),
             this));


    editSField(EnablePivotFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleActiveSubHandle (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfActiveSubHandle,
             this->getType().getFieldDesc(ActiveSubHandleFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleActiveSubHandle(void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfActiveSubHandle,
             this->getType().getFieldDesc(ActiveSubHandleFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setActiveSubHandle,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(ActiveSubHandleFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleLastMousePos    (void) const
{
    SFPnt2f::GetHandlePtr returnValue(
        new  SFPnt2f::GetHandle(
             &_sfLastMousePos,
             this->getType().getFieldDesc(LastMousePosFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleLastMousePos   (void)
{
    SFPnt2f::EditHandlePtr returnValue(
        new  SFPnt2f::EditHandle(
             &_sfLastMousePos,
             this->getType().getFieldDesc(LastMousePosFieldId),
             this));


    editSField(LastMousePosFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleViewport        (void) const
{
    SFUnrecViewportPtr::GetHandlePtr returnValue(
        new  SFUnrecViewportPtr::GetHandle(
             &_sfViewport,
             this->getType().getFieldDesc(ViewportFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleViewport       (void)
{
    SFUnrecViewportPtr::EditHandlePtr returnValue(
        new  SFUnrecViewportPtr::EditHandle(
             &_sfViewport,
             this->getType().getFieldDesc(ViewportFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setViewport,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(ViewportFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleActive          (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfActive,
             this->getType().getFieldDesc(ActiveFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleActive         (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfActive,
             this->getType().getFieldDesc(ActiveFieldId),
             this));


    editSField(ActiveFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleLength          (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfLength,
             this->getType().getFieldDesc(LengthFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleLength         (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfLength,
             this->getType().getFieldDesc(LengthFieldId),
             this));


    editSField(LengthFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandlePivot           (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfPivot,
             this->getType().getFieldDesc(PivotFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandlePivot          (void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfPivot,
             this->getType().getFieldDesc(PivotFieldId),
             this));


    editSField(PivotFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleHandleXNode     (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfHandleXNode,
             this->getType().getFieldDesc(HandleXNodeFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleHandleXNode    (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfHandleXNode,
             this->getType().getFieldDesc(HandleXNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setHandleXNode,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(HandleXNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleHandleYNode     (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfHandleYNode,
             this->getType().getFieldDesc(HandleYNodeFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleHandleYNode    (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfHandleYNode,
             this->getType().getFieldDesc(HandleYNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setHandleYNode,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(HandleYNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleHandleZNode     (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfHandleZNode,
             this->getType().getFieldDesc(HandleZNodeFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleHandleZNode    (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfHandleZNode,
             this->getType().getFieldDesc(HandleZNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setHandleZNode,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(HandleZNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleHandlePNode     (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfHandlePNode,
             this->getType().getFieldDesc(HandlePNodeFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleHandlePNode    (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfHandlePNode,
             this->getType().getFieldDesc(HandlePNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setHandlePNode,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(HandlePNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleTransXNode      (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfTransXNode,
             this->getType().getFieldDesc(TransXNodeFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleTransXNode     (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfTransXNode,
             this->getType().getFieldDesc(TransXNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setTransXNode,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(TransXNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleTransYNode      (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfTransYNode,
             this->getType().getFieldDesc(TransYNodeFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleTransYNode     (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfTransYNode,
             this->getType().getFieldDesc(TransYNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setTransYNode,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(TransYNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleTransZNode      (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfTransZNode,
             this->getType().getFieldDesc(TransZNodeFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleTransZNode     (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfTransZNode,
             this->getType().getFieldDesc(TransZNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setTransZNode,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(TransZNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandlePivotNode       (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfPivotNode,
             this->getType().getFieldDesc(PivotNodeFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandlePivotNode      (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfPivotNode,
             this->getType().getFieldDesc(PivotNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setPivotNode,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(PivotNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleMaterialX       (void) const
{
    SFUnrecMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecMaterialPtr::GetHandle(
             &_sfMaterialX,
             this->getType().getFieldDesc(MaterialXFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleMaterialX      (void)
{
    SFUnrecMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecMaterialPtr::EditHandle(
             &_sfMaterialX,
             this->getType().getFieldDesc(MaterialXFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setMaterialX,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(MaterialXFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleMaterialY       (void) const
{
    SFUnrecMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecMaterialPtr::GetHandle(
             &_sfMaterialY,
             this->getType().getFieldDesc(MaterialYFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleMaterialY      (void)
{
    SFUnrecMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecMaterialPtr::EditHandle(
             &_sfMaterialY,
             this->getType().getFieldDesc(MaterialYFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setMaterialY,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(MaterialYFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleMaterialZ       (void) const
{
    SFUnrecMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecMaterialPtr::GetHandle(
             &_sfMaterialZ,
             this->getType().getFieldDesc(MaterialZFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleMaterialZ      (void)
{
    SFUnrecMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecMaterialPtr::EditHandle(
             &_sfMaterialZ,
             this->getType().getFieldDesc(MaterialZFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setMaterialZ,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(MaterialZFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleMaterialPivot   (void) const
{
    SFUnrecMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecMaterialPtr::GetHandle(
             &_sfMaterialPivot,
             this->getType().getFieldDesc(MaterialPivotFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleMaterialPivot  (void)
{
    SFUnrecMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecMaterialPtr::EditHandle(
             &_sfMaterialPivot,
             this->getType().getFieldDesc(MaterialPivotFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setMaterialPivot,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(MaterialPivotFieldMask);

    return returnValue;
}

GetFieldHandlePtr ManipulatorBase::getHandleAxisLinesN      (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfAxisLinesN,
             this->getType().getFieldDesc(AxisLinesNFieldId),
             const_cast<ManipulatorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ManipulatorBase::editHandleAxisLinesN     (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfAxisLinesN,
             this->getType().getFieldDesc(AxisLinesNFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Manipulator::setAxisLinesN,
                    static_cast<Manipulator *>(this), ::boost::placeholders::_1));

    editSField(AxisLinesNFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ManipulatorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Manipulator *pThis = static_cast<Manipulator *>(this);

    pThis->execSync(static_cast<Manipulator *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ManipulatorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Manipulator *>(this)->setTarget(NULL);

    static_cast<Manipulator *>(this)->setActiveSubHandle(NULL);

    static_cast<Manipulator *>(this)->setViewport(NULL);

    static_cast<Manipulator *>(this)->setHandleXNode(NULL);

    static_cast<Manipulator *>(this)->setHandleYNode(NULL);

    static_cast<Manipulator *>(this)->setHandleZNode(NULL);

    static_cast<Manipulator *>(this)->setHandlePNode(NULL);

    static_cast<Manipulator *>(this)->setTransXNode(NULL);

    static_cast<Manipulator *>(this)->setTransYNode(NULL);

    static_cast<Manipulator *>(this)->setTransZNode(NULL);

    static_cast<Manipulator *>(this)->setPivotNode(NULL);

    static_cast<Manipulator *>(this)->setMaterialX(NULL);

    static_cast<Manipulator *>(this)->setMaterialY(NULL);

    static_cast<Manipulator *>(this)->setMaterialZ(NULL);

    static_cast<Manipulator *>(this)->setMaterialPivot(NULL);

    static_cast<Manipulator *>(this)->setAxisLinesN(NULL);


}


OSG_END_NAMESPACE
