/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleSHLChunkFile!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGSimpleSHLChunkFileBase.h"
#include "OSGSimpleSHLChunkFile.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SimpleSHLChunkFile
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     SimpleSHLChunkFileBase::_sfVertexProgramUrl
    
*/

/*! \var std::string     SimpleSHLChunkFileBase::_sfGeometryProgramUrl
    
*/

/*! \var std::string     SimpleSHLChunkFileBase::_sfFragmentProgramUrl
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<SimpleSHLChunkFile *, nsOSG>::_type(
    "SimpleSHLChunkFilePtr", 
    "SimpleSHLChunkPtr", 
    SimpleSHLChunkFile::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(SimpleSHLChunkFile *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SimpleSHLChunkFileBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFString::Description(
        SFString::getClassType(),
        "vertexProgramUrl",
        "",
        VertexProgramUrlFieldId, VertexProgramUrlFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunkFile::editHandleVertexProgramUrl),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunkFile::getHandleVertexProgramUrl));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "geometryProgramUrl",
        "",
        GeometryProgramUrlFieldId, GeometryProgramUrlFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunkFile::editHandleGeometryProgramUrl),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunkFile::getHandleGeometryProgramUrl));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "fragmentProgramUrl",
        "",
        FragmentProgramUrlFieldId, FragmentProgramUrlFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunkFile::editHandleFragmentProgramUrl),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunkFile::getHandleFragmentProgramUrl));

    oType.addInitialDesc(pDesc);
}


SimpleSHLChunkFileBase::TypeObject SimpleSHLChunkFileBase::_type(
    SimpleSHLChunkFileBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&SimpleSHLChunkFileBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&SimpleSHLChunkFile::initMethod),
    reinterpret_cast<ExitContainerF>(&SimpleSHLChunkFile::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&SimpleSHLChunkFile::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"SimpleSHLChunkFile\"\n"
    "    parent=\"SimpleSHLChunk\"\n"
    "    library=\"ContribCSM\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"false\"\n"
    "    parentFields=\"none\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"vertexProgramUrl\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"geometryProgramUrl\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"fragmentProgramUrl\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SimpleSHLChunkFileBase::getType(void)
{
    return _type;
}

const FieldContainerType &SimpleSHLChunkFileBase::getType(void) const
{
    return _type;
}

UInt32 SimpleSHLChunkFileBase::getContainerSize(void) const
{
    return sizeof(SimpleSHLChunkFile);
}

/*------------------------- decorator get ------------------------------*/


SFString *SimpleSHLChunkFileBase::editSFVertexProgramUrl(void)
{
    editSField(VertexProgramUrlFieldMask);

    return &_sfVertexProgramUrl;
}

const SFString *SimpleSHLChunkFileBase::getSFVertexProgramUrl(void) const
{
    return &_sfVertexProgramUrl;
}


SFString *SimpleSHLChunkFileBase::editSFGeometryProgramUrl(void)
{
    editSField(GeometryProgramUrlFieldMask);

    return &_sfGeometryProgramUrl;
}

const SFString *SimpleSHLChunkFileBase::getSFGeometryProgramUrl(void) const
{
    return &_sfGeometryProgramUrl;
}


SFString *SimpleSHLChunkFileBase::editSFFragmentProgramUrl(void)
{
    editSField(FragmentProgramUrlFieldMask);

    return &_sfFragmentProgramUrl;
}

const SFString *SimpleSHLChunkFileBase::getSFFragmentProgramUrl(void) const
{
    return &_sfFragmentProgramUrl;
}






/*------------------------------ access -----------------------------------*/

SizeT SimpleSHLChunkFileBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (VertexProgramUrlFieldMask & whichField))
    {
        returnValue += _sfVertexProgramUrl.getBinSize();
    }
    if(FieldBits::NoField != (GeometryProgramUrlFieldMask & whichField))
    {
        returnValue += _sfGeometryProgramUrl.getBinSize();
    }
    if(FieldBits::NoField != (FragmentProgramUrlFieldMask & whichField))
    {
        returnValue += _sfFragmentProgramUrl.getBinSize();
    }

    return returnValue;
}

void SimpleSHLChunkFileBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (VertexProgramUrlFieldMask & whichField))
    {
        _sfVertexProgramUrl.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GeometryProgramUrlFieldMask & whichField))
    {
        _sfGeometryProgramUrl.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FragmentProgramUrlFieldMask & whichField))
    {
        _sfFragmentProgramUrl.copyToBin(pMem);
    }
}

void SimpleSHLChunkFileBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (VertexProgramUrlFieldMask & whichField))
    {
        editSField(VertexProgramUrlFieldMask);
        _sfVertexProgramUrl.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GeometryProgramUrlFieldMask & whichField))
    {
        editSField(GeometryProgramUrlFieldMask);
        _sfGeometryProgramUrl.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FragmentProgramUrlFieldMask & whichField))
    {
        editSField(FragmentProgramUrlFieldMask);
        _sfFragmentProgramUrl.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SimpleSHLChunkFileTransitPtr SimpleSHLChunkFileBase::createLocal(BitVector bFlags)
{
    SimpleSHLChunkFileTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SimpleSHLChunkFile>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SimpleSHLChunkFileTransitPtr SimpleSHLChunkFileBase::createDependent(BitVector bFlags)
{
    SimpleSHLChunkFileTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SimpleSHLChunkFile>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SimpleSHLChunkFileTransitPtr SimpleSHLChunkFileBase::create(void)
{
    SimpleSHLChunkFileTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SimpleSHLChunkFile>(tmpPtr);
    }

    return fc;
}

SimpleSHLChunkFile *SimpleSHLChunkFileBase::createEmptyLocal(BitVector bFlags)
{
    SimpleSHLChunkFile *returnValue;

    newPtr<SimpleSHLChunkFile>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SimpleSHLChunkFile *SimpleSHLChunkFileBase::createEmpty(void)
{
    SimpleSHLChunkFile *returnValue;

    newPtr<SimpleSHLChunkFile>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SimpleSHLChunkFileBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SimpleSHLChunkFile *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SimpleSHLChunkFile *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SimpleSHLChunkFileBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SimpleSHLChunkFile *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SimpleSHLChunkFile *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SimpleSHLChunkFileBase::shallowCopy(void) const
{
    SimpleSHLChunkFile *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SimpleSHLChunkFile *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SimpleSHLChunkFileBase::SimpleSHLChunkFileBase(void) :
    Inherited(),
    _sfVertexProgramUrl       (),
    _sfGeometryProgramUrl     (),
    _sfFragmentProgramUrl     ()
{
}

SimpleSHLChunkFileBase::SimpleSHLChunkFileBase(const SimpleSHLChunkFileBase &source) :
    Inherited(source),
    _sfVertexProgramUrl       (source._sfVertexProgramUrl       ),
    _sfGeometryProgramUrl     (source._sfGeometryProgramUrl     ),
    _sfFragmentProgramUrl     (source._sfFragmentProgramUrl     )
{
}


/*-------------------------- destructors ----------------------------------*/

SimpleSHLChunkFileBase::~SimpleSHLChunkFileBase(void)
{
}


GetFieldHandlePtr SimpleSHLChunkFileBase::getHandleVertexProgramUrl (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfVertexProgramUrl,
             this->getType().getFieldDesc(VertexProgramUrlFieldId),
             const_cast<SimpleSHLChunkFileBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkFileBase::editHandleVertexProgramUrl(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfVertexProgramUrl,
             this->getType().getFieldDesc(VertexProgramUrlFieldId),
             this));


    editSField(VertexProgramUrlFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkFileBase::getHandleGeometryProgramUrl (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfGeometryProgramUrl,
             this->getType().getFieldDesc(GeometryProgramUrlFieldId),
             const_cast<SimpleSHLChunkFileBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkFileBase::editHandleGeometryProgramUrl(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfGeometryProgramUrl,
             this->getType().getFieldDesc(GeometryProgramUrlFieldId),
             this));


    editSField(GeometryProgramUrlFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkFileBase::getHandleFragmentProgramUrl (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfFragmentProgramUrl,
             this->getType().getFieldDesc(FragmentProgramUrlFieldId),
             const_cast<SimpleSHLChunkFileBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkFileBase::editHandleFragmentProgramUrl(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfFragmentProgramUrl,
             this->getType().getFieldDesc(FragmentProgramUrlFieldId),
             this));


    editSField(FragmentProgramUrlFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SimpleSHLChunkFileBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SimpleSHLChunkFile *pThis = static_cast<SimpleSHLChunkFile *>(this);

    pThis->execSync(static_cast<SimpleSHLChunkFile *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SimpleSHLChunkFileBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SimpleSHLChunkFile *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SimpleSHLChunkFile *>(pRefAspect),
                  dynamic_cast<const SimpleSHLChunkFile *>(this));

    return returnValue;
}
#endif

void SimpleSHLChunkFileBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
