/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CSMStatisticsForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGCSMStatisticsForegroundBase.h"
#include "OSGCSMStatisticsForeground.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CSMStatisticsForeground
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          CSMStatisticsForegroundBase::_sfSize
    
*/

/*! \var Color4f         CSMStatisticsForegroundBase::_sfColor
    
*/

/*! \var Color4f         CSMStatisticsForegroundBase::_sfBgColor
    
*/

/*! \var std::string     CSMStatisticsForegroundBase::_mfElements
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<CSMStatisticsForeground *, nsOSG>::_type(
    "CSMStatisticsForegroundPtr", 
    "ForegroundPtr", 
    CSMStatisticsForeground::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(CSMStatisticsForeground *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void CSMStatisticsForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "size",
        "",
        SizeFieldId, SizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMStatisticsForeground::editHandleSize),
        static_cast<FieldGetMethodSig >(&CSMStatisticsForeground::getHandleSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "color",
        "",
        ColorFieldId, ColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMStatisticsForeground::editHandleColor),
        static_cast<FieldGetMethodSig >(&CSMStatisticsForeground::getHandleColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "bgColor",
        "",
        BgColorFieldId, BgColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMStatisticsForeground::editHandleBgColor),
        static_cast<FieldGetMethodSig >(&CSMStatisticsForeground::getHandleBgColor));

    oType.addInitialDesc(pDesc);

    pDesc = new MFString::Description(
        MFString::getClassType(),
        "elements",
        "",
        ElementsFieldId, ElementsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMStatisticsForeground::editHandleElements),
        static_cast<FieldGetMethodSig >(&CSMStatisticsForeground::getHandleElements));

    oType.addInitialDesc(pDesc);
}


CSMStatisticsForegroundBase::TypeObject CSMStatisticsForegroundBase::_type(
    CSMStatisticsForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&CSMStatisticsForegroundBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&CSMStatisticsForeground::initMethod),
    reinterpret_cast<ExitContainerF>(&CSMStatisticsForeground::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&CSMStatisticsForeground::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"CSMStatisticsForeground\"\n"
    "    parent=\"Foreground\"\n"
    "    library=\"ContribCSM\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    parentFields=\"none\"\n"
    "    >\n"
    "    <Field\n"
    "       name=\"size\"\n"
    "       type=\"UInt32\"\n"
    "       cardinality=\"single\"\n"
    "       visibility=\"external\"\n"
    "       access=\"public\"\n"
    "       defaultValue=\"25\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "       name=\"color\"\n"
    "       type=\"Color4f\"\n"
    "       cardinality=\"single\"\n"
    "       visibility=\"external\"\n"
    "       access=\"public\"\n"
    "       defaultValue=\"0.0, 1.0, 0.0, 0.7\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "       name=\"bgColor\"\n"
    "       type=\"Color4f\"\n"
    "       cardinality=\"single\"\n"
    "       visibility=\"external\"\n"
    "       access=\"public\"\n"
    "       defaultValue=\"0.0, 0.0, 0.0, 0.0\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "       name=\"elements\"\n"
    "       type=\"std::string\"\n"
    "       cardinality=\"multi\"\n"
    "       visibility=\"external\"\n"
    "       access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CSMStatisticsForegroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &CSMStatisticsForegroundBase::getType(void) const
{
    return _type;
}

UInt32 CSMStatisticsForegroundBase::getContainerSize(void) const
{
    return sizeof(CSMStatisticsForeground);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *CSMStatisticsForegroundBase::editSFSize(void)
{
    editSField(SizeFieldMask);

    return &_sfSize;
}

const SFUInt32 *CSMStatisticsForegroundBase::getSFSize(void) const
{
    return &_sfSize;
}


SFColor4f *CSMStatisticsForegroundBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *CSMStatisticsForegroundBase::getSFColor(void) const
{
    return &_sfColor;
}


SFColor4f *CSMStatisticsForegroundBase::editSFBgColor(void)
{
    editSField(BgColorFieldMask);

    return &_sfBgColor;
}

const SFColor4f *CSMStatisticsForegroundBase::getSFBgColor(void) const
{
    return &_sfBgColor;
}


MFString *CSMStatisticsForegroundBase::editMFElements(void)
{
    editMField(ElementsFieldMask, _mfElements);

    return &_mfElements;
}

const MFString *CSMStatisticsForegroundBase::getMFElements(void) const
{
    return &_mfElements;
}






/*------------------------------ access -----------------------------------*/

SizeT CSMStatisticsForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }
    if(FieldBits::NoField != (BgColorFieldMask & whichField))
    {
        returnValue += _sfBgColor.getBinSize();
    }
    if(FieldBits::NoField != (ElementsFieldMask & whichField))
    {
        returnValue += _mfElements.getBinSize();
    }

    return returnValue;
}

void CSMStatisticsForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BgColorFieldMask & whichField))
    {
        _sfBgColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ElementsFieldMask & whichField))
    {
        _mfElements.copyToBin(pMem);
    }
}

void CSMStatisticsForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        editSField(SizeFieldMask);
        _sfSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        editSField(ColorFieldMask);
        _sfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BgColorFieldMask & whichField))
    {
        editSField(BgColorFieldMask);
        _sfBgColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ElementsFieldMask & whichField))
    {
        editMField(ElementsFieldMask, _mfElements);
        _mfElements.copyFromBin(pMem);
    }
}

//! create a new instance of the class
CSMStatisticsForegroundTransitPtr CSMStatisticsForegroundBase::createLocal(BitVector bFlags)
{
    CSMStatisticsForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<CSMStatisticsForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
CSMStatisticsForegroundTransitPtr CSMStatisticsForegroundBase::createDependent(BitVector bFlags)
{
    CSMStatisticsForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<CSMStatisticsForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
CSMStatisticsForegroundTransitPtr CSMStatisticsForegroundBase::create(void)
{
    return createLocal();
}

CSMStatisticsForeground *CSMStatisticsForegroundBase::createEmptyLocal(BitVector bFlags)
{
    CSMStatisticsForeground *returnValue;

    newPtr<CSMStatisticsForeground>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
CSMStatisticsForeground *CSMStatisticsForegroundBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr CSMStatisticsForegroundBase::shallowCopyLocal(
    BitVector bFlags) const
{
    CSMStatisticsForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CSMStatisticsForeground *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr CSMStatisticsForegroundBase::shallowCopyDependent(
    BitVector bFlags) const
{
    CSMStatisticsForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CSMStatisticsForeground *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr CSMStatisticsForegroundBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

CSMStatisticsForegroundBase::CSMStatisticsForegroundBase(void) :
    Inherited(),
    _sfSize                   (UInt32(25)),
    _sfColor                  (Color4f(0.0f, 1.0f, 0.0f, 0.7f)),
    _sfBgColor                (Color4f(0.0f, 0.0f, 0.0f, 0.0f)),
    _mfElements               ()
{
}

CSMStatisticsForegroundBase::CSMStatisticsForegroundBase(const CSMStatisticsForegroundBase &source) :
    Inherited(source),
    _sfSize                   (source._sfSize                   ),
    _sfColor                  (source._sfColor                  ),
    _sfBgColor                (source._sfBgColor                ),
    _mfElements               (source._mfElements               )
{
}


/*-------------------------- destructors ----------------------------------*/

CSMStatisticsForegroundBase::~CSMStatisticsForegroundBase(void)
{
}


GetFieldHandlePtr CSMStatisticsForegroundBase::getHandleSize            (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             const_cast<CSMStatisticsForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMStatisticsForegroundBase::editHandleSize           (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             this));


    editSField(SizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMStatisticsForegroundBase::getHandleColor           (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             const_cast<CSMStatisticsForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMStatisticsForegroundBase::editHandleColor          (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             this));


    editSField(ColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMStatisticsForegroundBase::getHandleBgColor         (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBgColor,
             this->getType().getFieldDesc(BgColorFieldId),
             const_cast<CSMStatisticsForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMStatisticsForegroundBase::editHandleBgColor        (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBgColor,
             this->getType().getFieldDesc(BgColorFieldId),
             this));


    editSField(BgColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMStatisticsForegroundBase::getHandleElements        (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfElements,
             this->getType().getFieldDesc(ElementsFieldId),
             const_cast<CSMStatisticsForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMStatisticsForegroundBase::editHandleElements       (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfElements,
             this->getType().getFieldDesc(ElementsFieldId),
             this));


    editMField(ElementsFieldMask, _mfElements);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CSMStatisticsForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    CSMStatisticsForeground *pThis = static_cast<CSMStatisticsForeground *>(this);

    pThis->execSync(static_cast<CSMStatisticsForeground *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *CSMStatisticsForegroundBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    CSMStatisticsForeground *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const CSMStatisticsForeground *>(pRefAspect),
                  dynamic_cast<const CSMStatisticsForeground *>(this));

    return returnValue;
}
#endif

void CSMStatisticsForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfElements.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
