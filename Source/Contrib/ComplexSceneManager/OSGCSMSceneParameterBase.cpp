/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CSMSceneParameter!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGNode.h"                    // SceneRef Class

#include "OSGCSMSceneParameterBase.h"
#include "OSGCSMSceneParameter.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CSMSceneParameter
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Node *          CSMSceneParameterBase::_sfSceneRef
    
*/

/*! \var Real32          CSMSceneParameterBase::_sfDistScale
    
*/

/*! \var Vec3f           CSMSceneParameterBase::_sfSceneDiag
    
*/

/*! \var Pnt3f           CSMSceneParameterBase::_sfInitViewPos
    
*/

/*! \var Pnt3f           CSMSceneParameterBase::_sfSceneCenter
    
*/

/*! \var Real32          CSMSceneParameterBase::_sfSceneNear
    
*/

/*! \var Real32          CSMSceneParameterBase::_sfSceneFar
    
*/

/*! \var OSGAny          CSMSceneParameterBase::_sfReset
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<CSMSceneParameter *, nsOSG>::_type(
    "CSMSceneParameterPtr", 
    "AttachmentContainerPtr", 
    CSMSceneParameter::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(CSMSceneParameter *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           CSMSceneParameter *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           CSMSceneParameter *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void CSMSceneParameterBase::classDescInserter(TypeObject &oType)
{
    Inherited::classDescInserter(oType);

    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "sceneRef",
        "",
        SceneRefFieldId, SceneRefFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMSceneParameter::editHandleSceneRef),
        static_cast<FieldGetMethodSig >(&CSMSceneParameter::getHandleSceneRef));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "distScale",
        "",
        DistScaleFieldId, DistScaleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMSceneParameter::editHandleDistScale),
        static_cast<FieldGetMethodSig >(&CSMSceneParameter::getHandleDistScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "sceneDiag",
        "",
        SceneDiagFieldId, SceneDiagFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMSceneParameter::editHandleSceneDiag),
        static_cast<FieldGetMethodSig >(&CSMSceneParameter::getHandleSceneDiag));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "initViewPos",
        "",
        InitViewPosFieldId, InitViewPosFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMSceneParameter::editHandleInitViewPos),
        static_cast<FieldGetMethodSig >(&CSMSceneParameter::getHandleInitViewPos));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "sceneCenter",
        "",
        SceneCenterFieldId, SceneCenterFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMSceneParameter::editHandleSceneCenter),
        static_cast<FieldGetMethodSig >(&CSMSceneParameter::getHandleSceneCenter));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "sceneNear",
        "",
        SceneNearFieldId, SceneNearFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMSceneParameter::editHandleSceneNear),
        static_cast<FieldGetMethodSig >(&CSMSceneParameter::getHandleSceneNear));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "sceneFar",
        "",
        SceneFarFieldId, SceneFarFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMSceneParameter::editHandleSceneFar),
        static_cast<FieldGetMethodSig >(&CSMSceneParameter::getHandleSceneFar));

    oType.addInitialDesc(pDesc);

    pDesc = new SFOSGAny::Description(
        SFOSGAny::getClassType(),
        "reset",
        "",
        ResetFieldId, ResetFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMSceneParameter::editHandleReset),
        static_cast<FieldGetMethodSig >(&CSMSceneParameter::getHandleReset));

    oType.addInitialDesc(pDesc);
}


CSMSceneParameterBase::TypeObject CSMSceneParameterBase::_type(
    CSMSceneParameterBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&CSMSceneParameterBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&CSMSceneParameter::initMethod),
    reinterpret_cast<ExitContainerF>(&CSMSceneParameter::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&CSMSceneParameter::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"CSMSceneParameter\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    mixinparent=\"AttachmentContainerFrameTaskParent\"\n"
    "    library=\"ContribCSM\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    >\n"
    "\t<Field\n"
    "\t\tname=\"sceneRef\"\n"
    "\t\ttype=\"Node\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "        category=\"pointer\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"distScale\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "        defaultValue=\"1.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sceneDiag\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "        defaultValue=\"1.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"initViewPos\"\n"
    "\t\ttype=\"Pnt3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "        defaultValue=\"1.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sceneCenter\"\n"
    "\t\ttype=\"Pnt3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "        defaultValue=\"1.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sceneNear\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "        defaultValue=\"0.1f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sceneFar\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "        defaultValue=\"20000.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"reset\"\n"
    "\t\ttype=\"OSGAny\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "        defaultValue=\"\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CSMSceneParameterBase::getType(void)
{
    return _type;
}

const FieldContainerType &CSMSceneParameterBase::getType(void) const
{
    return _type;
}

UInt32 CSMSceneParameterBase::getContainerSize(void) const
{
    return sizeof(CSMSceneParameter);
}

/*------------------------- decorator get ------------------------------*/


//! Get the CSMSceneParameter::_sfSceneRef field.
const SFUnrecNodePtr *CSMSceneParameterBase::getSFSceneRef(void) const
{
    return &_sfSceneRef;
}

SFUnrecNodePtr      *CSMSceneParameterBase::editSFSceneRef       (void)
{
    editSField(SceneRefFieldMask);

    return &_sfSceneRef;
}

//! Get the value of the CSMSceneParameter::_sfSceneRef field.
Node * CSMSceneParameterBase::getSceneRef(void) const
{
    return _sfSceneRef.getValue();
}

//! Set the value of the CSMSceneParameter::_sfSceneRef field.
void CSMSceneParameterBase::setSceneRef(Node * const value)
{
    editSField(SceneRefFieldMask);

    _sfSceneRef.setValue(value);
}


SFReal32 *CSMSceneParameterBase::editSFDistScale(void)
{
    editSField(DistScaleFieldMask);

    return &_sfDistScale;
}

const SFReal32 *CSMSceneParameterBase::getSFDistScale(void) const
{
    return &_sfDistScale;
}


SFVec3f *CSMSceneParameterBase::editSFSceneDiag(void)
{
    editSField(SceneDiagFieldMask);

    return &_sfSceneDiag;
}

const SFVec3f *CSMSceneParameterBase::getSFSceneDiag(void) const
{
    return &_sfSceneDiag;
}


SFPnt3f *CSMSceneParameterBase::editSFInitViewPos(void)
{
    editSField(InitViewPosFieldMask);

    return &_sfInitViewPos;
}

const SFPnt3f *CSMSceneParameterBase::getSFInitViewPos(void) const
{
    return &_sfInitViewPos;
}


SFPnt3f *CSMSceneParameterBase::editSFSceneCenter(void)
{
    editSField(SceneCenterFieldMask);

    return &_sfSceneCenter;
}

const SFPnt3f *CSMSceneParameterBase::getSFSceneCenter(void) const
{
    return &_sfSceneCenter;
}


SFReal32 *CSMSceneParameterBase::editSFSceneNear(void)
{
    editSField(SceneNearFieldMask);

    return &_sfSceneNear;
}

const SFReal32 *CSMSceneParameterBase::getSFSceneNear(void) const
{
    return &_sfSceneNear;
}


SFReal32 *CSMSceneParameterBase::editSFSceneFar(void)
{
    editSField(SceneFarFieldMask);

    return &_sfSceneFar;
}

const SFReal32 *CSMSceneParameterBase::getSFSceneFar(void) const
{
    return &_sfSceneFar;
}


SFOSGAny *CSMSceneParameterBase::editSFReset(void)
{
    editSField(ResetFieldMask);

    return &_sfReset;
}

const SFOSGAny *CSMSceneParameterBase::getSFReset(void) const
{
    return &_sfReset;
}






/*------------------------------ access -----------------------------------*/

SizeT CSMSceneParameterBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SceneRefFieldMask & whichField))
    {
        returnValue += _sfSceneRef.getBinSize();
    }
    if(FieldBits::NoField != (DistScaleFieldMask & whichField))
    {
        returnValue += _sfDistScale.getBinSize();
    }
    if(FieldBits::NoField != (SceneDiagFieldMask & whichField))
    {
        returnValue += _sfSceneDiag.getBinSize();
    }
    if(FieldBits::NoField != (InitViewPosFieldMask & whichField))
    {
        returnValue += _sfInitViewPos.getBinSize();
    }
    if(FieldBits::NoField != (SceneCenterFieldMask & whichField))
    {
        returnValue += _sfSceneCenter.getBinSize();
    }
    if(FieldBits::NoField != (SceneNearFieldMask & whichField))
    {
        returnValue += _sfSceneNear.getBinSize();
    }
    if(FieldBits::NoField != (SceneFarFieldMask & whichField))
    {
        returnValue += _sfSceneFar.getBinSize();
    }
    if(FieldBits::NoField != (ResetFieldMask & whichField))
    {
        returnValue += _sfReset.getBinSize();
    }

    return returnValue;
}

void CSMSceneParameterBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SceneRefFieldMask & whichField))
    {
        _sfSceneRef.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DistScaleFieldMask & whichField))
    {
        _sfDistScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneDiagFieldMask & whichField))
    {
        _sfSceneDiag.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InitViewPosFieldMask & whichField))
    {
        _sfInitViewPos.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneCenterFieldMask & whichField))
    {
        _sfSceneCenter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneNearFieldMask & whichField))
    {
        _sfSceneNear.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneFarFieldMask & whichField))
    {
        _sfSceneFar.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ResetFieldMask & whichField))
    {
        _sfReset.copyToBin(pMem);
    }
}

void CSMSceneParameterBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SceneRefFieldMask & whichField))
    {
        editSField(SceneRefFieldMask);
        _sfSceneRef.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DistScaleFieldMask & whichField))
    {
        editSField(DistScaleFieldMask);
        _sfDistScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneDiagFieldMask & whichField))
    {
        editSField(SceneDiagFieldMask);
        _sfSceneDiag.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InitViewPosFieldMask & whichField))
    {
        editSField(InitViewPosFieldMask);
        _sfInitViewPos.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneCenterFieldMask & whichField))
    {
        editSField(SceneCenterFieldMask);
        _sfSceneCenter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneNearFieldMask & whichField))
    {
        editSField(SceneNearFieldMask);
        _sfSceneNear.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneFarFieldMask & whichField))
    {
        editSField(SceneFarFieldMask);
        _sfSceneFar.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ResetFieldMask & whichField))
    {
        editSField(ResetFieldMask);
        _sfReset.copyFromBin(pMem);
    }
}

//! create a new instance of the class
CSMSceneParameterTransitPtr CSMSceneParameterBase::createLocal(BitVector bFlags)
{
    CSMSceneParameterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<CSMSceneParameter>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
CSMSceneParameterTransitPtr CSMSceneParameterBase::createDependent(BitVector bFlags)
{
    CSMSceneParameterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<CSMSceneParameter>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
CSMSceneParameterTransitPtr CSMSceneParameterBase::create(void)
{
    return createLocal();
}

CSMSceneParameter *CSMSceneParameterBase::createEmptyLocal(BitVector bFlags)
{
    CSMSceneParameter *returnValue;

    newPtr<CSMSceneParameter>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
CSMSceneParameter *CSMSceneParameterBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr CSMSceneParameterBase::shallowCopyLocal(
    BitVector bFlags) const
{
    CSMSceneParameter *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CSMSceneParameter *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr CSMSceneParameterBase::shallowCopyDependent(
    BitVector bFlags) const
{
    CSMSceneParameter *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CSMSceneParameter *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr CSMSceneParameterBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

CSMSceneParameterBase::CSMSceneParameterBase(void) :
    Inherited(),
    _sfSceneRef               (NULL),
    _sfDistScale              (Real32(1.f)),
    _sfSceneDiag              (Vec3f(1.f)),
    _sfInitViewPos            (Pnt3f(1.f)),
    _sfSceneCenter            (Pnt3f(1.f)),
    _sfSceneNear              (Real32(0.1f)),
    _sfSceneFar               (Real32(20000.f)),
    _sfReset                  ()
{
}

CSMSceneParameterBase::CSMSceneParameterBase(const CSMSceneParameterBase &source) :
    Inherited(source),
    _sfSceneRef               (NULL),
    _sfDistScale              (source._sfDistScale              ),
    _sfSceneDiag              (source._sfSceneDiag              ),
    _sfInitViewPos            (source._sfInitViewPos            ),
    _sfSceneCenter            (source._sfSceneCenter            ),
    _sfSceneNear              (source._sfSceneNear              ),
    _sfSceneFar               (source._sfSceneFar               ),
    _sfReset                  (source._sfReset                  )
{
}


/*-------------------------- destructors ----------------------------------*/

CSMSceneParameterBase::~CSMSceneParameterBase(void)
{
}

void CSMSceneParameterBase::onCreate(const CSMSceneParameter *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        CSMSceneParameter *pThis = static_cast<CSMSceneParameter *>(this);

        pThis->setSceneRef(source->getSceneRef());
    }
}

GetFieldHandlePtr CSMSceneParameterBase::getHandleSceneRef        (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfSceneRef,
             this->getType().getFieldDesc(SceneRefFieldId),
             const_cast<CSMSceneParameterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMSceneParameterBase::editHandleSceneRef       (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfSceneRef,
             this->getType().getFieldDesc(SceneRefFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&CSMSceneParameter::setSceneRef,
                    static_cast<CSMSceneParameter *>(this), ::boost::placeholders::_1));

    editSField(SceneRefFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMSceneParameterBase::getHandleDistScale       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfDistScale,
             this->getType().getFieldDesc(DistScaleFieldId),
             const_cast<CSMSceneParameterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMSceneParameterBase::editHandleDistScale      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfDistScale,
             this->getType().getFieldDesc(DistScaleFieldId),
             this));


    editSField(DistScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMSceneParameterBase::getHandleSceneDiag       (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfSceneDiag,
             this->getType().getFieldDesc(SceneDiagFieldId),
             const_cast<CSMSceneParameterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMSceneParameterBase::editHandleSceneDiag      (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfSceneDiag,
             this->getType().getFieldDesc(SceneDiagFieldId),
             this));


    editSField(SceneDiagFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMSceneParameterBase::getHandleInitViewPos     (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfInitViewPos,
             this->getType().getFieldDesc(InitViewPosFieldId),
             const_cast<CSMSceneParameterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMSceneParameterBase::editHandleInitViewPos    (void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfInitViewPos,
             this->getType().getFieldDesc(InitViewPosFieldId),
             this));


    editSField(InitViewPosFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMSceneParameterBase::getHandleSceneCenter     (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfSceneCenter,
             this->getType().getFieldDesc(SceneCenterFieldId),
             const_cast<CSMSceneParameterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMSceneParameterBase::editHandleSceneCenter    (void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfSceneCenter,
             this->getType().getFieldDesc(SceneCenterFieldId),
             this));


    editSField(SceneCenterFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMSceneParameterBase::getHandleSceneNear       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSceneNear,
             this->getType().getFieldDesc(SceneNearFieldId),
             const_cast<CSMSceneParameterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMSceneParameterBase::editHandleSceneNear      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSceneNear,
             this->getType().getFieldDesc(SceneNearFieldId),
             this));


    editSField(SceneNearFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMSceneParameterBase::getHandleSceneFar        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSceneFar,
             this->getType().getFieldDesc(SceneFarFieldId),
             const_cast<CSMSceneParameterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMSceneParameterBase::editHandleSceneFar       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSceneFar,
             this->getType().getFieldDesc(SceneFarFieldId),
             this));


    editSField(SceneFarFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMSceneParameterBase::getHandleReset           (void) const
{
    SFOSGAny::GetHandlePtr returnValue(
        new  SFOSGAny::GetHandle(
             &_sfReset,
             this->getType().getFieldDesc(ResetFieldId),
             const_cast<CSMSceneParameterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CSMSceneParameterBase::editHandleReset          (void)
{
    SFOSGAny::EditHandlePtr returnValue(
        new  SFOSGAny::EditHandle(
             &_sfReset,
             this->getType().getFieldDesc(ResetFieldId),
             this));


    editSField(ResetFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CSMSceneParameterBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    CSMSceneParameter *pThis = static_cast<CSMSceneParameter *>(this);

    pThis->execSync(static_cast<CSMSceneParameter *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *CSMSceneParameterBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    CSMSceneParameter *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const CSMSceneParameter *>(pRefAspect),
                  dynamic_cast<const CSMSceneParameter *>(this));

    return returnValue;
}
#endif

void CSMSceneParameterBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<CSMSceneParameter *>(this)->setSceneRef(NULL);


}


OSG_END_NAMESPACE
