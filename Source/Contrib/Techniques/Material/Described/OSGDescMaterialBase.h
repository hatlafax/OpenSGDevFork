/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DescMaterial
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGDESCMATERIALBASE_H_
#define _OSGDESCMATERIALBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribTechniquesDef.h"

//#include "OSGBaseTypes.h"

#include "OSGChunkMaterial.h" // Parent

#include "OSGEnvironmentDescFields.h"   // EnvironmentDesc type
#include "OSGMaterialDescFields.h"      // MaterialDesc type
#include "OSGCapabilitiesDescFields.h"  // CapabilitiesDesc type
#include "OSGSysFields.h"               // VertMaterialBindingPnt type

#include "OSGDescMaterialFields.h"

OSG_BEGIN_NAMESPACE


class DescMaterial;

//! \brief DescMaterial Base Class.

class OSG_CONTRIBTECHNIQUES_DLLMAPPING DescMaterialBase : public ChunkMaterial
{
  public:

    typedef ChunkMaterial Inherited;
    typedef ChunkMaterial ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(DescMaterial);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        EnvironmentDescFieldId = Inherited::NextFieldId,
        MaterialDescFieldId = EnvironmentDescFieldId + 1,
        CapabilitiesDescFieldId = MaterialDescFieldId + 1,
        VertMaterialBindingPntFieldId = CapabilitiesDescFieldId + 1,
        FragMaterialBindingPntFieldId = VertMaterialBindingPntFieldId + 1,
        FragEnvironmentBindingPntFieldId = FragMaterialBindingPntFieldId + 1,
        TexUnitOffsetFieldId = FragEnvironmentBindingPntFieldId + 1,
        NextFieldId = TexUnitOffsetFieldId + 1
    };

    static const OSG::BitVector EnvironmentDescFieldMask =
        (TypeTraits<BitVector>::One << EnvironmentDescFieldId);
    static const OSG::BitVector MaterialDescFieldMask =
        (TypeTraits<BitVector>::One << MaterialDescFieldId);
    static const OSG::BitVector CapabilitiesDescFieldMask =
        (TypeTraits<BitVector>::One << CapabilitiesDescFieldId);
    static const OSG::BitVector VertMaterialBindingPntFieldMask =
        (TypeTraits<BitVector>::One << VertMaterialBindingPntFieldId);
    static const OSG::BitVector FragMaterialBindingPntFieldMask =
        (TypeTraits<BitVector>::One << FragMaterialBindingPntFieldId);
    static const OSG::BitVector FragEnvironmentBindingPntFieldMask =
        (TypeTraits<BitVector>::One << FragEnvironmentBindingPntFieldId);
    static const OSG::BitVector TexUnitOffsetFieldMask =
        (TypeTraits<BitVector>::One << TexUnitOffsetFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecEnvironmentDescPtr SFEnvironmentDescType;
    typedef SFUnrecMaterialDescPtr SFMaterialDescType;
    typedef SFUnrecCapabilitiesDescPtr SFCapabilitiesDescType;
    typedef SFInt32           SFVertMaterialBindingPntType;
    typedef SFInt32           SFFragMaterialBindingPntType;
    typedef SFInt32           SFFragEnvironmentBindingPntType;
    typedef SFInt32           SFTexUnitOffsetType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecEnvironmentDescPtr *getSFEnvironmentDesc(void) const;
            const SFUnrecMaterialDescPtr *getSFMaterialDesc   (void) const;
            const SFUnrecCapabilitiesDescPtr *getSFCapabilitiesDesc(void) const;
                  SFUnrecCapabilitiesDescPtr *editSFCapabilitiesDesc(void);

                  SFInt32             *editSFVertMaterialBindingPnt(void);
            const SFInt32             *getSFVertMaterialBindingPnt (void) const;

                  SFInt32             *editSFFragMaterialBindingPnt(void);
            const SFInt32             *getSFFragMaterialBindingPnt (void) const;

                  SFInt32             *editSFFragEnvironmentBindingPnt(void);
            const SFInt32             *getSFFragEnvironmentBindingPnt (void) const;

                  SFInt32             *editSFTexUnitOffset  (void);
            const SFInt32             *getSFTexUnitOffset   (void) const;


                  EnvironmentDesc * getEnvironmentDesc(void) const;

                  MaterialDesc * getMaterialDesc   (void) const;

                  CapabilitiesDesc * getCapabilitiesDesc(void) const;

                  Int32               &editVertMaterialBindingPnt(void);
                  Int32                getVertMaterialBindingPnt (void) const;

                  Int32               &editFragMaterialBindingPnt(void);
                  Int32                getFragMaterialBindingPnt (void) const;

                  Int32               &editFragEnvironmentBindingPnt(void);
                  Int32                getFragEnvironmentBindingPnt (void) const;

                  Int32               &editTexUnitOffset  (void);
                  Int32                getTexUnitOffset   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setCapabilitiesDesc(CapabilitiesDesc * const value);
            void setVertMaterialBindingPnt(const Int32 value);
            void setFragMaterialBindingPnt(const Int32 value);
            void setFragEnvironmentBindingPnt(const Int32 value);
            void setTexUnitOffset  (const Int32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  DescMaterialTransitPtr  create          (void);
    static  DescMaterial           *createEmpty     (void);

    static  DescMaterialTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  DescMaterial            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  DescMaterialTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecEnvironmentDescPtr _sfEnvironmentDesc;
    SFUnrecMaterialDescPtr _sfMaterialDesc;
    SFUnrecCapabilitiesDescPtr _sfCapabilitiesDesc;
    SFInt32           _sfVertMaterialBindingPnt;
    SFInt32           _sfFragMaterialBindingPnt;
    SFInt32           _sfFragEnvironmentBindingPnt;
    SFInt32           _sfTexUnitOffset;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    DescMaterialBase(void);
    DescMaterialBase(const DescMaterialBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~DescMaterialBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const DescMaterial *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleEnvironmentDesc (void) const;
     EditFieldHandlePtr editHandleEnvironmentDesc(void);
     GetFieldHandlePtr  getHandleMaterialDesc    (void) const;
     EditFieldHandlePtr editHandleMaterialDesc   (void);
     GetFieldHandlePtr  getHandleCapabilitiesDesc (void) const;
     EditFieldHandlePtr editHandleCapabilitiesDesc(void);
     GetFieldHandlePtr  getHandleVertMaterialBindingPnt (void) const;
     EditFieldHandlePtr editHandleVertMaterialBindingPnt(void);
     GetFieldHandlePtr  getHandleFragMaterialBindingPnt (void) const;
     EditFieldHandlePtr editHandleFragMaterialBindingPnt(void);
     GetFieldHandlePtr  getHandleFragEnvironmentBindingPnt (void) const;
     EditFieldHandlePtr editHandleFragEnvironmentBindingPnt(void);
     GetFieldHandlePtr  getHandleTexUnitOffset   (void) const;
     EditFieldHandlePtr editHandleTexUnitOffset  (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      DescMaterialBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const DescMaterialBase &source);
};

typedef DescMaterialBase *DescMaterialBaseP;

OSG_END_NAMESPACE

#endif /* _OSGDESCMATERIALBASE_H_ */
