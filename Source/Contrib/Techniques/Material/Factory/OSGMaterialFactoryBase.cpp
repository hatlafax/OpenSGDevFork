/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MaterialFactory!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGShaderManager.h"           // ShaderManager Class

#include "OSGMaterialFactoryBase.h"
#include "OSGMaterialFactory.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MaterialFactory
    The material factory is supposed to provide a ChunkMaterial instance for
    a given MaterialDesc object.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ShaderManager * MaterialFactoryBase::_sfShaderManager
    The shader manager is responsible for mananging the ShaderProgramChunk
    objects for the ChunkMaterial.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<MaterialFactory *, nsOSG>::_type(
    "MaterialFactoryPtr", 
    "FieldContainerPtr", 
    MaterialFactory::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(MaterialFactory *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MaterialFactory *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MaterialFactory *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MaterialFactoryBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecShaderManagerPtr::Description(
        SFUnrecShaderManagerPtr::getClassType(),
        "shaderManager",
        "The shader manager is responsible for mananging the ShaderProgramChunk\n"
        "objects for the ChunkMaterial.\n",
        ShaderManagerFieldId, ShaderManagerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialFactory::editHandleShaderManager),
        static_cast<FieldGetMethodSig >(&MaterialFactory::getHandleShaderManager));

    oType.addInitialDesc(pDesc);
}


MaterialFactoryBase::TypeObject MaterialFactoryBase::_type(
    MaterialFactoryBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    reinterpret_cast<InitContainerF>(&MaterialFactory::initMethod),
    reinterpret_cast<ExitContainerF>(&MaterialFactory::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&MaterialFactory::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"MaterialFactory\"\n"
    "    parent=\"FieldContainer\"\n"
    "    library=\"ContribTechniques\"\n"
    "    structure=\"abstract\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    >\n"
    "    The material factory is supposed to provide a ChunkMaterial instance for\n"
    "    a given MaterialDesc object.\n"
    "\n"
    "    <Field\n"
    "        name=\"shaderManager\"\n"
    "        type=\"ShaderManager\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        category=\"pointer\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "        The shader manager is responsible for mananging the ShaderProgramChunk\n"
    "        objects for the ChunkMaterial.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "The material factory is supposed to provide a ChunkMaterial instance for\n"
    "a given MaterialDesc object.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MaterialFactoryBase::getType(void)
{
    return _type;
}

const FieldContainerType &MaterialFactoryBase::getType(void) const
{
    return _type;
}

UInt32 MaterialFactoryBase::getContainerSize(void) const
{
    return sizeof(MaterialFactory);
}

/*------------------------- decorator get ------------------------------*/


//! Get the MaterialFactory::_sfShaderManager field.
const SFUnrecShaderManagerPtr *MaterialFactoryBase::getSFShaderManager(void) const
{
    return &_sfShaderManager;
}

SFUnrecShaderManagerPtr *MaterialFactoryBase::editSFShaderManager  (void)
{
    editSField(ShaderManagerFieldMask);

    return &_sfShaderManager;
}

//! Get the value of the MaterialFactory::_sfShaderManager field.
ShaderManager * MaterialFactoryBase::getShaderManager(void) const
{
    return _sfShaderManager.getValue();
}

//! Set the value of the MaterialFactory::_sfShaderManager field.
void MaterialFactoryBase::setShaderManager(ShaderManager * const value)
{
    editSField(ShaderManagerFieldMask);

    _sfShaderManager.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT MaterialFactoryBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ShaderManagerFieldMask & whichField))
    {
        returnValue += _sfShaderManager.getBinSize();
    }

    return returnValue;
}

void MaterialFactoryBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ShaderManagerFieldMask & whichField))
    {
        _sfShaderManager.copyToBin(pMem);
    }
}

void MaterialFactoryBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ShaderManagerFieldMask & whichField))
    {
        editSField(ShaderManagerFieldMask);
        _sfShaderManager.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

MaterialFactoryBase::MaterialFactoryBase(void) :
    Inherited(),
    _sfShaderManager          (NULL)
{
}

MaterialFactoryBase::MaterialFactoryBase(const MaterialFactoryBase &source) :
    Inherited(source),
    _sfShaderManager          (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

MaterialFactoryBase::~MaterialFactoryBase(void)
{
}

void MaterialFactoryBase::onCreate(const MaterialFactory *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        MaterialFactory *pThis = static_cast<MaterialFactory *>(this);

        pThis->setShaderManager(source->getShaderManager());
    }
}

GetFieldHandlePtr MaterialFactoryBase::getHandleShaderManager   (void) const
{
    SFUnrecShaderManagerPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderManagerPtr::GetHandle(
             &_sfShaderManager,
             this->getType().getFieldDesc(ShaderManagerFieldId),
             const_cast<MaterialFactoryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialFactoryBase::editHandleShaderManager  (void)
{
    SFUnrecShaderManagerPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderManagerPtr::EditHandle(
             &_sfShaderManager,
             this->getType().getFieldDesc(ShaderManagerFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MaterialFactory::setShaderManager,
                    static_cast<MaterialFactory *>(this), ::boost::placeholders::_1));

    editSField(ShaderManagerFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void MaterialFactoryBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MaterialFactory *pThis = static_cast<MaterialFactory *>(this);

    pThis->execSync(static_cast<MaterialFactory *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void MaterialFactoryBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<MaterialFactory *>(this)->setShaderManager(NULL);


}


OSG_END_NAMESPACE
