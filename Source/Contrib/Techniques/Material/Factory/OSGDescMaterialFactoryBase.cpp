/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DescMaterialFactory!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGEnvironmentDesc.h"         // EnvironmentDesc Class

#include "OSGDescMaterialFactoryBase.h"
#include "OSGDescMaterialFactory.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DescMaterialFactory
    This material factory provides PbrMaterial instances.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var EnvironmentDesc * DescMaterialFactoryBase::_sfEnvironmentDesc
    The environment description contains additional global information
    for the setup of a material.
*/

/*! \var Int32           DescMaterialFactoryBase::_sfVertMaterialBindingPnt
    The vertex shader material binding point for the uniform buffer object.
*/

/*! \var Int32           DescMaterialFactoryBase::_sfFragMaterialBindingPnt
    The fragment shader material binding point for the uniform buffer object.
*/

/*! \var Int32           DescMaterialFactoryBase::_sfFragEnvironmentBindingPnt
    The fragment shader environment binding point for the uniform buffer object.
*/

/*! \var Int32           DescMaterialFactoryBase::_sfTexUnitOffset
    Each texture of the material does reserve one texture binding point. 
    The texUnitOffset parameter determines the first one to use.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<DescMaterialFactory *, nsOSG>::_type(
    "DescMaterialFactoryPtr", 
    "MaterialFactoryPtr", 
    DescMaterialFactory::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(DescMaterialFactory *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           DescMaterialFactory *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           DescMaterialFactory *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DescMaterialFactoryBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecEnvironmentDescPtr::Description(
        SFUnrecEnvironmentDescPtr::getClassType(),
        "environmentDesc",
        "The environment description contains additional global information\n"
        "for the setup of a material.\n",
        EnvironmentDescFieldId, EnvironmentDescFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DescMaterialFactory::editHandleEnvironmentDesc),
        static_cast<FieldGetMethodSig >(&DescMaterialFactory::getHandleEnvironmentDesc));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "vertMaterialBindingPnt",
        "The vertex shader material binding point for the uniform buffer object.\n",
        VertMaterialBindingPntFieldId, VertMaterialBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DescMaterialFactory::editHandleVertMaterialBindingPnt),
        static_cast<FieldGetMethodSig >(&DescMaterialFactory::getHandleVertMaterialBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "fragMaterialBindingPnt",
        "The fragment shader material binding point for the uniform buffer object.\n",
        FragMaterialBindingPntFieldId, FragMaterialBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DescMaterialFactory::editHandleFragMaterialBindingPnt),
        static_cast<FieldGetMethodSig >(&DescMaterialFactory::getHandleFragMaterialBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "fragEnvironmentBindingPnt",
        "The fragment shader environment binding point for the uniform buffer object.\n",
        FragEnvironmentBindingPntFieldId, FragEnvironmentBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DescMaterialFactory::editHandleFragEnvironmentBindingPnt),
        static_cast<FieldGetMethodSig >(&DescMaterialFactory::getHandleFragEnvironmentBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "texUnitOffset",
        "Each texture of the material does reserve one texture binding point. \n"
        "The texUnitOffset parameter determines the first one to use.\n",
        TexUnitOffsetFieldId, TexUnitOffsetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DescMaterialFactory::editHandleTexUnitOffset),
        static_cast<FieldGetMethodSig >(&DescMaterialFactory::getHandleTexUnitOffset));

    oType.addInitialDesc(pDesc);
}


DescMaterialFactoryBase::TypeObject DescMaterialFactoryBase::_type(
    DescMaterialFactoryBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&DescMaterialFactoryBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&DescMaterialFactory::initMethod),
    reinterpret_cast<ExitContainerF>(&DescMaterialFactory::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&DescMaterialFactory::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"DescMaterialFactory\"\n"
    "    parent=\"MaterialFactory\"\n"
    "    library=\"ContribTechniques\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    >\n"
    "    This material factory provides PbrMaterial instances.\n"
    "\n"
    "    <Field\n"
    "        name=\"environmentDesc\"\n"
    "        type=\"EnvironmentDesc\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        category=\"pointer\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "        The environment description contains additional global information\n"
    "        for the setup of a material.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"vertMaterialBindingPnt\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"9\"\n"
    "        >\n"
    "        The vertex shader material binding point for the uniform buffer object.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"fragMaterialBindingPnt\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"10\"\n"
    "        >\n"
    "        The fragment shader material binding point for the uniform buffer object.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"fragEnvironmentBindingPnt\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"11\"\n"
    "        >\n"
    "        The fragment shader environment binding point for the uniform buffer object.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"texUnitOffset\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"8\"\n"
    "        >\n"
    "        Each texture of the material does reserve one texture binding point. \n"
    "        The texUnitOffset parameter determines the first one to use.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "This material factory provides PbrMaterial instances.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DescMaterialFactoryBase::getType(void)
{
    return _type;
}

const FieldContainerType &DescMaterialFactoryBase::getType(void) const
{
    return _type;
}

UInt32 DescMaterialFactoryBase::getContainerSize(void) const
{
    return sizeof(DescMaterialFactory);
}

/*------------------------- decorator get ------------------------------*/


//! Get the DescMaterialFactory::_sfEnvironmentDesc field.
const SFUnrecEnvironmentDescPtr *DescMaterialFactoryBase::getSFEnvironmentDesc(void) const
{
    return &_sfEnvironmentDesc;
}

SFUnrecEnvironmentDescPtr *DescMaterialFactoryBase::editSFEnvironmentDesc(void)
{
    editSField(EnvironmentDescFieldMask);

    return &_sfEnvironmentDesc;
}

//! Get the value of the DescMaterialFactory::_sfEnvironmentDesc field.
EnvironmentDesc * DescMaterialFactoryBase::getEnvironmentDesc(void) const
{
    return _sfEnvironmentDesc.getValue();
}

//! Set the value of the DescMaterialFactory::_sfEnvironmentDesc field.
void DescMaterialFactoryBase::setEnvironmentDesc(EnvironmentDesc * const value)
{
    editSField(EnvironmentDescFieldMask);

    _sfEnvironmentDesc.setValue(value);
}


SFInt32 *DescMaterialFactoryBase::editSFVertMaterialBindingPnt(void)
{
    editSField(VertMaterialBindingPntFieldMask);

    return &_sfVertMaterialBindingPnt;
}

const SFInt32 *DescMaterialFactoryBase::getSFVertMaterialBindingPnt(void) const
{
    return &_sfVertMaterialBindingPnt;
}


SFInt32 *DescMaterialFactoryBase::editSFFragMaterialBindingPnt(void)
{
    editSField(FragMaterialBindingPntFieldMask);

    return &_sfFragMaterialBindingPnt;
}

const SFInt32 *DescMaterialFactoryBase::getSFFragMaterialBindingPnt(void) const
{
    return &_sfFragMaterialBindingPnt;
}


SFInt32 *DescMaterialFactoryBase::editSFFragEnvironmentBindingPnt(void)
{
    editSField(FragEnvironmentBindingPntFieldMask);

    return &_sfFragEnvironmentBindingPnt;
}

const SFInt32 *DescMaterialFactoryBase::getSFFragEnvironmentBindingPnt(void) const
{
    return &_sfFragEnvironmentBindingPnt;
}


SFInt32 *DescMaterialFactoryBase::editSFTexUnitOffset(void)
{
    editSField(TexUnitOffsetFieldMask);

    return &_sfTexUnitOffset;
}

const SFInt32 *DescMaterialFactoryBase::getSFTexUnitOffset(void) const
{
    return &_sfTexUnitOffset;
}






/*------------------------------ access -----------------------------------*/

SizeT DescMaterialFactoryBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (EnvironmentDescFieldMask & whichField))
    {
        returnValue += _sfEnvironmentDesc.getBinSize();
    }
    if(FieldBits::NoField != (VertMaterialBindingPntFieldMask & whichField))
    {
        returnValue += _sfVertMaterialBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (FragMaterialBindingPntFieldMask & whichField))
    {
        returnValue += _sfFragMaterialBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (FragEnvironmentBindingPntFieldMask & whichField))
    {
        returnValue += _sfFragEnvironmentBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (TexUnitOffsetFieldMask & whichField))
    {
        returnValue += _sfTexUnitOffset.getBinSize();
    }

    return returnValue;
}

void DescMaterialFactoryBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (EnvironmentDescFieldMask & whichField))
    {
        _sfEnvironmentDesc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VertMaterialBindingPntFieldMask & whichField))
    {
        _sfVertMaterialBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FragMaterialBindingPntFieldMask & whichField))
    {
        _sfFragMaterialBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FragEnvironmentBindingPntFieldMask & whichField))
    {
        _sfFragEnvironmentBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexUnitOffsetFieldMask & whichField))
    {
        _sfTexUnitOffset.copyToBin(pMem);
    }
}

void DescMaterialFactoryBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (EnvironmentDescFieldMask & whichField))
    {
        editSField(EnvironmentDescFieldMask);
        _sfEnvironmentDesc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VertMaterialBindingPntFieldMask & whichField))
    {
        editSField(VertMaterialBindingPntFieldMask);
        _sfVertMaterialBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FragMaterialBindingPntFieldMask & whichField))
    {
        editSField(FragMaterialBindingPntFieldMask);
        _sfFragMaterialBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FragEnvironmentBindingPntFieldMask & whichField))
    {
        editSField(FragEnvironmentBindingPntFieldMask);
        _sfFragEnvironmentBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexUnitOffsetFieldMask & whichField))
    {
        editSField(TexUnitOffsetFieldMask);
        _sfTexUnitOffset.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DescMaterialFactoryTransitPtr DescMaterialFactoryBase::createLocal(BitVector bFlags)
{
    DescMaterialFactoryTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<DescMaterialFactory>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
DescMaterialFactoryTransitPtr DescMaterialFactoryBase::createDependent(BitVector bFlags)
{
    DescMaterialFactoryTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<DescMaterialFactory>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
DescMaterialFactoryTransitPtr DescMaterialFactoryBase::create(void)
{
    DescMaterialFactoryTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<DescMaterialFactory>(tmpPtr);
    }

    return fc;
}

DescMaterialFactory *DescMaterialFactoryBase::createEmptyLocal(BitVector bFlags)
{
    DescMaterialFactory *returnValue;

    newPtr<DescMaterialFactory>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
DescMaterialFactory *DescMaterialFactoryBase::createEmpty(void)
{
    DescMaterialFactory *returnValue;

    newPtr<DescMaterialFactory>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr DescMaterialFactoryBase::shallowCopyLocal(
    BitVector bFlags) const
{
    DescMaterialFactory *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DescMaterialFactory *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr DescMaterialFactoryBase::shallowCopyDependent(
    BitVector bFlags) const
{
    DescMaterialFactory *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DescMaterialFactory *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr DescMaterialFactoryBase::shallowCopy(void) const
{
    DescMaterialFactory *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const DescMaterialFactory *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

DescMaterialFactoryBase::DescMaterialFactoryBase(void) :
    Inherited(),
    _sfEnvironmentDesc        (NULL),
    _sfVertMaterialBindingPnt (Int32(9)),
    _sfFragMaterialBindingPnt (Int32(10)),
    _sfFragEnvironmentBindingPnt(Int32(11)),
    _sfTexUnitOffset          (Int32(8))
{
}

DescMaterialFactoryBase::DescMaterialFactoryBase(const DescMaterialFactoryBase &source) :
    Inherited(source),
    _sfEnvironmentDesc        (NULL),
    _sfVertMaterialBindingPnt (source._sfVertMaterialBindingPnt ),
    _sfFragMaterialBindingPnt (source._sfFragMaterialBindingPnt ),
    _sfFragEnvironmentBindingPnt(source._sfFragEnvironmentBindingPnt),
    _sfTexUnitOffset          (source._sfTexUnitOffset          )
{
}


/*-------------------------- destructors ----------------------------------*/

DescMaterialFactoryBase::~DescMaterialFactoryBase(void)
{
}

void DescMaterialFactoryBase::onCreate(const DescMaterialFactory *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        DescMaterialFactory *pThis = static_cast<DescMaterialFactory *>(this);

        pThis->setEnvironmentDesc(source->getEnvironmentDesc());
    }
}

GetFieldHandlePtr DescMaterialFactoryBase::getHandleEnvironmentDesc (void) const
{
    SFUnrecEnvironmentDescPtr::GetHandlePtr returnValue(
        new  SFUnrecEnvironmentDescPtr::GetHandle(
             &_sfEnvironmentDesc,
             this->getType().getFieldDesc(EnvironmentDescFieldId),
             const_cast<DescMaterialFactoryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DescMaterialFactoryBase::editHandleEnvironmentDesc(void)
{
    SFUnrecEnvironmentDescPtr::EditHandlePtr returnValue(
        new  SFUnrecEnvironmentDescPtr::EditHandle(
             &_sfEnvironmentDesc,
             this->getType().getFieldDesc(EnvironmentDescFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DescMaterialFactory::setEnvironmentDesc,
                    static_cast<DescMaterialFactory *>(this), ::boost::placeholders::_1));

    editSField(EnvironmentDescFieldMask);

    return returnValue;
}

GetFieldHandlePtr DescMaterialFactoryBase::getHandleVertMaterialBindingPnt (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfVertMaterialBindingPnt,
             this->getType().getFieldDesc(VertMaterialBindingPntFieldId),
             const_cast<DescMaterialFactoryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DescMaterialFactoryBase::editHandleVertMaterialBindingPnt(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfVertMaterialBindingPnt,
             this->getType().getFieldDesc(VertMaterialBindingPntFieldId),
             this));


    editSField(VertMaterialBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr DescMaterialFactoryBase::getHandleFragMaterialBindingPnt (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfFragMaterialBindingPnt,
             this->getType().getFieldDesc(FragMaterialBindingPntFieldId),
             const_cast<DescMaterialFactoryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DescMaterialFactoryBase::editHandleFragMaterialBindingPnt(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfFragMaterialBindingPnt,
             this->getType().getFieldDesc(FragMaterialBindingPntFieldId),
             this));


    editSField(FragMaterialBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr DescMaterialFactoryBase::getHandleFragEnvironmentBindingPnt (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfFragEnvironmentBindingPnt,
             this->getType().getFieldDesc(FragEnvironmentBindingPntFieldId),
             const_cast<DescMaterialFactoryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DescMaterialFactoryBase::editHandleFragEnvironmentBindingPnt(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfFragEnvironmentBindingPnt,
             this->getType().getFieldDesc(FragEnvironmentBindingPntFieldId),
             this));


    editSField(FragEnvironmentBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr DescMaterialFactoryBase::getHandleTexUnitOffset   (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfTexUnitOffset,
             this->getType().getFieldDesc(TexUnitOffsetFieldId),
             const_cast<DescMaterialFactoryBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DescMaterialFactoryBase::editHandleTexUnitOffset  (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfTexUnitOffset,
             this->getType().getFieldDesc(TexUnitOffsetFieldId),
             this));


    editSField(TexUnitOffsetFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DescMaterialFactoryBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DescMaterialFactory *pThis = static_cast<DescMaterialFactory *>(this);

    pThis->execSync(static_cast<DescMaterialFactory *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *DescMaterialFactoryBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    DescMaterialFactory *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DescMaterialFactory *>(pRefAspect),
                  dynamic_cast<const DescMaterialFactory *>(this));

    return returnValue;
}
#endif

void DescMaterialFactoryBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<DescMaterialFactory *>(this)->setEnvironmentDesc(NULL);


}


OSG_END_NAMESPACE
