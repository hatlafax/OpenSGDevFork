/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderManager!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGHashKeyToFieldContainerMap.h" // ProgramChunkMap Class
#include "OSGShaderCodeGenerator.h"     // CodeGenerator Class
#include "OSGShaderProgramManager.h"    // ProgramManager Class

#include "OSGShaderManagerBase.h"
#include "OSGShaderManager.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShaderManager
    The shader manager is part of a material factory object.
    It allows the sharing of ShaderProgramChunk objects.
    It assembles the ShaderProgramChunks from ShaderProgram
    objcets that it gets from the embedded ShaderProgramManager
    instance. A ShaderProgramChunk is identified by a SHA1
    hash calculated from the hash values of the ShaderPrograms
    that are contained in the ShaderProgramChunk.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var HashKeyToFieldContainerMap * ShaderManagerBase::_sfProgramChunkMap
    The map of SHA1 hash to ShaderProgramChunk objects.
    The hash is calculated from the ShaderProgram objects
    within the chunk.
*/

/*! \var ShaderCodeGenerator * ShaderManagerBase::_sfCodeGenerator
    A ShaderCodeGenerator is responsible for providing the actual
    shader program texts for the different shader types.
    A ShaderCodeGenerator provides a ShaderDescStore helper object
    that contains the a multi field of ShaderDesc instances.
*/

/*! \var ShaderProgramManager * ShaderManagerBase::_sfProgramManager
    The ShaderProgramManager is responsible for providing the
    actual ShaderProgram instance for each ShaderDesc entry from
    the ShaderDescStore object provided from a ShaderCodeGenerator.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ShaderManager *, nsOSG>::_type(
    "ShaderManagerPtr", 
    "FieldContainerPtr", 
    ShaderManager::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ShaderManager *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ShaderManager *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ShaderManager *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ShaderManagerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecHashKeyToFieldContainerMapPtr::Description(
        SFUnrecHashKeyToFieldContainerMapPtr::getClassType(),
        "programChunkMap",
        "The map of SHA1 hash to ShaderProgramChunk objects.\n"
        "The hash is calculated from the ShaderProgram objects\n"
        "within the chunk.\n",
        ProgramChunkMapFieldId, ProgramChunkMapFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderManager::editHandleProgramChunkMap),
        static_cast<FieldGetMethodSig >(&ShaderManager::getHandleProgramChunkMap));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecShaderCodeGeneratorPtr::Description(
        SFUnrecShaderCodeGeneratorPtr::getClassType(),
        "codeGenerator",
        "A ShaderCodeGenerator is responsible for providing the actual\n"
        "shader program texts for the different shader types.\n"
        "A ShaderCodeGenerator provides a ShaderDescStore helper object\n"
        "that contains the a multi field of ShaderDesc instances.\n",
        CodeGeneratorFieldId, CodeGeneratorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderManager::editHandleCodeGenerator),
        static_cast<FieldGetMethodSig >(&ShaderManager::getHandleCodeGenerator));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecShaderProgramManagerPtr::Description(
        SFUnrecShaderProgramManagerPtr::getClassType(),
        "programManager",
        "The ShaderProgramManager is responsible for providing the\n"
        "actual ShaderProgram instance for each ShaderDesc entry from\n"
        "the ShaderDescStore object provided from a ShaderCodeGenerator.\n",
        ProgramManagerFieldId, ProgramManagerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderManager::editHandleProgramManager),
        static_cast<FieldGetMethodSig >(&ShaderManager::getHandleProgramManager));

    oType.addInitialDesc(pDesc);
}


ShaderManagerBase::TypeObject ShaderManagerBase::_type(
    ShaderManagerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ShaderManagerBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ShaderManager::initMethod),
    reinterpret_cast<ExitContainerF>(&ShaderManager::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ShaderManager::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"ShaderManager\"\n"
    "    parent=\"FieldContainer\"\n"
    "    library=\"ContribTechniques\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    >\n"
    "    The shader manager is part of a material factory object.\n"
    "    It allows the sharing of ShaderProgramChunk objects.\n"
    "    It assembles the ShaderProgramChunks from ShaderProgram\n"
    "    objcets that it gets from the embedded ShaderProgramManager\n"
    "    instance. A ShaderProgramChunk is identified by a SHA1\n"
    "    hash calculated from the hash values of the ShaderPrograms\n"
    "    that are contained in the ShaderProgramChunk.\n"
    "\n"
    "    <Field\n"
    "        name=\"programChunkMap\"\n"
    "        type=\"HashKeyToFieldContainerMap\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "        category=\"pointer\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "        The map of SHA1 hash to ShaderProgramChunk objects.\n"
    "        The hash is calculated from the ShaderProgram objects\n"
    "        within the chunk.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"codeGenerator\"\n"
    "        type=\"ShaderCodeGenerator\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        category=\"pointer\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "        A ShaderCodeGenerator is responsible for providing the actual\n"
    "        shader program texts for the different shader types.\n"
    "        A ShaderCodeGenerator provides a ShaderDescStore helper object\n"
    "        that contains the a multi field of ShaderDesc instances.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"programManager\"\n"
    "        type=\"ShaderProgramManager\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        category=\"pointer\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "        The ShaderProgramManager is responsible for providing the\n"
    "        actual ShaderProgram instance for each ShaderDesc entry from\n"
    "        the ShaderDescStore object provided from a ShaderCodeGenerator.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "The shader manager is part of a material factory object.\n"
    "It allows the sharing of ShaderProgramChunk objects.\n"
    "It assembles the ShaderProgramChunks from ShaderProgram\n"
    "objcets that it gets from the embedded ShaderProgramManager\n"
    "instance. A ShaderProgramChunk is identified by a SHA1\n"
    "hash calculated from the hash values of the ShaderPrograms\n"
    "that are contained in the ShaderProgramChunk.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShaderManagerBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShaderManagerBase::getType(void) const
{
    return _type;
}

UInt32 ShaderManagerBase::getContainerSize(void) const
{
    return sizeof(ShaderManager);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ShaderManager::_sfProgramChunkMap field.
const SFUnrecHashKeyToFieldContainerMapPtr *ShaderManagerBase::getSFProgramChunkMap(void) const
{
    return &_sfProgramChunkMap;
}

SFUnrecHashKeyToFieldContainerMapPtr *ShaderManagerBase::editSFProgramChunkMap(void)
{
    editSField(ProgramChunkMapFieldMask);

    return &_sfProgramChunkMap;
}

//! Get the value of the ShaderManager::_sfProgramChunkMap field.
HashKeyToFieldContainerMap * ShaderManagerBase::getProgramChunkMap(void) const
{
    return _sfProgramChunkMap.getValue();
}

//! Set the value of the ShaderManager::_sfProgramChunkMap field.
void ShaderManagerBase::setProgramChunkMap(HashKeyToFieldContainerMap * const value)
{
    editSField(ProgramChunkMapFieldMask);

    _sfProgramChunkMap.setValue(value);
}


//! Get the ShaderManager::_sfCodeGenerator field.
const SFUnrecShaderCodeGeneratorPtr *ShaderManagerBase::getSFCodeGenerator(void) const
{
    return &_sfCodeGenerator;
}

SFUnrecShaderCodeGeneratorPtr *ShaderManagerBase::editSFCodeGenerator  (void)
{
    editSField(CodeGeneratorFieldMask);

    return &_sfCodeGenerator;
}

//! Get the value of the ShaderManager::_sfCodeGenerator field.
ShaderCodeGenerator * ShaderManagerBase::getCodeGenerator(void) const
{
    return _sfCodeGenerator.getValue();
}

//! Set the value of the ShaderManager::_sfCodeGenerator field.
void ShaderManagerBase::setCodeGenerator(ShaderCodeGenerator * const value)
{
    editSField(CodeGeneratorFieldMask);

    _sfCodeGenerator.setValue(value);
}


//! Get the ShaderManager::_sfProgramManager field.
const SFUnrecShaderProgramManagerPtr *ShaderManagerBase::getSFProgramManager(void) const
{
    return &_sfProgramManager;
}

SFUnrecShaderProgramManagerPtr *ShaderManagerBase::editSFProgramManager (void)
{
    editSField(ProgramManagerFieldMask);

    return &_sfProgramManager;
}

//! Get the value of the ShaderManager::_sfProgramManager field.
ShaderProgramManager * ShaderManagerBase::getProgramManager(void) const
{
    return _sfProgramManager.getValue();
}

//! Set the value of the ShaderManager::_sfProgramManager field.
void ShaderManagerBase::setProgramManager(ShaderProgramManager * const value)
{
    editSField(ProgramManagerFieldMask);

    _sfProgramManager.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT ShaderManagerBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ProgramChunkMapFieldMask & whichField))
    {
        returnValue += _sfProgramChunkMap.getBinSize();
    }
    if(FieldBits::NoField != (CodeGeneratorFieldMask & whichField))
    {
        returnValue += _sfCodeGenerator.getBinSize();
    }
    if(FieldBits::NoField != (ProgramManagerFieldMask & whichField))
    {
        returnValue += _sfProgramManager.getBinSize();
    }

    return returnValue;
}

void ShaderManagerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ProgramChunkMapFieldMask & whichField))
    {
        _sfProgramChunkMap.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CodeGeneratorFieldMask & whichField))
    {
        _sfCodeGenerator.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ProgramManagerFieldMask & whichField))
    {
        _sfProgramManager.copyToBin(pMem);
    }
}

void ShaderManagerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ProgramChunkMapFieldMask & whichField))
    {
        editSField(ProgramChunkMapFieldMask);
        _sfProgramChunkMap.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CodeGeneratorFieldMask & whichField))
    {
        editSField(CodeGeneratorFieldMask);
        _sfCodeGenerator.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ProgramManagerFieldMask & whichField))
    {
        editSField(ProgramManagerFieldMask);
        _sfProgramManager.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ShaderManagerTransitPtr ShaderManagerBase::createLocal(BitVector bFlags)
{
    ShaderManagerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ShaderManager>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ShaderManagerTransitPtr ShaderManagerBase::createDependent(BitVector bFlags)
{
    ShaderManagerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ShaderManager>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ShaderManagerTransitPtr ShaderManagerBase::create(void)
{
    ShaderManagerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ShaderManager>(tmpPtr);
    }

    return fc;
}

ShaderManager *ShaderManagerBase::createEmptyLocal(BitVector bFlags)
{
    ShaderManager *returnValue;

    newPtr<ShaderManager>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ShaderManager *ShaderManagerBase::createEmpty(void)
{
    ShaderManager *returnValue;

    newPtr<ShaderManager>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ShaderManagerBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ShaderManager *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderManager *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderManagerBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ShaderManager *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderManager *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderManagerBase::shallowCopy(void) const
{
    ShaderManager *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ShaderManager *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ShaderManagerBase::ShaderManagerBase(void) :
    Inherited(),
    _sfProgramChunkMap        (NULL),
    _sfCodeGenerator          (NULL),
    _sfProgramManager         (NULL)
{
}

ShaderManagerBase::ShaderManagerBase(const ShaderManagerBase &source) :
    Inherited(source),
    _sfProgramChunkMap        (NULL),
    _sfCodeGenerator          (NULL),
    _sfProgramManager         (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

ShaderManagerBase::~ShaderManagerBase(void)
{
}

void ShaderManagerBase::onCreate(const ShaderManager *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ShaderManager *pThis = static_cast<ShaderManager *>(this);

        pThis->setProgramChunkMap(source->getProgramChunkMap());

        pThis->setCodeGenerator(source->getCodeGenerator());

        pThis->setProgramManager(source->getProgramManager());
    }
}

GetFieldHandlePtr ShaderManagerBase::getHandleProgramChunkMap (void) const
{
    SFUnrecHashKeyToFieldContainerMapPtr::GetHandlePtr returnValue(
        new  SFUnrecHashKeyToFieldContainerMapPtr::GetHandle(
             &_sfProgramChunkMap,
             this->getType().getFieldDesc(ProgramChunkMapFieldId),
             const_cast<ShaderManagerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderManagerBase::editHandleProgramChunkMap(void)
{
    SFUnrecHashKeyToFieldContainerMapPtr::EditHandlePtr returnValue(
        new  SFUnrecHashKeyToFieldContainerMapPtr::EditHandle(
             &_sfProgramChunkMap,
             this->getType().getFieldDesc(ProgramChunkMapFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ShaderManager::setProgramChunkMap,
                    static_cast<ShaderManager *>(this), ::boost::placeholders::_1));

    editSField(ProgramChunkMapFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderManagerBase::getHandleCodeGenerator   (void) const
{
    SFUnrecShaderCodeGeneratorPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderCodeGeneratorPtr::GetHandle(
             &_sfCodeGenerator,
             this->getType().getFieldDesc(CodeGeneratorFieldId),
             const_cast<ShaderManagerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderManagerBase::editHandleCodeGenerator  (void)
{
    SFUnrecShaderCodeGeneratorPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderCodeGeneratorPtr::EditHandle(
             &_sfCodeGenerator,
             this->getType().getFieldDesc(CodeGeneratorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ShaderManager::setCodeGenerator,
                    static_cast<ShaderManager *>(this), ::boost::placeholders::_1));

    editSField(CodeGeneratorFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderManagerBase::getHandleProgramManager  (void) const
{
    SFUnrecShaderProgramManagerPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderProgramManagerPtr::GetHandle(
             &_sfProgramManager,
             this->getType().getFieldDesc(ProgramManagerFieldId),
             const_cast<ShaderManagerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderManagerBase::editHandleProgramManager (void)
{
    SFUnrecShaderProgramManagerPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderProgramManagerPtr::EditHandle(
             &_sfProgramManager,
             this->getType().getFieldDesc(ProgramManagerFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ShaderManager::setProgramManager,
                    static_cast<ShaderManager *>(this), ::boost::placeholders::_1));

    editSField(ProgramManagerFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ShaderManagerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShaderManager *pThis = static_cast<ShaderManager *>(this);

    pThis->execSync(static_cast<ShaderManager *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ShaderManagerBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ShaderManager *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ShaderManager *>(pRefAspect),
                  dynamic_cast<const ShaderManager *>(this));

    return returnValue;
}
#endif

void ShaderManagerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ShaderManager *>(this)->setProgramChunkMap(NULL);

    static_cast<ShaderManager *>(this)->setCodeGenerator(NULL);

    static_cast<ShaderManager *>(this)->setProgramManager(NULL);


}


OSG_END_NAMESPACE
