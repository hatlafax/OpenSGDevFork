/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderDescStore!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGShaderDesc.h"              // Store Class

#include "OSGShaderDescStoreBase.h"
#include "OSGShaderDescStore.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShaderDescStore
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ShaderDesc *    ShaderDescStoreBase::_mfStore
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ShaderDescStore *, nsOSG>::_type(
    "ShaderDescStorePtr", 
    "FieldContainerPtr", 
    ShaderDescStore::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ShaderDescStore *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ShaderDescStore *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ShaderDescStore *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ShaderDescStoreBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecShaderDescPtr::Description(
        MFUnrecShaderDescPtr::getClassType(),
        "store",
        "",
        StoreFieldId, StoreFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderDescStore::editHandleStore),
        static_cast<FieldGetMethodSig >(&ShaderDescStore::getHandleStore));

    oType.addInitialDesc(pDesc);
}


ShaderDescStoreBase::TypeObject ShaderDescStoreBase::_type(
    ShaderDescStoreBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ShaderDescStoreBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ShaderDescStore::initMethod),
    reinterpret_cast<ExitContainerF>(&ShaderDescStore::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ShaderDescStore::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"ShaderDescStore\"\n"
    "    parent=\"FieldContainer\"\n"
    "    library=\"ContribTechniques\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    >\n"
    "   <Field\n"
    "\t name=\"store\"\n"
    "\t type=\"ShaderDescPtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"internal\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShaderDescStoreBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShaderDescStoreBase::getType(void) const
{
    return _type;
}

UInt32 ShaderDescStoreBase::getContainerSize(void) const
{
    return sizeof(ShaderDescStore);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ShaderDescStore::_mfStore field.
const MFUnrecShaderDescPtr *ShaderDescStoreBase::getMFStore(void) const
{
    return &_mfStore;
}

MFUnrecShaderDescPtr *ShaderDescStoreBase::editMFStore          (void)
{
    editMField(StoreFieldMask, _mfStore);

    return &_mfStore;
}
ShaderDesc * ShaderDescStoreBase::getStore(const UInt32 index) const
{
    return _mfStore[index];
}



void ShaderDescStoreBase::pushToStore(ShaderDesc * const value)
{
    editMField(StoreFieldMask, _mfStore);

    _mfStore.push_back(value);
}

void ShaderDescStoreBase::assignStore    (const MFUnrecShaderDescPtr &value)
{
    MFUnrecShaderDescPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecShaderDescPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<ShaderDescStore *>(this)->clearStore();

    while(elemIt != elemEnd)
    {
        this->pushToStore(*elemIt);

        ++elemIt;
    }
}

void ShaderDescStoreBase::removeFromStore(UInt32 uiIndex)
{
    if(uiIndex < _mfStore.size())
    {
        editMField(StoreFieldMask, _mfStore);

        _mfStore.erase(uiIndex);
    }
}

void ShaderDescStoreBase::removeObjFromStore(ShaderDesc * const value)
{
    Int32 iElemIdx = _mfStore.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(StoreFieldMask, _mfStore);

        _mfStore.erase(iElemIdx);
    }
}
void ShaderDescStoreBase::clearStore(void)
{
    editMField(StoreFieldMask, _mfStore);


    _mfStore.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT ShaderDescStoreBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (StoreFieldMask & whichField))
    {
        returnValue += _mfStore.getBinSize();
    }

    return returnValue;
}

void ShaderDescStoreBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (StoreFieldMask & whichField))
    {
        _mfStore.copyToBin(pMem);
    }
}

void ShaderDescStoreBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (StoreFieldMask & whichField))
    {
        editMField(StoreFieldMask, _mfStore);
        _mfStore.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ShaderDescStoreTransitPtr ShaderDescStoreBase::createLocal(BitVector bFlags)
{
    ShaderDescStoreTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ShaderDescStore>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ShaderDescStoreTransitPtr ShaderDescStoreBase::createDependent(BitVector bFlags)
{
    ShaderDescStoreTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ShaderDescStore>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ShaderDescStoreTransitPtr ShaderDescStoreBase::create(void)
{
    ShaderDescStoreTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ShaderDescStore>(tmpPtr);
    }

    return fc;
}

ShaderDescStore *ShaderDescStoreBase::createEmptyLocal(BitVector bFlags)
{
    ShaderDescStore *returnValue;

    newPtr<ShaderDescStore>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ShaderDescStore *ShaderDescStoreBase::createEmpty(void)
{
    ShaderDescStore *returnValue;

    newPtr<ShaderDescStore>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ShaderDescStoreBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ShaderDescStore *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderDescStore *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderDescStoreBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ShaderDescStore *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderDescStore *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderDescStoreBase::shallowCopy(void) const
{
    ShaderDescStore *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ShaderDescStore *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ShaderDescStoreBase::ShaderDescStoreBase(void) :
    Inherited(),
    _mfStore                  ()
{
}

ShaderDescStoreBase::ShaderDescStoreBase(const ShaderDescStoreBase &source) :
    Inherited(source),
    _mfStore                  ()
{
}


/*-------------------------- destructors ----------------------------------*/

ShaderDescStoreBase::~ShaderDescStoreBase(void)
{
}

void ShaderDescStoreBase::onCreate(const ShaderDescStore *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ShaderDescStore *pThis = static_cast<ShaderDescStore *>(this);

        MFUnrecShaderDescPtr::const_iterator StoreIt  =
            source->_mfStore.begin();
        MFUnrecShaderDescPtr::const_iterator StoreEnd =
            source->_mfStore.end  ();

        while(StoreIt != StoreEnd)
        {
            pThis->pushToStore(*StoreIt);

            ++StoreIt;
        }
    }
}

GetFieldHandlePtr ShaderDescStoreBase::getHandleStore           (void) const
{
    MFUnrecShaderDescPtr::GetHandlePtr returnValue(
        new  MFUnrecShaderDescPtr::GetHandle(
             &_mfStore,
             this->getType().getFieldDesc(StoreFieldId),
             const_cast<ShaderDescStoreBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderDescStoreBase::editHandleStore          (void)
{
    MFUnrecShaderDescPtr::EditHandlePtr returnValue(
        new  MFUnrecShaderDescPtr::EditHandle(
             &_mfStore,
             this->getType().getFieldDesc(StoreFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&ShaderDescStore::pushToStore,
                    static_cast<ShaderDescStore *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&ShaderDescStore::removeFromStore,
                    static_cast<ShaderDescStore *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&ShaderDescStore::removeObjFromStore,
                    static_cast<ShaderDescStore *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&ShaderDescStore::clearStore,
                    static_cast<ShaderDescStore *>(this)));

    editMField(StoreFieldMask, _mfStore);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ShaderDescStoreBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShaderDescStore *pThis = static_cast<ShaderDescStore *>(this);

    pThis->execSync(static_cast<ShaderDescStore *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ShaderDescStoreBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ShaderDescStore *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ShaderDescStore *>(pRefAspect),
                  dynamic_cast<const ShaderDescStore *>(this));

    return returnValue;
}
#endif

void ShaderDescStoreBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ShaderDescStore *>(this)->clearStore();


}


OSG_END_NAMESPACE
