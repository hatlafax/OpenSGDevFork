/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ClusterShadingStageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGUniformBufferObjStd140Chunk.h" // FrustDispDatUBOChunk Class
#include "OSGShaderStorageBufferObjStdLayoutChunk.h" // CullLightIndexCounterSSBOChunk Class
#include "OSGChunkMaterial.h"           // FrustChunkMat Class
#include "OSGImage.h"                   // LightGridImage Class
#include "OSGTextureObjChunk.h"         // LightGridTexObjChunk Class
#include "OSGTextureImageChunk.h"       // LightGridTexImgChunkCS Class

#include "OSGClusterShadingStageDataBase.h"
#include "OSGClusterShadingStageData.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ClusterShadingStageData
    View dependent Data used by the ClusterShadingStage.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UniformBufferObjStd140Chunk * ClusterShadingStageDataBase::_sfFrustDispDatUBOChunk
    This represents a lightweight data struct used by the calc frustums computation shader.
*/

/*! \var UniformBufferObjStd140Chunk * ClusterShadingStageDataBase::_sfCullDispDatUBOChunk
    This represents a lightweight data struct used by the cull lights computation shader.
*/

/*! \var UniformBufferObjStd140Chunk * ClusterShadingStageDataBase::_sfCullClusterDatUBOChunk
    Cluster data are used for calculation of the cluster keys respectively cluster z-Values.
    This UBO is needed in the shading material fragment shader. 
*/

/*! \var ShaderStorageBufferObjStdLayoutChunk * ClusterShadingStageDataBase::_sfCullLightIndexCounterSSBOChunk
    This is a helper SSBO that contains a global counter used for the light culling shader.
*/

/*! \var ShaderStorageBufferObjStdLayoutChunk * ClusterShadingStageDataBase::_sfFrustumsSSBOChunk
    The frustums of the current view frustum.
*/

/*! \var ShaderStorageBufferObjStdLayoutChunk * ClusterShadingStageDataBase::_sfAffectedLightIndexListSSBOChunk
    The light index list affecting the view frustum. I.e. this index list is the
    result of a pre light culling process before any cluster shading happens.
    This SSBO is needed in the shading material fragment shader. 
*/

/*! \var ShaderStorageBufferObjStdLayoutChunk * ClusterShadingStageDataBase::_sfLightIndexListSSBOChunk
    The global light index list, containing the result of the cluster shading calculations.
    This SSBO is needed in the shading material fragment shader. 
*/

/*! \var ChunkMaterial * ClusterShadingStageDataBase::_sfFrustChunkMat
    The material used for the GPU frustums calculations.
*/

/*! \var ChunkMaterial * ClusterShadingStageDataBase::_sfCullChunkMat
    The material used for the GPU light culling process.
*/

/*! \var Image *         ClusterShadingStageDataBase::_sfLightGridImage
    The underlying image of the light grid.
*/

/*! \var TextureObjChunk * ClusterShadingStageDataBase::_sfLightGridTexObjChunk
    The texture object taking the underlying image of the light grid.
*/

/*! \var TextureImageChunk * ClusterShadingStageDataBase::_sfLightGridTexImgChunkCS
    The write only texture image chunk that is used in the light culling compute shader.
*/

/*! \var TextureImageChunk * ClusterShadingStageDataBase::_sfLightGridTexImgChunkFS
    The read only texture image chunk that is used in the fragment shader.
*/

/*! \var Matrix          ClusterShadingStageDataBase::_mfFrustumPlanesNormals
    The four tile frustum planes normal vectors.
*/

/*! \var Vec4f           ClusterShadingStageDataBase::_mfFrustumPlanesDistances
    The four tile frustum planes distances from the origin.
*/

/*! \var Int32           ClusterShadingStageDataBase::_sfLeft
    
*/

/*! \var Int32           ClusterShadingStageDataBase::_sfBottom
    
*/

/*! \var Int32           ClusterShadingStageDataBase::_sfWidth
    
*/

/*! \var Int32           ClusterShadingStageDataBase::_sfHeight
    
*/

/*! \var bool            ClusterShadingStageDataBase::_sfIsOrthographicCamera
    This flag tracks whether we have an orthographic or perspective camera setup.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ClusterShadingStageData *, nsOSG>::_type(
    "ClusterShadingStageDataPtr", 
    "StageDataPtr", 
    ClusterShadingStageData::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ClusterShadingStageData *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ClusterShadingStageDataBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecUniformBufferObjStd140ChunkPtr::Description(
        SFUnrecUniformBufferObjStd140ChunkPtr::getClassType(),
        "frustDispDatUBOChunk",
        "This represents a lightweight data struct used by the calc frustums computation shader.\n",
        FrustDispDatUBOChunkFieldId, FrustDispDatUBOChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleFrustDispDatUBOChunk),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleFrustDispDatUBOChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUniformBufferObjStd140ChunkPtr::Description(
        SFUnrecUniformBufferObjStd140ChunkPtr::getClassType(),
        "cullDispDatUBOChunk",
        "This represents a lightweight data struct used by the cull lights computation shader.\n",
        CullDispDatUBOChunkFieldId, CullDispDatUBOChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleCullDispDatUBOChunk),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleCullDispDatUBOChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUniformBufferObjStd140ChunkPtr::Description(
        SFUnrecUniformBufferObjStd140ChunkPtr::getClassType(),
        "cullClusterDatUBOChunk",
        "Cluster data are used for calculation of the cluster keys respectively cluster z-Values.\n"
        "This UBO is needed in the shading material fragment shader. \n",
        CullClusterDatUBOChunkFieldId, CullClusterDatUBOChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleCullClusterDatUBOChunk),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleCullClusterDatUBOChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::Description(
        SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::getClassType(),
        "cullLightIndexCounterSSBOChunk",
        "This is a helper SSBO that contains a global counter used for the light culling shader.\n",
        CullLightIndexCounterSSBOChunkFieldId, CullLightIndexCounterSSBOChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleCullLightIndexCounterSSBOChunk),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleCullLightIndexCounterSSBOChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::Description(
        SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::getClassType(),
        "frustumsSSBOChunk",
        "The frustums of the current view frustum.\n",
        FrustumsSSBOChunkFieldId, FrustumsSSBOChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleFrustumsSSBOChunk),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleFrustumsSSBOChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::Description(
        SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::getClassType(),
        "affectedLightIndexListSSBOChunk",
        "The light index list affecting the view frustum. I.e. this index list is the\n"
        "result of a pre light culling process before any cluster shading happens.\n"
        "This SSBO is needed in the shading material fragment shader. \n",
        AffectedLightIndexListSSBOChunkFieldId, AffectedLightIndexListSSBOChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleAffectedLightIndexListSSBOChunk),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleAffectedLightIndexListSSBOChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::Description(
        SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::getClassType(),
        "lightIndexListSSBOChunk",
        "The global light index list, containing the result of the cluster shading calculations.\n"
        "This SSBO is needed in the shading material fragment shader. \n",
        LightIndexListSSBOChunkFieldId, LightIndexListSSBOChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleLightIndexListSSBOChunk),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleLightIndexListSSBOChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "frustChunkMat",
        "The material used for the GPU frustums calculations.\n",
        FrustChunkMatFieldId, FrustChunkMatFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleFrustChunkMat),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleFrustChunkMat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "cullChunkMat",
        "The material used for the GPU light culling process.\n",
        CullChunkMatFieldId, CullChunkMatFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleCullChunkMat),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleCullChunkMat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecImagePtr::Description(
        SFUnrecImagePtr::getClassType(),
        "lightGridImage",
        "The underlying image of the light grid.\n",
        LightGridImageFieldId, LightGridImageFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleLightGridImage),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleLightGridImage));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "lightGridTexObjChunk",
        "The texture object taking the underlying image of the light grid.\n",
        LightGridTexObjChunkFieldId, LightGridTexObjChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleLightGridTexObjChunk),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleLightGridTexObjChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureImageChunkPtr::Description(
        SFUnrecTextureImageChunkPtr::getClassType(),
        "lightGridTexImgChunkCS",
        "The write only texture image chunk that is used in the light culling compute shader.\n",
        LightGridTexImgChunkCSFieldId, LightGridTexImgChunkCSFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleLightGridTexImgChunkCS),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleLightGridTexImgChunkCS));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureImageChunkPtr::Description(
        SFUnrecTextureImageChunkPtr::getClassType(),
        "lightGridTexImgChunkFS",
        "The read only texture image chunk that is used in the fragment shader.\n",
        LightGridTexImgChunkFSFieldId, LightGridTexImgChunkFSFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleLightGridTexImgChunkFS),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleLightGridTexImgChunkFS));

    oType.addInitialDesc(pDesc);

    pDesc = new MFMatrix::Description(
        MFMatrix::getClassType(),
        "frustumPlanesNormals",
        "The four tile frustum planes normal vectors.\n",
        FrustumPlanesNormalsFieldId, FrustumPlanesNormalsFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleFrustumPlanesNormals),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleFrustumPlanesNormals));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec4f::Description(
        MFVec4f::getClassType(),
        "frustumPlanesDistances",
        "The four tile frustum planes distances from the origin.\n",
        FrustumPlanesDistancesFieldId, FrustumPlanesDistancesFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleFrustumPlanesDistances),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleFrustumPlanesDistances));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "left",
        "",
        LeftFieldId, LeftFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleLeft),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleLeft));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "bottom",
        "",
        BottomFieldId, BottomFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleBottom),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleBottom));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "width",
        "",
        WidthFieldId, WidthFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleWidth),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "height",
        "",
        HeightFieldId, HeightFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleHeight),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleHeight));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "isOrthographicCamera",
        "This flag tracks whether we have an orthographic or perspective camera setup.\n",
        IsOrthographicCameraFieldId, IsOrthographicCameraFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStageData::editHandleIsOrthographicCamera),
        static_cast<FieldGetMethodSig >(&ClusterShadingStageData::getHandleIsOrthographicCamera));

    oType.addInitialDesc(pDesc);
}


ClusterShadingStageDataBase::TypeObject ClusterShadingStageDataBase::_type(
    ClusterShadingStageDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ClusterShadingStageDataBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ClusterShadingStageData::initMethod),
    reinterpret_cast<ExitContainerF>(&ClusterShadingStageData::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ClusterShadingStageData::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"ClusterShadingStageData\"\n"
    "   parent=\"StageData\"\n"
    "   library=\"ContribTechniques\"\n"
    "   pointerfieldtypes=\"none\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   isNodeCore=\"false\"\n"
    "   >\n"
    "\n"
    "    View dependent Data used by the ClusterShadingStage.\n"
    "\n"
    "    <Field\n"
    "    name=\"frustDispDatUBOChunk\"\n"
    "    type=\"UniformBufferObjStd140ChunkPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        This represents a lightweight data struct used by the calc frustums computation shader.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"cullDispDatUBOChunk\"\n"
    "    type=\"UniformBufferObjStd140ChunkPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        This represents a lightweight data struct used by the cull lights computation shader.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"cullClusterDatUBOChunk\"\n"
    "    type=\"UniformBufferObjStd140ChunkPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        Cluster data are used for calculation of the cluster keys respectively cluster z-Values.\n"
    "        This UBO is needed in the shading material fragment shader. \n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"cullLightIndexCounterSSBOChunk\"\n"
    "    type=\"ShaderStorageBufferObjStdLayoutChunkPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        This is a helper SSBO that contains a global counter used for the light culling shader.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"frustumsSSBOChunk\"\n"
    "    type=\"ShaderStorageBufferObjStdLayoutChunkPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        The frustums of the current view frustum.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"affectedLightIndexListSSBOChunk\"\n"
    "    type=\"ShaderStorageBufferObjStdLayoutChunkPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        The light index list affecting the view frustum. I.e. this index list is the\n"
    "        result of a pre light culling process before any cluster shading happens.\n"
    "        This SSBO is needed in the shading material fragment shader. \n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"lightIndexListSSBOChunk\"\n"
    "    type=\"ShaderStorageBufferObjStdLayoutChunkPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        The global light index list, containing the result of the cluster shading calculations.\n"
    "        This SSBO is needed in the shading material fragment shader. \n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"frustChunkMat\"\n"
    "    type=\"ChunkMaterialPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        The material used for the GPU frustums calculations.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"cullChunkMat\"\n"
    "    type=\"ChunkMaterialPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        The material used for the GPU light culling process.\n"
    "    </Field>\n"
    "    \n"
    "    <Field\n"
    "    name=\"lightGridImage\"\n"
    "    type=\"ImagePtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        The underlying image of the light grid.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"lightGridTexObjChunk\"\n"
    "    type=\"TextureObjChunkPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        The texture object taking the underlying image of the light grid.\n"
    "    </Field>\n"
    "\n"
    "     <Field\n"
    "    name=\"lightGridTexImgChunkCS\"\n"
    "    type=\"TextureImageChunkPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        The write only texture image chunk that is used in the light culling compute shader.\n"
    "    </Field>\n"
    "\n"
    "     <Field\n"
    "    name=\"lightGridTexImgChunkFS\"\n"
    "    type=\"TextureImageChunkPtr\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"NULL\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        The read only texture image chunk that is used in the fragment shader.\n"
    "    </Field>\n"
    "\n"
    "  <Field\n"
    "     name=\"frustumPlanesNormals\"\n"
    "     type=\"Matrix\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"internal\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    The four tile frustum planes normal vectors.\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "     name=\"frustumPlanesDistances\"\n"
    "     type=\"Vec4f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"internal\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    The four tile frustum planes distances from the origin.\n"
    "  </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"left\"\n"
    "    type=\"Int32\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"0\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"bottom\"\n"
    "    type=\"Int32\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"0\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"width\"\n"
    "    type=\"Int32\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"0\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"height\"\n"
    "    type=\"Int32\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"0\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "    name=\"isOrthographicCamera\"\n"
    "    type=\"bool\"\n"
    "    cardinality=\"single\"\n"
    "    visibility=\"internal\"\n"
    "    defaultValue=\"false\"\n"
    "    access=\"public\"\n"
    "    >\n"
    "        This flag tracks whether we have an orthographic or perspective camera setup.\n"
    "    </Field>\n"
    "\n"
    "  </FieldContainer>\n",
    "View dependent Data used by the ClusterShadingStage.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ClusterShadingStageDataBase::getType(void)
{
    return _type;
}

const FieldContainerType &ClusterShadingStageDataBase::getType(void) const
{
    return _type;
}

UInt32 ClusterShadingStageDataBase::getContainerSize(void) const
{
    return sizeof(ClusterShadingStageData);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ClusterShadingStageData::_sfFrustDispDatUBOChunk field.
const SFUnrecUniformBufferObjStd140ChunkPtr *ClusterShadingStageDataBase::getSFFrustDispDatUBOChunk(void) const
{
    return &_sfFrustDispDatUBOChunk;
}

SFUnrecUniformBufferObjStd140ChunkPtr *ClusterShadingStageDataBase::editSFFrustDispDatUBOChunk(void)
{
    editSField(FrustDispDatUBOChunkFieldMask);

    return &_sfFrustDispDatUBOChunk;
}

//! Get the value of the ClusterShadingStageData::_sfFrustDispDatUBOChunk field.
UniformBufferObjStd140Chunk * ClusterShadingStageDataBase::getFrustDispDatUBOChunk(void) const
{
    return _sfFrustDispDatUBOChunk.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfFrustDispDatUBOChunk field.
void ClusterShadingStageDataBase::setFrustDispDatUBOChunk(UniformBufferObjStd140Chunk * const value)
{
    editSField(FrustDispDatUBOChunkFieldMask);

    _sfFrustDispDatUBOChunk.setValue(value);
}


//! Get the ClusterShadingStageData::_sfCullDispDatUBOChunk field.
const SFUnrecUniformBufferObjStd140ChunkPtr *ClusterShadingStageDataBase::getSFCullDispDatUBOChunk(void) const
{
    return &_sfCullDispDatUBOChunk;
}

SFUnrecUniformBufferObjStd140ChunkPtr *ClusterShadingStageDataBase::editSFCullDispDatUBOChunk(void)
{
    editSField(CullDispDatUBOChunkFieldMask);

    return &_sfCullDispDatUBOChunk;
}

//! Get the value of the ClusterShadingStageData::_sfCullDispDatUBOChunk field.
UniformBufferObjStd140Chunk * ClusterShadingStageDataBase::getCullDispDatUBOChunk(void) const
{
    return _sfCullDispDatUBOChunk.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfCullDispDatUBOChunk field.
void ClusterShadingStageDataBase::setCullDispDatUBOChunk(UniformBufferObjStd140Chunk * const value)
{
    editSField(CullDispDatUBOChunkFieldMask);

    _sfCullDispDatUBOChunk.setValue(value);
}


//! Get the ClusterShadingStageData::_sfCullClusterDatUBOChunk field.
const SFUnrecUniformBufferObjStd140ChunkPtr *ClusterShadingStageDataBase::getSFCullClusterDatUBOChunk(void) const
{
    return &_sfCullClusterDatUBOChunk;
}

SFUnrecUniformBufferObjStd140ChunkPtr *ClusterShadingStageDataBase::editSFCullClusterDatUBOChunk(void)
{
    editSField(CullClusterDatUBOChunkFieldMask);

    return &_sfCullClusterDatUBOChunk;
}

//! Get the value of the ClusterShadingStageData::_sfCullClusterDatUBOChunk field.
UniformBufferObjStd140Chunk * ClusterShadingStageDataBase::getCullClusterDatUBOChunk(void) const
{
    return _sfCullClusterDatUBOChunk.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfCullClusterDatUBOChunk field.
void ClusterShadingStageDataBase::setCullClusterDatUBOChunk(UniformBufferObjStd140Chunk * const value)
{
    editSField(CullClusterDatUBOChunkFieldMask);

    _sfCullClusterDatUBOChunk.setValue(value);
}


//! Get the ClusterShadingStageData::_sfCullLightIndexCounterSSBOChunk field.
const SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *ClusterShadingStageDataBase::getSFCullLightIndexCounterSSBOChunk(void) const
{
    return &_sfCullLightIndexCounterSSBOChunk;
}

SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *ClusterShadingStageDataBase::editSFCullLightIndexCounterSSBOChunk(void)
{
    editSField(CullLightIndexCounterSSBOChunkFieldMask);

    return &_sfCullLightIndexCounterSSBOChunk;
}

//! Get the value of the ClusterShadingStageData::_sfCullLightIndexCounterSSBOChunk field.
ShaderStorageBufferObjStdLayoutChunk * ClusterShadingStageDataBase::getCullLightIndexCounterSSBOChunk(void) const
{
    return _sfCullLightIndexCounterSSBOChunk.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfCullLightIndexCounterSSBOChunk field.
void ClusterShadingStageDataBase::setCullLightIndexCounterSSBOChunk(ShaderStorageBufferObjStdLayoutChunk * const value)
{
    editSField(CullLightIndexCounterSSBOChunkFieldMask);

    _sfCullLightIndexCounterSSBOChunk.setValue(value);
}


//! Get the ClusterShadingStageData::_sfFrustumsSSBOChunk field.
const SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *ClusterShadingStageDataBase::getSFFrustumsSSBOChunk(void) const
{
    return &_sfFrustumsSSBOChunk;
}

SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *ClusterShadingStageDataBase::editSFFrustumsSSBOChunk(void)
{
    editSField(FrustumsSSBOChunkFieldMask);

    return &_sfFrustumsSSBOChunk;
}

//! Get the value of the ClusterShadingStageData::_sfFrustumsSSBOChunk field.
ShaderStorageBufferObjStdLayoutChunk * ClusterShadingStageDataBase::getFrustumsSSBOChunk(void) const
{
    return _sfFrustumsSSBOChunk.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfFrustumsSSBOChunk field.
void ClusterShadingStageDataBase::setFrustumsSSBOChunk(ShaderStorageBufferObjStdLayoutChunk * const value)
{
    editSField(FrustumsSSBOChunkFieldMask);

    _sfFrustumsSSBOChunk.setValue(value);
}


//! Get the ClusterShadingStageData::_sfAffectedLightIndexListSSBOChunk field.
const SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *ClusterShadingStageDataBase::getSFAffectedLightIndexListSSBOChunk(void) const
{
    return &_sfAffectedLightIndexListSSBOChunk;
}

SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *ClusterShadingStageDataBase::editSFAffectedLightIndexListSSBOChunk(void)
{
    editSField(AffectedLightIndexListSSBOChunkFieldMask);

    return &_sfAffectedLightIndexListSSBOChunk;
}

//! Get the value of the ClusterShadingStageData::_sfAffectedLightIndexListSSBOChunk field.
ShaderStorageBufferObjStdLayoutChunk * ClusterShadingStageDataBase::getAffectedLightIndexListSSBOChunk(void) const
{
    return _sfAffectedLightIndexListSSBOChunk.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfAffectedLightIndexListSSBOChunk field.
void ClusterShadingStageDataBase::setAffectedLightIndexListSSBOChunk(ShaderStorageBufferObjStdLayoutChunk * const value)
{
    editSField(AffectedLightIndexListSSBOChunkFieldMask);

    _sfAffectedLightIndexListSSBOChunk.setValue(value);
}


//! Get the ClusterShadingStageData::_sfLightIndexListSSBOChunk field.
const SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *ClusterShadingStageDataBase::getSFLightIndexListSSBOChunk(void) const
{
    return &_sfLightIndexListSSBOChunk;
}

SFUnrecShaderStorageBufferObjStdLayoutChunkPtr *ClusterShadingStageDataBase::editSFLightIndexListSSBOChunk(void)
{
    editSField(LightIndexListSSBOChunkFieldMask);

    return &_sfLightIndexListSSBOChunk;
}

//! Get the value of the ClusterShadingStageData::_sfLightIndexListSSBOChunk field.
ShaderStorageBufferObjStdLayoutChunk * ClusterShadingStageDataBase::getLightIndexListSSBOChunk(void) const
{
    return _sfLightIndexListSSBOChunk.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfLightIndexListSSBOChunk field.
void ClusterShadingStageDataBase::setLightIndexListSSBOChunk(ShaderStorageBufferObjStdLayoutChunk * const value)
{
    editSField(LightIndexListSSBOChunkFieldMask);

    _sfLightIndexListSSBOChunk.setValue(value);
}


//! Get the ClusterShadingStageData::_sfFrustChunkMat field.
const SFUnrecChunkMaterialPtr *ClusterShadingStageDataBase::getSFFrustChunkMat(void) const
{
    return &_sfFrustChunkMat;
}

SFUnrecChunkMaterialPtr *ClusterShadingStageDataBase::editSFFrustChunkMat  (void)
{
    editSField(FrustChunkMatFieldMask);

    return &_sfFrustChunkMat;
}

//! Get the value of the ClusterShadingStageData::_sfFrustChunkMat field.
ChunkMaterial * ClusterShadingStageDataBase::getFrustChunkMat(void) const
{
    return _sfFrustChunkMat.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfFrustChunkMat field.
void ClusterShadingStageDataBase::setFrustChunkMat(ChunkMaterial * const value)
{
    editSField(FrustChunkMatFieldMask);

    _sfFrustChunkMat.setValue(value);
}


//! Get the ClusterShadingStageData::_sfCullChunkMat field.
const SFUnrecChunkMaterialPtr *ClusterShadingStageDataBase::getSFCullChunkMat(void) const
{
    return &_sfCullChunkMat;
}

SFUnrecChunkMaterialPtr *ClusterShadingStageDataBase::editSFCullChunkMat   (void)
{
    editSField(CullChunkMatFieldMask);

    return &_sfCullChunkMat;
}

//! Get the value of the ClusterShadingStageData::_sfCullChunkMat field.
ChunkMaterial * ClusterShadingStageDataBase::getCullChunkMat(void) const
{
    return _sfCullChunkMat.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfCullChunkMat field.
void ClusterShadingStageDataBase::setCullChunkMat(ChunkMaterial * const value)
{
    editSField(CullChunkMatFieldMask);

    _sfCullChunkMat.setValue(value);
}


//! Get the ClusterShadingStageData::_sfLightGridImage field.
const SFUnrecImagePtr *ClusterShadingStageDataBase::getSFLightGridImage(void) const
{
    return &_sfLightGridImage;
}

SFUnrecImagePtr     *ClusterShadingStageDataBase::editSFLightGridImage (void)
{
    editSField(LightGridImageFieldMask);

    return &_sfLightGridImage;
}

//! Get the value of the ClusterShadingStageData::_sfLightGridImage field.
Image * ClusterShadingStageDataBase::getLightGridImage(void) const
{
    return _sfLightGridImage.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfLightGridImage field.
void ClusterShadingStageDataBase::setLightGridImage(Image * const value)
{
    editSField(LightGridImageFieldMask);

    _sfLightGridImage.setValue(value);
}


//! Get the ClusterShadingStageData::_sfLightGridTexObjChunk field.
const SFUnrecTextureObjChunkPtr *ClusterShadingStageDataBase::getSFLightGridTexObjChunk(void) const
{
    return &_sfLightGridTexObjChunk;
}

SFUnrecTextureObjChunkPtr *ClusterShadingStageDataBase::editSFLightGridTexObjChunk(void)
{
    editSField(LightGridTexObjChunkFieldMask);

    return &_sfLightGridTexObjChunk;
}

//! Get the value of the ClusterShadingStageData::_sfLightGridTexObjChunk field.
TextureObjChunk * ClusterShadingStageDataBase::getLightGridTexObjChunk(void) const
{
    return _sfLightGridTexObjChunk.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfLightGridTexObjChunk field.
void ClusterShadingStageDataBase::setLightGridTexObjChunk(TextureObjChunk * const value)
{
    editSField(LightGridTexObjChunkFieldMask);

    _sfLightGridTexObjChunk.setValue(value);
}


//! Get the ClusterShadingStageData::_sfLightGridTexImgChunkCS field.
const SFUnrecTextureImageChunkPtr *ClusterShadingStageDataBase::getSFLightGridTexImgChunkCS(void) const
{
    return &_sfLightGridTexImgChunkCS;
}

SFUnrecTextureImageChunkPtr *ClusterShadingStageDataBase::editSFLightGridTexImgChunkCS(void)
{
    editSField(LightGridTexImgChunkCSFieldMask);

    return &_sfLightGridTexImgChunkCS;
}

//! Get the value of the ClusterShadingStageData::_sfLightGridTexImgChunkCS field.
TextureImageChunk * ClusterShadingStageDataBase::getLightGridTexImgChunkCS(void) const
{
    return _sfLightGridTexImgChunkCS.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfLightGridTexImgChunkCS field.
void ClusterShadingStageDataBase::setLightGridTexImgChunkCS(TextureImageChunk * const value)
{
    editSField(LightGridTexImgChunkCSFieldMask);

    _sfLightGridTexImgChunkCS.setValue(value);
}


//! Get the ClusterShadingStageData::_sfLightGridTexImgChunkFS field.
const SFUnrecTextureImageChunkPtr *ClusterShadingStageDataBase::getSFLightGridTexImgChunkFS(void) const
{
    return &_sfLightGridTexImgChunkFS;
}

SFUnrecTextureImageChunkPtr *ClusterShadingStageDataBase::editSFLightGridTexImgChunkFS(void)
{
    editSField(LightGridTexImgChunkFSFieldMask);

    return &_sfLightGridTexImgChunkFS;
}

//! Get the value of the ClusterShadingStageData::_sfLightGridTexImgChunkFS field.
TextureImageChunk * ClusterShadingStageDataBase::getLightGridTexImgChunkFS(void) const
{
    return _sfLightGridTexImgChunkFS.getValue();
}

//! Set the value of the ClusterShadingStageData::_sfLightGridTexImgChunkFS field.
void ClusterShadingStageDataBase::setLightGridTexImgChunkFS(TextureImageChunk * const value)
{
    editSField(LightGridTexImgChunkFSFieldMask);

    _sfLightGridTexImgChunkFS.setValue(value);
}


MFMatrix *ClusterShadingStageDataBase::editMFFrustumPlanesNormals(void)
{
    editMField(FrustumPlanesNormalsFieldMask, _mfFrustumPlanesNormals);

    return &_mfFrustumPlanesNormals;
}

const MFMatrix *ClusterShadingStageDataBase::getMFFrustumPlanesNormals(void) const
{
    return &_mfFrustumPlanesNormals;
}


MFVec4f *ClusterShadingStageDataBase::editMFFrustumPlanesDistances(void)
{
    editMField(FrustumPlanesDistancesFieldMask, _mfFrustumPlanesDistances);

    return &_mfFrustumPlanesDistances;
}

const MFVec4f *ClusterShadingStageDataBase::getMFFrustumPlanesDistances(void) const
{
    return &_mfFrustumPlanesDistances;
}


SFInt32 *ClusterShadingStageDataBase::editSFLeft(void)
{
    editSField(LeftFieldMask);

    return &_sfLeft;
}

const SFInt32 *ClusterShadingStageDataBase::getSFLeft(void) const
{
    return &_sfLeft;
}


SFInt32 *ClusterShadingStageDataBase::editSFBottom(void)
{
    editSField(BottomFieldMask);

    return &_sfBottom;
}

const SFInt32 *ClusterShadingStageDataBase::getSFBottom(void) const
{
    return &_sfBottom;
}


SFInt32 *ClusterShadingStageDataBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFInt32 *ClusterShadingStageDataBase::getSFWidth(void) const
{
    return &_sfWidth;
}


SFInt32 *ClusterShadingStageDataBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFInt32 *ClusterShadingStageDataBase::getSFHeight(void) const
{
    return &_sfHeight;
}


SFBool *ClusterShadingStageDataBase::editSFIsOrthographicCamera(void)
{
    editSField(IsOrthographicCameraFieldMask);

    return &_sfIsOrthographicCamera;
}

const SFBool *ClusterShadingStageDataBase::getSFIsOrthographicCamera(void) const
{
    return &_sfIsOrthographicCamera;
}






/*------------------------------ access -----------------------------------*/

SizeT ClusterShadingStageDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (FrustDispDatUBOChunkFieldMask & whichField))
    {
        returnValue += _sfFrustDispDatUBOChunk.getBinSize();
    }
    if(FieldBits::NoField != (CullDispDatUBOChunkFieldMask & whichField))
    {
        returnValue += _sfCullDispDatUBOChunk.getBinSize();
    }
    if(FieldBits::NoField != (CullClusterDatUBOChunkFieldMask & whichField))
    {
        returnValue += _sfCullClusterDatUBOChunk.getBinSize();
    }
    if(FieldBits::NoField != (CullLightIndexCounterSSBOChunkFieldMask & whichField))
    {
        returnValue += _sfCullLightIndexCounterSSBOChunk.getBinSize();
    }
    if(FieldBits::NoField != (FrustumsSSBOChunkFieldMask & whichField))
    {
        returnValue += _sfFrustumsSSBOChunk.getBinSize();
    }
    if(FieldBits::NoField != (AffectedLightIndexListSSBOChunkFieldMask & whichField))
    {
        returnValue += _sfAffectedLightIndexListSSBOChunk.getBinSize();
    }
    if(FieldBits::NoField != (LightIndexListSSBOChunkFieldMask & whichField))
    {
        returnValue += _sfLightIndexListSSBOChunk.getBinSize();
    }
    if(FieldBits::NoField != (FrustChunkMatFieldMask & whichField))
    {
        returnValue += _sfFrustChunkMat.getBinSize();
    }
    if(FieldBits::NoField != (CullChunkMatFieldMask & whichField))
    {
        returnValue += _sfCullChunkMat.getBinSize();
    }
    if(FieldBits::NoField != (LightGridImageFieldMask & whichField))
    {
        returnValue += _sfLightGridImage.getBinSize();
    }
    if(FieldBits::NoField != (LightGridTexObjChunkFieldMask & whichField))
    {
        returnValue += _sfLightGridTexObjChunk.getBinSize();
    }
    if(FieldBits::NoField != (LightGridTexImgChunkCSFieldMask & whichField))
    {
        returnValue += _sfLightGridTexImgChunkCS.getBinSize();
    }
    if(FieldBits::NoField != (LightGridTexImgChunkFSFieldMask & whichField))
    {
        returnValue += _sfLightGridTexImgChunkFS.getBinSize();
    }
    if(FieldBits::NoField != (FrustumPlanesNormalsFieldMask & whichField))
    {
        returnValue += _mfFrustumPlanesNormals.getBinSize();
    }
    if(FieldBits::NoField != (FrustumPlanesDistancesFieldMask & whichField))
    {
        returnValue += _mfFrustumPlanesDistances.getBinSize();
    }
    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        returnValue += _sfLeft.getBinSize();
    }
    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        returnValue += _sfBottom.getBinSize();
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }
    if(FieldBits::NoField != (IsOrthographicCameraFieldMask & whichField))
    {
        returnValue += _sfIsOrthographicCamera.getBinSize();
    }

    return returnValue;
}

void ClusterShadingStageDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (FrustDispDatUBOChunkFieldMask & whichField))
    {
        _sfFrustDispDatUBOChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CullDispDatUBOChunkFieldMask & whichField))
    {
        _sfCullDispDatUBOChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CullClusterDatUBOChunkFieldMask & whichField))
    {
        _sfCullClusterDatUBOChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CullLightIndexCounterSSBOChunkFieldMask & whichField))
    {
        _sfCullLightIndexCounterSSBOChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrustumsSSBOChunkFieldMask & whichField))
    {
        _sfFrustumsSSBOChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AffectedLightIndexListSSBOChunkFieldMask & whichField))
    {
        _sfAffectedLightIndexListSSBOChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightIndexListSSBOChunkFieldMask & whichField))
    {
        _sfLightIndexListSSBOChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrustChunkMatFieldMask & whichField))
    {
        _sfFrustChunkMat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CullChunkMatFieldMask & whichField))
    {
        _sfCullChunkMat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightGridImageFieldMask & whichField))
    {
        _sfLightGridImage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightGridTexObjChunkFieldMask & whichField))
    {
        _sfLightGridTexObjChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightGridTexImgChunkCSFieldMask & whichField))
    {
        _sfLightGridTexImgChunkCS.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightGridTexImgChunkFSFieldMask & whichField))
    {
        _sfLightGridTexImgChunkFS.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrustumPlanesNormalsFieldMask & whichField))
    {
        _mfFrustumPlanesNormals.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrustumPlanesDistancesFieldMask & whichField))
    {
        _mfFrustumPlanesDistances.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        _sfLeft.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        _sfBottom.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IsOrthographicCameraFieldMask & whichField))
    {
        _sfIsOrthographicCamera.copyToBin(pMem);
    }
}

void ClusterShadingStageDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (FrustDispDatUBOChunkFieldMask & whichField))
    {
        editSField(FrustDispDatUBOChunkFieldMask);
        _sfFrustDispDatUBOChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CullDispDatUBOChunkFieldMask & whichField))
    {
        editSField(CullDispDatUBOChunkFieldMask);
        _sfCullDispDatUBOChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CullClusterDatUBOChunkFieldMask & whichField))
    {
        editSField(CullClusterDatUBOChunkFieldMask);
        _sfCullClusterDatUBOChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CullLightIndexCounterSSBOChunkFieldMask & whichField))
    {
        editSField(CullLightIndexCounterSSBOChunkFieldMask);
        _sfCullLightIndexCounterSSBOChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrustumsSSBOChunkFieldMask & whichField))
    {
        editSField(FrustumsSSBOChunkFieldMask);
        _sfFrustumsSSBOChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AffectedLightIndexListSSBOChunkFieldMask & whichField))
    {
        editSField(AffectedLightIndexListSSBOChunkFieldMask);
        _sfAffectedLightIndexListSSBOChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightIndexListSSBOChunkFieldMask & whichField))
    {
        editSField(LightIndexListSSBOChunkFieldMask);
        _sfLightIndexListSSBOChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrustChunkMatFieldMask & whichField))
    {
        editSField(FrustChunkMatFieldMask);
        _sfFrustChunkMat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CullChunkMatFieldMask & whichField))
    {
        editSField(CullChunkMatFieldMask);
        _sfCullChunkMat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightGridImageFieldMask & whichField))
    {
        editSField(LightGridImageFieldMask);
        _sfLightGridImage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightGridTexObjChunkFieldMask & whichField))
    {
        editSField(LightGridTexObjChunkFieldMask);
        _sfLightGridTexObjChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightGridTexImgChunkCSFieldMask & whichField))
    {
        editSField(LightGridTexImgChunkCSFieldMask);
        _sfLightGridTexImgChunkCS.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightGridTexImgChunkFSFieldMask & whichField))
    {
        editSField(LightGridTexImgChunkFSFieldMask);
        _sfLightGridTexImgChunkFS.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrustumPlanesNormalsFieldMask & whichField))
    {
        editMField(FrustumPlanesNormalsFieldMask, _mfFrustumPlanesNormals);
        _mfFrustumPlanesNormals.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrustumPlanesDistancesFieldMask & whichField))
    {
        editMField(FrustumPlanesDistancesFieldMask, _mfFrustumPlanesDistances);
        _mfFrustumPlanesDistances.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        editSField(LeftFieldMask);
        _sfLeft.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        editSField(BottomFieldMask);
        _sfBottom.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        editSField(WidthFieldMask);
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        editSField(HeightFieldMask);
        _sfHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IsOrthographicCameraFieldMask & whichField))
    {
        editSField(IsOrthographicCameraFieldMask);
        _sfIsOrthographicCamera.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ClusterShadingStageDataTransitPtr ClusterShadingStageDataBase::createLocal(BitVector bFlags)
{
    ClusterShadingStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ClusterShadingStageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ClusterShadingStageDataTransitPtr ClusterShadingStageDataBase::createDependent(BitVector bFlags)
{
    ClusterShadingStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ClusterShadingStageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ClusterShadingStageDataTransitPtr ClusterShadingStageDataBase::create(void)
{
    ClusterShadingStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ClusterShadingStageData>(tmpPtr);
    }

    return fc;
}

ClusterShadingStageData *ClusterShadingStageDataBase::createEmptyLocal(BitVector bFlags)
{
    ClusterShadingStageData *returnValue;

    newPtr<ClusterShadingStageData>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ClusterShadingStageData *ClusterShadingStageDataBase::createEmpty(void)
{
    ClusterShadingStageData *returnValue;

    newPtr<ClusterShadingStageData>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ClusterShadingStageDataBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ClusterShadingStageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ClusterShadingStageData *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ClusterShadingStageDataBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ClusterShadingStageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ClusterShadingStageData *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ClusterShadingStageDataBase::shallowCopy(void) const
{
    ClusterShadingStageData *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ClusterShadingStageData *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ClusterShadingStageDataBase::ClusterShadingStageDataBase(void) :
    Inherited(),
    _sfFrustDispDatUBOChunk   (NULL),
    _sfCullDispDatUBOChunk    (NULL),
    _sfCullClusterDatUBOChunk (NULL),
    _sfCullLightIndexCounterSSBOChunk(NULL),
    _sfFrustumsSSBOChunk      (NULL),
    _sfAffectedLightIndexListSSBOChunk(NULL),
    _sfLightIndexListSSBOChunk(NULL),
    _sfFrustChunkMat          (NULL),
    _sfCullChunkMat           (NULL),
    _sfLightGridImage         (NULL),
    _sfLightGridTexObjChunk   (NULL),
    _sfLightGridTexImgChunkCS (NULL),
    _sfLightGridTexImgChunkFS (NULL),
    _mfFrustumPlanesNormals   (),
    _mfFrustumPlanesDistances (),
    _sfLeft                   (Int32(0)),
    _sfBottom                 (Int32(0)),
    _sfWidth                  (Int32(0)),
    _sfHeight                 (Int32(0)),
    _sfIsOrthographicCamera   (bool(false))
{
}

ClusterShadingStageDataBase::ClusterShadingStageDataBase(const ClusterShadingStageDataBase &source) :
    Inherited(source),
    _sfFrustDispDatUBOChunk   (NULL),
    _sfCullDispDatUBOChunk    (NULL),
    _sfCullClusterDatUBOChunk (NULL),
    _sfCullLightIndexCounterSSBOChunk(NULL),
    _sfFrustumsSSBOChunk      (NULL),
    _sfAffectedLightIndexListSSBOChunk(NULL),
    _sfLightIndexListSSBOChunk(NULL),
    _sfFrustChunkMat          (NULL),
    _sfCullChunkMat           (NULL),
    _sfLightGridImage         (NULL),
    _sfLightGridTexObjChunk   (NULL),
    _sfLightGridTexImgChunkCS (NULL),
    _sfLightGridTexImgChunkFS (NULL),
    _mfFrustumPlanesNormals   (source._mfFrustumPlanesNormals   ),
    _mfFrustumPlanesDistances (source._mfFrustumPlanesDistances ),
    _sfLeft                   (source._sfLeft                   ),
    _sfBottom                 (source._sfBottom                 ),
    _sfWidth                  (source._sfWidth                  ),
    _sfHeight                 (source._sfHeight                 ),
    _sfIsOrthographicCamera   (source._sfIsOrthographicCamera   )
{
}


/*-------------------------- destructors ----------------------------------*/

ClusterShadingStageDataBase::~ClusterShadingStageDataBase(void)
{
}

void ClusterShadingStageDataBase::onCreate(const ClusterShadingStageData *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ClusterShadingStageData *pThis = static_cast<ClusterShadingStageData *>(this);

        pThis->setFrustDispDatUBOChunk(source->getFrustDispDatUBOChunk());

        pThis->setCullDispDatUBOChunk(source->getCullDispDatUBOChunk());

        pThis->setCullClusterDatUBOChunk(source->getCullClusterDatUBOChunk());

        pThis->setCullLightIndexCounterSSBOChunk(source->getCullLightIndexCounterSSBOChunk());

        pThis->setFrustumsSSBOChunk(source->getFrustumsSSBOChunk());

        pThis->setAffectedLightIndexListSSBOChunk(source->getAffectedLightIndexListSSBOChunk());

        pThis->setLightIndexListSSBOChunk(source->getLightIndexListSSBOChunk());

        pThis->setFrustChunkMat(source->getFrustChunkMat());

        pThis->setCullChunkMat(source->getCullChunkMat());

        pThis->setLightGridImage(source->getLightGridImage());

        pThis->setLightGridTexObjChunk(source->getLightGridTexObjChunk());

        pThis->setLightGridTexImgChunkCS(source->getLightGridTexImgChunkCS());

        pThis->setLightGridTexImgChunkFS(source->getLightGridTexImgChunkFS());
    }
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleFrustDispDatUBOChunk (void) const
{
    SFUnrecUniformBufferObjStd140ChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecUniformBufferObjStd140ChunkPtr::GetHandle(
             &_sfFrustDispDatUBOChunk,
             this->getType().getFieldDesc(FrustDispDatUBOChunkFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleFrustDispDatUBOChunk(void)
{
    SFUnrecUniformBufferObjStd140ChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecUniformBufferObjStd140ChunkPtr::EditHandle(
             &_sfFrustDispDatUBOChunk,
             this->getType().getFieldDesc(FrustDispDatUBOChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setFrustDispDatUBOChunk,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(FrustDispDatUBOChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleCullDispDatUBOChunk (void) const
{
    SFUnrecUniformBufferObjStd140ChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecUniformBufferObjStd140ChunkPtr::GetHandle(
             &_sfCullDispDatUBOChunk,
             this->getType().getFieldDesc(CullDispDatUBOChunkFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleCullDispDatUBOChunk(void)
{
    SFUnrecUniformBufferObjStd140ChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecUniformBufferObjStd140ChunkPtr::EditHandle(
             &_sfCullDispDatUBOChunk,
             this->getType().getFieldDesc(CullDispDatUBOChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setCullDispDatUBOChunk,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(CullDispDatUBOChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleCullClusterDatUBOChunk (void) const
{
    SFUnrecUniformBufferObjStd140ChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecUniformBufferObjStd140ChunkPtr::GetHandle(
             &_sfCullClusterDatUBOChunk,
             this->getType().getFieldDesc(CullClusterDatUBOChunkFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleCullClusterDatUBOChunk(void)
{
    SFUnrecUniformBufferObjStd140ChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecUniformBufferObjStd140ChunkPtr::EditHandle(
             &_sfCullClusterDatUBOChunk,
             this->getType().getFieldDesc(CullClusterDatUBOChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setCullClusterDatUBOChunk,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(CullClusterDatUBOChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleCullLightIndexCounterSSBOChunk (void) const
{
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::GetHandle(
             &_sfCullLightIndexCounterSSBOChunk,
             this->getType().getFieldDesc(CullLightIndexCounterSSBOChunkFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleCullLightIndexCounterSSBOChunk(void)
{
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::EditHandle(
             &_sfCullLightIndexCounterSSBOChunk,
             this->getType().getFieldDesc(CullLightIndexCounterSSBOChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setCullLightIndexCounterSSBOChunk,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(CullLightIndexCounterSSBOChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleFrustumsSSBOChunk (void) const
{
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::GetHandle(
             &_sfFrustumsSSBOChunk,
             this->getType().getFieldDesc(FrustumsSSBOChunkFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleFrustumsSSBOChunk(void)
{
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::EditHandle(
             &_sfFrustumsSSBOChunk,
             this->getType().getFieldDesc(FrustumsSSBOChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setFrustumsSSBOChunk,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(FrustumsSSBOChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleAffectedLightIndexListSSBOChunk (void) const
{
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::GetHandle(
             &_sfAffectedLightIndexListSSBOChunk,
             this->getType().getFieldDesc(AffectedLightIndexListSSBOChunkFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleAffectedLightIndexListSSBOChunk(void)
{
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::EditHandle(
             &_sfAffectedLightIndexListSSBOChunk,
             this->getType().getFieldDesc(AffectedLightIndexListSSBOChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setAffectedLightIndexListSSBOChunk,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(AffectedLightIndexListSSBOChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleLightIndexListSSBOChunk (void) const
{
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::GetHandle(
             &_sfLightIndexListSSBOChunk,
             this->getType().getFieldDesc(LightIndexListSSBOChunkFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleLightIndexListSSBOChunk(void)
{
    SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderStorageBufferObjStdLayoutChunkPtr::EditHandle(
             &_sfLightIndexListSSBOChunk,
             this->getType().getFieldDesc(LightIndexListSSBOChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setLightIndexListSSBOChunk,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(LightIndexListSSBOChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleFrustChunkMat   (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfFrustChunkMat,
             this->getType().getFieldDesc(FrustChunkMatFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleFrustChunkMat  (void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfFrustChunkMat,
             this->getType().getFieldDesc(FrustChunkMatFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setFrustChunkMat,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(FrustChunkMatFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleCullChunkMat    (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfCullChunkMat,
             this->getType().getFieldDesc(CullChunkMatFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleCullChunkMat   (void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfCullChunkMat,
             this->getType().getFieldDesc(CullChunkMatFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setCullChunkMat,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(CullChunkMatFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleLightGridImage  (void) const
{
    SFUnrecImagePtr::GetHandlePtr returnValue(
        new  SFUnrecImagePtr::GetHandle(
             &_sfLightGridImage,
             this->getType().getFieldDesc(LightGridImageFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleLightGridImage (void)
{
    SFUnrecImagePtr::EditHandlePtr returnValue(
        new  SFUnrecImagePtr::EditHandle(
             &_sfLightGridImage,
             this->getType().getFieldDesc(LightGridImageFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setLightGridImage,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(LightGridImageFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleLightGridTexObjChunk (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfLightGridTexObjChunk,
             this->getType().getFieldDesc(LightGridTexObjChunkFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleLightGridTexObjChunk(void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfLightGridTexObjChunk,
             this->getType().getFieldDesc(LightGridTexObjChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setLightGridTexObjChunk,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(LightGridTexObjChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleLightGridTexImgChunkCS (void) const
{
    SFUnrecTextureImageChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureImageChunkPtr::GetHandle(
             &_sfLightGridTexImgChunkCS,
             this->getType().getFieldDesc(LightGridTexImgChunkCSFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleLightGridTexImgChunkCS(void)
{
    SFUnrecTextureImageChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureImageChunkPtr::EditHandle(
             &_sfLightGridTexImgChunkCS,
             this->getType().getFieldDesc(LightGridTexImgChunkCSFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setLightGridTexImgChunkCS,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(LightGridTexImgChunkCSFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleLightGridTexImgChunkFS (void) const
{
    SFUnrecTextureImageChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureImageChunkPtr::GetHandle(
             &_sfLightGridTexImgChunkFS,
             this->getType().getFieldDesc(LightGridTexImgChunkFSFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleLightGridTexImgChunkFS(void)
{
    SFUnrecTextureImageChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureImageChunkPtr::EditHandle(
             &_sfLightGridTexImgChunkFS,
             this->getType().getFieldDesc(LightGridTexImgChunkFSFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStageData::setLightGridTexImgChunkFS,
                    static_cast<ClusterShadingStageData *>(this), ::boost::placeholders::_1));

    editSField(LightGridTexImgChunkFSFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleFrustumPlanesNormals (void) const
{
    MFMatrix::GetHandlePtr returnValue(
        new  MFMatrix::GetHandle(
             &_mfFrustumPlanesNormals,
             this->getType().getFieldDesc(FrustumPlanesNormalsFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleFrustumPlanesNormals(void)
{
    MFMatrix::EditHandlePtr returnValue(
        new  MFMatrix::EditHandle(
             &_mfFrustumPlanesNormals,
             this->getType().getFieldDesc(FrustumPlanesNormalsFieldId),
             this));


    editMField(FrustumPlanesNormalsFieldMask, _mfFrustumPlanesNormals);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleFrustumPlanesDistances (void) const
{
    MFVec4f::GetHandlePtr returnValue(
        new  MFVec4f::GetHandle(
             &_mfFrustumPlanesDistances,
             this->getType().getFieldDesc(FrustumPlanesDistancesFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleFrustumPlanesDistances(void)
{
    MFVec4f::EditHandlePtr returnValue(
        new  MFVec4f::EditHandle(
             &_mfFrustumPlanesDistances,
             this->getType().getFieldDesc(FrustumPlanesDistancesFieldId),
             this));


    editMField(FrustumPlanesDistancesFieldMask, _mfFrustumPlanesDistances);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleLeft            (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfLeft,
             this->getType().getFieldDesc(LeftFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleLeft           (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfLeft,
             this->getType().getFieldDesc(LeftFieldId),
             this));


    editSField(LeftFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleBottom          (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfBottom,
             this->getType().getFieldDesc(BottomFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleBottom         (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfBottom,
             this->getType().getFieldDesc(BottomFieldId),
             this));


    editSField(BottomFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleWidth           (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleWidth          (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             this));


    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleHeight          (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleHeight         (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             this));


    editSField(HeightFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageDataBase::getHandleIsOrthographicCamera (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfIsOrthographicCamera,
             this->getType().getFieldDesc(IsOrthographicCameraFieldId),
             const_cast<ClusterShadingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageDataBase::editHandleIsOrthographicCamera(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfIsOrthographicCamera,
             this->getType().getFieldDesc(IsOrthographicCameraFieldId),
             this));


    editSField(IsOrthographicCameraFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ClusterShadingStageDataBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ClusterShadingStageData *pThis = static_cast<ClusterShadingStageData *>(this);

    pThis->execSync(static_cast<ClusterShadingStageData *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ClusterShadingStageDataBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ClusterShadingStageData *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ClusterShadingStageData *>(pRefAspect),
                  dynamic_cast<const ClusterShadingStageData *>(this));

    return returnValue;
}
#endif

void ClusterShadingStageDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ClusterShadingStageData *>(this)->setFrustDispDatUBOChunk(NULL);

    static_cast<ClusterShadingStageData *>(this)->setCullDispDatUBOChunk(NULL);

    static_cast<ClusterShadingStageData *>(this)->setCullClusterDatUBOChunk(NULL);

    static_cast<ClusterShadingStageData *>(this)->setCullLightIndexCounterSSBOChunk(NULL);

    static_cast<ClusterShadingStageData *>(this)->setFrustumsSSBOChunk(NULL);

    static_cast<ClusterShadingStageData *>(this)->setAffectedLightIndexListSSBOChunk(NULL);

    static_cast<ClusterShadingStageData *>(this)->setLightIndexListSSBOChunk(NULL);

    static_cast<ClusterShadingStageData *>(this)->setFrustChunkMat(NULL);

    static_cast<ClusterShadingStageData *>(this)->setCullChunkMat(NULL);

    static_cast<ClusterShadingStageData *>(this)->setLightGridImage(NULL);

    static_cast<ClusterShadingStageData *>(this)->setLightGridTexObjChunk(NULL);

    static_cast<ClusterShadingStageData *>(this)->setLightGridTexImgChunkCS(NULL);

    static_cast<ClusterShadingStageData *>(this)->setLightGridTexImgChunkFS(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfFrustumPlanesNormals.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfFrustumPlanesDistances.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
