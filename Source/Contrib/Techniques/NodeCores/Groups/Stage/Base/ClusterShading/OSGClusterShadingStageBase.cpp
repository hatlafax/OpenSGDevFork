/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ClusterShadingStage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGNode.h"                    // FrustNode Class
#include "OSGAlgorithmComputeElement.h" // FrustAlgoElement Class
#include "OSGComputeShaderAlgorithm.h"  // FrustCompShaderAlgo Class
#include "OSGMultiLightChunk.h"         // MultiLightChunk Class
#include "OSGShaderProgramChunk.h"      // ShaderProgChunk Class

#include "OSGClusterShadingStageBase.h"
#include "OSGClusterShadingStage.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ClusterShadingStage
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            ClusterShadingStageBase::_sfActivate
    If the stage is deactivated it does not perform any action on its own but act as a simple Group core. This
    flag is not to be confused with the 'disabled' flag that does allow to disable any operation of the stage.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfBlockSize
    The number of compute shader work group threads per xy-direction
*/

/*! \var UInt32          ClusterShadingStageBase::_sfTileSize
    The number of pixel per cluster tile per xy-direction. The overall number if
    clusters is then tileSize^2  * numClusterZ.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfNumClusterZ
    The number of clusters in the z direction. The overall number if
    clusters is then tileSize^2  * numClusterZ.
*/

/*! \var Real32          ClusterShadingStageBase::_sfNearPlaneOffset
    z-coords below of zNear + near_plane_offset are mapped to cluster key 0, i.e.
    the logarithmic clustering starts at zNear + near_plane_offset with key 1. Key 0
    is therefor artificially. With this parameter you can enhance the cluster utilization.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfDispatchDataBindingPnt
    The fragment shader binding point for the clustering data UBO.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfClusterDataBindingPnt
    The fragment shader binding point for the clustering data UBO.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfLightBindingPnt
    The fragment shader SSBO binding point for the multi light chunk.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfAffectedLightIndexListBindingPnt
    The fragment shader binding point for the index list SSBO of the view frustum affecting lights.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfFrustumBindingPnt
    The frustum and cull light computation shader binding point for the SSBO frustum buffer.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfLightIndexListBindingPnt
    The fragment shader binding point for the index list SSBO of the cluster shading lights.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfLightIndexCounterBindingPnt
    The fragment shader binding point for the index list global counter SSBO.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfLightGridBindingPnt
    The fragment shader binding point for the texture image of the light grid.
*/

/*! \var std::string     ClusterShadingStageBase::_sfAffectedLightIndexListBlockName
    The shader storage buffer block name for the affected light index buffer.
*/

/*! \var std::string     ClusterShadingStageBase::_sfAffectedLightIndexListVariableName
    The variable name for the affected light index buffer.
*/

/*! \var std::string     ClusterShadingStageBase::_sfLightIndexListBlockName
    The shader storage buffer block name for the global light index buffer.
*/

/*! \var std::string     ClusterShadingStageBase::_sfLightIndexListVariableName
    The variable name for the global light index buffer.
*/

/*! \var std::string     ClusterShadingStageBase::_sfClusteringDataBlockName
    The uniform buffer block name for the clustering data buffer.
*/

/*! \var std::string     ClusterShadingStageBase::_sfClusteringDataVariableName
    The variable name for the clustering data buffer.
*/

/*! \var std::string     ClusterShadingStageBase::_sfLightGridVariableName
    The variable name for the uniform light grid image array .
*/

/*! \var bool            ClusterShadingStageBase::_sfCalcFrustumsOnCPU
    Calculate the view frustums on the CPU.
*/

/*! \var bool            ClusterShadingStageBase::_sfCullLighsOnCPU
    Cull the lights on the CPU.
*/

/*! \var bool            ClusterShadingStageBase::_sfDisabled
    Toogle usage of cluster shading on/off. The 'lightIndexList' is not generated and the fragment shader has to
    use the 'affectedLightIndexList' directly, not gaining any performance optimization due to clustering.
    This flag is not to be confused with the 'activate' flag that allows to basically run this stage as a simple
    Group core. 
*/

/*! \var UInt32          ClusterShadingStageBase::_sfMaxLightIndexListSize
    The maximal number of light indices, i.e. the accumulated sum of all cluster lights. If the light index
    list is completely filled all additional lights are silently dropped.
*/

/*! \var UInt32          ClusterShadingStageBase::_sfMaxClusterLightCount
    The maximal number of lights that can be attributed to one specific cluster. Realize, that
    the accumulated sum of all  cluster attributed lights must not exceed the maxLightIndexListSize.
    If the number of lights for one cluster exceeds this limit the excessive lights are silently dropped.
*/

/*! \var Node *          ClusterShadingStageBase::_sfFrustNode
    The frustum computation node.
*/

/*! \var AlgorithmComputeElement * ClusterShadingStageBase::_sfFrustAlgoElement
    The frustum algorithm computation element.
*/

/*! \var ComputeShaderAlgorithm * ClusterShadingStageBase::_sfFrustCompShaderAlgo
    The frustum computation shader algorithm.
*/

/*! \var Node *          ClusterShadingStageBase::_sfCullNode
    The frustum computation node.
*/

/*! \var AlgorithmComputeElement * ClusterShadingStageBase::_sfCullAlgoElement
    The frustum algorithm computation element.
*/

/*! \var ComputeShaderAlgorithm * ClusterShadingStageBase::_sfCullCompShaderAlgo
    The frustum computation shader algorithm.
*/

/*! \var MultiLightChunk * ClusterShadingStageBase::_sfMultiLightChunk
    The multi light chunk.
*/

/*! \var ShaderProgramChunk * ClusterShadingStageBase::_sfShaderProgChunk
    The shader program chunk.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ClusterShadingStage *, nsOSG>::_type(
    "ClusterShadingStagePtr", 
    "StagePtr", 
    ClusterShadingStage::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ClusterShadingStage *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ClusterShadingStage *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ClusterShadingStage *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ClusterShadingStageBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "activate",
        "If the stage is deactivated it does not perform any action on its own but act as a simple Group core. This\n"
        "flag is not to be confused with the 'disabled' flag that does allow to disable any operation of the stage.\n",
        ActivateFieldId, ActivateFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleActivate),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleActivate));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "blockSize",
        "The number of compute shader work group threads per xy-direction\n",
        BlockSizeFieldId, BlockSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleBlockSize),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleBlockSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "tileSize",
        "The number of pixel per cluster tile per xy-direction. The overall number if\n"
        "clusters is then tileSize^2  * numClusterZ.\n",
        TileSizeFieldId, TileSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleTileSize),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleTileSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "numClusterZ",
        "The number of clusters in the z direction. The overall number if\n"
        "clusters is then tileSize^2  * numClusterZ.\n",
        NumClusterZFieldId, NumClusterZFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleNumClusterZ),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleNumClusterZ));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "nearPlaneOffset",
        "z-coords below of zNear + near_plane_offset are mapped to cluster key 0, i.e.\n"
        "the logarithmic clustering starts at zNear + near_plane_offset with key 1. Key 0\n"
        "is therefor artificially. With this parameter you can enhance the cluster utilization.\n",
        NearPlaneOffsetFieldId, NearPlaneOffsetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleNearPlaneOffset),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleNearPlaneOffset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "dispatchDataBindingPnt",
        "The fragment shader binding point for the clustering data UBO.\n",
        DispatchDataBindingPntFieldId, DispatchDataBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleDispatchDataBindingPnt),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleDispatchDataBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "clusterDataBindingPnt",
        "The fragment shader binding point for the clustering data UBO.\n",
        ClusterDataBindingPntFieldId, ClusterDataBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleClusterDataBindingPnt),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleClusterDataBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "lightBindingPnt",
        "The fragment shader SSBO binding point for the multi light chunk.\n",
        LightBindingPntFieldId, LightBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleLightBindingPnt),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleLightBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "affectedLightIndexListBindingPnt",
        "The fragment shader binding point for the index list SSBO of the view frustum affecting lights.\n",
        AffectedLightIndexListBindingPntFieldId, AffectedLightIndexListBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleAffectedLightIndexListBindingPnt),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleAffectedLightIndexListBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "frustumBindingPnt",
        "The frustum and cull light computation shader binding point for the SSBO frustum buffer.\n",
        FrustumBindingPntFieldId, FrustumBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleFrustumBindingPnt),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleFrustumBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "lightIndexListBindingPnt",
        "The fragment shader binding point for the index list SSBO of the cluster shading lights.\n",
        LightIndexListBindingPntFieldId, LightIndexListBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleLightIndexListBindingPnt),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleLightIndexListBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "lightIndexCounterBindingPnt",
        "The fragment shader binding point for the index list global counter SSBO.\n",
        LightIndexCounterBindingPntFieldId, LightIndexCounterBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleLightIndexCounterBindingPnt),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleLightIndexCounterBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "lightGridBindingPnt",
        "The fragment shader binding point for the texture image of the light grid.\n",
        LightGridBindingPntFieldId, LightGridBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleLightGridBindingPnt),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleLightGridBindingPnt));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "affectedLightIndexListBlockName",
        "The shader storage buffer block name for the affected light index buffer.\n",
        AffectedLightIndexListBlockNameFieldId, AffectedLightIndexListBlockNameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleAffectedLightIndexListBlockName),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleAffectedLightIndexListBlockName));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "affectedLightIndexListVariableName",
        "The variable name for the affected light index buffer.\n",
        AffectedLightIndexListVariableNameFieldId, AffectedLightIndexListVariableNameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleAffectedLightIndexListVariableName),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleAffectedLightIndexListVariableName));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "lightIndexListBlockName",
        "The shader storage buffer block name for the global light index buffer.\n",
        LightIndexListBlockNameFieldId, LightIndexListBlockNameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleLightIndexListBlockName),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleLightIndexListBlockName));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "lightIndexListVariableName",
        "The variable name for the global light index buffer.\n",
        LightIndexListVariableNameFieldId, LightIndexListVariableNameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleLightIndexListVariableName),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleLightIndexListVariableName));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "clusteringDataBlockName",
        "The uniform buffer block name for the clustering data buffer.\n",
        ClusteringDataBlockNameFieldId, ClusteringDataBlockNameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleClusteringDataBlockName),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleClusteringDataBlockName));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "clusteringDataVariableName",
        "The variable name for the clustering data buffer.\n",
        ClusteringDataVariableNameFieldId, ClusteringDataVariableNameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleClusteringDataVariableName),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleClusteringDataVariableName));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "lightGridVariableName",
        "The variable name for the uniform light grid image array .\n",
        LightGridVariableNameFieldId, LightGridVariableNameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleLightGridVariableName),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleLightGridVariableName));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "calcFrustumsOnCPU",
        "Calculate the view frustums on the CPU.\n",
        CalcFrustumsOnCPUFieldId, CalcFrustumsOnCPUFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleCalcFrustumsOnCPU),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleCalcFrustumsOnCPU));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "cullLighsOnCPU",
        "Cull the lights on the CPU.\n",
        CullLighsOnCPUFieldId, CullLighsOnCPUFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleCullLighsOnCPU),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleCullLighsOnCPU));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "disabled",
        "Toogle usage of cluster shading on/off. The 'lightIndexList' is not generated and the fragment shader has to\n"
        "use the 'affectedLightIndexList' directly, not gaining any performance optimization due to clustering.\n"
        "This flag is not to be confused with the 'activate' flag that allows to basically run this stage as a simple\n"
        "Group core. \n",
        DisabledFieldId, DisabledFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleDisabled),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleDisabled));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "maxLightIndexListSize",
        "The maximal number of light indices, i.e. the accumulated sum of all cluster lights. If the light index\n"
        "list is completely filled all additional lights are silently dropped.\n",
        MaxLightIndexListSizeFieldId, MaxLightIndexListSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleMaxLightIndexListSize),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleMaxLightIndexListSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "maxClusterLightCount",
        "The maximal number of lights that can be attributed to one specific cluster. Realize, that\n"
        "the accumulated sum of all  cluster attributed lights must not exceed the maxLightIndexListSize.\n"
        "If the number of lights for one cluster exceeds this limit the excessive lights are silently dropped.\n",
        MaxClusterLightCountFieldId, MaxClusterLightCountFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleMaxClusterLightCount),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleMaxClusterLightCount));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "frustNode",
        "The frustum computation node.\n",
        FrustNodeFieldId, FrustNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleFrustNode),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleFrustNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecAlgorithmComputeElementPtr::Description(
        SFUnrecAlgorithmComputeElementPtr::getClassType(),
        "frustAlgoElement",
        "The frustum algorithm computation element.\n",
        FrustAlgoElementFieldId, FrustAlgoElementFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleFrustAlgoElement),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleFrustAlgoElement));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComputeShaderAlgorithmPtr::Description(
        SFUnrecComputeShaderAlgorithmPtr::getClassType(),
        "frustCompShaderAlgo",
        "The frustum computation shader algorithm.\n",
        FrustCompShaderAlgoFieldId, FrustCompShaderAlgoFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleFrustCompShaderAlgo),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleFrustCompShaderAlgo));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecNodePtr::Description(
        SFUnrecNodePtr::getClassType(),
        "cullNode",
        "The frustum computation node.\n",
        CullNodeFieldId, CullNodeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleCullNode),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleCullNode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecAlgorithmComputeElementPtr::Description(
        SFUnrecAlgorithmComputeElementPtr::getClassType(),
        "cullAlgoElement",
        "The frustum algorithm computation element.\n",
        CullAlgoElementFieldId, CullAlgoElementFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleCullAlgoElement),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleCullAlgoElement));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecComputeShaderAlgorithmPtr::Description(
        SFUnrecComputeShaderAlgorithmPtr::getClassType(),
        "cullCompShaderAlgo",
        "The frustum computation shader algorithm.\n",
        CullCompShaderAlgoFieldId, CullCompShaderAlgoFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleCullCompShaderAlgo),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleCullCompShaderAlgo));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMultiLightChunkPtr::Description(
        SFUnrecMultiLightChunkPtr::getClassType(),
        "multiLightChunk",
        "The multi light chunk.\n",
        MultiLightChunkFieldId, MultiLightChunkFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleMultiLightChunk),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleMultiLightChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecShaderProgramChunkPtr::Description(
        SFUnrecShaderProgramChunkPtr::getClassType(),
        "shaderProgChunk",
        "The shader program chunk.\n",
        ShaderProgChunkFieldId, ShaderProgChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterShadingStage::editHandleShaderProgChunk),
        static_cast<FieldGetMethodSig >(&ClusterShadingStage::getHandleShaderProgChunk));

    oType.addInitialDesc(pDesc);
}


ClusterShadingStageBase::TypeObject ClusterShadingStageBase::_type(
    ClusterShadingStageBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ClusterShadingStageBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ClusterShadingStage::initMethod),
    reinterpret_cast<ExitContainerF>(&ClusterShadingStage::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ClusterShadingStage::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"ClusterShadingStage\"\n"
    "    parent=\"Stage\"\n"
    "    library=\"ContribTechniques\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    "    isBundle=\"false\"\n"
    "    >\n"
    "\n"
    "    <Field\n"
    "        name=\"activate\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"true\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        If the stage is deactivated it does not perform any action on its own but act as a simple Group core. This\n"
    "        flag is not to be confused with the 'disabled' flag that does allow to disable any operation of the stage.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"blockSize\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"16\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The number of compute shader work group threads per xy-direction\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"tileSize\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"64\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The number of pixel per cluster tile per xy-direction. The overall number if\n"
    "        clusters is then tileSize^2  * numClusterZ.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"numClusterZ\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"32\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The number of clusters in the z direction. The overall number if\n"
    "        clusters is then tileSize^2  * numClusterZ.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"nearPlaneOffset\"\n"
    "        type=\"Real32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"5.f\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        z-coords below of zNear + near_plane_offset are mapped to cluster key 0, i.e.\n"
    "        the logarithmic clustering starts at zNear + near_plane_offset with key 1. Key 0\n"
    "        is therefor artificially. With this parameter you can enhance the cluster utilization.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"dispatchDataBindingPnt\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The fragment shader binding point for the clustering data UBO.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"clusterDataBindingPnt\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"2\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The fragment shader binding point for the clustering data UBO.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"lightBindingPnt\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The fragment shader SSBO binding point for the multi light chunk.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"affectedLightIndexListBindingPnt\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"2\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The fragment shader binding point for the index list SSBO of the view frustum affecting lights.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"frustumBindingPnt\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"3\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The frustum and cull light computation shader binding point for the SSBO frustum buffer.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"lightIndexListBindingPnt\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"4\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The fragment shader binding point for the index list SSBO of the cluster shading lights.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"lightIndexCounterBindingPnt\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"5\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The fragment shader binding point for the index list global counter SSBO.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"lightGridBindingPnt\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The fragment shader binding point for the texture image of the light grid.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"affectedLightIndexListBlockName\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue='\"AffectedLightIndexList\"'\n"
    "        >\n"
    "        The shader storage buffer block name for the affected light index buffer.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"affectedLightIndexListVariableName\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue='\"affectedLightIndexList\"'\n"
    "        >\n"
    "        The variable name for the affected light index buffer.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"lightIndexListBlockName\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue='\"LightIndexList\"'\n"
    "        >\n"
    "        The shader storage buffer block name for the global light index buffer.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"lightIndexListVariableName\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue='\"lightIndexList\"'\n"
    "        >\n"
    "        The variable name for the global light index buffer.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"clusteringDataBlockName\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue='\"ClusteringData\"'\n"
    "        >\n"
    "        The uniform buffer block name for the clustering data buffer.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"clusteringDataVariableName\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue='\"clusteringData\"'\n"
    "        >\n"
    "        The variable name for the clustering data buffer.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"lightGridVariableName\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue='\"light_grid\"'\n"
    "        >\n"
    "        The variable name for the uniform light grid image array .\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"calcFrustumsOnCPU\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Calculate the view frustums on the CPU.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"cullLighsOnCPU\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Cull the lights on the CPU.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"disabled\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Toogle usage of cluster shading on/off. The 'lightIndexList' is not generated and the fragment shader has to\n"
    "        use the 'affectedLightIndexList' directly, not gaining any performance optimization due to clustering.\n"
    "        This flag is not to be confused with the 'activate' flag that allows to basically run this stage as a simple\n"
    "        Group core. \n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"maxLightIndexListSize\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"2097152\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The maximal number of light indices, i.e. the accumulated sum of all cluster lights. If the light index\n"
    "        list is completely filled all additional lights are silently dropped.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"maxClusterLightCount\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1024\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The maximal number of lights that can be attributed to one specific cluster. Realize, that\n"
    "        the accumulated sum of all  cluster attributed lights must not exceed the maxLightIndexListSize.\n"
    "        If the number of lights for one cluster exceeds this limit the excessive lights are silently dropped.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"frustNode\"\n"
    "        type=\"NodePtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "        The frustum computation node.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"frustAlgoElement\"\n"
    "        type=\"AlgorithmComputeElementPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "        The frustum algorithm computation element.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"frustCompShaderAlgo\"\n"
    "        type=\"ComputeShaderAlgorithmPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "        The frustum computation shader algorithm.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"cullNode\"\n"
    "        type=\"NodePtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "        The frustum computation node.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"cullAlgoElement\"\n"
    "        type=\"AlgorithmComputeElementPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "        The frustum algorithm computation element.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"cullCompShaderAlgo\"\n"
    "        type=\"ComputeShaderAlgorithmPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "        The frustum computation shader algorithm.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"multiLightChunk\"\n"
    "        type=\"MultiLightChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The multi light chunk.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"shaderProgChunk\"\n"
    "        type=\"ShaderProgramChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "        The shader program chunk.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ClusterShadingStageBase::getType(void)
{
    return _type;
}

const FieldContainerType &ClusterShadingStageBase::getType(void) const
{
    return _type;
}

UInt32 ClusterShadingStageBase::getContainerSize(void) const
{
    return sizeof(ClusterShadingStage);
}

/*------------------------- decorator get ------------------------------*/


SFBool *ClusterShadingStageBase::editSFActivate(void)
{
    editSField(ActivateFieldMask);

    return &_sfActivate;
}

const SFBool *ClusterShadingStageBase::getSFActivate(void) const
{
    return &_sfActivate;
}


SFUInt32 *ClusterShadingStageBase::editSFBlockSize(void)
{
    editSField(BlockSizeFieldMask);

    return &_sfBlockSize;
}

const SFUInt32 *ClusterShadingStageBase::getSFBlockSize(void) const
{
    return &_sfBlockSize;
}


SFUInt32 *ClusterShadingStageBase::editSFTileSize(void)
{
    editSField(TileSizeFieldMask);

    return &_sfTileSize;
}

const SFUInt32 *ClusterShadingStageBase::getSFTileSize(void) const
{
    return &_sfTileSize;
}


SFUInt32 *ClusterShadingStageBase::editSFNumClusterZ(void)
{
    editSField(NumClusterZFieldMask);

    return &_sfNumClusterZ;
}

const SFUInt32 *ClusterShadingStageBase::getSFNumClusterZ(void) const
{
    return &_sfNumClusterZ;
}


SFReal32 *ClusterShadingStageBase::editSFNearPlaneOffset(void)
{
    editSField(NearPlaneOffsetFieldMask);

    return &_sfNearPlaneOffset;
}

const SFReal32 *ClusterShadingStageBase::getSFNearPlaneOffset(void) const
{
    return &_sfNearPlaneOffset;
}


SFUInt32 *ClusterShadingStageBase::editSFDispatchDataBindingPnt(void)
{
    editSField(DispatchDataBindingPntFieldMask);

    return &_sfDispatchDataBindingPnt;
}

const SFUInt32 *ClusterShadingStageBase::getSFDispatchDataBindingPnt(void) const
{
    return &_sfDispatchDataBindingPnt;
}


SFUInt32 *ClusterShadingStageBase::editSFClusterDataBindingPnt(void)
{
    editSField(ClusterDataBindingPntFieldMask);

    return &_sfClusterDataBindingPnt;
}

const SFUInt32 *ClusterShadingStageBase::getSFClusterDataBindingPnt(void) const
{
    return &_sfClusterDataBindingPnt;
}


SFUInt32 *ClusterShadingStageBase::editSFLightBindingPnt(void)
{
    editSField(LightBindingPntFieldMask);

    return &_sfLightBindingPnt;
}

const SFUInt32 *ClusterShadingStageBase::getSFLightBindingPnt(void) const
{
    return &_sfLightBindingPnt;
}


SFUInt32 *ClusterShadingStageBase::editSFAffectedLightIndexListBindingPnt(void)
{
    editSField(AffectedLightIndexListBindingPntFieldMask);

    return &_sfAffectedLightIndexListBindingPnt;
}

const SFUInt32 *ClusterShadingStageBase::getSFAffectedLightIndexListBindingPnt(void) const
{
    return &_sfAffectedLightIndexListBindingPnt;
}


SFUInt32 *ClusterShadingStageBase::editSFFrustumBindingPnt(void)
{
    editSField(FrustumBindingPntFieldMask);

    return &_sfFrustumBindingPnt;
}

const SFUInt32 *ClusterShadingStageBase::getSFFrustumBindingPnt(void) const
{
    return &_sfFrustumBindingPnt;
}


SFUInt32 *ClusterShadingStageBase::editSFLightIndexListBindingPnt(void)
{
    editSField(LightIndexListBindingPntFieldMask);

    return &_sfLightIndexListBindingPnt;
}

const SFUInt32 *ClusterShadingStageBase::getSFLightIndexListBindingPnt(void) const
{
    return &_sfLightIndexListBindingPnt;
}


SFUInt32 *ClusterShadingStageBase::editSFLightIndexCounterBindingPnt(void)
{
    editSField(LightIndexCounterBindingPntFieldMask);

    return &_sfLightIndexCounterBindingPnt;
}

const SFUInt32 *ClusterShadingStageBase::getSFLightIndexCounterBindingPnt(void) const
{
    return &_sfLightIndexCounterBindingPnt;
}


SFUInt32 *ClusterShadingStageBase::editSFLightGridBindingPnt(void)
{
    editSField(LightGridBindingPntFieldMask);

    return &_sfLightGridBindingPnt;
}

const SFUInt32 *ClusterShadingStageBase::getSFLightGridBindingPnt(void) const
{
    return &_sfLightGridBindingPnt;
}


SFString *ClusterShadingStageBase::editSFAffectedLightIndexListBlockName(void)
{
    editSField(AffectedLightIndexListBlockNameFieldMask);

    return &_sfAffectedLightIndexListBlockName;
}

const SFString *ClusterShadingStageBase::getSFAffectedLightIndexListBlockName(void) const
{
    return &_sfAffectedLightIndexListBlockName;
}


SFString *ClusterShadingStageBase::editSFAffectedLightIndexListVariableName(void)
{
    editSField(AffectedLightIndexListVariableNameFieldMask);

    return &_sfAffectedLightIndexListVariableName;
}

const SFString *ClusterShadingStageBase::getSFAffectedLightIndexListVariableName(void) const
{
    return &_sfAffectedLightIndexListVariableName;
}


SFString *ClusterShadingStageBase::editSFLightIndexListBlockName(void)
{
    editSField(LightIndexListBlockNameFieldMask);

    return &_sfLightIndexListBlockName;
}

const SFString *ClusterShadingStageBase::getSFLightIndexListBlockName(void) const
{
    return &_sfLightIndexListBlockName;
}


SFString *ClusterShadingStageBase::editSFLightIndexListVariableName(void)
{
    editSField(LightIndexListVariableNameFieldMask);

    return &_sfLightIndexListVariableName;
}

const SFString *ClusterShadingStageBase::getSFLightIndexListVariableName(void) const
{
    return &_sfLightIndexListVariableName;
}


SFString *ClusterShadingStageBase::editSFClusteringDataBlockName(void)
{
    editSField(ClusteringDataBlockNameFieldMask);

    return &_sfClusteringDataBlockName;
}

const SFString *ClusterShadingStageBase::getSFClusteringDataBlockName(void) const
{
    return &_sfClusteringDataBlockName;
}


SFString *ClusterShadingStageBase::editSFClusteringDataVariableName(void)
{
    editSField(ClusteringDataVariableNameFieldMask);

    return &_sfClusteringDataVariableName;
}

const SFString *ClusterShadingStageBase::getSFClusteringDataVariableName(void) const
{
    return &_sfClusteringDataVariableName;
}


SFString *ClusterShadingStageBase::editSFLightGridVariableName(void)
{
    editSField(LightGridVariableNameFieldMask);

    return &_sfLightGridVariableName;
}

const SFString *ClusterShadingStageBase::getSFLightGridVariableName(void) const
{
    return &_sfLightGridVariableName;
}


SFBool *ClusterShadingStageBase::editSFCalcFrustumsOnCPU(void)
{
    editSField(CalcFrustumsOnCPUFieldMask);

    return &_sfCalcFrustumsOnCPU;
}

const SFBool *ClusterShadingStageBase::getSFCalcFrustumsOnCPU(void) const
{
    return &_sfCalcFrustumsOnCPU;
}


SFBool *ClusterShadingStageBase::editSFCullLighsOnCPU(void)
{
    editSField(CullLighsOnCPUFieldMask);

    return &_sfCullLighsOnCPU;
}

const SFBool *ClusterShadingStageBase::getSFCullLighsOnCPU(void) const
{
    return &_sfCullLighsOnCPU;
}


SFBool *ClusterShadingStageBase::editSFDisabled(void)
{
    editSField(DisabledFieldMask);

    return &_sfDisabled;
}

const SFBool *ClusterShadingStageBase::getSFDisabled(void) const
{
    return &_sfDisabled;
}


SFUInt32 *ClusterShadingStageBase::editSFMaxLightIndexListSize(void)
{
    editSField(MaxLightIndexListSizeFieldMask);

    return &_sfMaxLightIndexListSize;
}

const SFUInt32 *ClusterShadingStageBase::getSFMaxLightIndexListSize(void) const
{
    return &_sfMaxLightIndexListSize;
}


SFUInt32 *ClusterShadingStageBase::editSFMaxClusterLightCount(void)
{
    editSField(MaxClusterLightCountFieldMask);

    return &_sfMaxClusterLightCount;
}

const SFUInt32 *ClusterShadingStageBase::getSFMaxClusterLightCount(void) const
{
    return &_sfMaxClusterLightCount;
}


//! Get the ClusterShadingStage::_sfFrustNode field.
const SFUnrecNodePtr *ClusterShadingStageBase::getSFFrustNode(void) const
{
    return &_sfFrustNode;
}

SFUnrecNodePtr      *ClusterShadingStageBase::editSFFrustNode      (void)
{
    editSField(FrustNodeFieldMask);

    return &_sfFrustNode;
}

//! Get the value of the ClusterShadingStage::_sfFrustNode field.
Node * ClusterShadingStageBase::getFrustNode(void) const
{
    return _sfFrustNode.getValue();
}

//! Set the value of the ClusterShadingStage::_sfFrustNode field.
void ClusterShadingStageBase::setFrustNode(Node * const value)
{
    editSField(FrustNodeFieldMask);

    _sfFrustNode.setValue(value);
}


//! Get the ClusterShadingStage::_sfFrustAlgoElement field.
const SFUnrecAlgorithmComputeElementPtr *ClusterShadingStageBase::getSFFrustAlgoElement(void) const
{
    return &_sfFrustAlgoElement;
}

SFUnrecAlgorithmComputeElementPtr *ClusterShadingStageBase::editSFFrustAlgoElement(void)
{
    editSField(FrustAlgoElementFieldMask);

    return &_sfFrustAlgoElement;
}

//! Get the value of the ClusterShadingStage::_sfFrustAlgoElement field.
AlgorithmComputeElement * ClusterShadingStageBase::getFrustAlgoElement(void) const
{
    return _sfFrustAlgoElement.getValue();
}

//! Set the value of the ClusterShadingStage::_sfFrustAlgoElement field.
void ClusterShadingStageBase::setFrustAlgoElement(AlgorithmComputeElement * const value)
{
    editSField(FrustAlgoElementFieldMask);

    _sfFrustAlgoElement.setValue(value);
}


//! Get the ClusterShadingStage::_sfFrustCompShaderAlgo field.
const SFUnrecComputeShaderAlgorithmPtr *ClusterShadingStageBase::getSFFrustCompShaderAlgo(void) const
{
    return &_sfFrustCompShaderAlgo;
}

SFUnrecComputeShaderAlgorithmPtr *ClusterShadingStageBase::editSFFrustCompShaderAlgo(void)
{
    editSField(FrustCompShaderAlgoFieldMask);

    return &_sfFrustCompShaderAlgo;
}

//! Get the value of the ClusterShadingStage::_sfFrustCompShaderAlgo field.
ComputeShaderAlgorithm * ClusterShadingStageBase::getFrustCompShaderAlgo(void) const
{
    return _sfFrustCompShaderAlgo.getValue();
}

//! Set the value of the ClusterShadingStage::_sfFrustCompShaderAlgo field.
void ClusterShadingStageBase::setFrustCompShaderAlgo(ComputeShaderAlgorithm * const value)
{
    editSField(FrustCompShaderAlgoFieldMask);

    _sfFrustCompShaderAlgo.setValue(value);
}


//! Get the ClusterShadingStage::_sfCullNode field.
const SFUnrecNodePtr *ClusterShadingStageBase::getSFCullNode(void) const
{
    return &_sfCullNode;
}

SFUnrecNodePtr      *ClusterShadingStageBase::editSFCullNode       (void)
{
    editSField(CullNodeFieldMask);

    return &_sfCullNode;
}

//! Get the value of the ClusterShadingStage::_sfCullNode field.
Node * ClusterShadingStageBase::getCullNode(void) const
{
    return _sfCullNode.getValue();
}

//! Set the value of the ClusterShadingStage::_sfCullNode field.
void ClusterShadingStageBase::setCullNode(Node * const value)
{
    editSField(CullNodeFieldMask);

    _sfCullNode.setValue(value);
}


//! Get the ClusterShadingStage::_sfCullAlgoElement field.
const SFUnrecAlgorithmComputeElementPtr *ClusterShadingStageBase::getSFCullAlgoElement(void) const
{
    return &_sfCullAlgoElement;
}

SFUnrecAlgorithmComputeElementPtr *ClusterShadingStageBase::editSFCullAlgoElement(void)
{
    editSField(CullAlgoElementFieldMask);

    return &_sfCullAlgoElement;
}

//! Get the value of the ClusterShadingStage::_sfCullAlgoElement field.
AlgorithmComputeElement * ClusterShadingStageBase::getCullAlgoElement(void) const
{
    return _sfCullAlgoElement.getValue();
}

//! Set the value of the ClusterShadingStage::_sfCullAlgoElement field.
void ClusterShadingStageBase::setCullAlgoElement(AlgorithmComputeElement * const value)
{
    editSField(CullAlgoElementFieldMask);

    _sfCullAlgoElement.setValue(value);
}


//! Get the ClusterShadingStage::_sfCullCompShaderAlgo field.
const SFUnrecComputeShaderAlgorithmPtr *ClusterShadingStageBase::getSFCullCompShaderAlgo(void) const
{
    return &_sfCullCompShaderAlgo;
}

SFUnrecComputeShaderAlgorithmPtr *ClusterShadingStageBase::editSFCullCompShaderAlgo(void)
{
    editSField(CullCompShaderAlgoFieldMask);

    return &_sfCullCompShaderAlgo;
}

//! Get the value of the ClusterShadingStage::_sfCullCompShaderAlgo field.
ComputeShaderAlgorithm * ClusterShadingStageBase::getCullCompShaderAlgo(void) const
{
    return _sfCullCompShaderAlgo.getValue();
}

//! Set the value of the ClusterShadingStage::_sfCullCompShaderAlgo field.
void ClusterShadingStageBase::setCullCompShaderAlgo(ComputeShaderAlgorithm * const value)
{
    editSField(CullCompShaderAlgoFieldMask);

    _sfCullCompShaderAlgo.setValue(value);
}


//! Get the ClusterShadingStage::_sfMultiLightChunk field.
const SFUnrecMultiLightChunkPtr *ClusterShadingStageBase::getSFMultiLightChunk(void) const
{
    return &_sfMultiLightChunk;
}

SFUnrecMultiLightChunkPtr *ClusterShadingStageBase::editSFMultiLightChunk(void)
{
    editSField(MultiLightChunkFieldMask);

    return &_sfMultiLightChunk;
}

//! Get the value of the ClusterShadingStage::_sfMultiLightChunk field.
MultiLightChunk * ClusterShadingStageBase::getMultiLightChunk(void) const
{
    return _sfMultiLightChunk.getValue();
}

//! Set the value of the ClusterShadingStage::_sfMultiLightChunk field.
void ClusterShadingStageBase::setMultiLightChunk(MultiLightChunk * const value)
{
    editSField(MultiLightChunkFieldMask);

    _sfMultiLightChunk.setValue(value);
}


//! Get the ClusterShadingStage::_sfShaderProgChunk field.
const SFUnrecShaderProgramChunkPtr *ClusterShadingStageBase::getSFShaderProgChunk(void) const
{
    return &_sfShaderProgChunk;
}

SFUnrecShaderProgramChunkPtr *ClusterShadingStageBase::editSFShaderProgChunk(void)
{
    editSField(ShaderProgChunkFieldMask);

    return &_sfShaderProgChunk;
}

//! Get the value of the ClusterShadingStage::_sfShaderProgChunk field.
ShaderProgramChunk * ClusterShadingStageBase::getShaderProgChunk(void) const
{
    return _sfShaderProgChunk.getValue();
}

//! Set the value of the ClusterShadingStage::_sfShaderProgChunk field.
void ClusterShadingStageBase::setShaderProgChunk(ShaderProgramChunk * const value)
{
    editSField(ShaderProgChunkFieldMask);

    _sfShaderProgChunk.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT ClusterShadingStageBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ActivateFieldMask & whichField))
    {
        returnValue += _sfActivate.getBinSize();
    }
    if(FieldBits::NoField != (BlockSizeFieldMask & whichField))
    {
        returnValue += _sfBlockSize.getBinSize();
    }
    if(FieldBits::NoField != (TileSizeFieldMask & whichField))
    {
        returnValue += _sfTileSize.getBinSize();
    }
    if(FieldBits::NoField != (NumClusterZFieldMask & whichField))
    {
        returnValue += _sfNumClusterZ.getBinSize();
    }
    if(FieldBits::NoField != (NearPlaneOffsetFieldMask & whichField))
    {
        returnValue += _sfNearPlaneOffset.getBinSize();
    }
    if(FieldBits::NoField != (DispatchDataBindingPntFieldMask & whichField))
    {
        returnValue += _sfDispatchDataBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (ClusterDataBindingPntFieldMask & whichField))
    {
        returnValue += _sfClusterDataBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (LightBindingPntFieldMask & whichField))
    {
        returnValue += _sfLightBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (AffectedLightIndexListBindingPntFieldMask & whichField))
    {
        returnValue += _sfAffectedLightIndexListBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (FrustumBindingPntFieldMask & whichField))
    {
        returnValue += _sfFrustumBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (LightIndexListBindingPntFieldMask & whichField))
    {
        returnValue += _sfLightIndexListBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (LightIndexCounterBindingPntFieldMask & whichField))
    {
        returnValue += _sfLightIndexCounterBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (LightGridBindingPntFieldMask & whichField))
    {
        returnValue += _sfLightGridBindingPnt.getBinSize();
    }
    if(FieldBits::NoField != (AffectedLightIndexListBlockNameFieldMask & whichField))
    {
        returnValue += _sfAffectedLightIndexListBlockName.getBinSize();
    }
    if(FieldBits::NoField != (AffectedLightIndexListVariableNameFieldMask & whichField))
    {
        returnValue += _sfAffectedLightIndexListVariableName.getBinSize();
    }
    if(FieldBits::NoField != (LightIndexListBlockNameFieldMask & whichField))
    {
        returnValue += _sfLightIndexListBlockName.getBinSize();
    }
    if(FieldBits::NoField != (LightIndexListVariableNameFieldMask & whichField))
    {
        returnValue += _sfLightIndexListVariableName.getBinSize();
    }
    if(FieldBits::NoField != (ClusteringDataBlockNameFieldMask & whichField))
    {
        returnValue += _sfClusteringDataBlockName.getBinSize();
    }
    if(FieldBits::NoField != (ClusteringDataVariableNameFieldMask & whichField))
    {
        returnValue += _sfClusteringDataVariableName.getBinSize();
    }
    if(FieldBits::NoField != (LightGridVariableNameFieldMask & whichField))
    {
        returnValue += _sfLightGridVariableName.getBinSize();
    }
    if(FieldBits::NoField != (CalcFrustumsOnCPUFieldMask & whichField))
    {
        returnValue += _sfCalcFrustumsOnCPU.getBinSize();
    }
    if(FieldBits::NoField != (CullLighsOnCPUFieldMask & whichField))
    {
        returnValue += _sfCullLighsOnCPU.getBinSize();
    }
    if(FieldBits::NoField != (DisabledFieldMask & whichField))
    {
        returnValue += _sfDisabled.getBinSize();
    }
    if(FieldBits::NoField != (MaxLightIndexListSizeFieldMask & whichField))
    {
        returnValue += _sfMaxLightIndexListSize.getBinSize();
    }
    if(FieldBits::NoField != (MaxClusterLightCountFieldMask & whichField))
    {
        returnValue += _sfMaxClusterLightCount.getBinSize();
    }
    if(FieldBits::NoField != (FrustNodeFieldMask & whichField))
    {
        returnValue += _sfFrustNode.getBinSize();
    }
    if(FieldBits::NoField != (FrustAlgoElementFieldMask & whichField))
    {
        returnValue += _sfFrustAlgoElement.getBinSize();
    }
    if(FieldBits::NoField != (FrustCompShaderAlgoFieldMask & whichField))
    {
        returnValue += _sfFrustCompShaderAlgo.getBinSize();
    }
    if(FieldBits::NoField != (CullNodeFieldMask & whichField))
    {
        returnValue += _sfCullNode.getBinSize();
    }
    if(FieldBits::NoField != (CullAlgoElementFieldMask & whichField))
    {
        returnValue += _sfCullAlgoElement.getBinSize();
    }
    if(FieldBits::NoField != (CullCompShaderAlgoFieldMask & whichField))
    {
        returnValue += _sfCullCompShaderAlgo.getBinSize();
    }
    if(FieldBits::NoField != (MultiLightChunkFieldMask & whichField))
    {
        returnValue += _sfMultiLightChunk.getBinSize();
    }
    if(FieldBits::NoField != (ShaderProgChunkFieldMask & whichField))
    {
        returnValue += _sfShaderProgChunk.getBinSize();
    }

    return returnValue;
}

void ClusterShadingStageBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ActivateFieldMask & whichField))
    {
        _sfActivate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlockSizeFieldMask & whichField))
    {
        _sfBlockSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TileSizeFieldMask & whichField))
    {
        _sfTileSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NumClusterZFieldMask & whichField))
    {
        _sfNumClusterZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NearPlaneOffsetFieldMask & whichField))
    {
        _sfNearPlaneOffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DispatchDataBindingPntFieldMask & whichField))
    {
        _sfDispatchDataBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClusterDataBindingPntFieldMask & whichField))
    {
        _sfClusterDataBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightBindingPntFieldMask & whichField))
    {
        _sfLightBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AffectedLightIndexListBindingPntFieldMask & whichField))
    {
        _sfAffectedLightIndexListBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrustumBindingPntFieldMask & whichField))
    {
        _sfFrustumBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightIndexListBindingPntFieldMask & whichField))
    {
        _sfLightIndexListBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightIndexCounterBindingPntFieldMask & whichField))
    {
        _sfLightIndexCounterBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightGridBindingPntFieldMask & whichField))
    {
        _sfLightGridBindingPnt.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AffectedLightIndexListBlockNameFieldMask & whichField))
    {
        _sfAffectedLightIndexListBlockName.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AffectedLightIndexListVariableNameFieldMask & whichField))
    {
        _sfAffectedLightIndexListVariableName.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightIndexListBlockNameFieldMask & whichField))
    {
        _sfLightIndexListBlockName.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightIndexListVariableNameFieldMask & whichField))
    {
        _sfLightIndexListVariableName.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClusteringDataBlockNameFieldMask & whichField))
    {
        _sfClusteringDataBlockName.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClusteringDataVariableNameFieldMask & whichField))
    {
        _sfClusteringDataVariableName.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightGridVariableNameFieldMask & whichField))
    {
        _sfLightGridVariableName.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CalcFrustumsOnCPUFieldMask & whichField))
    {
        _sfCalcFrustumsOnCPU.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CullLighsOnCPUFieldMask & whichField))
    {
        _sfCullLighsOnCPU.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DisabledFieldMask & whichField))
    {
        _sfDisabled.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaxLightIndexListSizeFieldMask & whichField))
    {
        _sfMaxLightIndexListSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaxClusterLightCountFieldMask & whichField))
    {
        _sfMaxClusterLightCount.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrustNodeFieldMask & whichField))
    {
        _sfFrustNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrustAlgoElementFieldMask & whichField))
    {
        _sfFrustAlgoElement.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrustCompShaderAlgoFieldMask & whichField))
    {
        _sfFrustCompShaderAlgo.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CullNodeFieldMask & whichField))
    {
        _sfCullNode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CullAlgoElementFieldMask & whichField))
    {
        _sfCullAlgoElement.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CullCompShaderAlgoFieldMask & whichField))
    {
        _sfCullCompShaderAlgo.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MultiLightChunkFieldMask & whichField))
    {
        _sfMultiLightChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderProgChunkFieldMask & whichField))
    {
        _sfShaderProgChunk.copyToBin(pMem);
    }
}

void ClusterShadingStageBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ActivateFieldMask & whichField))
    {
        editSField(ActivateFieldMask);
        _sfActivate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlockSizeFieldMask & whichField))
    {
        editSField(BlockSizeFieldMask);
        _sfBlockSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TileSizeFieldMask & whichField))
    {
        editSField(TileSizeFieldMask);
        _sfTileSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NumClusterZFieldMask & whichField))
    {
        editSField(NumClusterZFieldMask);
        _sfNumClusterZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NearPlaneOffsetFieldMask & whichField))
    {
        editSField(NearPlaneOffsetFieldMask);
        _sfNearPlaneOffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DispatchDataBindingPntFieldMask & whichField))
    {
        editSField(DispatchDataBindingPntFieldMask);
        _sfDispatchDataBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClusterDataBindingPntFieldMask & whichField))
    {
        editSField(ClusterDataBindingPntFieldMask);
        _sfClusterDataBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightBindingPntFieldMask & whichField))
    {
        editSField(LightBindingPntFieldMask);
        _sfLightBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AffectedLightIndexListBindingPntFieldMask & whichField))
    {
        editSField(AffectedLightIndexListBindingPntFieldMask);
        _sfAffectedLightIndexListBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrustumBindingPntFieldMask & whichField))
    {
        editSField(FrustumBindingPntFieldMask);
        _sfFrustumBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightIndexListBindingPntFieldMask & whichField))
    {
        editSField(LightIndexListBindingPntFieldMask);
        _sfLightIndexListBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightIndexCounterBindingPntFieldMask & whichField))
    {
        editSField(LightIndexCounterBindingPntFieldMask);
        _sfLightIndexCounterBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightGridBindingPntFieldMask & whichField))
    {
        editSField(LightGridBindingPntFieldMask);
        _sfLightGridBindingPnt.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AffectedLightIndexListBlockNameFieldMask & whichField))
    {
        editSField(AffectedLightIndexListBlockNameFieldMask);
        _sfAffectedLightIndexListBlockName.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AffectedLightIndexListVariableNameFieldMask & whichField))
    {
        editSField(AffectedLightIndexListVariableNameFieldMask);
        _sfAffectedLightIndexListVariableName.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightIndexListBlockNameFieldMask & whichField))
    {
        editSField(LightIndexListBlockNameFieldMask);
        _sfLightIndexListBlockName.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightIndexListVariableNameFieldMask & whichField))
    {
        editSField(LightIndexListVariableNameFieldMask);
        _sfLightIndexListVariableName.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClusteringDataBlockNameFieldMask & whichField))
    {
        editSField(ClusteringDataBlockNameFieldMask);
        _sfClusteringDataBlockName.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClusteringDataVariableNameFieldMask & whichField))
    {
        editSField(ClusteringDataVariableNameFieldMask);
        _sfClusteringDataVariableName.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightGridVariableNameFieldMask & whichField))
    {
        editSField(LightGridVariableNameFieldMask);
        _sfLightGridVariableName.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CalcFrustumsOnCPUFieldMask & whichField))
    {
        editSField(CalcFrustumsOnCPUFieldMask);
        _sfCalcFrustumsOnCPU.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CullLighsOnCPUFieldMask & whichField))
    {
        editSField(CullLighsOnCPUFieldMask);
        _sfCullLighsOnCPU.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DisabledFieldMask & whichField))
    {
        editSField(DisabledFieldMask);
        _sfDisabled.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaxLightIndexListSizeFieldMask & whichField))
    {
        editSField(MaxLightIndexListSizeFieldMask);
        _sfMaxLightIndexListSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaxClusterLightCountFieldMask & whichField))
    {
        editSField(MaxClusterLightCountFieldMask);
        _sfMaxClusterLightCount.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrustNodeFieldMask & whichField))
    {
        editSField(FrustNodeFieldMask);
        _sfFrustNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrustAlgoElementFieldMask & whichField))
    {
        editSField(FrustAlgoElementFieldMask);
        _sfFrustAlgoElement.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrustCompShaderAlgoFieldMask & whichField))
    {
        editSField(FrustCompShaderAlgoFieldMask);
        _sfFrustCompShaderAlgo.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CullNodeFieldMask & whichField))
    {
        editSField(CullNodeFieldMask);
        _sfCullNode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CullAlgoElementFieldMask & whichField))
    {
        editSField(CullAlgoElementFieldMask);
        _sfCullAlgoElement.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CullCompShaderAlgoFieldMask & whichField))
    {
        editSField(CullCompShaderAlgoFieldMask);
        _sfCullCompShaderAlgo.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MultiLightChunkFieldMask & whichField))
    {
        editSField(MultiLightChunkFieldMask);
        _sfMultiLightChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderProgChunkFieldMask & whichField))
    {
        editSField(ShaderProgChunkFieldMask);
        _sfShaderProgChunk.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ClusterShadingStageTransitPtr ClusterShadingStageBase::createLocal(BitVector bFlags)
{
    ClusterShadingStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ClusterShadingStage>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ClusterShadingStageTransitPtr ClusterShadingStageBase::createDependent(BitVector bFlags)
{
    ClusterShadingStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ClusterShadingStage>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ClusterShadingStageTransitPtr ClusterShadingStageBase::create(void)
{
    ClusterShadingStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ClusterShadingStage>(tmpPtr);
    }

    return fc;
}

ClusterShadingStage *ClusterShadingStageBase::createEmptyLocal(BitVector bFlags)
{
    ClusterShadingStage *returnValue;

    newPtr<ClusterShadingStage>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ClusterShadingStage *ClusterShadingStageBase::createEmpty(void)
{
    ClusterShadingStage *returnValue;

    newPtr<ClusterShadingStage>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ClusterShadingStageBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ClusterShadingStage *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ClusterShadingStage *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ClusterShadingStageBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ClusterShadingStage *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ClusterShadingStage *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ClusterShadingStageBase::shallowCopy(void) const
{
    ClusterShadingStage *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ClusterShadingStage *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ClusterShadingStageBase::ClusterShadingStageBase(void) :
    Inherited(),
    _sfActivate               (bool(true)),
    _sfBlockSize              (UInt32(16)),
    _sfTileSize               (UInt32(64)),
    _sfNumClusterZ            (UInt32(32)),
    _sfNearPlaneOffset        (Real32(5.f)),
    _sfDispatchDataBindingPnt (UInt32(1)),
    _sfClusterDataBindingPnt  (UInt32(2)),
    _sfLightBindingPnt        (UInt32(1)),
    _sfAffectedLightIndexListBindingPnt(UInt32(2)),
    _sfFrustumBindingPnt      (UInt32(3)),
    _sfLightIndexListBindingPnt(UInt32(4)),
    _sfLightIndexCounterBindingPnt(UInt32(5)),
    _sfLightGridBindingPnt    (UInt32(0)),
    _sfAffectedLightIndexListBlockName(std::string("AffectedLightIndexList")),
    _sfAffectedLightIndexListVariableName(std::string("affectedLightIndexList")),
    _sfLightIndexListBlockName(std::string("LightIndexList")),
    _sfLightIndexListVariableName(std::string("lightIndexList")),
    _sfClusteringDataBlockName(std::string("ClusteringData")),
    _sfClusteringDataVariableName(std::string("clusteringData")),
    _sfLightGridVariableName  (std::string("light_grid")),
    _sfCalcFrustumsOnCPU      (bool(false)),
    _sfCullLighsOnCPU         (bool(false)),
    _sfDisabled               (bool(false)),
    _sfMaxLightIndexListSize  (UInt32(2097152)),
    _sfMaxClusterLightCount   (UInt32(1024)),
    _sfFrustNode              (NULL),
    _sfFrustAlgoElement       (NULL),
    _sfFrustCompShaderAlgo    (NULL),
    _sfCullNode               (NULL),
    _sfCullAlgoElement        (NULL),
    _sfCullCompShaderAlgo     (NULL),
    _sfMultiLightChunk        (NULL),
    _sfShaderProgChunk        (NULL)
{
}

ClusterShadingStageBase::ClusterShadingStageBase(const ClusterShadingStageBase &source) :
    Inherited(source),
    _sfActivate               (source._sfActivate               ),
    _sfBlockSize              (source._sfBlockSize              ),
    _sfTileSize               (source._sfTileSize               ),
    _sfNumClusterZ            (source._sfNumClusterZ            ),
    _sfNearPlaneOffset        (source._sfNearPlaneOffset        ),
    _sfDispatchDataBindingPnt (source._sfDispatchDataBindingPnt ),
    _sfClusterDataBindingPnt  (source._sfClusterDataBindingPnt  ),
    _sfLightBindingPnt        (source._sfLightBindingPnt        ),
    _sfAffectedLightIndexListBindingPnt(source._sfAffectedLightIndexListBindingPnt),
    _sfFrustumBindingPnt      (source._sfFrustumBindingPnt      ),
    _sfLightIndexListBindingPnt(source._sfLightIndexListBindingPnt),
    _sfLightIndexCounterBindingPnt(source._sfLightIndexCounterBindingPnt),
    _sfLightGridBindingPnt    (source._sfLightGridBindingPnt    ),
    _sfAffectedLightIndexListBlockName(source._sfAffectedLightIndexListBlockName),
    _sfAffectedLightIndexListVariableName(source._sfAffectedLightIndexListVariableName),
    _sfLightIndexListBlockName(source._sfLightIndexListBlockName),
    _sfLightIndexListVariableName(source._sfLightIndexListVariableName),
    _sfClusteringDataBlockName(source._sfClusteringDataBlockName),
    _sfClusteringDataVariableName(source._sfClusteringDataVariableName),
    _sfLightGridVariableName  (source._sfLightGridVariableName  ),
    _sfCalcFrustumsOnCPU      (source._sfCalcFrustumsOnCPU      ),
    _sfCullLighsOnCPU         (source._sfCullLighsOnCPU         ),
    _sfDisabled               (source._sfDisabled               ),
    _sfMaxLightIndexListSize  (source._sfMaxLightIndexListSize  ),
    _sfMaxClusterLightCount   (source._sfMaxClusterLightCount   ),
    _sfFrustNode              (NULL),
    _sfFrustAlgoElement       (NULL),
    _sfFrustCompShaderAlgo    (NULL),
    _sfCullNode               (NULL),
    _sfCullAlgoElement        (NULL),
    _sfCullCompShaderAlgo     (NULL),
    _sfMultiLightChunk        (NULL),
    _sfShaderProgChunk        (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

ClusterShadingStageBase::~ClusterShadingStageBase(void)
{
}

void ClusterShadingStageBase::onCreate(const ClusterShadingStage *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ClusterShadingStage *pThis = static_cast<ClusterShadingStage *>(this);

        pThis->setFrustNode(source->getFrustNode());

        pThis->setFrustAlgoElement(source->getFrustAlgoElement());

        pThis->setFrustCompShaderAlgo(source->getFrustCompShaderAlgo());

        pThis->setCullNode(source->getCullNode());

        pThis->setCullAlgoElement(source->getCullAlgoElement());

        pThis->setCullCompShaderAlgo(source->getCullCompShaderAlgo());

        pThis->setMultiLightChunk(source->getMultiLightChunk());

        pThis->setShaderProgChunk(source->getShaderProgChunk());
    }
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleActivate        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfActivate,
             this->getType().getFieldDesc(ActivateFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleActivate       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfActivate,
             this->getType().getFieldDesc(ActivateFieldId),
             this));


    editSField(ActivateFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleBlockSize       (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfBlockSize,
             this->getType().getFieldDesc(BlockSizeFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleBlockSize      (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfBlockSize,
             this->getType().getFieldDesc(BlockSizeFieldId),
             this));


    editSField(BlockSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleTileSize        (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfTileSize,
             this->getType().getFieldDesc(TileSizeFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleTileSize       (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfTileSize,
             this->getType().getFieldDesc(TileSizeFieldId),
             this));


    editSField(TileSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleNumClusterZ     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfNumClusterZ,
             this->getType().getFieldDesc(NumClusterZFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleNumClusterZ    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfNumClusterZ,
             this->getType().getFieldDesc(NumClusterZFieldId),
             this));


    editSField(NumClusterZFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleNearPlaneOffset (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfNearPlaneOffset,
             this->getType().getFieldDesc(NearPlaneOffsetFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleNearPlaneOffset(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfNearPlaneOffset,
             this->getType().getFieldDesc(NearPlaneOffsetFieldId),
             this));


    editSField(NearPlaneOffsetFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleDispatchDataBindingPnt (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfDispatchDataBindingPnt,
             this->getType().getFieldDesc(DispatchDataBindingPntFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleDispatchDataBindingPnt(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfDispatchDataBindingPnt,
             this->getType().getFieldDesc(DispatchDataBindingPntFieldId),
             this));


    editSField(DispatchDataBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleClusterDataBindingPnt (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfClusterDataBindingPnt,
             this->getType().getFieldDesc(ClusterDataBindingPntFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleClusterDataBindingPnt(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfClusterDataBindingPnt,
             this->getType().getFieldDesc(ClusterDataBindingPntFieldId),
             this));


    editSField(ClusterDataBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleLightBindingPnt (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfLightBindingPnt,
             this->getType().getFieldDesc(LightBindingPntFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleLightBindingPnt(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfLightBindingPnt,
             this->getType().getFieldDesc(LightBindingPntFieldId),
             this));


    editSField(LightBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleAffectedLightIndexListBindingPnt (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfAffectedLightIndexListBindingPnt,
             this->getType().getFieldDesc(AffectedLightIndexListBindingPntFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleAffectedLightIndexListBindingPnt(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfAffectedLightIndexListBindingPnt,
             this->getType().getFieldDesc(AffectedLightIndexListBindingPntFieldId),
             this));


    editSField(AffectedLightIndexListBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleFrustumBindingPnt (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfFrustumBindingPnt,
             this->getType().getFieldDesc(FrustumBindingPntFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleFrustumBindingPnt(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfFrustumBindingPnt,
             this->getType().getFieldDesc(FrustumBindingPntFieldId),
             this));


    editSField(FrustumBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleLightIndexListBindingPnt (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfLightIndexListBindingPnt,
             this->getType().getFieldDesc(LightIndexListBindingPntFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleLightIndexListBindingPnt(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfLightIndexListBindingPnt,
             this->getType().getFieldDesc(LightIndexListBindingPntFieldId),
             this));


    editSField(LightIndexListBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleLightIndexCounterBindingPnt (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfLightIndexCounterBindingPnt,
             this->getType().getFieldDesc(LightIndexCounterBindingPntFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleLightIndexCounterBindingPnt(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfLightIndexCounterBindingPnt,
             this->getType().getFieldDesc(LightIndexCounterBindingPntFieldId),
             this));


    editSField(LightIndexCounterBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleLightGridBindingPnt (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfLightGridBindingPnt,
             this->getType().getFieldDesc(LightGridBindingPntFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleLightGridBindingPnt(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfLightGridBindingPnt,
             this->getType().getFieldDesc(LightGridBindingPntFieldId),
             this));


    editSField(LightGridBindingPntFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleAffectedLightIndexListBlockName (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfAffectedLightIndexListBlockName,
             this->getType().getFieldDesc(AffectedLightIndexListBlockNameFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleAffectedLightIndexListBlockName(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfAffectedLightIndexListBlockName,
             this->getType().getFieldDesc(AffectedLightIndexListBlockNameFieldId),
             this));


    editSField(AffectedLightIndexListBlockNameFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleAffectedLightIndexListVariableName (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfAffectedLightIndexListVariableName,
             this->getType().getFieldDesc(AffectedLightIndexListVariableNameFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleAffectedLightIndexListVariableName(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfAffectedLightIndexListVariableName,
             this->getType().getFieldDesc(AffectedLightIndexListVariableNameFieldId),
             this));


    editSField(AffectedLightIndexListVariableNameFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleLightIndexListBlockName (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfLightIndexListBlockName,
             this->getType().getFieldDesc(LightIndexListBlockNameFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleLightIndexListBlockName(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfLightIndexListBlockName,
             this->getType().getFieldDesc(LightIndexListBlockNameFieldId),
             this));


    editSField(LightIndexListBlockNameFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleLightIndexListVariableName (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfLightIndexListVariableName,
             this->getType().getFieldDesc(LightIndexListVariableNameFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleLightIndexListVariableName(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfLightIndexListVariableName,
             this->getType().getFieldDesc(LightIndexListVariableNameFieldId),
             this));


    editSField(LightIndexListVariableNameFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleClusteringDataBlockName (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfClusteringDataBlockName,
             this->getType().getFieldDesc(ClusteringDataBlockNameFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleClusteringDataBlockName(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfClusteringDataBlockName,
             this->getType().getFieldDesc(ClusteringDataBlockNameFieldId),
             this));


    editSField(ClusteringDataBlockNameFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleClusteringDataVariableName (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfClusteringDataVariableName,
             this->getType().getFieldDesc(ClusteringDataVariableNameFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleClusteringDataVariableName(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfClusteringDataVariableName,
             this->getType().getFieldDesc(ClusteringDataVariableNameFieldId),
             this));


    editSField(ClusteringDataVariableNameFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleLightGridVariableName (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfLightGridVariableName,
             this->getType().getFieldDesc(LightGridVariableNameFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleLightGridVariableName(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfLightGridVariableName,
             this->getType().getFieldDesc(LightGridVariableNameFieldId),
             this));


    editSField(LightGridVariableNameFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleCalcFrustumsOnCPU (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfCalcFrustumsOnCPU,
             this->getType().getFieldDesc(CalcFrustumsOnCPUFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleCalcFrustumsOnCPU(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfCalcFrustumsOnCPU,
             this->getType().getFieldDesc(CalcFrustumsOnCPUFieldId),
             this));


    editSField(CalcFrustumsOnCPUFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleCullLighsOnCPU  (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfCullLighsOnCPU,
             this->getType().getFieldDesc(CullLighsOnCPUFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleCullLighsOnCPU (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfCullLighsOnCPU,
             this->getType().getFieldDesc(CullLighsOnCPUFieldId),
             this));


    editSField(CullLighsOnCPUFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleDisabled        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDisabled,
             this->getType().getFieldDesc(DisabledFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleDisabled       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDisabled,
             this->getType().getFieldDesc(DisabledFieldId),
             this));


    editSField(DisabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleMaxLightIndexListSize (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfMaxLightIndexListSize,
             this->getType().getFieldDesc(MaxLightIndexListSizeFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleMaxLightIndexListSize(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfMaxLightIndexListSize,
             this->getType().getFieldDesc(MaxLightIndexListSizeFieldId),
             this));


    editSField(MaxLightIndexListSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleMaxClusterLightCount (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfMaxClusterLightCount,
             this->getType().getFieldDesc(MaxClusterLightCountFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleMaxClusterLightCount(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfMaxClusterLightCount,
             this->getType().getFieldDesc(MaxClusterLightCountFieldId),
             this));


    editSField(MaxClusterLightCountFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleFrustNode       (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfFrustNode,
             this->getType().getFieldDesc(FrustNodeFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleFrustNode      (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfFrustNode,
             this->getType().getFieldDesc(FrustNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStage::setFrustNode,
                    static_cast<ClusterShadingStage *>(this), ::boost::placeholders::_1));

    editSField(FrustNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleFrustAlgoElement (void) const
{
    SFUnrecAlgorithmComputeElementPtr::GetHandlePtr returnValue(
        new  SFUnrecAlgorithmComputeElementPtr::GetHandle(
             &_sfFrustAlgoElement,
             this->getType().getFieldDesc(FrustAlgoElementFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleFrustAlgoElement(void)
{
    SFUnrecAlgorithmComputeElementPtr::EditHandlePtr returnValue(
        new  SFUnrecAlgorithmComputeElementPtr::EditHandle(
             &_sfFrustAlgoElement,
             this->getType().getFieldDesc(FrustAlgoElementFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStage::setFrustAlgoElement,
                    static_cast<ClusterShadingStage *>(this), ::boost::placeholders::_1));

    editSField(FrustAlgoElementFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleFrustCompShaderAlgo (void) const
{
    SFUnrecComputeShaderAlgorithmPtr::GetHandlePtr returnValue(
        new  SFUnrecComputeShaderAlgorithmPtr::GetHandle(
             &_sfFrustCompShaderAlgo,
             this->getType().getFieldDesc(FrustCompShaderAlgoFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleFrustCompShaderAlgo(void)
{
    SFUnrecComputeShaderAlgorithmPtr::EditHandlePtr returnValue(
        new  SFUnrecComputeShaderAlgorithmPtr::EditHandle(
             &_sfFrustCompShaderAlgo,
             this->getType().getFieldDesc(FrustCompShaderAlgoFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStage::setFrustCompShaderAlgo,
                    static_cast<ClusterShadingStage *>(this), ::boost::placeholders::_1));

    editSField(FrustCompShaderAlgoFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleCullNode        (void) const
{
    SFUnrecNodePtr::GetHandlePtr returnValue(
        new  SFUnrecNodePtr::GetHandle(
             &_sfCullNode,
             this->getType().getFieldDesc(CullNodeFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleCullNode       (void)
{
    SFUnrecNodePtr::EditHandlePtr returnValue(
        new  SFUnrecNodePtr::EditHandle(
             &_sfCullNode,
             this->getType().getFieldDesc(CullNodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStage::setCullNode,
                    static_cast<ClusterShadingStage *>(this), ::boost::placeholders::_1));

    editSField(CullNodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleCullAlgoElement (void) const
{
    SFUnrecAlgorithmComputeElementPtr::GetHandlePtr returnValue(
        new  SFUnrecAlgorithmComputeElementPtr::GetHandle(
             &_sfCullAlgoElement,
             this->getType().getFieldDesc(CullAlgoElementFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleCullAlgoElement(void)
{
    SFUnrecAlgorithmComputeElementPtr::EditHandlePtr returnValue(
        new  SFUnrecAlgorithmComputeElementPtr::EditHandle(
             &_sfCullAlgoElement,
             this->getType().getFieldDesc(CullAlgoElementFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStage::setCullAlgoElement,
                    static_cast<ClusterShadingStage *>(this), ::boost::placeholders::_1));

    editSField(CullAlgoElementFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleCullCompShaderAlgo (void) const
{
    SFUnrecComputeShaderAlgorithmPtr::GetHandlePtr returnValue(
        new  SFUnrecComputeShaderAlgorithmPtr::GetHandle(
             &_sfCullCompShaderAlgo,
             this->getType().getFieldDesc(CullCompShaderAlgoFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleCullCompShaderAlgo(void)
{
    SFUnrecComputeShaderAlgorithmPtr::EditHandlePtr returnValue(
        new  SFUnrecComputeShaderAlgorithmPtr::EditHandle(
             &_sfCullCompShaderAlgo,
             this->getType().getFieldDesc(CullCompShaderAlgoFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStage::setCullCompShaderAlgo,
                    static_cast<ClusterShadingStage *>(this), ::boost::placeholders::_1));

    editSField(CullCompShaderAlgoFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleMultiLightChunk (void) const
{
    SFUnrecMultiLightChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecMultiLightChunkPtr::GetHandle(
             &_sfMultiLightChunk,
             this->getType().getFieldDesc(MultiLightChunkFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleMultiLightChunk(void)
{
    SFUnrecMultiLightChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecMultiLightChunkPtr::EditHandle(
             &_sfMultiLightChunk,
             this->getType().getFieldDesc(MultiLightChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStage::setMultiLightChunk,
                    static_cast<ClusterShadingStage *>(this), ::boost::placeholders::_1));

    editSField(MultiLightChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterShadingStageBase::getHandleShaderProgChunk (void) const
{
    SFUnrecShaderProgramChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderProgramChunkPtr::GetHandle(
             &_sfShaderProgChunk,
             this->getType().getFieldDesc(ShaderProgChunkFieldId),
             const_cast<ClusterShadingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterShadingStageBase::editHandleShaderProgChunk(void)
{
    SFUnrecShaderProgramChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderProgramChunkPtr::EditHandle(
             &_sfShaderProgChunk,
             this->getType().getFieldDesc(ShaderProgChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterShadingStage::setShaderProgChunk,
                    static_cast<ClusterShadingStage *>(this), ::boost::placeholders::_1));

    editSField(ShaderProgChunkFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ClusterShadingStageBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ClusterShadingStage *pThis = static_cast<ClusterShadingStage *>(this);

    pThis->execSync(static_cast<ClusterShadingStage *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ClusterShadingStageBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ClusterShadingStage *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ClusterShadingStage *>(pRefAspect),
                  dynamic_cast<const ClusterShadingStage *>(this));

    return returnValue;
}
#endif

void ClusterShadingStageBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ClusterShadingStage *>(this)->setFrustNode(NULL);

    static_cast<ClusterShadingStage *>(this)->setFrustAlgoElement(NULL);

    static_cast<ClusterShadingStage *>(this)->setFrustCompShaderAlgo(NULL);

    static_cast<ClusterShadingStage *>(this)->setCullNode(NULL);

    static_cast<ClusterShadingStage *>(this)->setCullAlgoElement(NULL);

    static_cast<ClusterShadingStage *>(this)->setCullCompShaderAlgo(NULL);

    static_cast<ClusterShadingStage *>(this)->setMultiLightChunk(NULL);

    static_cast<ClusterShadingStage *>(this)->setShaderProgChunk(NULL);


}


OSG_END_NAMESPACE
