/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SSAOStageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGFrameBufferObject.h"       // ScenePassRenderTarget Class
#include "OSGSimpleSHLChunk.h"          // ScenePassShader Class
#include "OSGChunkMaterial.h"           // ScenePassMaterial Class
#include "OSGMaterialChunk.h"           // SharedMaterialChunk Class

#include "OSGSSAOStageDataBase.h"
#include "OSGSSAOStageData.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SSAOStageData
    View dependent Data used by the ScreenSpaceAmbientOcclusionStage.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          SSAOStageDataBase::_sfWidth
    
*/

/*! \var UInt32          SSAOStageDataBase::_sfHeight
    
*/

/*! \var bool            SSAOStageDataBase::_sfCalcPosFromDepth
    
*/

/*! \var Matrix          SSAOStageDataBase::_sfProjection
    
*/

/*! \var FrameBufferObject * SSAOStageDataBase::_sfScenePassRenderTarget
    
*/

/*! \var SimpleSHLChunk * SSAOStageDataBase::_sfScenePassShader
    
*/

/*! \var ChunkMaterial * SSAOStageDataBase::_sfScenePassMaterial
    
*/

/*! \var FrameBufferObject * SSAOStageDataBase::_sfSSAOPassRenderTarget
    
*/

/*! \var SimpleSHLChunk * SSAOStageDataBase::_sfSSAOPassShader
    
*/

/*! \var ChunkMaterial * SSAOStageDataBase::_sfSSAOPassMaterial
    
*/

/*! \var FrameBufferObject * SSAOStageDataBase::_sfBlurPassRenderTarget
    
*/

/*! \var SimpleSHLChunk * SSAOStageDataBase::_sfBlurPassShader
    
*/

/*! \var ChunkMaterial * SSAOStageDataBase::_sfBlurPassMaterial
    
*/

/*! \var MaterialChunk * SSAOStageDataBase::_sfSharedMaterialChunk
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<SSAOStageData *, nsOSG>::_type(
    "SSAOStageDataPtr", 
    "StageDataPtr", 
    SSAOStageData::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(SSAOStageData *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SSAOStageDataBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "width",
        "",
        WidthFieldId, WidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleWidth),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "height",
        "",
        HeightFieldId, HeightFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleHeight),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleHeight));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "calcPosFromDepth",
        "",
        CalcPosFromDepthFieldId, CalcPosFromDepthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleCalcPosFromDepth),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleCalcPosFromDepth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "projection",
        "",
        ProjectionFieldId, ProjectionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleProjection),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleProjection));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "scenePassRenderTarget",
        "",
        ScenePassRenderTargetFieldId, ScenePassRenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleScenePassRenderTarget),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleScenePassRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "scenePassShader",
        "",
        ScenePassShaderFieldId, ScenePassShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleScenePassShader),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleScenePassShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "scenePassMaterial",
        "",
        ScenePassMaterialFieldId, ScenePassMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleScenePassMaterial),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleScenePassMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "SSAOPassRenderTarget",
        "",
        SSAOPassRenderTargetFieldId, SSAOPassRenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleSSAOPassRenderTarget),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleSSAOPassRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "SSAOPassShader",
        "",
        SSAOPassShaderFieldId, SSAOPassShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleSSAOPassShader),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleSSAOPassShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "SSAOPassMaterial",
        "",
        SSAOPassMaterialFieldId, SSAOPassMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleSSAOPassMaterial),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleSSAOPassMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "blurPassRenderTarget",
        "",
        BlurPassRenderTargetFieldId, BlurPassRenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleBlurPassRenderTarget),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleBlurPassRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "blurPassShader",
        "",
        BlurPassShaderFieldId, BlurPassShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleBlurPassShader),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleBlurPassShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "blurPassMaterial",
        "",
        BlurPassMaterialFieldId, BlurPassMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleBlurPassMaterial),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleBlurPassMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMaterialChunkPtr::Description(
        SFUnrecMaterialChunkPtr::getClassType(),
        "sharedMaterialChunk",
        "",
        SharedMaterialChunkFieldId, SharedMaterialChunkFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SSAOStageData::editHandleSharedMaterialChunk),
        static_cast<FieldGetMethodSig >(&SSAOStageData::getHandleSharedMaterialChunk));

    oType.addInitialDesc(pDesc);
}


SSAOStageDataBase::TypeObject SSAOStageDataBase::_type(
    SSAOStageDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&SSAOStageDataBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&SSAOStageData::initMethod),
    reinterpret_cast<ExitContainerF>(&SSAOStageData::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&SSAOStageData::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"SSAOStageData\"\n"
    "    parent=\"StageData\"\n"
    "    library=\"ContribTechniques\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    >\n"
    "\n"
    "    View dependent Data used by the ScreenSpaceAmbientOcclusionStage.\n"
    "\n"
    "    <Field\n"
    "        name=\"width\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"height\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    \n"
    "    <Field\n"
    "        name=\"calcPosFromDepth\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"projection\"\n"
    "        type=\"Matrix\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"scenePassRenderTarget\"\n"
    "        type=\"FrameBufferObjectPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"scenePassShader\"\n"
    "        type=\"SimpleSHLChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"scenePassMaterial\"\n"
    "        type=\"ChunkMaterialPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"SSAOPassRenderTarget\"\n"
    "        type=\"FrameBufferObjectPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"SSAOPassShader\"\n"
    "        type=\"SimpleSHLChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"SSAOPassMaterial\"\n"
    "        type=\"ChunkMaterialPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"blurPassRenderTarget\"\n"
    "        type=\"FrameBufferObjectPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"blurPassShader\"\n"
    "        type=\"SimpleSHLChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"blurPassMaterial\"\n"
    "        type=\"ChunkMaterialPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"sharedMaterialChunk\"\n"
    "        type=\"MaterialChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "View dependent Data used by the ScreenSpaceAmbientOcclusionStage.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SSAOStageDataBase::getType(void)
{
    return _type;
}

const FieldContainerType &SSAOStageDataBase::getType(void) const
{
    return _type;
}

UInt32 SSAOStageDataBase::getContainerSize(void) const
{
    return sizeof(SSAOStageData);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *SSAOStageDataBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFUInt32 *SSAOStageDataBase::getSFWidth(void) const
{
    return &_sfWidth;
}


SFUInt32 *SSAOStageDataBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFUInt32 *SSAOStageDataBase::getSFHeight(void) const
{
    return &_sfHeight;
}


SFBool *SSAOStageDataBase::editSFCalcPosFromDepth(void)
{
    editSField(CalcPosFromDepthFieldMask);

    return &_sfCalcPosFromDepth;
}

const SFBool *SSAOStageDataBase::getSFCalcPosFromDepth(void) const
{
    return &_sfCalcPosFromDepth;
}


SFMatrix *SSAOStageDataBase::editSFProjection(void)
{
    editSField(ProjectionFieldMask);

    return &_sfProjection;
}

const SFMatrix *SSAOStageDataBase::getSFProjection(void) const
{
    return &_sfProjection;
}


//! Get the SSAOStageData::_sfScenePassRenderTarget field.
const SFUnrecFrameBufferObjectPtr *SSAOStageDataBase::getSFScenePassRenderTarget(void) const
{
    return &_sfScenePassRenderTarget;
}

SFUnrecFrameBufferObjectPtr *SSAOStageDataBase::editSFScenePassRenderTarget(void)
{
    editSField(ScenePassRenderTargetFieldMask);

    return &_sfScenePassRenderTarget;
}

//! Get the value of the SSAOStageData::_sfScenePassRenderTarget field.
FrameBufferObject * SSAOStageDataBase::getScenePassRenderTarget(void) const
{
    return _sfScenePassRenderTarget.getValue();
}

//! Set the value of the SSAOStageData::_sfScenePassRenderTarget field.
void SSAOStageDataBase::setScenePassRenderTarget(FrameBufferObject * const value)
{
    editSField(ScenePassRenderTargetFieldMask);

    _sfScenePassRenderTarget.setValue(value);
}


//! Get the SSAOStageData::_sfScenePassShader field.
const SFUnrecSimpleSHLChunkPtr *SSAOStageDataBase::getSFScenePassShader(void) const
{
    return &_sfScenePassShader;
}

SFUnrecSimpleSHLChunkPtr *SSAOStageDataBase::editSFScenePassShader(void)
{
    editSField(ScenePassShaderFieldMask);

    return &_sfScenePassShader;
}

//! Get the value of the SSAOStageData::_sfScenePassShader field.
SimpleSHLChunk * SSAOStageDataBase::getScenePassShader(void) const
{
    return _sfScenePassShader.getValue();
}

//! Set the value of the SSAOStageData::_sfScenePassShader field.
void SSAOStageDataBase::setScenePassShader(SimpleSHLChunk * const value)
{
    editSField(ScenePassShaderFieldMask);

    _sfScenePassShader.setValue(value);
}


//! Get the SSAOStageData::_sfScenePassMaterial field.
const SFUnrecChunkMaterialPtr *SSAOStageDataBase::getSFScenePassMaterial(void) const
{
    return &_sfScenePassMaterial;
}

SFUnrecChunkMaterialPtr *SSAOStageDataBase::editSFScenePassMaterial(void)
{
    editSField(ScenePassMaterialFieldMask);

    return &_sfScenePassMaterial;
}

//! Get the value of the SSAOStageData::_sfScenePassMaterial field.
ChunkMaterial * SSAOStageDataBase::getScenePassMaterial(void) const
{
    return _sfScenePassMaterial.getValue();
}

//! Set the value of the SSAOStageData::_sfScenePassMaterial field.
void SSAOStageDataBase::setScenePassMaterial(ChunkMaterial * const value)
{
    editSField(ScenePassMaterialFieldMask);

    _sfScenePassMaterial.setValue(value);
}


//! Get the SSAOStageData::_sfSSAOPassRenderTarget field.
const SFUnrecFrameBufferObjectPtr *SSAOStageDataBase::getSFSSAOPassRenderTarget(void) const
{
    return &_sfSSAOPassRenderTarget;
}

SFUnrecFrameBufferObjectPtr *SSAOStageDataBase::editSFSSAOPassRenderTarget(void)
{
    editSField(SSAOPassRenderTargetFieldMask);

    return &_sfSSAOPassRenderTarget;
}

//! Get the value of the SSAOStageData::_sfSSAOPassRenderTarget field.
FrameBufferObject * SSAOStageDataBase::getSSAOPassRenderTarget(void) const
{
    return _sfSSAOPassRenderTarget.getValue();
}

//! Set the value of the SSAOStageData::_sfSSAOPassRenderTarget field.
void SSAOStageDataBase::setSSAOPassRenderTarget(FrameBufferObject * const value)
{
    editSField(SSAOPassRenderTargetFieldMask);

    _sfSSAOPassRenderTarget.setValue(value);
}


//! Get the SSAOStageData::_sfSSAOPassShader field.
const SFUnrecSimpleSHLChunkPtr *SSAOStageDataBase::getSFSSAOPassShader(void) const
{
    return &_sfSSAOPassShader;
}

SFUnrecSimpleSHLChunkPtr *SSAOStageDataBase::editSFSSAOPassShader (void)
{
    editSField(SSAOPassShaderFieldMask);

    return &_sfSSAOPassShader;
}

//! Get the value of the SSAOStageData::_sfSSAOPassShader field.
SimpleSHLChunk * SSAOStageDataBase::getSSAOPassShader(void) const
{
    return _sfSSAOPassShader.getValue();
}

//! Set the value of the SSAOStageData::_sfSSAOPassShader field.
void SSAOStageDataBase::setSSAOPassShader(SimpleSHLChunk * const value)
{
    editSField(SSAOPassShaderFieldMask);

    _sfSSAOPassShader.setValue(value);
}


//! Get the SSAOStageData::_sfSSAOPassMaterial field.
const SFUnrecChunkMaterialPtr *SSAOStageDataBase::getSFSSAOPassMaterial(void) const
{
    return &_sfSSAOPassMaterial;
}

SFUnrecChunkMaterialPtr *SSAOStageDataBase::editSFSSAOPassMaterial(void)
{
    editSField(SSAOPassMaterialFieldMask);

    return &_sfSSAOPassMaterial;
}

//! Get the value of the SSAOStageData::_sfSSAOPassMaterial field.
ChunkMaterial * SSAOStageDataBase::getSSAOPassMaterial(void) const
{
    return _sfSSAOPassMaterial.getValue();
}

//! Set the value of the SSAOStageData::_sfSSAOPassMaterial field.
void SSAOStageDataBase::setSSAOPassMaterial(ChunkMaterial * const value)
{
    editSField(SSAOPassMaterialFieldMask);

    _sfSSAOPassMaterial.setValue(value);
}


//! Get the SSAOStageData::_sfBlurPassRenderTarget field.
const SFUnrecFrameBufferObjectPtr *SSAOStageDataBase::getSFBlurPassRenderTarget(void) const
{
    return &_sfBlurPassRenderTarget;
}

SFUnrecFrameBufferObjectPtr *SSAOStageDataBase::editSFBlurPassRenderTarget(void)
{
    editSField(BlurPassRenderTargetFieldMask);

    return &_sfBlurPassRenderTarget;
}

//! Get the value of the SSAOStageData::_sfBlurPassRenderTarget field.
FrameBufferObject * SSAOStageDataBase::getBlurPassRenderTarget(void) const
{
    return _sfBlurPassRenderTarget.getValue();
}

//! Set the value of the SSAOStageData::_sfBlurPassRenderTarget field.
void SSAOStageDataBase::setBlurPassRenderTarget(FrameBufferObject * const value)
{
    editSField(BlurPassRenderTargetFieldMask);

    _sfBlurPassRenderTarget.setValue(value);
}


//! Get the SSAOStageData::_sfBlurPassShader field.
const SFUnrecSimpleSHLChunkPtr *SSAOStageDataBase::getSFBlurPassShader(void) const
{
    return &_sfBlurPassShader;
}

SFUnrecSimpleSHLChunkPtr *SSAOStageDataBase::editSFBlurPassShader (void)
{
    editSField(BlurPassShaderFieldMask);

    return &_sfBlurPassShader;
}

//! Get the value of the SSAOStageData::_sfBlurPassShader field.
SimpleSHLChunk * SSAOStageDataBase::getBlurPassShader(void) const
{
    return _sfBlurPassShader.getValue();
}

//! Set the value of the SSAOStageData::_sfBlurPassShader field.
void SSAOStageDataBase::setBlurPassShader(SimpleSHLChunk * const value)
{
    editSField(BlurPassShaderFieldMask);

    _sfBlurPassShader.setValue(value);
}


//! Get the SSAOStageData::_sfBlurPassMaterial field.
const SFUnrecChunkMaterialPtr *SSAOStageDataBase::getSFBlurPassMaterial(void) const
{
    return &_sfBlurPassMaterial;
}

SFUnrecChunkMaterialPtr *SSAOStageDataBase::editSFBlurPassMaterial(void)
{
    editSField(BlurPassMaterialFieldMask);

    return &_sfBlurPassMaterial;
}

//! Get the value of the SSAOStageData::_sfBlurPassMaterial field.
ChunkMaterial * SSAOStageDataBase::getBlurPassMaterial(void) const
{
    return _sfBlurPassMaterial.getValue();
}

//! Set the value of the SSAOStageData::_sfBlurPassMaterial field.
void SSAOStageDataBase::setBlurPassMaterial(ChunkMaterial * const value)
{
    editSField(BlurPassMaterialFieldMask);

    _sfBlurPassMaterial.setValue(value);
}


//! Get the SSAOStageData::_sfSharedMaterialChunk field.
const SFUnrecMaterialChunkPtr *SSAOStageDataBase::getSFSharedMaterialChunk(void) const
{
    return &_sfSharedMaterialChunk;
}

SFUnrecMaterialChunkPtr *SSAOStageDataBase::editSFSharedMaterialChunk(void)
{
    editSField(SharedMaterialChunkFieldMask);

    return &_sfSharedMaterialChunk;
}

//! Get the value of the SSAOStageData::_sfSharedMaterialChunk field.
MaterialChunk * SSAOStageDataBase::getSharedMaterialChunk(void) const
{
    return _sfSharedMaterialChunk.getValue();
}

//! Set the value of the SSAOStageData::_sfSharedMaterialChunk field.
void SSAOStageDataBase::setSharedMaterialChunk(MaterialChunk * const value)
{
    editSField(SharedMaterialChunkFieldMask);

    _sfSharedMaterialChunk.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT SSAOStageDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }
    if(FieldBits::NoField != (CalcPosFromDepthFieldMask & whichField))
    {
        returnValue += _sfCalcPosFromDepth.getBinSize();
    }
    if(FieldBits::NoField != (ProjectionFieldMask & whichField))
    {
        returnValue += _sfProjection.getBinSize();
    }
    if(FieldBits::NoField != (ScenePassRenderTargetFieldMask & whichField))
    {
        returnValue += _sfScenePassRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (ScenePassShaderFieldMask & whichField))
    {
        returnValue += _sfScenePassShader.getBinSize();
    }
    if(FieldBits::NoField != (ScenePassMaterialFieldMask & whichField))
    {
        returnValue += _sfScenePassMaterial.getBinSize();
    }
    if(FieldBits::NoField != (SSAOPassRenderTargetFieldMask & whichField))
    {
        returnValue += _sfSSAOPassRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (SSAOPassShaderFieldMask & whichField))
    {
        returnValue += _sfSSAOPassShader.getBinSize();
    }
    if(FieldBits::NoField != (SSAOPassMaterialFieldMask & whichField))
    {
        returnValue += _sfSSAOPassMaterial.getBinSize();
    }
    if(FieldBits::NoField != (BlurPassRenderTargetFieldMask & whichField))
    {
        returnValue += _sfBlurPassRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (BlurPassShaderFieldMask & whichField))
    {
        returnValue += _sfBlurPassShader.getBinSize();
    }
    if(FieldBits::NoField != (BlurPassMaterialFieldMask & whichField))
    {
        returnValue += _sfBlurPassMaterial.getBinSize();
    }
    if(FieldBits::NoField != (SharedMaterialChunkFieldMask & whichField))
    {
        returnValue += _sfSharedMaterialChunk.getBinSize();
    }

    return returnValue;
}

void SSAOStageDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CalcPosFromDepthFieldMask & whichField))
    {
        _sfCalcPosFromDepth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ProjectionFieldMask & whichField))
    {
        _sfProjection.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScenePassRenderTargetFieldMask & whichField))
    {
        _sfScenePassRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScenePassShaderFieldMask & whichField))
    {
        _sfScenePassShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScenePassMaterialFieldMask & whichField))
    {
        _sfScenePassMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SSAOPassRenderTargetFieldMask & whichField))
    {
        _sfSSAOPassRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SSAOPassShaderFieldMask & whichField))
    {
        _sfSSAOPassShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SSAOPassMaterialFieldMask & whichField))
    {
        _sfSSAOPassMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurPassRenderTargetFieldMask & whichField))
    {
        _sfBlurPassRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurPassShaderFieldMask & whichField))
    {
        _sfBlurPassShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurPassMaterialFieldMask & whichField))
    {
        _sfBlurPassMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SharedMaterialChunkFieldMask & whichField))
    {
        _sfSharedMaterialChunk.copyToBin(pMem);
    }
}

void SSAOStageDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        editSField(WidthFieldMask);
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        editSField(HeightFieldMask);
        _sfHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CalcPosFromDepthFieldMask & whichField))
    {
        editSField(CalcPosFromDepthFieldMask);
        _sfCalcPosFromDepth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ProjectionFieldMask & whichField))
    {
        editSField(ProjectionFieldMask);
        _sfProjection.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScenePassRenderTargetFieldMask & whichField))
    {
        editSField(ScenePassRenderTargetFieldMask);
        _sfScenePassRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScenePassShaderFieldMask & whichField))
    {
        editSField(ScenePassShaderFieldMask);
        _sfScenePassShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScenePassMaterialFieldMask & whichField))
    {
        editSField(ScenePassMaterialFieldMask);
        _sfScenePassMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SSAOPassRenderTargetFieldMask & whichField))
    {
        editSField(SSAOPassRenderTargetFieldMask);
        _sfSSAOPassRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SSAOPassShaderFieldMask & whichField))
    {
        editSField(SSAOPassShaderFieldMask);
        _sfSSAOPassShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SSAOPassMaterialFieldMask & whichField))
    {
        editSField(SSAOPassMaterialFieldMask);
        _sfSSAOPassMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurPassRenderTargetFieldMask & whichField))
    {
        editSField(BlurPassRenderTargetFieldMask);
        _sfBlurPassRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurPassShaderFieldMask & whichField))
    {
        editSField(BlurPassShaderFieldMask);
        _sfBlurPassShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurPassMaterialFieldMask & whichField))
    {
        editSField(BlurPassMaterialFieldMask);
        _sfBlurPassMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SharedMaterialChunkFieldMask & whichField))
    {
        editSField(SharedMaterialChunkFieldMask);
        _sfSharedMaterialChunk.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SSAOStageDataTransitPtr SSAOStageDataBase::createLocal(BitVector bFlags)
{
    SSAOStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SSAOStageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SSAOStageDataTransitPtr SSAOStageDataBase::createDependent(BitVector bFlags)
{
    SSAOStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SSAOStageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SSAOStageDataTransitPtr SSAOStageDataBase::create(void)
{
    SSAOStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SSAOStageData>(tmpPtr);
    }

    return fc;
}

SSAOStageData *SSAOStageDataBase::createEmptyLocal(BitVector bFlags)
{
    SSAOStageData *returnValue;

    newPtr<SSAOStageData>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SSAOStageData *SSAOStageDataBase::createEmpty(void)
{
    SSAOStageData *returnValue;

    newPtr<SSAOStageData>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SSAOStageDataBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SSAOStageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SSAOStageData *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SSAOStageDataBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SSAOStageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SSAOStageData *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SSAOStageDataBase::shallowCopy(void) const
{
    SSAOStageData *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SSAOStageData *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SSAOStageDataBase::SSAOStageDataBase(void) :
    Inherited(),
    _sfWidth                  (UInt32(0)),
    _sfHeight                 (UInt32(0)),
    _sfCalcPosFromDepth       (bool(false)),
    _sfProjection             (),
    _sfScenePassRenderTarget  (NULL),
    _sfScenePassShader        (NULL),
    _sfScenePassMaterial      (NULL),
    _sfSSAOPassRenderTarget   (NULL),
    _sfSSAOPassShader         (NULL),
    _sfSSAOPassMaterial       (NULL),
    _sfBlurPassRenderTarget   (NULL),
    _sfBlurPassShader         (NULL),
    _sfBlurPassMaterial       (NULL),
    _sfSharedMaterialChunk    (NULL)
{
}

SSAOStageDataBase::SSAOStageDataBase(const SSAOStageDataBase &source) :
    Inherited(source),
    _sfWidth                  (source._sfWidth                  ),
    _sfHeight                 (source._sfHeight                 ),
    _sfCalcPosFromDepth       (source._sfCalcPosFromDepth       ),
    _sfProjection             (source._sfProjection             ),
    _sfScenePassRenderTarget  (NULL),
    _sfScenePassShader        (NULL),
    _sfScenePassMaterial      (NULL),
    _sfSSAOPassRenderTarget   (NULL),
    _sfSSAOPassShader         (NULL),
    _sfSSAOPassMaterial       (NULL),
    _sfBlurPassRenderTarget   (NULL),
    _sfBlurPassShader         (NULL),
    _sfBlurPassMaterial       (NULL),
    _sfSharedMaterialChunk    (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

SSAOStageDataBase::~SSAOStageDataBase(void)
{
}

void SSAOStageDataBase::onCreate(const SSAOStageData *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SSAOStageData *pThis = static_cast<SSAOStageData *>(this);

        pThis->setScenePassRenderTarget(source->getScenePassRenderTarget());

        pThis->setScenePassShader(source->getScenePassShader());

        pThis->setScenePassMaterial(source->getScenePassMaterial());

        pThis->setSSAOPassRenderTarget(source->getSSAOPassRenderTarget());

        pThis->setSSAOPassShader(source->getSSAOPassShader());

        pThis->setSSAOPassMaterial(source->getSSAOPassMaterial());

        pThis->setBlurPassRenderTarget(source->getBlurPassRenderTarget());

        pThis->setBlurPassShader(source->getBlurPassShader());

        pThis->setBlurPassMaterial(source->getBlurPassMaterial());

        pThis->setSharedMaterialChunk(source->getSharedMaterialChunk());
    }
}

GetFieldHandlePtr SSAOStageDataBase::getHandleWidth           (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleWidth          (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             this));


    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleHeight          (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleHeight         (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             this));


    editSField(HeightFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleCalcPosFromDepth (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfCalcPosFromDepth,
             this->getType().getFieldDesc(CalcPosFromDepthFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleCalcPosFromDepth(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfCalcPosFromDepth,
             this->getType().getFieldDesc(CalcPosFromDepthFieldId),
             this));


    editSField(CalcPosFromDepthFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleProjection      (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfProjection,
             this->getType().getFieldDesc(ProjectionFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleProjection     (void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfProjection,
             this->getType().getFieldDesc(ProjectionFieldId),
             this));


    editSField(ProjectionFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleScenePassRenderTarget (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfScenePassRenderTarget,
             this->getType().getFieldDesc(ScenePassRenderTargetFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleScenePassRenderTarget(void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfScenePassRenderTarget,
             this->getType().getFieldDesc(ScenePassRenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SSAOStageData::setScenePassRenderTarget,
                    static_cast<SSAOStageData *>(this), ::boost::placeholders::_1));

    editSField(ScenePassRenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleScenePassShader (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfScenePassShader,
             this->getType().getFieldDesc(ScenePassShaderFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleScenePassShader(void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfScenePassShader,
             this->getType().getFieldDesc(ScenePassShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SSAOStageData::setScenePassShader,
                    static_cast<SSAOStageData *>(this), ::boost::placeholders::_1));

    editSField(ScenePassShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleScenePassMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfScenePassMaterial,
             this->getType().getFieldDesc(ScenePassMaterialFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleScenePassMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfScenePassMaterial,
             this->getType().getFieldDesc(ScenePassMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SSAOStageData::setScenePassMaterial,
                    static_cast<SSAOStageData *>(this), ::boost::placeholders::_1));

    editSField(ScenePassMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleSSAOPassRenderTarget (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfSSAOPassRenderTarget,
             this->getType().getFieldDesc(SSAOPassRenderTargetFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleSSAOPassRenderTarget(void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfSSAOPassRenderTarget,
             this->getType().getFieldDesc(SSAOPassRenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SSAOStageData::setSSAOPassRenderTarget,
                    static_cast<SSAOStageData *>(this), ::boost::placeholders::_1));

    editSField(SSAOPassRenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleSSAOPassShader  (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfSSAOPassShader,
             this->getType().getFieldDesc(SSAOPassShaderFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleSSAOPassShader (void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfSSAOPassShader,
             this->getType().getFieldDesc(SSAOPassShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SSAOStageData::setSSAOPassShader,
                    static_cast<SSAOStageData *>(this), ::boost::placeholders::_1));

    editSField(SSAOPassShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleSSAOPassMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfSSAOPassMaterial,
             this->getType().getFieldDesc(SSAOPassMaterialFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleSSAOPassMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfSSAOPassMaterial,
             this->getType().getFieldDesc(SSAOPassMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SSAOStageData::setSSAOPassMaterial,
                    static_cast<SSAOStageData *>(this), ::boost::placeholders::_1));

    editSField(SSAOPassMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleBlurPassRenderTarget (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfBlurPassRenderTarget,
             this->getType().getFieldDesc(BlurPassRenderTargetFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleBlurPassRenderTarget(void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfBlurPassRenderTarget,
             this->getType().getFieldDesc(BlurPassRenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SSAOStageData::setBlurPassRenderTarget,
                    static_cast<SSAOStageData *>(this), ::boost::placeholders::_1));

    editSField(BlurPassRenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleBlurPassShader  (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfBlurPassShader,
             this->getType().getFieldDesc(BlurPassShaderFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleBlurPassShader (void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfBlurPassShader,
             this->getType().getFieldDesc(BlurPassShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SSAOStageData::setBlurPassShader,
                    static_cast<SSAOStageData *>(this), ::boost::placeholders::_1));

    editSField(BlurPassShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleBlurPassMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfBlurPassMaterial,
             this->getType().getFieldDesc(BlurPassMaterialFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleBlurPassMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfBlurPassMaterial,
             this->getType().getFieldDesc(BlurPassMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SSAOStageData::setBlurPassMaterial,
                    static_cast<SSAOStageData *>(this), ::boost::placeholders::_1));

    editSField(BlurPassMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr SSAOStageDataBase::getHandleSharedMaterialChunk (void) const
{
    SFUnrecMaterialChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecMaterialChunkPtr::GetHandle(
             &_sfSharedMaterialChunk,
             this->getType().getFieldDesc(SharedMaterialChunkFieldId),
             const_cast<SSAOStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SSAOStageDataBase::editHandleSharedMaterialChunk(void)
{
    SFUnrecMaterialChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecMaterialChunkPtr::EditHandle(
             &_sfSharedMaterialChunk,
             this->getType().getFieldDesc(SharedMaterialChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SSAOStageData::setSharedMaterialChunk,
                    static_cast<SSAOStageData *>(this), ::boost::placeholders::_1));

    editSField(SharedMaterialChunkFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SSAOStageDataBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SSAOStageData *pThis = static_cast<SSAOStageData *>(this);

    pThis->execSync(static_cast<SSAOStageData *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SSAOStageDataBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SSAOStageData *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SSAOStageData *>(pRefAspect),
                  dynamic_cast<const SSAOStageData *>(this));

    return returnValue;
}
#endif

void SSAOStageDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SSAOStageData *>(this)->setScenePassRenderTarget(NULL);

    static_cast<SSAOStageData *>(this)->setScenePassShader(NULL);

    static_cast<SSAOStageData *>(this)->setScenePassMaterial(NULL);

    static_cast<SSAOStageData *>(this)->setSSAOPassRenderTarget(NULL);

    static_cast<SSAOStageData *>(this)->setSSAOPassShader(NULL);

    static_cast<SSAOStageData *>(this)->setSSAOPassMaterial(NULL);

    static_cast<SSAOStageData *>(this)->setBlurPassRenderTarget(NULL);

    static_cast<SSAOStageData *>(this)->setBlurPassShader(NULL);

    static_cast<SSAOStageData *>(this)->setBlurPassMaterial(NULL);

    static_cast<SSAOStageData *>(this)->setSharedMaterialChunk(NULL);


}


OSG_END_NAMESPACE
