/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class IBLStage
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGIBLSTAGEBASE_H_
#define _OSGIBLSTAGEBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribTechniquesDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStage.h" // Parent

#include "OSGSysFields.h"               // Activate type
#include "OSGTextureDescFields.h"       // EnvironmentTexDesc type
#include "OSGTextureObjChunkFields.h"   // EnvironmentTexObjChunk type

#include "OSGIBLStageFields.h"

OSG_BEGIN_NAMESPACE


class IBLStage;

//! \brief IBLStage Base Class.

class OSG_CONTRIBTECHNIQUES_DLLMAPPING IBLStageBase : public Stage
{
  public:

    typedef Stage Inherited;
    typedef Stage ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(IBLStage);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ActivateFieldId = Inherited::NextFieldId,
        EnvironmentTexUnitFieldId = ActivateFieldId + 1,
        IrradianceTexUnitFieldId = EnvironmentTexUnitFieldId + 1,
        PreFilterTexUnitFieldId = IrradianceTexUnitFieldId + 1,
        BrdfLutTexUnitFieldId = PreFilterTexUnitFieldId + 1,
        EnvironmentTexDescFieldId = BrdfLutTexUnitFieldId + 1,
        IrradianceTexDescFieldId = EnvironmentTexDescFieldId + 1,
        PreFilterTexDescFieldId = IrradianceTexDescFieldId + 1,
        BrdfLutTexDescFieldId = PreFilterTexDescFieldId + 1,
        EnvironmentTexObjChunkFieldId = BrdfLutTexDescFieldId + 1,
        IrradianceTexObjChunkFieldId = EnvironmentTexObjChunkFieldId + 1,
        PreFilterTexObjChunkFieldId = IrradianceTexObjChunkFieldId + 1,
        BrdfLutTexObjChunkFieldId = PreFilterTexObjChunkFieldId + 1,
        NextFieldId = BrdfLutTexObjChunkFieldId + 1
    };

    static const OSG::BitVector ActivateFieldMask =
        (TypeTraits<BitVector>::One << ActivateFieldId);
    static const OSG::BitVector EnvironmentTexUnitFieldMask =
        (TypeTraits<BitVector>::One << EnvironmentTexUnitFieldId);
    static const OSG::BitVector IrradianceTexUnitFieldMask =
        (TypeTraits<BitVector>::One << IrradianceTexUnitFieldId);
    static const OSG::BitVector PreFilterTexUnitFieldMask =
        (TypeTraits<BitVector>::One << PreFilterTexUnitFieldId);
    static const OSG::BitVector BrdfLutTexUnitFieldMask =
        (TypeTraits<BitVector>::One << BrdfLutTexUnitFieldId);
    static const OSG::BitVector EnvironmentTexDescFieldMask =
        (TypeTraits<BitVector>::One << EnvironmentTexDescFieldId);
    static const OSG::BitVector IrradianceTexDescFieldMask =
        (TypeTraits<BitVector>::One << IrradianceTexDescFieldId);
    static const OSG::BitVector PreFilterTexDescFieldMask =
        (TypeTraits<BitVector>::One << PreFilterTexDescFieldId);
    static const OSG::BitVector BrdfLutTexDescFieldMask =
        (TypeTraits<BitVector>::One << BrdfLutTexDescFieldId);
    static const OSG::BitVector EnvironmentTexObjChunkFieldMask =
        (TypeTraits<BitVector>::One << EnvironmentTexObjChunkFieldId);
    static const OSG::BitVector IrradianceTexObjChunkFieldMask =
        (TypeTraits<BitVector>::One << IrradianceTexObjChunkFieldId);
    static const OSG::BitVector PreFilterTexObjChunkFieldMask =
        (TypeTraits<BitVector>::One << PreFilterTexObjChunkFieldId);
    static const OSG::BitVector BrdfLutTexObjChunkFieldMask =
        (TypeTraits<BitVector>::One << BrdfLutTexObjChunkFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFBool            SFActivateType;
    typedef SFInt32           SFEnvironmentTexUnitType;
    typedef SFInt32           SFIrradianceTexUnitType;
    typedef SFInt32           SFPreFilterTexUnitType;
    typedef SFInt32           SFBrdfLutTexUnitType;
    typedef SFUnrecTextureDescPtr SFEnvironmentTexDescType;
    typedef SFUnrecTextureDescPtr SFIrradianceTexDescType;
    typedef SFUnrecTextureDescPtr SFPreFilterTexDescType;
    typedef SFUnrecTextureDescPtr SFBrdfLutTexDescType;
    typedef SFUnrecTextureObjChunkPtr SFEnvironmentTexObjChunkType;
    typedef SFUnrecTextureObjChunkPtr SFIrradianceTexObjChunkType;
    typedef SFUnrecTextureObjChunkPtr SFPreFilterTexObjChunkType;
    typedef SFUnrecTextureObjChunkPtr SFBrdfLutTexObjChunkType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFBool              *editSFActivate       (void);
            const SFBool              *getSFActivate        (void) const;

                  SFInt32             *editSFEnvironmentTexUnit(void);
            const SFInt32             *getSFEnvironmentTexUnit (void) const;

                  SFInt32             *editSFIrradianceTexUnit(void);
            const SFInt32             *getSFIrradianceTexUnit (void) const;

                  SFInt32             *editSFPreFilterTexUnit(void);
            const SFInt32             *getSFPreFilterTexUnit (void) const;

                  SFInt32             *editSFBrdfLutTexUnit (void);
            const SFInt32             *getSFBrdfLutTexUnit  (void) const;
            const SFUnrecTextureDescPtr *getSFEnvironmentTexDesc(void) const;
                  SFUnrecTextureDescPtr *editSFEnvironmentTexDesc(void);
            const SFUnrecTextureDescPtr *getSFIrradianceTexDesc(void) const;
                  SFUnrecTextureDescPtr *editSFIrradianceTexDesc(void);
            const SFUnrecTextureDescPtr *getSFPreFilterTexDesc(void) const;
                  SFUnrecTextureDescPtr *editSFPreFilterTexDesc(void);
            const SFUnrecTextureDescPtr *getSFBrdfLutTexDesc (void) const;
                  SFUnrecTextureDescPtr *editSFBrdfLutTexDesc (void);


                  bool                &editActivate       (void);
                  bool                 getActivate        (void) const;

                  Int32               &editEnvironmentTexUnit(void);
                  Int32                getEnvironmentTexUnit (void) const;

                  Int32               &editIrradianceTexUnit(void);
                  Int32                getIrradianceTexUnit (void) const;

                  Int32               &editPreFilterTexUnit(void);
                  Int32                getPreFilterTexUnit (void) const;

                  Int32               &editBrdfLutTexUnit (void);
                  Int32                getBrdfLutTexUnit  (void) const;

                  TextureDesc * getEnvironmentTexDesc(void) const;

                  TextureDesc * getIrradianceTexDesc(void) const;

                  TextureDesc * getPreFilterTexDesc(void) const;

                  TextureDesc * getBrdfLutTexDesc (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setActivate       (const bool value);
            void setEnvironmentTexUnit(const Int32 value);
            void setIrradianceTexUnit(const Int32 value);
            void setPreFilterTexUnit(const Int32 value);
            void setBrdfLutTexUnit (const Int32 value);
            void setEnvironmentTexDesc(TextureDesc * const value);
            void setIrradianceTexDesc(TextureDesc * const value);
            void setPreFilterTexDesc(TextureDesc * const value);
            void setBrdfLutTexDesc (TextureDesc * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  IBLStageTransitPtr  create          (void);
    static  IBLStage           *createEmpty     (void);

    static  IBLStageTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  IBLStage            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  IBLStageTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFBool            _sfActivate;
    SFInt32           _sfEnvironmentTexUnit;
    SFInt32           _sfIrradianceTexUnit;
    SFInt32           _sfPreFilterTexUnit;
    SFInt32           _sfBrdfLutTexUnit;
    SFUnrecTextureDescPtr _sfEnvironmentTexDesc;
    SFUnrecTextureDescPtr _sfIrradianceTexDesc;
    SFUnrecTextureDescPtr _sfPreFilterTexDesc;
    SFUnrecTextureDescPtr _sfBrdfLutTexDesc;
    SFUnrecTextureObjChunkPtr _sfEnvironmentTexObjChunk;
    SFUnrecTextureObjChunkPtr _sfIrradianceTexObjChunk;
    SFUnrecTextureObjChunkPtr _sfPreFilterTexObjChunk;
    SFUnrecTextureObjChunkPtr _sfBrdfLutTexObjChunk;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    IBLStageBase(void);
    IBLStageBase(const IBLStageBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~IBLStageBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const IBLStage *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleActivate        (void) const;
     EditFieldHandlePtr editHandleActivate       (void);
     GetFieldHandlePtr  getHandleEnvironmentTexUnit (void) const;
     EditFieldHandlePtr editHandleEnvironmentTexUnit(void);
     GetFieldHandlePtr  getHandleIrradianceTexUnit (void) const;
     EditFieldHandlePtr editHandleIrradianceTexUnit(void);
     GetFieldHandlePtr  getHandlePreFilterTexUnit (void) const;
     EditFieldHandlePtr editHandlePreFilterTexUnit(void);
     GetFieldHandlePtr  getHandleBrdfLutTexUnit  (void) const;
     EditFieldHandlePtr editHandleBrdfLutTexUnit (void);
     GetFieldHandlePtr  getHandleEnvironmentTexDesc (void) const;
     EditFieldHandlePtr editHandleEnvironmentTexDesc(void);
     GetFieldHandlePtr  getHandleIrradianceTexDesc (void) const;
     EditFieldHandlePtr editHandleIrradianceTexDesc(void);
     GetFieldHandlePtr  getHandlePreFilterTexDesc (void) const;
     EditFieldHandlePtr editHandlePreFilterTexDesc(void);
     GetFieldHandlePtr  getHandleBrdfLutTexDesc  (void) const;
     EditFieldHandlePtr editHandleBrdfLutTexDesc (void);
     GetFieldHandlePtr  getHandleEnvironmentTexObjChunk (void) const;
     EditFieldHandlePtr editHandleEnvironmentTexObjChunk(void);
     GetFieldHandlePtr  getHandleIrradianceTexObjChunk (void) const;
     EditFieldHandlePtr editHandleIrradianceTexObjChunk(void);
     GetFieldHandlePtr  getHandlePreFilterTexObjChunk (void) const;
     EditFieldHandlePtr editHandlePreFilterTexObjChunk(void);
     GetFieldHandlePtr  getHandleBrdfLutTexObjChunk (void) const;
     EditFieldHandlePtr editHandleBrdfLutTexObjChunk(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecTextureObjChunkPtr *getSFEnvironmentTexObjChunk (void) const;
                  SFUnrecTextureObjChunkPtr *editSFEnvironmentTexObjChunk(void);
            const SFUnrecTextureObjChunkPtr *getSFIrradianceTexObjChunk (void) const;
                  SFUnrecTextureObjChunkPtr *editSFIrradianceTexObjChunk(void);
            const SFUnrecTextureObjChunkPtr *getSFPreFilterTexObjChunk (void) const;
                  SFUnrecTextureObjChunkPtr *editSFPreFilterTexObjChunk(void);
            const SFUnrecTextureObjChunkPtr *getSFBrdfLutTexObjChunk (void) const;
                  SFUnrecTextureObjChunkPtr *editSFBrdfLutTexObjChunk(void);


                  TextureObjChunk * getEnvironmentTexObjChunk(void) const;

                  TextureObjChunk * getIrradianceTexObjChunk(void) const;

                  TextureObjChunk * getPreFilterTexObjChunk(void) const;

                  TextureObjChunk * getBrdfLutTexObjChunk(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setEnvironmentTexObjChunk(TextureObjChunk * const value);
            void setIrradianceTexObjChunk(TextureObjChunk * const value);
            void setPreFilterTexObjChunk(TextureObjChunk * const value);
            void setBrdfLutTexObjChunk(TextureObjChunk * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      IBLStageBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const IBLStageBase &source);
};

typedef IBLStageBase *IBLStageBaseP;

typedef CoredNodeRefPtr  <IBLStage> IBLStageNodeRefPtr;
typedef CoredNodeMTRefPtr<IBLStage> IBLStageNodeMTRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGIBLSTAGEBASE_H_ */
