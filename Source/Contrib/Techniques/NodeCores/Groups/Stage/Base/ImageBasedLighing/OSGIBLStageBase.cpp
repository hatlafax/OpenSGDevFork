/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class IBLStage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGTextureDesc.h"             // EnvironmentTexDesc Class
#include "OSGTextureObjChunk.h"         // EnvironmentTexObjChunk Class

#include "OSGIBLStageBase.h"
#include "OSGIBLStage.h"

#include <boost/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::IBLStage
    This stage provides basic textures used for the image base lighting rendering technique.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            IBLStageBase::_sfActivate
    If the stage is deactivated it does not perform any action on its own but act as a simple Group core.
*/

/*! \var Int32           IBLStageBase::_sfEnvironmentTexUnit
    Texture unit for the final irradiance texture map. This texture is activated
    for the subsequent scene rendering pass. Shaders are expected to provide a sampler
    for this texture.
*/

/*! \var Int32           IBLStageBase::_sfIrradianceTexUnit
    Texture unit for the final irradiance texture map. This texture is activated
    for the subsequent scene rendering pass. Shaders are expected to provide a sampler
    for this texture.
*/

/*! \var Int32           IBLStageBase::_sfPreFilterTexUnit
    Texture unit for the final prefilter texture map. This texture is activated
    for the subsequent scene rendering pass. Shaders are expected to provide a sampler
    for this texture.
*/

/*! \var Int32           IBLStageBase::_sfBrdfLutTexUnit
    Texture unit for the final BRDF LUT texture map. This texture is activated
    for the subsequent scene rendering pass. Shaders are expected to provide a sampler
    for this texture.
*/

/*! \var TextureDesc *   IBLStageBase::_sfEnvironmentTexDesc
    
*/

/*! \var TextureDesc *   IBLStageBase::_sfIrradianceTexDesc
    
*/

/*! \var TextureDesc *   IBLStageBase::_sfPreFilterTexDesc
    
*/

/*! \var TextureDesc *   IBLStageBase::_sfBrdfLutTexDesc
    
*/

/*! \var TextureObjChunk * IBLStageBase::_sfEnvironmentTexObjChunk
    
*/

/*! \var TextureObjChunk * IBLStageBase::_sfIrradianceTexObjChunk
    
*/

/*! \var TextureObjChunk * IBLStageBase::_sfPreFilterTexObjChunk
    
*/

/*! \var TextureObjChunk * IBLStageBase::_sfBrdfLutTexObjChunk
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<IBLStage *, nsOSG>::_type(
    "IBLStagePtr", 
    "StagePtr", 
    IBLStage::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(IBLStage *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           IBLStage *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           IBLStage *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void IBLStageBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "activate",
        "If the stage is deactivated it does not perform any action on its own but act as a simple Group core.\n",
        ActivateFieldId, ActivateFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandleActivate),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandleActivate));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "environmentTexUnit",
        "Texture unit for the final irradiance texture map. This texture is activated\n"
        "for the subsequent scene rendering pass. Shaders are expected to provide a sampler\n"
        "for this texture.\n",
        EnvironmentTexUnitFieldId, EnvironmentTexUnitFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandleEnvironmentTexUnit),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandleEnvironmentTexUnit));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "IrradianceTexUnit",
        "Texture unit for the final irradiance texture map. This texture is activated\n"
        "for the subsequent scene rendering pass. Shaders are expected to provide a sampler\n"
        "for this texture.\n",
        IrradianceTexUnitFieldId, IrradianceTexUnitFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandleIrradianceTexUnit),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandleIrradianceTexUnit));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "PreFilterTexUnit",
        "Texture unit for the final prefilter texture map. This texture is activated\n"
        "for the subsequent scene rendering pass. Shaders are expected to provide a sampler\n"
        "for this texture.\n",
        PreFilterTexUnitFieldId, PreFilterTexUnitFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandlePreFilterTexUnit),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandlePreFilterTexUnit));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "BrdfLutTexUnit",
        "Texture unit for the final BRDF LUT texture map. This texture is activated\n"
        "for the subsequent scene rendering pass. Shaders are expected to provide a sampler\n"
        "for this texture.\n",
        BrdfLutTexUnitFieldId, BrdfLutTexUnitFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandleBrdfLutTexUnit),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandleBrdfLutTexUnit));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureDescPtr::Description(
        SFUnrecTextureDescPtr::getClassType(),
        "environmentTexDesc",
        "",
        EnvironmentTexDescFieldId, EnvironmentTexDescFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandleEnvironmentTexDesc),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandleEnvironmentTexDesc));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureDescPtr::Description(
        SFUnrecTextureDescPtr::getClassType(),
        "IrradianceTexDesc",
        "",
        IrradianceTexDescFieldId, IrradianceTexDescFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandleIrradianceTexDesc),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandleIrradianceTexDesc));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureDescPtr::Description(
        SFUnrecTextureDescPtr::getClassType(),
        "PreFilterTexDesc",
        "",
        PreFilterTexDescFieldId, PreFilterTexDescFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandlePreFilterTexDesc),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandlePreFilterTexDesc));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureDescPtr::Description(
        SFUnrecTextureDescPtr::getClassType(),
        "BrdfLutTexDesc",
        "",
        BrdfLutTexDescFieldId, BrdfLutTexDescFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandleBrdfLutTexDesc),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandleBrdfLutTexDesc));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "environmentTexObjChunk",
        "",
        EnvironmentTexObjChunkFieldId, EnvironmentTexObjChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandleEnvironmentTexObjChunk),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandleEnvironmentTexObjChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "IrradianceTexObjChunk",
        "",
        IrradianceTexObjChunkFieldId, IrradianceTexObjChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandleIrradianceTexObjChunk),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandleIrradianceTexObjChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "PreFilterTexObjChunk",
        "",
        PreFilterTexObjChunkFieldId, PreFilterTexObjChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandlePreFilterTexObjChunk),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandlePreFilterTexObjChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "BrdfLutTexObjChunk",
        "",
        BrdfLutTexObjChunkFieldId, BrdfLutTexObjChunkFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStage::editHandleBrdfLutTexObjChunk),
        static_cast<FieldGetMethodSig >(&IBLStage::getHandleBrdfLutTexObjChunk));

    oType.addInitialDesc(pDesc);
}


IBLStageBase::TypeObject IBLStageBase::_type(
    IBLStageBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&IBLStageBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&IBLStage::initMethod),
    reinterpret_cast<ExitContainerF>(&IBLStage::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&IBLStage::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"IBLStage\"\n"
    "    parent=\"Stage\"\n"
    "    library=\"ContribTechniques\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    "    isBundle=\"false\"\n"
    "    >\n"
    "    This stage provides basic textures used for the image base lighting rendering technique.\n"
    "\n"
    "    <Field\n"
    "        name=\"activate\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"true\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        If the stage is deactivated it does not perform any action on its own but act as a simple Group core.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"environmentTexUnit\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"17\"\n"
    "        >\n"
    "        Texture unit for the final irradiance texture map. This texture is activated\n"
    "        for the subsequent scene rendering pass. Shaders are expected to provide a sampler\n"
    "        for this texture.\n"
    "    </Field>\n"
    "    \n"
    "    <Field\n"
    "        name=\"IrradianceTexUnit\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"18\"\n"
    "        >\n"
    "        Texture unit for the final irradiance texture map. This texture is activated\n"
    "        for the subsequent scene rendering pass. Shaders are expected to provide a sampler\n"
    "        for this texture.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"PreFilterTexUnit\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"19\"\n"
    "        >\n"
    "        Texture unit for the final prefilter texture map. This texture is activated\n"
    "        for the subsequent scene rendering pass. Shaders are expected to provide a sampler\n"
    "        for this texture.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"BrdfLutTexUnit\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"20\"\n"
    "        >\n"
    "        Texture unit for the final BRDF LUT texture map. This texture is activated\n"
    "        for the subsequent scene rendering pass. Shaders are expected to provide a sampler\n"
    "        for this texture.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"environmentTexDesc\"\n"
    "        type=\"TextureDescPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"IrradianceTexDesc\"\n"
    "        type=\"TextureDescPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"PreFilterTexDesc\"\n"
    "        type=\"TextureDescPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"BrdfLutTexDesc\"\n"
    "        type=\"TextureDescPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "\taccess=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"environmentTexObjChunk\"\n"
    "        type=\"TextureObjChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "\taccess=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"IrradianceTexObjChunk\"\n"
    "        type=\"TextureObjChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "\taccess=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"PreFilterTexObjChunk\"\n"
    "        type=\"TextureObjChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "\taccess=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"BrdfLutTexObjChunk\"\n"
    "        type=\"TextureObjChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "\taccess=\"protected\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "This stage provides basic textures used for the image base lighting rendering technique.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &IBLStageBase::getType(void)
{
    return _type;
}

const FieldContainerType &IBLStageBase::getType(void) const
{
    return _type;
}

UInt32 IBLStageBase::getContainerSize(void) const
{
    return sizeof(IBLStage);
}

/*------------------------- decorator get ------------------------------*/


SFBool *IBLStageBase::editSFActivate(void)
{
    editSField(ActivateFieldMask);

    return &_sfActivate;
}

const SFBool *IBLStageBase::getSFActivate(void) const
{
    return &_sfActivate;
}


SFInt32 *IBLStageBase::editSFEnvironmentTexUnit(void)
{
    editSField(EnvironmentTexUnitFieldMask);

    return &_sfEnvironmentTexUnit;
}

const SFInt32 *IBLStageBase::getSFEnvironmentTexUnit(void) const
{
    return &_sfEnvironmentTexUnit;
}


SFInt32 *IBLStageBase::editSFIrradianceTexUnit(void)
{
    editSField(IrradianceTexUnitFieldMask);

    return &_sfIrradianceTexUnit;
}

const SFInt32 *IBLStageBase::getSFIrradianceTexUnit(void) const
{
    return &_sfIrradianceTexUnit;
}


SFInt32 *IBLStageBase::editSFPreFilterTexUnit(void)
{
    editSField(PreFilterTexUnitFieldMask);

    return &_sfPreFilterTexUnit;
}

const SFInt32 *IBLStageBase::getSFPreFilterTexUnit(void) const
{
    return &_sfPreFilterTexUnit;
}


SFInt32 *IBLStageBase::editSFBrdfLutTexUnit(void)
{
    editSField(BrdfLutTexUnitFieldMask);

    return &_sfBrdfLutTexUnit;
}

const SFInt32 *IBLStageBase::getSFBrdfLutTexUnit(void) const
{
    return &_sfBrdfLutTexUnit;
}


//! Get the IBLStage::_sfEnvironmentTexDesc field.
const SFUnrecTextureDescPtr *IBLStageBase::getSFEnvironmentTexDesc(void) const
{
    return &_sfEnvironmentTexDesc;
}

SFUnrecTextureDescPtr *IBLStageBase::editSFEnvironmentTexDesc(void)
{
    editSField(EnvironmentTexDescFieldMask);

    return &_sfEnvironmentTexDesc;
}

//! Get the value of the IBLStage::_sfEnvironmentTexDesc field.
TextureDesc * IBLStageBase::getEnvironmentTexDesc(void) const
{
    return _sfEnvironmentTexDesc.getValue();
}

//! Set the value of the IBLStage::_sfEnvironmentTexDesc field.
void IBLStageBase::setEnvironmentTexDesc(TextureDesc * const value)
{
    editSField(EnvironmentTexDescFieldMask);

    _sfEnvironmentTexDesc.setValue(value);
}


//! Get the IBLStage::_sfIrradianceTexDesc field.
const SFUnrecTextureDescPtr *IBLStageBase::getSFIrradianceTexDesc(void) const
{
    return &_sfIrradianceTexDesc;
}

SFUnrecTextureDescPtr *IBLStageBase::editSFIrradianceTexDesc(void)
{
    editSField(IrradianceTexDescFieldMask);

    return &_sfIrradianceTexDesc;
}

//! Get the value of the IBLStage::_sfIrradianceTexDesc field.
TextureDesc * IBLStageBase::getIrradianceTexDesc(void) const
{
    return _sfIrradianceTexDesc.getValue();
}

//! Set the value of the IBLStage::_sfIrradianceTexDesc field.
void IBLStageBase::setIrradianceTexDesc(TextureDesc * const value)
{
    editSField(IrradianceTexDescFieldMask);

    _sfIrradianceTexDesc.setValue(value);
}


//! Get the IBLStage::_sfPreFilterTexDesc field.
const SFUnrecTextureDescPtr *IBLStageBase::getSFPreFilterTexDesc(void) const
{
    return &_sfPreFilterTexDesc;
}

SFUnrecTextureDescPtr *IBLStageBase::editSFPreFilterTexDesc(void)
{
    editSField(PreFilterTexDescFieldMask);

    return &_sfPreFilterTexDesc;
}

//! Get the value of the IBLStage::_sfPreFilterTexDesc field.
TextureDesc * IBLStageBase::getPreFilterTexDesc(void) const
{
    return _sfPreFilterTexDesc.getValue();
}

//! Set the value of the IBLStage::_sfPreFilterTexDesc field.
void IBLStageBase::setPreFilterTexDesc(TextureDesc * const value)
{
    editSField(PreFilterTexDescFieldMask);

    _sfPreFilterTexDesc.setValue(value);
}


//! Get the IBLStage::_sfBrdfLutTexDesc field.
const SFUnrecTextureDescPtr *IBLStageBase::getSFBrdfLutTexDesc(void) const
{
    return &_sfBrdfLutTexDesc;
}

SFUnrecTextureDescPtr *IBLStageBase::editSFBrdfLutTexDesc (void)
{
    editSField(BrdfLutTexDescFieldMask);

    return &_sfBrdfLutTexDesc;
}

//! Get the value of the IBLStage::_sfBrdfLutTexDesc field.
TextureDesc * IBLStageBase::getBrdfLutTexDesc(void) const
{
    return _sfBrdfLutTexDesc.getValue();
}

//! Set the value of the IBLStage::_sfBrdfLutTexDesc field.
void IBLStageBase::setBrdfLutTexDesc(TextureDesc * const value)
{
    editSField(BrdfLutTexDescFieldMask);

    _sfBrdfLutTexDesc.setValue(value);
}


//! Get the IBLStage::_sfEnvironmentTexObjChunk field.
const SFUnrecTextureObjChunkPtr *IBLStageBase::getSFEnvironmentTexObjChunk(void) const
{
    return &_sfEnvironmentTexObjChunk;
}

SFUnrecTextureObjChunkPtr *IBLStageBase::editSFEnvironmentTexObjChunk(void)
{
    editSField(EnvironmentTexObjChunkFieldMask);

    return &_sfEnvironmentTexObjChunk;
}

//! Get the value of the IBLStage::_sfEnvironmentTexObjChunk field.
TextureObjChunk * IBLStageBase::getEnvironmentTexObjChunk(void) const
{
    return _sfEnvironmentTexObjChunk.getValue();
}

//! Set the value of the IBLStage::_sfEnvironmentTexObjChunk field.
void IBLStageBase::setEnvironmentTexObjChunk(TextureObjChunk * const value)
{
    editSField(EnvironmentTexObjChunkFieldMask);

    _sfEnvironmentTexObjChunk.setValue(value);
}


//! Get the IBLStage::_sfIrradianceTexObjChunk field.
const SFUnrecTextureObjChunkPtr *IBLStageBase::getSFIrradianceTexObjChunk(void) const
{
    return &_sfIrradianceTexObjChunk;
}

SFUnrecTextureObjChunkPtr *IBLStageBase::editSFIrradianceTexObjChunk(void)
{
    editSField(IrradianceTexObjChunkFieldMask);

    return &_sfIrradianceTexObjChunk;
}

//! Get the value of the IBLStage::_sfIrradianceTexObjChunk field.
TextureObjChunk * IBLStageBase::getIrradianceTexObjChunk(void) const
{
    return _sfIrradianceTexObjChunk.getValue();
}

//! Set the value of the IBLStage::_sfIrradianceTexObjChunk field.
void IBLStageBase::setIrradianceTexObjChunk(TextureObjChunk * const value)
{
    editSField(IrradianceTexObjChunkFieldMask);

    _sfIrradianceTexObjChunk.setValue(value);
}


//! Get the IBLStage::_sfPreFilterTexObjChunk field.
const SFUnrecTextureObjChunkPtr *IBLStageBase::getSFPreFilterTexObjChunk(void) const
{
    return &_sfPreFilterTexObjChunk;
}

SFUnrecTextureObjChunkPtr *IBLStageBase::editSFPreFilterTexObjChunk(void)
{
    editSField(PreFilterTexObjChunkFieldMask);

    return &_sfPreFilterTexObjChunk;
}

//! Get the value of the IBLStage::_sfPreFilterTexObjChunk field.
TextureObjChunk * IBLStageBase::getPreFilterTexObjChunk(void) const
{
    return _sfPreFilterTexObjChunk.getValue();
}

//! Set the value of the IBLStage::_sfPreFilterTexObjChunk field.
void IBLStageBase::setPreFilterTexObjChunk(TextureObjChunk * const value)
{
    editSField(PreFilterTexObjChunkFieldMask);

    _sfPreFilterTexObjChunk.setValue(value);
}


//! Get the IBLStage::_sfBrdfLutTexObjChunk field.
const SFUnrecTextureObjChunkPtr *IBLStageBase::getSFBrdfLutTexObjChunk(void) const
{
    return &_sfBrdfLutTexObjChunk;
}

SFUnrecTextureObjChunkPtr *IBLStageBase::editSFBrdfLutTexObjChunk(void)
{
    editSField(BrdfLutTexObjChunkFieldMask);

    return &_sfBrdfLutTexObjChunk;
}

//! Get the value of the IBLStage::_sfBrdfLutTexObjChunk field.
TextureObjChunk * IBLStageBase::getBrdfLutTexObjChunk(void) const
{
    return _sfBrdfLutTexObjChunk.getValue();
}

//! Set the value of the IBLStage::_sfBrdfLutTexObjChunk field.
void IBLStageBase::setBrdfLutTexObjChunk(TextureObjChunk * const value)
{
    editSField(BrdfLutTexObjChunkFieldMask);

    _sfBrdfLutTexObjChunk.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT IBLStageBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ActivateFieldMask & whichField))
    {
        returnValue += _sfActivate.getBinSize();
    }
    if(FieldBits::NoField != (EnvironmentTexUnitFieldMask & whichField))
    {
        returnValue += _sfEnvironmentTexUnit.getBinSize();
    }
    if(FieldBits::NoField != (IrradianceTexUnitFieldMask & whichField))
    {
        returnValue += _sfIrradianceTexUnit.getBinSize();
    }
    if(FieldBits::NoField != (PreFilterTexUnitFieldMask & whichField))
    {
        returnValue += _sfPreFilterTexUnit.getBinSize();
    }
    if(FieldBits::NoField != (BrdfLutTexUnitFieldMask & whichField))
    {
        returnValue += _sfBrdfLutTexUnit.getBinSize();
    }
    if(FieldBits::NoField != (EnvironmentTexDescFieldMask & whichField))
    {
        returnValue += _sfEnvironmentTexDesc.getBinSize();
    }
    if(FieldBits::NoField != (IrradianceTexDescFieldMask & whichField))
    {
        returnValue += _sfIrradianceTexDesc.getBinSize();
    }
    if(FieldBits::NoField != (PreFilterTexDescFieldMask & whichField))
    {
        returnValue += _sfPreFilterTexDesc.getBinSize();
    }
    if(FieldBits::NoField != (BrdfLutTexDescFieldMask & whichField))
    {
        returnValue += _sfBrdfLutTexDesc.getBinSize();
    }
    if(FieldBits::NoField != (EnvironmentTexObjChunkFieldMask & whichField))
    {
        returnValue += _sfEnvironmentTexObjChunk.getBinSize();
    }
    if(FieldBits::NoField != (IrradianceTexObjChunkFieldMask & whichField))
    {
        returnValue += _sfIrradianceTexObjChunk.getBinSize();
    }
    if(FieldBits::NoField != (PreFilterTexObjChunkFieldMask & whichField))
    {
        returnValue += _sfPreFilterTexObjChunk.getBinSize();
    }
    if(FieldBits::NoField != (BrdfLutTexObjChunkFieldMask & whichField))
    {
        returnValue += _sfBrdfLutTexObjChunk.getBinSize();
    }

    return returnValue;
}

void IBLStageBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ActivateFieldMask & whichField))
    {
        _sfActivate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvironmentTexUnitFieldMask & whichField))
    {
        _sfEnvironmentTexUnit.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IrradianceTexUnitFieldMask & whichField))
    {
        _sfIrradianceTexUnit.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PreFilterTexUnitFieldMask & whichField))
    {
        _sfPreFilterTexUnit.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BrdfLutTexUnitFieldMask & whichField))
    {
        _sfBrdfLutTexUnit.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvironmentTexDescFieldMask & whichField))
    {
        _sfEnvironmentTexDesc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IrradianceTexDescFieldMask & whichField))
    {
        _sfIrradianceTexDesc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PreFilterTexDescFieldMask & whichField))
    {
        _sfPreFilterTexDesc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BrdfLutTexDescFieldMask & whichField))
    {
        _sfBrdfLutTexDesc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvironmentTexObjChunkFieldMask & whichField))
    {
        _sfEnvironmentTexObjChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IrradianceTexObjChunkFieldMask & whichField))
    {
        _sfIrradianceTexObjChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PreFilterTexObjChunkFieldMask & whichField))
    {
        _sfPreFilterTexObjChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BrdfLutTexObjChunkFieldMask & whichField))
    {
        _sfBrdfLutTexObjChunk.copyToBin(pMem);
    }
}

void IBLStageBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ActivateFieldMask & whichField))
    {
        editSField(ActivateFieldMask);
        _sfActivate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvironmentTexUnitFieldMask & whichField))
    {
        editSField(EnvironmentTexUnitFieldMask);
        _sfEnvironmentTexUnit.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IrradianceTexUnitFieldMask & whichField))
    {
        editSField(IrradianceTexUnitFieldMask);
        _sfIrradianceTexUnit.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PreFilterTexUnitFieldMask & whichField))
    {
        editSField(PreFilterTexUnitFieldMask);
        _sfPreFilterTexUnit.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BrdfLutTexUnitFieldMask & whichField))
    {
        editSField(BrdfLutTexUnitFieldMask);
        _sfBrdfLutTexUnit.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvironmentTexDescFieldMask & whichField))
    {
        editSField(EnvironmentTexDescFieldMask);
        _sfEnvironmentTexDesc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IrradianceTexDescFieldMask & whichField))
    {
        editSField(IrradianceTexDescFieldMask);
        _sfIrradianceTexDesc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PreFilterTexDescFieldMask & whichField))
    {
        editSField(PreFilterTexDescFieldMask);
        _sfPreFilterTexDesc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BrdfLutTexDescFieldMask & whichField))
    {
        editSField(BrdfLutTexDescFieldMask);
        _sfBrdfLutTexDesc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvironmentTexObjChunkFieldMask & whichField))
    {
        editSField(EnvironmentTexObjChunkFieldMask);
        _sfEnvironmentTexObjChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IrradianceTexObjChunkFieldMask & whichField))
    {
        editSField(IrradianceTexObjChunkFieldMask);
        _sfIrradianceTexObjChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PreFilterTexObjChunkFieldMask & whichField))
    {
        editSField(PreFilterTexObjChunkFieldMask);
        _sfPreFilterTexObjChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BrdfLutTexObjChunkFieldMask & whichField))
    {
        editSField(BrdfLutTexObjChunkFieldMask);
        _sfBrdfLutTexObjChunk.copyFromBin(pMem);
    }
}

//! create a new instance of the class
IBLStageTransitPtr IBLStageBase::createLocal(BitVector bFlags)
{
    IBLStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<IBLStage>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
IBLStageTransitPtr IBLStageBase::createDependent(BitVector bFlags)
{
    IBLStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<IBLStage>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
IBLStageTransitPtr IBLStageBase::create(void)
{
    IBLStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<IBLStage>(tmpPtr);
    }

    return fc;
}

IBLStage *IBLStageBase::createEmptyLocal(BitVector bFlags)
{
    IBLStage *returnValue;

    newPtr<IBLStage>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
IBLStage *IBLStageBase::createEmpty(void)
{
    IBLStage *returnValue;

    newPtr<IBLStage>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr IBLStageBase::shallowCopyLocal(
    BitVector bFlags) const
{
    IBLStage *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const IBLStage *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr IBLStageBase::shallowCopyDependent(
    BitVector bFlags) const
{
    IBLStage *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const IBLStage *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr IBLStageBase::shallowCopy(void) const
{
    IBLStage *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const IBLStage *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

IBLStageBase::IBLStageBase(void) :
    Inherited(),
    _sfActivate               (bool(true)),
    _sfEnvironmentTexUnit     (Int32(17)),
    _sfIrradianceTexUnit      (Int32(18)),
    _sfPreFilterTexUnit       (Int32(19)),
    _sfBrdfLutTexUnit         (Int32(20)),
    _sfEnvironmentTexDesc     (NULL),
    _sfIrradianceTexDesc      (NULL),
    _sfPreFilterTexDesc       (NULL),
    _sfBrdfLutTexDesc         (NULL),
    _sfEnvironmentTexObjChunk (NULL),
    _sfIrradianceTexObjChunk  (NULL),
    _sfPreFilterTexObjChunk   (NULL),
    _sfBrdfLutTexObjChunk     (NULL)
{
}

IBLStageBase::IBLStageBase(const IBLStageBase &source) :
    Inherited(source),
    _sfActivate               (source._sfActivate               ),
    _sfEnvironmentTexUnit     (source._sfEnvironmentTexUnit     ),
    _sfIrradianceTexUnit      (source._sfIrradianceTexUnit      ),
    _sfPreFilterTexUnit       (source._sfPreFilterTexUnit       ),
    _sfBrdfLutTexUnit         (source._sfBrdfLutTexUnit         ),
    _sfEnvironmentTexDesc     (NULL),
    _sfIrradianceTexDesc      (NULL),
    _sfPreFilterTexDesc       (NULL),
    _sfBrdfLutTexDesc         (NULL),
    _sfEnvironmentTexObjChunk (NULL),
    _sfIrradianceTexObjChunk  (NULL),
    _sfPreFilterTexObjChunk   (NULL),
    _sfBrdfLutTexObjChunk     (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

IBLStageBase::~IBLStageBase(void)
{
}

void IBLStageBase::onCreate(const IBLStage *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        IBLStage *pThis = static_cast<IBLStage *>(this);

        pThis->setEnvironmentTexDesc(source->getEnvironmentTexDesc());

        pThis->setIrradianceTexDesc(source->getIrradianceTexDesc());

        pThis->setPreFilterTexDesc(source->getPreFilterTexDesc());

        pThis->setBrdfLutTexDesc(source->getBrdfLutTexDesc());

        pThis->setEnvironmentTexObjChunk(source->getEnvironmentTexObjChunk());

        pThis->setIrradianceTexObjChunk(source->getIrradianceTexObjChunk());

        pThis->setPreFilterTexObjChunk(source->getPreFilterTexObjChunk());

        pThis->setBrdfLutTexObjChunk(source->getBrdfLutTexObjChunk());
    }
}

GetFieldHandlePtr IBLStageBase::getHandleActivate        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfActivate,
             this->getType().getFieldDesc(ActivateFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandleActivate       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfActivate,
             this->getType().getFieldDesc(ActivateFieldId),
             this));


    editSField(ActivateFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandleEnvironmentTexUnit (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfEnvironmentTexUnit,
             this->getType().getFieldDesc(EnvironmentTexUnitFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandleEnvironmentTexUnit(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfEnvironmentTexUnit,
             this->getType().getFieldDesc(EnvironmentTexUnitFieldId),
             this));


    editSField(EnvironmentTexUnitFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandleIrradianceTexUnit (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfIrradianceTexUnit,
             this->getType().getFieldDesc(IrradianceTexUnitFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandleIrradianceTexUnit(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfIrradianceTexUnit,
             this->getType().getFieldDesc(IrradianceTexUnitFieldId),
             this));


    editSField(IrradianceTexUnitFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandlePreFilterTexUnit (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfPreFilterTexUnit,
             this->getType().getFieldDesc(PreFilterTexUnitFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandlePreFilterTexUnit(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfPreFilterTexUnit,
             this->getType().getFieldDesc(PreFilterTexUnitFieldId),
             this));


    editSField(PreFilterTexUnitFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandleBrdfLutTexUnit  (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfBrdfLutTexUnit,
             this->getType().getFieldDesc(BrdfLutTexUnitFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandleBrdfLutTexUnit (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfBrdfLutTexUnit,
             this->getType().getFieldDesc(BrdfLutTexUnitFieldId),
             this));


    editSField(BrdfLutTexUnitFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandleEnvironmentTexDesc (void) const
{
    SFUnrecTextureDescPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureDescPtr::GetHandle(
             &_sfEnvironmentTexDesc,
             this->getType().getFieldDesc(EnvironmentTexDescFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandleEnvironmentTexDesc(void)
{
    SFUnrecTextureDescPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureDescPtr::EditHandle(
             &_sfEnvironmentTexDesc,
             this->getType().getFieldDesc(EnvironmentTexDescFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&IBLStage::setEnvironmentTexDesc,
                    static_cast<IBLStage *>(this), _1));

    editSField(EnvironmentTexDescFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandleIrradianceTexDesc (void) const
{
    SFUnrecTextureDescPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureDescPtr::GetHandle(
             &_sfIrradianceTexDesc,
             this->getType().getFieldDesc(IrradianceTexDescFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandleIrradianceTexDesc(void)
{
    SFUnrecTextureDescPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureDescPtr::EditHandle(
             &_sfIrradianceTexDesc,
             this->getType().getFieldDesc(IrradianceTexDescFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&IBLStage::setIrradianceTexDesc,
                    static_cast<IBLStage *>(this), _1));

    editSField(IrradianceTexDescFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandlePreFilterTexDesc (void) const
{
    SFUnrecTextureDescPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureDescPtr::GetHandle(
             &_sfPreFilterTexDesc,
             this->getType().getFieldDesc(PreFilterTexDescFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandlePreFilterTexDesc(void)
{
    SFUnrecTextureDescPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureDescPtr::EditHandle(
             &_sfPreFilterTexDesc,
             this->getType().getFieldDesc(PreFilterTexDescFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&IBLStage::setPreFilterTexDesc,
                    static_cast<IBLStage *>(this), _1));

    editSField(PreFilterTexDescFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandleBrdfLutTexDesc  (void) const
{
    SFUnrecTextureDescPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureDescPtr::GetHandle(
             &_sfBrdfLutTexDesc,
             this->getType().getFieldDesc(BrdfLutTexDescFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandleBrdfLutTexDesc (void)
{
    SFUnrecTextureDescPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureDescPtr::EditHandle(
             &_sfBrdfLutTexDesc,
             this->getType().getFieldDesc(BrdfLutTexDescFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&IBLStage::setBrdfLutTexDesc,
                    static_cast<IBLStage *>(this), _1));

    editSField(BrdfLutTexDescFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandleEnvironmentTexObjChunk (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfEnvironmentTexObjChunk,
             this->getType().getFieldDesc(EnvironmentTexObjChunkFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandleEnvironmentTexObjChunk(void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfEnvironmentTexObjChunk,
             this->getType().getFieldDesc(EnvironmentTexObjChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&IBLStage::setEnvironmentTexObjChunk,
                    static_cast<IBLStage *>(this), _1));

    editSField(EnvironmentTexObjChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandleIrradianceTexObjChunk (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfIrradianceTexObjChunk,
             this->getType().getFieldDesc(IrradianceTexObjChunkFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandleIrradianceTexObjChunk(void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfIrradianceTexObjChunk,
             this->getType().getFieldDesc(IrradianceTexObjChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&IBLStage::setIrradianceTexObjChunk,
                    static_cast<IBLStage *>(this), _1));

    editSField(IrradianceTexObjChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandlePreFilterTexObjChunk (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfPreFilterTexObjChunk,
             this->getType().getFieldDesc(PreFilterTexObjChunkFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandlePreFilterTexObjChunk(void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfPreFilterTexObjChunk,
             this->getType().getFieldDesc(PreFilterTexObjChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&IBLStage::setPreFilterTexObjChunk,
                    static_cast<IBLStage *>(this), _1));

    editSField(PreFilterTexObjChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageBase::getHandleBrdfLutTexObjChunk (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfBrdfLutTexObjChunk,
             this->getType().getFieldDesc(BrdfLutTexObjChunkFieldId),
             const_cast<IBLStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageBase::editHandleBrdfLutTexObjChunk(void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfBrdfLutTexObjChunk,
             this->getType().getFieldDesc(BrdfLutTexObjChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&IBLStage::setBrdfLutTexObjChunk,
                    static_cast<IBLStage *>(this), _1));

    editSField(BrdfLutTexObjChunkFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void IBLStageBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    IBLStage *pThis = static_cast<IBLStage *>(this);

    pThis->execSync(static_cast<IBLStage *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *IBLStageBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    IBLStage *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const IBLStage *>(pRefAspect),
                  dynamic_cast<const IBLStage *>(this));

    return returnValue;
}
#endif

void IBLStageBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<IBLStage *>(this)->setEnvironmentTexDesc(NULL);

    static_cast<IBLStage *>(this)->setIrradianceTexDesc(NULL);

    static_cast<IBLStage *>(this)->setPreFilterTexDesc(NULL);

    static_cast<IBLStage *>(this)->setBrdfLutTexDesc(NULL);

    static_cast<IBLStage *>(this)->setEnvironmentTexObjChunk(NULL);

    static_cast<IBLStage *>(this)->setIrradianceTexObjChunk(NULL);

    static_cast<IBLStage *>(this)->setPreFilterTexObjChunk(NULL);

    static_cast<IBLStage *>(this)->setBrdfLutTexObjChunk(NULL);


}


OSG_END_NAMESPACE
