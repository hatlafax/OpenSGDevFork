/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class IBLStageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGIBLStageDataBase.h"
#include "OSGIBLStageData.h"

#include <boost/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::IBLStageData
    View dependent Data used by the Image Based Lighing (IBL) stage.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          IBLStageDataBase::_sfWidth
    
*/

/*! \var UInt32          IBLStageDataBase::_sfHeight
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<IBLStageData *, nsOSG>::_type(
    "IBLStageDataPtr", 
    "StageDataPtr", 
    IBLStageData::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(IBLStageData *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void IBLStageDataBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "width",
        "",
        WidthFieldId, WidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStageData::editHandleWidth),
        static_cast<FieldGetMethodSig >(&IBLStageData::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "height",
        "",
        HeightFieldId, HeightFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&IBLStageData::editHandleHeight),
        static_cast<FieldGetMethodSig >(&IBLStageData::getHandleHeight));

    oType.addInitialDesc(pDesc);
}


IBLStageDataBase::TypeObject IBLStageDataBase::_type(
    IBLStageDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&IBLStageDataBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&IBLStageData::initMethod),
    reinterpret_cast<ExitContainerF>(&IBLStageData::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&IBLStageData::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"IBLStageData\"\n"
    "    parent=\"StageData\"\n"
    "    library=\"ContribTechniques\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    >\n"
    "\n"
    "    View dependent Data used by the Image Based Lighing (IBL) stage.\n"
    "\n"
    "    <Field\n"
    "        name=\"width\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"height\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "View dependent Data used by the Image Based Lighing (IBL) stage.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &IBLStageDataBase::getType(void)
{
    return _type;
}

const FieldContainerType &IBLStageDataBase::getType(void) const
{
    return _type;
}

UInt32 IBLStageDataBase::getContainerSize(void) const
{
    return sizeof(IBLStageData);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *IBLStageDataBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFUInt32 *IBLStageDataBase::getSFWidth(void) const
{
    return &_sfWidth;
}


SFUInt32 *IBLStageDataBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFUInt32 *IBLStageDataBase::getSFHeight(void) const
{
    return &_sfHeight;
}






/*------------------------------ access -----------------------------------*/

SizeT IBLStageDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }

    return returnValue;
}

void IBLStageDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
}

void IBLStageDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        editSField(WidthFieldMask);
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        editSField(HeightFieldMask);
        _sfHeight.copyFromBin(pMem);
    }
}

//! create a new instance of the class
IBLStageDataTransitPtr IBLStageDataBase::createLocal(BitVector bFlags)
{
    IBLStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<IBLStageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
IBLStageDataTransitPtr IBLStageDataBase::createDependent(BitVector bFlags)
{
    IBLStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<IBLStageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
IBLStageDataTransitPtr IBLStageDataBase::create(void)
{
    IBLStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<IBLStageData>(tmpPtr);
    }

    return fc;
}

IBLStageData *IBLStageDataBase::createEmptyLocal(BitVector bFlags)
{
    IBLStageData *returnValue;

    newPtr<IBLStageData>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
IBLStageData *IBLStageDataBase::createEmpty(void)
{
    IBLStageData *returnValue;

    newPtr<IBLStageData>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr IBLStageDataBase::shallowCopyLocal(
    BitVector bFlags) const
{
    IBLStageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const IBLStageData *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr IBLStageDataBase::shallowCopyDependent(
    BitVector bFlags) const
{
    IBLStageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const IBLStageData *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr IBLStageDataBase::shallowCopy(void) const
{
    IBLStageData *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const IBLStageData *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

IBLStageDataBase::IBLStageDataBase(void) :
    Inherited(),
    _sfWidth                  (UInt32(0)),
    _sfHeight                 (UInt32(0))
{
}

IBLStageDataBase::IBLStageDataBase(const IBLStageDataBase &source) :
    Inherited(source),
    _sfWidth                  (source._sfWidth                  ),
    _sfHeight                 (source._sfHeight                 )
{
}


/*-------------------------- destructors ----------------------------------*/

IBLStageDataBase::~IBLStageDataBase(void)
{
}


GetFieldHandlePtr IBLStageDataBase::getHandleWidth           (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             const_cast<IBLStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageDataBase::editHandleWidth          (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             this));


    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr IBLStageDataBase::getHandleHeight          (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             const_cast<IBLStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr IBLStageDataBase::editHandleHeight         (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             this));


    editSField(HeightFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void IBLStageDataBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    IBLStageData *pThis = static_cast<IBLStageData *>(this);

    pThis->execSync(static_cast<IBLStageData *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *IBLStageDataBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    IBLStageData *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const IBLStageData *>(pRefAspect),
                  dynamic_cast<const IBLStageData *>(this));

    return returnValue;
}
#endif

void IBLStageDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
