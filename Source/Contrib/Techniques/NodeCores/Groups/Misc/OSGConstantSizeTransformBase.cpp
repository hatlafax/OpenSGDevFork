/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ConstantSizeTransform!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGConstantSizeTransformBase.h"
#include "OSGConstantSizeTransform.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ConstantSizeTransform
    This transform renders its child tree at a constant size.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          ConstantSizeTransformBase::_sfDistance
    The distance allows to adapt the render size of the child tree.
    Actually, this transformation calculates a scale value from the 
    quotient of this distance value to the screen space diagonal of
    a unit cube.
*/

/*! \var Matrix          ConstantSizeTransformBase::_sfTransform
    The final render transform. It is calculated from the user
    provided matrix transform and the current measure value.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ConstantSizeTransform *, nsOSG>::_type(
    "ConstantSizeTransformPtr", 
    "TransformPtr", 
    ConstantSizeTransform::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ConstantSizeTransform *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ConstantSizeTransform *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ConstantSizeTransform *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ConstantSizeTransformBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "distance",
        "The distance allows to adapt the render size of the child tree.\n"
        "Actually, this transformation calculates a scale value from the \n"
        "quotient of this distance value to the screen space diagonal of\n"
        "a unit cube.\n",
        DistanceFieldId, DistanceFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ConstantSizeTransform::editHandleDistance),
        static_cast<FieldGetMethodSig >(&ConstantSizeTransform::getHandleDistance));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "transform",
        "The final render transform. It is calculated from the user\n"
        "provided matrix transform and the current measure value.\n",
        TransformFieldId, TransformFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ConstantSizeTransform::editHandleTransform),
        static_cast<FieldGetMethodSig >(&ConstantSizeTransform::getHandleTransform));

    oType.addInitialDesc(pDesc);
}


ConstantSizeTransformBase::TypeObject ConstantSizeTransformBase::_type(
    ConstantSizeTransformBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ConstantSizeTransformBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ConstantSizeTransform::initMethod),
    reinterpret_cast<ExitContainerF>(&ConstantSizeTransform::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ConstantSizeTransform::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"ConstantSizeTransform\"\n"
    "    parent=\"Transform\"\n"
    "    library=\"ContribTechniques\"\n"
    "    structure=\"concrete\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"true\"\n"
    "    >\n"
    "    This transform renders its child tree at a constant size.\n"
    "\n"
    "    <Field\n"
    "        name=\"distance\"\n"
    "        type=\"Real32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"1.0f\"\n"
    "    >\n"
    "    The distance allows to adapt the render size of the child tree.\n"
    "    Actually, this transformation calculates a scale value from the \n"
    "    quotient of this distance value to the screen space diagonal of\n"
    "    a unit cube.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"transform\"\n"
    "        type=\"Matrix\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"protected\"\n"
    "    >\n"
    "    The final render transform. It is calculated from the user\n"
    "    provided matrix transform and the current measure value.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "This transform renders its child tree at a constant size.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ConstantSizeTransformBase::getType(void)
{
    return _type;
}

const FieldContainerType &ConstantSizeTransformBase::getType(void) const
{
    return _type;
}

UInt32 ConstantSizeTransformBase::getContainerSize(void) const
{
    return sizeof(ConstantSizeTransform);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *ConstantSizeTransformBase::editSFDistance(void)
{
    editSField(DistanceFieldMask);

    return &_sfDistance;
}

const SFReal32 *ConstantSizeTransformBase::getSFDistance(void) const
{
    return &_sfDistance;
}


SFMatrix *ConstantSizeTransformBase::editSFTransform(void)
{
    editSField(TransformFieldMask);

    return &_sfTransform;
}

const SFMatrix *ConstantSizeTransformBase::getSFTransform(void) const
{
    return &_sfTransform;
}






/*------------------------------ access -----------------------------------*/

SizeT ConstantSizeTransformBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DistanceFieldMask & whichField))
    {
        returnValue += _sfDistance.getBinSize();
    }
    if(FieldBits::NoField != (TransformFieldMask & whichField))
    {
        returnValue += _sfTransform.getBinSize();
    }

    return returnValue;
}

void ConstantSizeTransformBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DistanceFieldMask & whichField))
    {
        _sfDistance.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TransformFieldMask & whichField))
    {
        _sfTransform.copyToBin(pMem);
    }
}

void ConstantSizeTransformBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DistanceFieldMask & whichField))
    {
        editSField(DistanceFieldMask);
        _sfDistance.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TransformFieldMask & whichField))
    {
        editSField(TransformFieldMask);
        _sfTransform.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ConstantSizeTransformTransitPtr ConstantSizeTransformBase::createLocal(BitVector bFlags)
{
    ConstantSizeTransformTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ConstantSizeTransform>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ConstantSizeTransformTransitPtr ConstantSizeTransformBase::createDependent(BitVector bFlags)
{
    ConstantSizeTransformTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ConstantSizeTransform>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ConstantSizeTransformTransitPtr ConstantSizeTransformBase::create(void)
{
    ConstantSizeTransformTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ConstantSizeTransform>(tmpPtr);
    }

    return fc;
}

ConstantSizeTransform *ConstantSizeTransformBase::createEmptyLocal(BitVector bFlags)
{
    ConstantSizeTransform *returnValue;

    newPtr<ConstantSizeTransform>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ConstantSizeTransform *ConstantSizeTransformBase::createEmpty(void)
{
    ConstantSizeTransform *returnValue;

    newPtr<ConstantSizeTransform>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ConstantSizeTransformBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ConstantSizeTransform *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ConstantSizeTransform *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ConstantSizeTransformBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ConstantSizeTransform *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ConstantSizeTransform *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ConstantSizeTransformBase::shallowCopy(void) const
{
    ConstantSizeTransform *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ConstantSizeTransform *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ConstantSizeTransformBase::ConstantSizeTransformBase(void) :
    Inherited(),
    _sfDistance               (Real32(1.0f)),
    _sfTransform              ()
{
}

ConstantSizeTransformBase::ConstantSizeTransformBase(const ConstantSizeTransformBase &source) :
    Inherited(source),
    _sfDistance               (source._sfDistance               ),
    _sfTransform              (source._sfTransform              )
{
}


/*-------------------------- destructors ----------------------------------*/

ConstantSizeTransformBase::~ConstantSizeTransformBase(void)
{
}


GetFieldHandlePtr ConstantSizeTransformBase::getHandleDistance        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfDistance,
             this->getType().getFieldDesc(DistanceFieldId),
             const_cast<ConstantSizeTransformBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ConstantSizeTransformBase::editHandleDistance       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfDistance,
             this->getType().getFieldDesc(DistanceFieldId),
             this));


    editSField(DistanceFieldMask);

    return returnValue;
}

GetFieldHandlePtr ConstantSizeTransformBase::getHandleTransform       (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfTransform,
             this->getType().getFieldDesc(TransformFieldId),
             const_cast<ConstantSizeTransformBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ConstantSizeTransformBase::editHandleTransform      (void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfTransform,
             this->getType().getFieldDesc(TransformFieldId),
             this));


    editSField(TransformFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ConstantSizeTransformBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ConstantSizeTransform *pThis = static_cast<ConstantSizeTransform *>(this);

    pThis->execSync(static_cast<ConstantSizeTransform *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ConstantSizeTransformBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ConstantSizeTransform *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ConstantSizeTransform *>(pRefAspect),
                  dynamic_cast<const ConstantSizeTransform *>(this));

    return returnValue;
}
#endif

void ConstantSizeTransformBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
