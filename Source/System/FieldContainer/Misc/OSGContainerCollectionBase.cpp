/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ContainerCollection!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // Containers Class

#include "OSGContainerCollectionBase.h"
#include "OSGContainerCollection.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ContainerCollection
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     ContainerCollectionBase::_sfName
    The name of the container collection.  Can be used to identify collections.
*/

/*! \var FieldContainer * ContainerCollectionBase::_mfContainers
    A list of containers held in the collection.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ContainerCollection *, nsOSG>::_type(
    "ContainerCollectionPtr", 
    "AttachmentPtr", 
    ContainerCollection::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ContainerCollection *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ContainerCollection *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ContainerCollection *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ContainerCollectionBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFString::Description(
        SFString::getClassType(),
        "name",
        "The name of the container collection.  Can be used to identify collections.\n",
        NameFieldId, NameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ContainerCollection::editHandleName),
        static_cast<FieldGetMethodSig >(&ContainerCollection::getHandleName));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecFieldContainerPtr::Description(
        MFUnrecFieldContainerPtr::getClassType(),
        "containers",
        "A list of containers held in the collection.\n",
        ContainersFieldId, ContainersFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ContainerCollection::editHandleContainers),
        static_cast<FieldGetMethodSig >(&ContainerCollection::getHandleContainers));

    oType.addInitialDesc(pDesc);
}


ContainerCollectionBase::TypeObject ContainerCollectionBase::_type(
    ContainerCollectionBase::getClassname(),
    Inherited::getClassname(),
    "ContainerCollection",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ContainerCollectionBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ContainerCollection::initMethod),
    reinterpret_cast<ExitContainerF>(&ContainerCollection::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ContainerCollection::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"ContainerCollection\"\n"
    "   parent=\"Attachment\"\n"
    "   library=\"System\"\n"
    "   structure=\"concrete\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   docGroupBase=\"GrpSystemFieldContainer\"\n"
    "   >\n"
    "  <Field\n"
    "\t name=\"name\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tThe name of the container collection.  Can be used to identify collections.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"containers\"\n"
    "\t type=\"FieldContainerPtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "     access=\"public\"\n"
    "\t >\n"
    "    A list of containers held in the collection.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ContainerCollectionBase::getType(void)
{
    return _type;
}

const FieldContainerType &ContainerCollectionBase::getType(void) const
{
    return _type;
}

UInt32 ContainerCollectionBase::getContainerSize(void) const
{
    return sizeof(ContainerCollection);
}

/*------------------------- decorator get ------------------------------*/


SFString *ContainerCollectionBase::editSFName(void)
{
    editSField(NameFieldMask);

    return &_sfName;
}

const SFString *ContainerCollectionBase::getSFName(void) const
{
    return &_sfName;
}


//! Get the ContainerCollection::_mfContainers field.
const MFUnrecFieldContainerPtr *ContainerCollectionBase::getMFContainers(void) const
{
    return &_mfContainers;
}

MFUnrecFieldContainerPtr *ContainerCollectionBase::editMFContainers     (void)
{
    editMField(ContainersFieldMask, _mfContainers);

    return &_mfContainers;
}
FieldContainer * ContainerCollectionBase::getContainers(const UInt32 index) const
{
    return _mfContainers[index];
}



void ContainerCollectionBase::pushToContainers(FieldContainer * const value)
{
    editMField(ContainersFieldMask, _mfContainers);

    _mfContainers.push_back(value);
}

void ContainerCollectionBase::assignContainers(const MFUnrecFieldContainerPtr &value)
{
    MFUnrecFieldContainerPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecFieldContainerPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<ContainerCollection *>(this)->clearContainers();

    while(elemIt != elemEnd)
    {
        this->pushToContainers(*elemIt);

        ++elemIt;
    }
}

void ContainerCollectionBase::removeFromContainers(UInt32 uiIndex)
{
    if(uiIndex < _mfContainers.size())
    {
        editMField(ContainersFieldMask, _mfContainers);

        _mfContainers.erase(uiIndex);
    }
}

void ContainerCollectionBase::removeObjFromContainers(FieldContainer * const value)
{
    Int32 iElemIdx = _mfContainers.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ContainersFieldMask, _mfContainers);

        _mfContainers.erase(iElemIdx);
    }
}
void ContainerCollectionBase::clearContainers(void)
{
    editMField(ContainersFieldMask, _mfContainers);


    _mfContainers.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT ContainerCollectionBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (NameFieldMask & whichField))
    {
        returnValue += _sfName.getBinSize();
    }
    if(FieldBits::NoField != (ContainersFieldMask & whichField))
    {
        returnValue += _mfContainers.getBinSize();
    }

    return returnValue;
}

void ContainerCollectionBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (NameFieldMask & whichField))
    {
        _sfName.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ContainersFieldMask & whichField))
    {
        _mfContainers.copyToBin(pMem);
    }
}

void ContainerCollectionBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (NameFieldMask & whichField))
    {
        editSField(NameFieldMask);
        _sfName.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ContainersFieldMask & whichField))
    {
        editMField(ContainersFieldMask, _mfContainers);
        _mfContainers.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ContainerCollectionTransitPtr ContainerCollectionBase::createLocal(BitVector bFlags)
{
    ContainerCollectionTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ContainerCollection>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ContainerCollectionTransitPtr ContainerCollectionBase::createDependent(BitVector bFlags)
{
    ContainerCollectionTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ContainerCollection>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ContainerCollectionTransitPtr ContainerCollectionBase::create(void)
{
    ContainerCollectionTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ContainerCollection>(tmpPtr);
    }

    return fc;
}

ContainerCollection *ContainerCollectionBase::createEmptyLocal(BitVector bFlags)
{
    ContainerCollection *returnValue;

    newPtr<ContainerCollection>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ContainerCollection *ContainerCollectionBase::createEmpty(void)
{
    ContainerCollection *returnValue;

    newPtr<ContainerCollection>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ContainerCollectionBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ContainerCollection *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ContainerCollection *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ContainerCollectionBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ContainerCollection *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ContainerCollection *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ContainerCollectionBase::shallowCopy(void) const
{
    ContainerCollection *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ContainerCollection *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ContainerCollectionBase::ContainerCollectionBase(void) :
    Inherited(),
    _sfName                   (),
    _mfContainers             ()
{
}

ContainerCollectionBase::ContainerCollectionBase(const ContainerCollectionBase &source) :
    Inherited(source),
    _sfName                   (source._sfName                   ),
    _mfContainers             ()
{
}


/*-------------------------- destructors ----------------------------------*/

ContainerCollectionBase::~ContainerCollectionBase(void)
{
}

void ContainerCollectionBase::onCreate(const ContainerCollection *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ContainerCollection *pThis = static_cast<ContainerCollection *>(this);

        MFUnrecFieldContainerPtr::const_iterator ContainersIt  =
            source->_mfContainers.begin();
        MFUnrecFieldContainerPtr::const_iterator ContainersEnd =
            source->_mfContainers.end  ();

        while(ContainersIt != ContainersEnd)
        {
            pThis->pushToContainers(*ContainersIt);

            ++ContainersIt;
        }
    }
}

GetFieldHandlePtr ContainerCollectionBase::getHandleName            (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfName,
             this->getType().getFieldDesc(NameFieldId),
             const_cast<ContainerCollectionBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ContainerCollectionBase::editHandleName           (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfName,
             this->getType().getFieldDesc(NameFieldId),
             this));


    editSField(NameFieldMask);

    return returnValue;
}

GetFieldHandlePtr ContainerCollectionBase::getHandleContainers      (void) const
{
    MFUnrecFieldContainerPtr::GetHandlePtr returnValue(
        new  MFUnrecFieldContainerPtr::GetHandle(
             &_mfContainers,
             this->getType().getFieldDesc(ContainersFieldId),
             const_cast<ContainerCollectionBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ContainerCollectionBase::editHandleContainers     (void)
{
    MFUnrecFieldContainerPtr::EditHandlePtr returnValue(
        new  MFUnrecFieldContainerPtr::EditHandle(
             &_mfContainers,
             this->getType().getFieldDesc(ContainersFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&ContainerCollection::pushToContainers,
                    static_cast<ContainerCollection *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&ContainerCollection::removeFromContainers,
                    static_cast<ContainerCollection *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&ContainerCollection::removeObjFromContainers,
                    static_cast<ContainerCollection *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&ContainerCollection::clearContainers,
                    static_cast<ContainerCollection *>(this)));

    editMField(ContainersFieldMask, _mfContainers);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ContainerCollectionBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ContainerCollection *pThis = static_cast<ContainerCollection *>(this);

    pThis->execSync(static_cast<ContainerCollection *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ContainerCollectionBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ContainerCollection *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ContainerCollection *>(pRefAspect),
                  dynamic_cast<const ContainerCollection *>(this));

    return returnValue;
}
#endif

void ContainerCollectionBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ContainerCollection *>(this)->clearContainers();


}


OSG_END_NAMESPACE
