/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MaterialManager!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGWindow.h"                  // Window Class

#include "OSGMaterialManagerBase.h"
#include "OSGMaterialManager.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MaterialManager
    This is the abstract material manager base class. The SceneFileHandler might
    be provided with a concrete material manager instance. A material manager must
    implement an interface that gets an a concrete material description instance
    and returns a Material instance.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Window *        MaterialManagerBase::_sfWindow
    It is often necessary to check the GL version and the GL extensions when generating
    shader code. Therefore a window instance should be provided to the MaterialManager.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<MaterialManager *, nsOSG>::_type(
    "MaterialManagerPtr", 
    "FieldContainerPtr", 
    MaterialManager::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(MaterialManager *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MaterialManager *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MaterialManager *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MaterialManagerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFWeakWindowPtr::Description(
        SFWeakWindowPtr::getClassType(),
        "window",
        "It is often necessary to check the GL version and the GL extensions when generating\n"
        "shader code. Therefore a window instance should be provided to the MaterialManager.\n",
        WindowFieldId, WindowFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialManager::editHandleWindow),
        static_cast<FieldGetMethodSig >(&MaterialManager::getHandleWindow));

    oType.addInitialDesc(pDesc);
}


MaterialManagerBase::TypeObject MaterialManagerBase::_type(
    MaterialManagerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    reinterpret_cast<InitContainerF>(&MaterialManager::initMethod),
    reinterpret_cast<ExitContainerF>(&MaterialManager::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&MaterialManager::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"MaterialManager\"\n"
    "    parent=\"FieldContainer\"\n"
    "    library=\"System\"\n"
    "    structure=\"abstract\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    docGroupBase=\"GrpSystemMaterial\"\n"
    "    >\n"
    "    This is the abstract material manager base class. The SceneFileHandler might\n"
    "    be provided with a concrete material manager instance. A material manager must\n"
    "    implement an interface that gets an a concrete material description instance\n"
    "    and returns a Material instance.\n"
    "\n"
    "    <Field\n"
    "        name=\"window\"\n"
    "        type=\"Window\"\n"
    "        category=\"weakpointer\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    It is often necessary to check the GL version and the GL extensions when generating\n"
    "    shader code. Therefore a window instance should be provided to the MaterialManager.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "This is the abstract material manager base class. The SceneFileHandler might\n"
    "be provided with a concrete material manager instance. A material manager must\n"
    "implement an interface that gets an a concrete material description instance\n"
    "and returns a Material instance.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MaterialManagerBase::getType(void)
{
    return _type;
}

const FieldContainerType &MaterialManagerBase::getType(void) const
{
    return _type;
}

UInt32 MaterialManagerBase::getContainerSize(void) const
{
    return sizeof(MaterialManager);
}

/*------------------------- decorator get ------------------------------*/


//! Get the MaterialManager::_sfWindow field.
const SFWeakWindowPtr *MaterialManagerBase::getSFWindow(void) const
{
    return &_sfWindow;
}

SFWeakWindowPtr     *MaterialManagerBase::editSFWindow         (void)
{
    editSField(WindowFieldMask);

    return &_sfWindow;
}

//! Get the value of the MaterialManager::_sfWindow field.
Window * MaterialManagerBase::getWindow(void) const
{
    return _sfWindow.getValue();
}

//! Set the value of the MaterialManager::_sfWindow field.
void MaterialManagerBase::setWindow(Window * const value)
{
    editSField(WindowFieldMask);

    _sfWindow.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT MaterialManagerBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        returnValue += _sfWindow.getBinSize();
    }

    return returnValue;
}

void MaterialManagerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        _sfWindow.copyToBin(pMem);
    }
}

void MaterialManagerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        editSField(WindowFieldMask);
        _sfWindow.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

MaterialManagerBase::MaterialManagerBase(void) :
    Inherited(),
    _sfWindow                 (NULL)
{
}

MaterialManagerBase::MaterialManagerBase(const MaterialManagerBase &source) :
    Inherited(source),
    _sfWindow                 (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

MaterialManagerBase::~MaterialManagerBase(void)
{
}

void MaterialManagerBase::onCreate(const MaterialManager *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        MaterialManager *pThis = static_cast<MaterialManager *>(this);

        pThis->setWindow(source->getWindow());
    }
}

GetFieldHandlePtr MaterialManagerBase::getHandleWindow          (void) const
{
    SFWeakWindowPtr::GetHandlePtr returnValue(
        new  SFWeakWindowPtr::GetHandle(
             &_sfWindow,
             this->getType().getFieldDesc(WindowFieldId),
             const_cast<MaterialManagerBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialManagerBase::editHandleWindow         (void)
{
    SFWeakWindowPtr::EditHandlePtr returnValue(
        new  SFWeakWindowPtr::EditHandle(
             &_sfWindow,
             this->getType().getFieldDesc(WindowFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MaterialManager::setWindow,
                    static_cast<MaterialManager *>(this), ::boost::placeholders::_1));

    editSField(WindowFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void MaterialManagerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MaterialManager *pThis = static_cast<MaterialManager *>(this);

    pThis->execSync(static_cast<MaterialManager *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void MaterialManagerBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<MaterialManager *>(this)->setWindow(NULL);


}


OSG_END_NAMESPACE
