/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GPUSkinningDataAttachment!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGShaderProgramChunk.h"      // ShaderCode Class

#include "OSGGPUSkinningDataAttachmentBase.h"
#include "OSGGPUSkinningDataAttachment.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GPUSkinningDataAttachment
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ShaderProgramChunk * GPUSkinningDataAttachmentBase::_sfShaderCode
    
*/

/*! \var bool            GPUSkinningDataAttachmentBase::_sfDataValid
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<GPUSkinningDataAttachment *, nsOSG>::_type(
    "GPUSkinningDataAttachmentPtr", 
    "AttachmentPtr", 
    GPUSkinningDataAttachment::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(GPUSkinningDataAttachment *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           GPUSkinningDataAttachment *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           GPUSkinningDataAttachment *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GPUSkinningDataAttachmentBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecShaderProgramChunkPtr::Description(
        SFUnrecShaderProgramChunkPtr::getClassType(),
        "shaderCode",
        "",
        ShaderCodeFieldId, ShaderCodeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GPUSkinningDataAttachment::editHandleShaderCode),
        static_cast<FieldGetMethodSig >(&GPUSkinningDataAttachment::getHandleShaderCode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "dataValid",
        "",
        DataValidFieldId, DataValidFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GPUSkinningDataAttachment::editHandleDataValid),
        static_cast<FieldGetMethodSig >(&GPUSkinningDataAttachment::getHandleDataValid));

    oType.addInitialDesc(pDesc);
}


GPUSkinningDataAttachmentBase::TypeObject GPUSkinningDataAttachmentBase::_type(
    GPUSkinningDataAttachmentBase::getClassname(),
    Inherited::getClassname(),
    "GPUSkinningDataAttachment",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&GPUSkinningDataAttachmentBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&GPUSkinningDataAttachment::initMethod),
    reinterpret_cast<ExitContainerF>(&GPUSkinningDataAttachment::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&GPUSkinningDataAttachment::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"GPUSkinningDataAttachment\"\n"
    "   parent=\"Attachment\"\n"
    "   library=\"Dynamics\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   childFields=\"none\"\n"
    "   parentFields=\"none\"\n"
    ">\n"
    "  <Field\n"
    "     name=\"shaderCode\"\n"
    "     type=\"ShaderProgramChunk\"\n"
    "     category=\"pointer\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"NULL\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "     name=\"dataValid\"\n"
    "     type=\"bool\"\n"
    "     category=\"data\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"false\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GPUSkinningDataAttachmentBase::getType(void)
{
    return _type;
}

const FieldContainerType &GPUSkinningDataAttachmentBase::getType(void) const
{
    return _type;
}

UInt32 GPUSkinningDataAttachmentBase::getContainerSize(void) const
{
    return sizeof(GPUSkinningDataAttachment);
}

/*------------------------- decorator get ------------------------------*/


//! Get the GPUSkinningDataAttachment::_sfShaderCode field.
const SFUnrecShaderProgramChunkPtr *GPUSkinningDataAttachmentBase::getSFShaderCode(void) const
{
    return &_sfShaderCode;
}

SFUnrecShaderProgramChunkPtr *GPUSkinningDataAttachmentBase::editSFShaderCode     (void)
{
    editSField(ShaderCodeFieldMask);

    return &_sfShaderCode;
}

//! Get the value of the GPUSkinningDataAttachment::_sfShaderCode field.
ShaderProgramChunk * GPUSkinningDataAttachmentBase::getShaderCode(void) const
{
    return _sfShaderCode.getValue();
}

//! Set the value of the GPUSkinningDataAttachment::_sfShaderCode field.
void GPUSkinningDataAttachmentBase::setShaderCode(ShaderProgramChunk * const value)
{
    editSField(ShaderCodeFieldMask);

    _sfShaderCode.setValue(value);
}


SFBool *GPUSkinningDataAttachmentBase::editSFDataValid(void)
{
    editSField(DataValidFieldMask);

    return &_sfDataValid;
}

const SFBool *GPUSkinningDataAttachmentBase::getSFDataValid(void) const
{
    return &_sfDataValid;
}






/*------------------------------ access -----------------------------------*/

SizeT GPUSkinningDataAttachmentBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ShaderCodeFieldMask & whichField))
    {
        returnValue += _sfShaderCode.getBinSize();
    }
    if(FieldBits::NoField != (DataValidFieldMask & whichField))
    {
        returnValue += _sfDataValid.getBinSize();
    }

    return returnValue;
}

void GPUSkinningDataAttachmentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ShaderCodeFieldMask & whichField))
    {
        _sfShaderCode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DataValidFieldMask & whichField))
    {
        _sfDataValid.copyToBin(pMem);
    }
}

void GPUSkinningDataAttachmentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ShaderCodeFieldMask & whichField))
    {
        editSField(ShaderCodeFieldMask);
        _sfShaderCode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DataValidFieldMask & whichField))
    {
        editSField(DataValidFieldMask);
        _sfDataValid.copyFromBin(pMem);
    }
}

//! create a new instance of the class
GPUSkinningDataAttachmentTransitPtr GPUSkinningDataAttachmentBase::createLocal(BitVector bFlags)
{
    GPUSkinningDataAttachmentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<GPUSkinningDataAttachment>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
GPUSkinningDataAttachmentTransitPtr GPUSkinningDataAttachmentBase::createDependent(BitVector bFlags)
{
    GPUSkinningDataAttachmentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<GPUSkinningDataAttachment>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
GPUSkinningDataAttachmentTransitPtr GPUSkinningDataAttachmentBase::create(void)
{
    GPUSkinningDataAttachmentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<GPUSkinningDataAttachment>(tmpPtr);
    }

    return fc;
}

GPUSkinningDataAttachment *GPUSkinningDataAttachmentBase::createEmptyLocal(BitVector bFlags)
{
    GPUSkinningDataAttachment *returnValue;

    newPtr<GPUSkinningDataAttachment>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
GPUSkinningDataAttachment *GPUSkinningDataAttachmentBase::createEmpty(void)
{
    GPUSkinningDataAttachment *returnValue;

    newPtr<GPUSkinningDataAttachment>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr GPUSkinningDataAttachmentBase::shallowCopyLocal(
    BitVector bFlags) const
{
    GPUSkinningDataAttachment *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GPUSkinningDataAttachment *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr GPUSkinningDataAttachmentBase::shallowCopyDependent(
    BitVector bFlags) const
{
    GPUSkinningDataAttachment *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GPUSkinningDataAttachment *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr GPUSkinningDataAttachmentBase::shallowCopy(void) const
{
    GPUSkinningDataAttachment *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const GPUSkinningDataAttachment *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

GPUSkinningDataAttachmentBase::GPUSkinningDataAttachmentBase(void) :
    Inherited(),
    _sfShaderCode             (NULL),
    _sfDataValid              (bool(false))
{
}

GPUSkinningDataAttachmentBase::GPUSkinningDataAttachmentBase(const GPUSkinningDataAttachmentBase &source) :
    Inherited(source),
    _sfShaderCode             (NULL),
    _sfDataValid              (source._sfDataValid              )
{
}


/*-------------------------- destructors ----------------------------------*/

GPUSkinningDataAttachmentBase::~GPUSkinningDataAttachmentBase(void)
{
}

void GPUSkinningDataAttachmentBase::onCreate(const GPUSkinningDataAttachment *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        GPUSkinningDataAttachment *pThis = static_cast<GPUSkinningDataAttachment *>(this);

        pThis->setShaderCode(source->getShaderCode());
    }
}

GetFieldHandlePtr GPUSkinningDataAttachmentBase::getHandleShaderCode      (void) const
{
    SFUnrecShaderProgramChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderProgramChunkPtr::GetHandle(
             &_sfShaderCode,
             this->getType().getFieldDesc(ShaderCodeFieldId),
             const_cast<GPUSkinningDataAttachmentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GPUSkinningDataAttachmentBase::editHandleShaderCode     (void)
{
    SFUnrecShaderProgramChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderProgramChunkPtr::EditHandle(
             &_sfShaderCode,
             this->getType().getFieldDesc(ShaderCodeFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&GPUSkinningDataAttachment::setShaderCode,
                    static_cast<GPUSkinningDataAttachment *>(this), ::boost::placeholders::_1));

    editSField(ShaderCodeFieldMask);

    return returnValue;
}

GetFieldHandlePtr GPUSkinningDataAttachmentBase::getHandleDataValid       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDataValid,
             this->getType().getFieldDesc(DataValidFieldId),
             const_cast<GPUSkinningDataAttachmentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GPUSkinningDataAttachmentBase::editHandleDataValid      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDataValid,
             this->getType().getFieldDesc(DataValidFieldId),
             this));


    editSField(DataValidFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void GPUSkinningDataAttachmentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    GPUSkinningDataAttachment *pThis = static_cast<GPUSkinningDataAttachment *>(this);

    pThis->execSync(static_cast<GPUSkinningDataAttachment *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *GPUSkinningDataAttachmentBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    GPUSkinningDataAttachment *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GPUSkinningDataAttachment *>(pRefAspect),
                  dynamic_cast<const GPUSkinningDataAttachment *>(this));

    return returnValue;
}
#endif

void GPUSkinningDataAttachmentBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<GPUSkinningDataAttachment *>(this)->setShaderCode(NULL);


}


OSG_END_NAMESPACE
