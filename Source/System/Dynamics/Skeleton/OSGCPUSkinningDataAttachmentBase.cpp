/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CPUSkinningDataAttachment!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGGeoVectorProperty.h"       // Properties Class

#include "OSGCPUSkinningDataAttachmentBase.h"
#include "OSGCPUSkinningDataAttachment.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CPUSkinningDataAttachment
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var GeoVectorProperty * CPUSkinningDataAttachmentBase::_mfProperties
    
*/

/*! \var Matrix          CPUSkinningDataAttachmentBase::_mfJointMatrices
    
*/

/*! \var Matrix          CPUSkinningDataAttachmentBase::_mfJointNormalMatrices
    
*/

/*! \var bool            CPUSkinningDataAttachmentBase::_sfDataValid
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<CPUSkinningDataAttachment *, nsOSG>::_type(
    "CPUSkinningDataAttachmentPtr", 
    "AttachmentPtr", 
    CPUSkinningDataAttachment::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(CPUSkinningDataAttachment *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           CPUSkinningDataAttachment *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           CPUSkinningDataAttachment *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void CPUSkinningDataAttachmentBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecChildGeoVectorPropertyPtr::Description(
        MFUnrecChildGeoVectorPropertyPtr::getClassType(),
        "properties",
        "",
        PropertiesFieldId, PropertiesFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CPUSkinningDataAttachment::editHandleProperties),
        static_cast<FieldGetMethodSig >(&CPUSkinningDataAttachment::getHandleProperties));

    oType.addInitialDesc(pDesc);

    pDesc = new MFMatrix::Description(
        MFMatrix::getClassType(),
        "jointMatrices",
        "",
        JointMatricesFieldId, JointMatricesFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CPUSkinningDataAttachment::editHandleJointMatrices),
        static_cast<FieldGetMethodSig >(&CPUSkinningDataAttachment::getHandleJointMatrices));

    oType.addInitialDesc(pDesc);

    pDesc = new MFMatrix::Description(
        MFMatrix::getClassType(),
        "jointNormalMatrices",
        "",
        JointNormalMatricesFieldId, JointNormalMatricesFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CPUSkinningDataAttachment::editHandleJointNormalMatrices),
        static_cast<FieldGetMethodSig >(&CPUSkinningDataAttachment::getHandleJointNormalMatrices));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "dataValid",
        "",
        DataValidFieldId, DataValidFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CPUSkinningDataAttachment::editHandleDataValid),
        static_cast<FieldGetMethodSig >(&CPUSkinningDataAttachment::getHandleDataValid));

    oType.addInitialDesc(pDesc);
}


CPUSkinningDataAttachmentBase::TypeObject CPUSkinningDataAttachmentBase::_type(
    CPUSkinningDataAttachmentBase::getClassname(),
    Inherited::getClassname(),
    "CPUSkinningDataAttachment",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&CPUSkinningDataAttachmentBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&CPUSkinningDataAttachment::initMethod),
    reinterpret_cast<ExitContainerF>(&CPUSkinningDataAttachment::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&CPUSkinningDataAttachment::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"CPUSkinningDataAttachment\"\n"
    "    parent=\"Attachment\"\n"
    "    library=\"Dynamics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    childFields=\"none\"\n"
    "    parentFields=\"none\"\n"
    "    >\n"
    "    <Field\n"
    "        name=\"properties\"\n"
    "        type=\"GeoVectorProperty\"\n"
    "        category=\"childpointer\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        linkParentField=\"Parents\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"jointMatrices\"\n"
    "        type=\"Matrix\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"jointNormalMatrices\"\n"
    "        type=\"Matrix\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"dataValid\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CPUSkinningDataAttachmentBase::getType(void)
{
    return _type;
}

const FieldContainerType &CPUSkinningDataAttachmentBase::getType(void) const
{
    return _type;
}

UInt32 CPUSkinningDataAttachmentBase::getContainerSize(void) const
{
    return sizeof(CPUSkinningDataAttachment);
}

/*------------------------- decorator get ------------------------------*/


//! Get the CPUSkinningDataAttachment::_mfProperties field.
const MFUnrecChildGeoVectorPropertyPtr *CPUSkinningDataAttachmentBase::getMFProperties(void) const
{
    return &_mfProperties;
}

MFUnrecChildGeoVectorPropertyPtr *CPUSkinningDataAttachmentBase::editMFProperties     (void)
{
    editMField(PropertiesFieldMask, _mfProperties);

    return &_mfProperties;
}
GeoVectorProperty * CPUSkinningDataAttachmentBase::getProperties(const UInt32 index) const
{
    return _mfProperties[index];
}

MFMatrix *CPUSkinningDataAttachmentBase::editMFJointMatrices(void)
{
    editMField(JointMatricesFieldMask, _mfJointMatrices);

    return &_mfJointMatrices;
}

const MFMatrix *CPUSkinningDataAttachmentBase::getMFJointMatrices(void) const
{
    return &_mfJointMatrices;
}


MFMatrix *CPUSkinningDataAttachmentBase::editMFJointNormalMatrices(void)
{
    editMField(JointNormalMatricesFieldMask, _mfJointNormalMatrices);

    return &_mfJointNormalMatrices;
}

const MFMatrix *CPUSkinningDataAttachmentBase::getMFJointNormalMatrices(void) const
{
    return &_mfJointNormalMatrices;
}


SFBool *CPUSkinningDataAttachmentBase::editSFDataValid(void)
{
    editSField(DataValidFieldMask);

    return &_sfDataValid;
}

const SFBool *CPUSkinningDataAttachmentBase::getSFDataValid(void) const
{
    return &_sfDataValid;
}




void CPUSkinningDataAttachmentBase::pushToProperties(GeoVectorProperty * const value)
{
    editMField(PropertiesFieldMask, _mfProperties);

    _mfProperties.push_back(value);
}

void CPUSkinningDataAttachmentBase::assignProperties(const MFUnrecChildGeoVectorPropertyPtr &value)
{
    MFUnrecChildGeoVectorPropertyPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildGeoVectorPropertyPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<CPUSkinningDataAttachment *>(this)->clearProperties();

    while(elemIt != elemEnd)
    {
        this->pushToProperties(*elemIt);

        ++elemIt;
    }
}

void CPUSkinningDataAttachmentBase::removeFromProperties(UInt32 uiIndex)
{
    if(uiIndex < _mfProperties.size())
    {
        editMField(PropertiesFieldMask, _mfProperties);

        _mfProperties.erase(uiIndex);
    }
}

void CPUSkinningDataAttachmentBase::removeObjFromProperties(GeoVectorProperty * const value)
{
    Int32 iElemIdx = _mfProperties.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(PropertiesFieldMask, _mfProperties);

        _mfProperties.erase(iElemIdx);
    }
}
void CPUSkinningDataAttachmentBase::clearProperties(void)
{
    editMField(PropertiesFieldMask, _mfProperties);


    _mfProperties.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT CPUSkinningDataAttachmentBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PropertiesFieldMask & whichField))
    {
        returnValue += _mfProperties.getBinSize();
    }
    if(FieldBits::NoField != (JointMatricesFieldMask & whichField))
    {
        returnValue += _mfJointMatrices.getBinSize();
    }
    if(FieldBits::NoField != (JointNormalMatricesFieldMask & whichField))
    {
        returnValue += _mfJointNormalMatrices.getBinSize();
    }
    if(FieldBits::NoField != (DataValidFieldMask & whichField))
    {
        returnValue += _sfDataValid.getBinSize();
    }

    return returnValue;
}

void CPUSkinningDataAttachmentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PropertiesFieldMask & whichField))
    {
        _mfProperties.copyToBin(pMem);
    }
    if(FieldBits::NoField != (JointMatricesFieldMask & whichField))
    {
        _mfJointMatrices.copyToBin(pMem);
    }
    if(FieldBits::NoField != (JointNormalMatricesFieldMask & whichField))
    {
        _mfJointNormalMatrices.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DataValidFieldMask & whichField))
    {
        _sfDataValid.copyToBin(pMem);
    }
}

void CPUSkinningDataAttachmentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PropertiesFieldMask & whichField))
    {
        editMField(PropertiesFieldMask, _mfProperties);
        _mfProperties.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (JointMatricesFieldMask & whichField))
    {
        editMField(JointMatricesFieldMask, _mfJointMatrices);
        _mfJointMatrices.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (JointNormalMatricesFieldMask & whichField))
    {
        editMField(JointNormalMatricesFieldMask, _mfJointNormalMatrices);
        _mfJointNormalMatrices.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DataValidFieldMask & whichField))
    {
        editSField(DataValidFieldMask);
        _sfDataValid.copyFromBin(pMem);
    }
}

//! create a new instance of the class
CPUSkinningDataAttachmentTransitPtr CPUSkinningDataAttachmentBase::createLocal(BitVector bFlags)
{
    CPUSkinningDataAttachmentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<CPUSkinningDataAttachment>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
CPUSkinningDataAttachmentTransitPtr CPUSkinningDataAttachmentBase::createDependent(BitVector bFlags)
{
    CPUSkinningDataAttachmentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<CPUSkinningDataAttachment>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
CPUSkinningDataAttachmentTransitPtr CPUSkinningDataAttachmentBase::create(void)
{
    CPUSkinningDataAttachmentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<CPUSkinningDataAttachment>(tmpPtr);
    }

    return fc;
}

CPUSkinningDataAttachment *CPUSkinningDataAttachmentBase::createEmptyLocal(BitVector bFlags)
{
    CPUSkinningDataAttachment *returnValue;

    newPtr<CPUSkinningDataAttachment>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
CPUSkinningDataAttachment *CPUSkinningDataAttachmentBase::createEmpty(void)
{
    CPUSkinningDataAttachment *returnValue;

    newPtr<CPUSkinningDataAttachment>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr CPUSkinningDataAttachmentBase::shallowCopyLocal(
    BitVector bFlags) const
{
    CPUSkinningDataAttachment *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CPUSkinningDataAttachment *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr CPUSkinningDataAttachmentBase::shallowCopyDependent(
    BitVector bFlags) const
{
    CPUSkinningDataAttachment *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CPUSkinningDataAttachment *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr CPUSkinningDataAttachmentBase::shallowCopy(void) const
{
    CPUSkinningDataAttachment *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const CPUSkinningDataAttachment *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

CPUSkinningDataAttachmentBase::CPUSkinningDataAttachmentBase(void) :
    Inherited(),
    _mfProperties             (this,
                          PropertiesFieldId,
                          GeoVectorProperty::ParentsFieldId),
    _mfJointMatrices          (),
    _mfJointNormalMatrices    (),
    _sfDataValid              (bool(false))
{
}

CPUSkinningDataAttachmentBase::CPUSkinningDataAttachmentBase(const CPUSkinningDataAttachmentBase &source) :
    Inherited(source),
    _mfProperties             (this,
                          PropertiesFieldId,
                          GeoVectorProperty::ParentsFieldId),
    _mfJointMatrices          (source._mfJointMatrices          ),
    _mfJointNormalMatrices    (source._mfJointNormalMatrices    ),
    _sfDataValid              (source._sfDataValid              )
{
}


/*-------------------------- destructors ----------------------------------*/

CPUSkinningDataAttachmentBase::~CPUSkinningDataAttachmentBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool CPUSkinningDataAttachmentBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == PropertiesFieldId)
    {
        GeoVectorProperty * pTypedChild =
            dynamic_cast<GeoVectorProperty *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfProperties.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(PropertiesFieldMask, _mfProperties);

                _mfProperties.erase(iChildIdx);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void CPUSkinningDataAttachmentBase::onCreate(const CPUSkinningDataAttachment *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        CPUSkinningDataAttachment *pThis = static_cast<CPUSkinningDataAttachment *>(this);

        MFUnrecChildGeoVectorPropertyPtr::const_iterator PropertiesIt  =
            source->_mfProperties.begin();
        MFUnrecChildGeoVectorPropertyPtr::const_iterator PropertiesEnd =
            source->_mfProperties.end  ();

        while(PropertiesIt != PropertiesEnd)
        {
            pThis->pushToProperties(*PropertiesIt);

            ++PropertiesIt;
        }
    }
}

GetFieldHandlePtr CPUSkinningDataAttachmentBase::getHandleProperties      (void) const
{
    MFUnrecChildGeoVectorPropertyPtr::GetHandlePtr returnValue(
        new  MFUnrecChildGeoVectorPropertyPtr::GetHandle(
             &_mfProperties,
             this->getType().getFieldDesc(PropertiesFieldId),
             const_cast<CPUSkinningDataAttachmentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CPUSkinningDataAttachmentBase::editHandleProperties     (void)
{
    MFUnrecChildGeoVectorPropertyPtr::EditHandlePtr returnValue(
        new  MFUnrecChildGeoVectorPropertyPtr::EditHandle(
             &_mfProperties,
             this->getType().getFieldDesc(PropertiesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&CPUSkinningDataAttachment::pushToProperties,
                    static_cast<CPUSkinningDataAttachment *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&CPUSkinningDataAttachment::removeFromProperties,
                    static_cast<CPUSkinningDataAttachment *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&CPUSkinningDataAttachment::removeObjFromProperties,
                    static_cast<CPUSkinningDataAttachment *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&CPUSkinningDataAttachment::clearProperties,
                    static_cast<CPUSkinningDataAttachment *>(this)));

    editMField(PropertiesFieldMask, _mfProperties);

    return returnValue;
}

GetFieldHandlePtr CPUSkinningDataAttachmentBase::getHandleJointMatrices   (void) const
{
    MFMatrix::GetHandlePtr returnValue(
        new  MFMatrix::GetHandle(
             &_mfJointMatrices,
             this->getType().getFieldDesc(JointMatricesFieldId),
             const_cast<CPUSkinningDataAttachmentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CPUSkinningDataAttachmentBase::editHandleJointMatrices  (void)
{
    MFMatrix::EditHandlePtr returnValue(
        new  MFMatrix::EditHandle(
             &_mfJointMatrices,
             this->getType().getFieldDesc(JointMatricesFieldId),
             this));


    editMField(JointMatricesFieldMask, _mfJointMatrices);

    return returnValue;
}

GetFieldHandlePtr CPUSkinningDataAttachmentBase::getHandleJointNormalMatrices (void) const
{
    MFMatrix::GetHandlePtr returnValue(
        new  MFMatrix::GetHandle(
             &_mfJointNormalMatrices,
             this->getType().getFieldDesc(JointNormalMatricesFieldId),
             const_cast<CPUSkinningDataAttachmentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CPUSkinningDataAttachmentBase::editHandleJointNormalMatrices(void)
{
    MFMatrix::EditHandlePtr returnValue(
        new  MFMatrix::EditHandle(
             &_mfJointNormalMatrices,
             this->getType().getFieldDesc(JointNormalMatricesFieldId),
             this));


    editMField(JointNormalMatricesFieldMask, _mfJointNormalMatrices);

    return returnValue;
}

GetFieldHandlePtr CPUSkinningDataAttachmentBase::getHandleDataValid       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDataValid,
             this->getType().getFieldDesc(DataValidFieldId),
             const_cast<CPUSkinningDataAttachmentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CPUSkinningDataAttachmentBase::editHandleDataValid      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDataValid,
             this->getType().getFieldDesc(DataValidFieldId),
             this));


    editSField(DataValidFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CPUSkinningDataAttachmentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    CPUSkinningDataAttachment *pThis = static_cast<CPUSkinningDataAttachment *>(this);

    pThis->execSync(static_cast<CPUSkinningDataAttachment *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *CPUSkinningDataAttachmentBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    CPUSkinningDataAttachment *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const CPUSkinningDataAttachment *>(pRefAspect),
                  dynamic_cast<const CPUSkinningDataAttachment *>(this));

    return returnValue;
}
#endif

void CPUSkinningDataAttachmentBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<CPUSkinningDataAttachment *>(this)->clearProperties();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfJointMatrices.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfJointNormalMatrices.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
