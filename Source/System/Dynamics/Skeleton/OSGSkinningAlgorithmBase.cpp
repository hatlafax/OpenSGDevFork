/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkinningAlgorithm!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGSkinnedGeometry.h"         // Skin Class
#include "OSGSkeleton.h"                // Skeleton Class

#include "OSGSkinningAlgorithmBase.h"
#include "OSGSkinningAlgorithm.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SkinningAlgorithm
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var SkinnedGeometry * SkinningAlgorithmBase::_sfSkin
    
*/

/*! \var Skeleton *      SkinningAlgorithmBase::_sfSkeleton
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<SkinningAlgorithm *, nsOSG>::_type(
    "SkinningAlgorithmPtr", 
    "AlgorithmPtr", 
    SkinningAlgorithm::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(SkinningAlgorithm *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SkinningAlgorithm *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SkinningAlgorithm *,
                           nsOSG)

DataType &FieldTraits< SkinningAlgorithm *, nsOSG + 1 >::getType(void)
{
    return FieldTraits<SkinningAlgorithm *, nsOSG>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      SkinningAlgorithm *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      SkinningAlgorithm *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SkinningAlgorithmBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFParentSkinnedGeometryPtr::Description(
        SFParentSkinnedGeometryPtr::getClassType(),
        "skin",
        "",
        SkinFieldId, SkinFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&SkinningAlgorithm::invalidEditField),
        static_cast     <FieldGetMethodSig >(&SkinningAlgorithm::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSkeletonPtr::Description(
        SFUnrecSkeletonPtr::getClassType(),
        "skeleton",
        "",
        SkeletonFieldId, SkeletonFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkinningAlgorithm::editHandleSkeleton),
        static_cast<FieldGetMethodSig >(&SkinningAlgorithm::getHandleSkeleton));

    oType.addInitialDesc(pDesc);
}


SkinningAlgorithmBase::TypeObject SkinningAlgorithmBase::_type(
    SkinningAlgorithmBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    reinterpret_cast<InitContainerF>(&SkinningAlgorithm::initMethod),
    reinterpret_cast<ExitContainerF>(&SkinningAlgorithm::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&SkinningAlgorithm::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"SkinningAlgorithm\"\n"
    "   parent=\"Algorithm\"\n"
    "   library=\"Dynamics\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"abstract\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   childFields=\"both\"\n"
    "   parentFields=\"none\"\n"
    ">\n"
    "  <Field\n"
    "     name=\"skin\"\n"
    "     type=\"SkinnedGeometry\"\n"
    "     category=\"parentpointer\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"none\"\n"
    "     defaultValue=\"NULL\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "     name=\"skeleton\"\n"
    "     type=\"Skeleton\"\n"
    "     category=\"pointer\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"NULL\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SkinningAlgorithmBase::getType(void)
{
    return _type;
}

const FieldContainerType &SkinningAlgorithmBase::getType(void) const
{
    return _type;
}

UInt32 SkinningAlgorithmBase::getContainerSize(void) const
{
    return sizeof(SkinningAlgorithm);
}

/*------------------------- decorator get ------------------------------*/



//! Get the SkinningAlgorithm::_sfSkeleton field.
const SFUnrecSkeletonPtr *SkinningAlgorithmBase::getSFSkeleton(void) const
{
    return &_sfSkeleton;
}

SFUnrecSkeletonPtr  *SkinningAlgorithmBase::editSFSkeleton       (void)
{
    editSField(SkeletonFieldMask);

    return &_sfSkeleton;
}

//! Get the value of the SkinningAlgorithm::_sfSkeleton field.
Skeleton * SkinningAlgorithmBase::getSkeleton(void) const
{
    return _sfSkeleton.getValue();
}

//! Set the value of the SkinningAlgorithm::_sfSkeleton field.
void SkinningAlgorithmBase::setSkeleton(Skeleton * const value)
{
    editSField(SkeletonFieldMask);

    _sfSkeleton.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT SkinningAlgorithmBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SkinFieldMask & whichField))
    {
        returnValue += _sfSkin.getBinSize();
    }
    if(FieldBits::NoField != (SkeletonFieldMask & whichField))
    {
        returnValue += _sfSkeleton.getBinSize();
    }

    return returnValue;
}

void SkinningAlgorithmBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SkinFieldMask & whichField))
    {
        _sfSkin.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SkeletonFieldMask & whichField))
    {
        _sfSkeleton.copyToBin(pMem);
    }
}

void SkinningAlgorithmBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SkinFieldMask & whichField))
    {
        editSField(SkinFieldMask);
        _sfSkin.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SkeletonFieldMask & whichField))
    {
        editSField(SkeletonFieldMask);
        _sfSkeleton.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

SkinningAlgorithmBase::SkinningAlgorithmBase(void) :
    Inherited(),
    _sfSkin                   (NULL),
    _sfSkeleton               (NULL)
{
}

SkinningAlgorithmBase::SkinningAlgorithmBase(const SkinningAlgorithmBase &source) :
    Inherited(source),
    _sfSkin                   (NULL),
    _sfSkeleton               (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

SkinningAlgorithmBase::~SkinningAlgorithmBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool SkinningAlgorithmBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == SkinFieldId)
    {
        SkinnedGeometry * pTypedParent =
            dynamic_cast< SkinnedGeometry * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfSkin.getValue         ();

            UInt16 oldChildFieldId =
                _sfSkin.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(SkinFieldMask);

            _sfSkin.setValue(static_cast<SkinnedGeometry *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool SkinningAlgorithmBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == SkinFieldId)
    {
        SkinnedGeometry * pTypedParent =
            dynamic_cast< SkinnedGeometry * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfSkin.getValue() == pTypedParent)
            {
                editSField(SkinFieldMask);

                _sfSkin.setValue(NULL, 0xFFFF);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


void SkinningAlgorithmBase::onCreate(const SkinningAlgorithm *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SkinningAlgorithm *pThis = static_cast<SkinningAlgorithm *>(this);

        pThis->setSkeleton(source->getSkeleton());
    }
}

GetFieldHandlePtr SkinningAlgorithmBase::getHandleSkin            (void) const
{
    SFParentSkinnedGeometryPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr SkinningAlgorithmBase::editHandleSkin           (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr SkinningAlgorithmBase::getHandleSkeleton        (void) const
{
    SFUnrecSkeletonPtr::GetHandlePtr returnValue(
        new  SFUnrecSkeletonPtr::GetHandle(
             &_sfSkeleton,
             this->getType().getFieldDesc(SkeletonFieldId),
             const_cast<SkinningAlgorithmBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkinningAlgorithmBase::editHandleSkeleton       (void)
{
    SFUnrecSkeletonPtr::EditHandlePtr returnValue(
        new  SFUnrecSkeletonPtr::EditHandle(
             &_sfSkeleton,
             this->getType().getFieldDesc(SkeletonFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SkinningAlgorithm::setSkeleton,
                    static_cast<SkinningAlgorithm *>(this), ::boost::placeholders::_1));

    editSField(SkeletonFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SkinningAlgorithmBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SkinningAlgorithm *pThis = static_cast<SkinningAlgorithm *>(this);

    pThis->execSync(static_cast<SkinningAlgorithm *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void SkinningAlgorithmBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SkinningAlgorithm *>(this)->setSkeleton(NULL);


}


OSG_END_NAMESPACE
