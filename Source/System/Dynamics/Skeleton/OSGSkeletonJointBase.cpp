/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkeletonJoint!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGSkeletonJointBase.h"
#include "OSGSkeletonJoint.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SkeletonJoint
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Matrix          SkeletonJointBase::_sfInvBindMatrix
    Inverse of the bind matrix for this joint.
*/

/*! \var Matrix          SkeletonJointBase::_sfMatrix
    Transformation matrix of this joint.
*/

/*! \var Matrix          SkeletonJointBase::_sfOffsetMatrix
    Transformation matrix of this joint.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<SkeletonJoint *, nsOSG>::_type(
    "SkeletonJointPtr", 
    "BaseSkeletonJointPtr", 
    SkeletonJoint::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(SkeletonJoint *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SkeletonJoint *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SkeletonJoint *,
                           nsOSG)

DataType &FieldTraits< SkeletonJoint *, nsOSG + 1 >::getType(void)
{
    return FieldTraits<SkeletonJoint *, nsOSG>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      SkeletonJoint *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      SkeletonJoint *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


DataType &FieldTraits<SkeletonJoint *, nsOSG + 2 >::getType(void)
{
    return FieldTraits<SkeletonJoint *, nsOSG>::getType();
}


OSG_SFIELDTYPE_INST(ParentPointerSField,
                    SkeletonJoint *,
                    NoRefCountPolicy,
                    nsOSG + 2);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerSField,
                         SkeletonJoint *,
                         NoRefCountPolicy,
                         nsOSG + 2)


OSG_MFIELDTYPE_INST(ParentPointerMField,
                    SkeletonJoint *,
                    NoRefCountPolicy,
                    2);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerMField,
                         SkeletonJoint *,
                         NoRefCountPolicy,
                         2)


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SkeletonJointBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "invBindMatrix",
        "Inverse of the bind matrix for this joint.\n",
        InvBindMatrixFieldId, InvBindMatrixFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonJoint::editHandleInvBindMatrix),
        static_cast<FieldGetMethodSig >(&SkeletonJoint::getHandleInvBindMatrix));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "matrix",
        "Transformation matrix of this joint.\n",
        MatrixFieldId, MatrixFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonJoint::editHandleMatrix),
        static_cast<FieldGetMethodSig >(&SkeletonJoint::getHandleMatrix));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "offsetMatrix",
        "Transformation matrix of this joint.\n",
        OffsetMatrixFieldId, OffsetMatrixFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkeletonJoint::editHandleOffsetMatrix),
        static_cast<FieldGetMethodSig >(&SkeletonJoint::getHandleOffsetMatrix));

    oType.addInitialDesc(pDesc);
}


SkeletonJointBase::TypeObject SkeletonJointBase::_type(
    SkeletonJointBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&SkeletonJointBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&SkeletonJoint::initMethod),
    reinterpret_cast<ExitContainerF>(&SkeletonJoint::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&SkeletonJoint::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"SkeletonJoint\"\n"
    "   parent=\"BaseSkeletonJoint\"\n"
    "   library=\"Dynamics\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   isNodeCore=\"false\"\n"
    "   childFields=\"both\"\n"
    "   parentFields=\"both\"\n"
    ">\n"
    "  <Field\n"
    "     name=\"invBindMatrix\"\n"
    "     type=\"Matrix\"\n"
    "     category=\"data\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    Inverse of the bind matrix for this joint.\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "     name=\"matrix\"\n"
    "     type=\"Matrix\"\n"
    "     category=\"data\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    Transformation matrix of this joint.\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "     name=\"offsetMatrix\"\n"
    "     type=\"Matrix\"\n"
    "     category=\"data\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    Transformation matrix of this joint.\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SkeletonJointBase::getType(void)
{
    return _type;
}

const FieldContainerType &SkeletonJointBase::getType(void) const
{
    return _type;
}

UInt32 SkeletonJointBase::getContainerSize(void) const
{
    return sizeof(SkeletonJoint);
}

/*------------------------- decorator get ------------------------------*/


SFMatrix *SkeletonJointBase::editSFInvBindMatrix(void)
{
    editSField(InvBindMatrixFieldMask);

    return &_sfInvBindMatrix;
}

const SFMatrix *SkeletonJointBase::getSFInvBindMatrix(void) const
{
    return &_sfInvBindMatrix;
}


SFMatrix *SkeletonJointBase::editSFMatrix(void)
{
    editSField(MatrixFieldMask);

    return &_sfMatrix;
}

const SFMatrix *SkeletonJointBase::getSFMatrix(void) const
{
    return &_sfMatrix;
}


SFMatrix *SkeletonJointBase::editSFOffsetMatrix(void)
{
    editSField(OffsetMatrixFieldMask);

    return &_sfOffsetMatrix;
}

const SFMatrix *SkeletonJointBase::getSFOffsetMatrix(void) const
{
    return &_sfOffsetMatrix;
}






/*------------------------------ access -----------------------------------*/

SizeT SkeletonJointBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (InvBindMatrixFieldMask & whichField))
    {
        returnValue += _sfInvBindMatrix.getBinSize();
    }
    if(FieldBits::NoField != (MatrixFieldMask & whichField))
    {
        returnValue += _sfMatrix.getBinSize();
    }
    if(FieldBits::NoField != (OffsetMatrixFieldMask & whichField))
    {
        returnValue += _sfOffsetMatrix.getBinSize();
    }

    return returnValue;
}

void SkeletonJointBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (InvBindMatrixFieldMask & whichField))
    {
        _sfInvBindMatrix.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MatrixFieldMask & whichField))
    {
        _sfMatrix.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OffsetMatrixFieldMask & whichField))
    {
        _sfOffsetMatrix.copyToBin(pMem);
    }
}

void SkeletonJointBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (InvBindMatrixFieldMask & whichField))
    {
        editSField(InvBindMatrixFieldMask);
        _sfInvBindMatrix.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MatrixFieldMask & whichField))
    {
        editSField(MatrixFieldMask);
        _sfMatrix.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OffsetMatrixFieldMask & whichField))
    {
        editSField(OffsetMatrixFieldMask);
        _sfOffsetMatrix.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SkeletonJointTransitPtr SkeletonJointBase::createLocal(BitVector bFlags)
{
    SkeletonJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SkeletonJoint>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SkeletonJointTransitPtr SkeletonJointBase::createDependent(BitVector bFlags)
{
    SkeletonJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SkeletonJoint>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SkeletonJointTransitPtr SkeletonJointBase::create(void)
{
    SkeletonJointTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SkeletonJoint>(tmpPtr);
    }

    return fc;
}

SkeletonJoint *SkeletonJointBase::createEmptyLocal(BitVector bFlags)
{
    SkeletonJoint *returnValue;

    newPtr<SkeletonJoint>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SkeletonJoint *SkeletonJointBase::createEmpty(void)
{
    SkeletonJoint *returnValue;

    newPtr<SkeletonJoint>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SkeletonJointBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SkeletonJoint *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SkeletonJoint *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SkeletonJointBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SkeletonJoint *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SkeletonJoint *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SkeletonJointBase::shallowCopy(void) const
{
    SkeletonJoint *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SkeletonJoint *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SkeletonJointBase::SkeletonJointBase(void) :
    Inherited(),
    _sfInvBindMatrix          (),
    _sfMatrix                 (),
    _sfOffsetMatrix           ()
{
}

SkeletonJointBase::SkeletonJointBase(const SkeletonJointBase &source) :
    Inherited(source),
    _sfInvBindMatrix          (source._sfInvBindMatrix          ),
    _sfMatrix                 (source._sfMatrix                 ),
    _sfOffsetMatrix           (source._sfOffsetMatrix           )
{
}


/*-------------------------- destructors ----------------------------------*/

SkeletonJointBase::~SkeletonJointBase(void)
{
}


GetFieldHandlePtr SkeletonJointBase::getHandleInvBindMatrix   (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfInvBindMatrix,
             this->getType().getFieldDesc(InvBindMatrixFieldId),
             const_cast<SkeletonJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonJointBase::editHandleInvBindMatrix  (void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfInvBindMatrix,
             this->getType().getFieldDesc(InvBindMatrixFieldId),
             this));


    editSField(InvBindMatrixFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkeletonJointBase::getHandleMatrix          (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfMatrix,
             this->getType().getFieldDesc(MatrixFieldId),
             const_cast<SkeletonJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonJointBase::editHandleMatrix         (void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfMatrix,
             this->getType().getFieldDesc(MatrixFieldId),
             this));


    editSField(MatrixFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkeletonJointBase::getHandleOffsetMatrix    (void) const
{
    SFMatrix::GetHandlePtr returnValue(
        new  SFMatrix::GetHandle(
             &_sfOffsetMatrix,
             this->getType().getFieldDesc(OffsetMatrixFieldId),
             const_cast<SkeletonJointBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SkeletonJointBase::editHandleOffsetMatrix   (void)
{
    SFMatrix::EditHandlePtr returnValue(
        new  SFMatrix::EditHandle(
             &_sfOffsetMatrix,
             this->getType().getFieldDesc(OffsetMatrixFieldId),
             this));


    editSField(OffsetMatrixFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SkeletonJointBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SkeletonJoint *pThis = static_cast<SkeletonJoint *>(this);

    pThis->execSync(static_cast<SkeletonJoint *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SkeletonJointBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SkeletonJoint *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SkeletonJoint *>(pRefAspect),
                  dynamic_cast<const SkeletonJoint *>(this));

    return returnValue;
}
#endif

void SkeletonJointBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
