/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AnimVec3fChannel!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGAnimVec3fDataSource.h"     // Data Class

#include "OSGAnimVec3fChannelBase.h"
#include "OSGAnimVec3fChannel.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AnimVec3fChannel
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var AnimVec3fDataSource * AnimVec3fChannelBase::_sfData
    
*/

/*! \var Vec3f           AnimVec3fChannelBase::_sfOutValue
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<AnimVec3fChannel *, nsOSG>::_type(
    "AnimVec3fChannelPtr", 
    "AnimChannelPtr", 
    AnimVec3fChannel::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(AnimVec3fChannel *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AnimVec3fChannel *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AnimVec3fChannel *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AnimVec3fChannelBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecAnimVec3fDataSourcePtr::Description(
        SFUnrecAnimVec3fDataSourcePtr::getClassType(),
        "data",
        "",
        DataFieldId, DataFieldMask,
        true,
        (Field::FStdAccess | Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimVec3fChannel::editHandleData),
        static_cast<FieldGetMethodSig >(&AnimVec3fChannel::getHandleData));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "outValue",
        "",
        OutValueFieldId, OutValueFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimVec3fChannel::editHandleOutValue),
        static_cast<FieldGetMethodSig >(&AnimVec3fChannel::getHandleOutValue));

    oType.addInitialDesc(pDesc);
}


AnimVec3fChannelBase::TypeObject AnimVec3fChannelBase::_type(
    AnimVec3fChannelBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&AnimVec3fChannelBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&AnimVec3fChannel::initMethod),
    reinterpret_cast<ExitContainerF>(&AnimVec3fChannel::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&AnimVec3fChannel::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"AnimVec3fChannel\"\n"
    "    parent=\"AnimChannel\"\n"
    "    library=\"Dynamics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    "    isBundle=\"false\"\n"
    "    parentFields=\"none\"\n"
    ">\n"
    "  <Field\n"
    "     name=\"data\"\n"
    "     category=\"pointer\"\n"
    "     type=\"AnimVec3fDataSource\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"internal\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"NULL\"\n"
    "     fieldFlags=\"FStdAccess, FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"outValue\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec3f\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"internal\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"0.f, 0.f, 0.f\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AnimVec3fChannelBase::getType(void)
{
    return _type;
}

const FieldContainerType &AnimVec3fChannelBase::getType(void) const
{
    return _type;
}

UInt32 AnimVec3fChannelBase::getContainerSize(void) const
{
    return sizeof(AnimVec3fChannel);
}

/*------------------------- decorator get ------------------------------*/


//! Get the AnimVec3fChannel::_sfData field.
const SFUnrecAnimVec3fDataSourcePtr *AnimVec3fChannelBase::getSFData(void) const
{
    return &_sfData;
}

SFUnrecAnimVec3fDataSourcePtr *AnimVec3fChannelBase::editSFData           (void)
{
    editSField(DataFieldMask);

    return &_sfData;
}

//! Get the value of the AnimVec3fChannel::_sfData field.
AnimVec3fDataSource * AnimVec3fChannelBase::getData(void) const
{
    return _sfData.getValue();
}

//! Set the value of the AnimVec3fChannel::_sfData field.
void AnimVec3fChannelBase::setData(AnimVec3fDataSource * const value)
{
    editSField(DataFieldMask);

    _sfData.setValue(value);
}


SFVec3f *AnimVec3fChannelBase::editSFOutValue(void)
{
    editSField(OutValueFieldMask);

    return &_sfOutValue;
}

const SFVec3f *AnimVec3fChannelBase::getSFOutValue(void) const
{
    return &_sfOutValue;
}






/*------------------------------ access -----------------------------------*/

SizeT AnimVec3fChannelBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DataFieldMask & whichField))
    {
        returnValue += _sfData.getBinSize();
    }
    if(FieldBits::NoField != (OutValueFieldMask & whichField))
    {
        returnValue += _sfOutValue.getBinSize();
    }

    return returnValue;
}

void AnimVec3fChannelBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DataFieldMask & whichField))
    {
        _sfData.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutValueFieldMask & whichField))
    {
        _sfOutValue.copyToBin(pMem);
    }
}

void AnimVec3fChannelBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DataFieldMask & whichField))
    {
        editSField(DataFieldMask);
        _sfData.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutValueFieldMask & whichField))
    {
        editSField(OutValueFieldMask);
        _sfOutValue.copyFromBin(pMem);
    }
}

//! create a new instance of the class
AnimVec3fChannelTransitPtr AnimVec3fChannelBase::createLocal(BitVector bFlags)
{
    AnimVec3fChannelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<AnimVec3fChannel>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
AnimVec3fChannelTransitPtr AnimVec3fChannelBase::createDependent(BitVector bFlags)
{
    AnimVec3fChannelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<AnimVec3fChannel>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
AnimVec3fChannelTransitPtr AnimVec3fChannelBase::create(void)
{
    AnimVec3fChannelTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<AnimVec3fChannel>(tmpPtr);
    }

    return fc;
}

AnimVec3fChannel *AnimVec3fChannelBase::createEmptyLocal(BitVector bFlags)
{
    AnimVec3fChannel *returnValue;

    newPtr<AnimVec3fChannel>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
AnimVec3fChannel *AnimVec3fChannelBase::createEmpty(void)
{
    AnimVec3fChannel *returnValue;

    newPtr<AnimVec3fChannel>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr AnimVec3fChannelBase::shallowCopyLocal(
    BitVector bFlags) const
{
    AnimVec3fChannel *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AnimVec3fChannel *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimVec3fChannelBase::shallowCopyDependent(
    BitVector bFlags) const
{
    AnimVec3fChannel *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AnimVec3fChannel *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimVec3fChannelBase::shallowCopy(void) const
{
    AnimVec3fChannel *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const AnimVec3fChannel *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

AnimVec3fChannelBase::AnimVec3fChannelBase(void) :
    Inherited(),
    _sfData                   (NULL),
    _sfOutValue               (Vec3f(0.f, 0.f, 0.f))
{
}

AnimVec3fChannelBase::AnimVec3fChannelBase(const AnimVec3fChannelBase &source) :
    Inherited(source),
    _sfData                   (NULL),
    _sfOutValue               (source._sfOutValue               )
{
}


/*-------------------------- destructors ----------------------------------*/

AnimVec3fChannelBase::~AnimVec3fChannelBase(void)
{
}

void AnimVec3fChannelBase::onCreate(const AnimVec3fChannel *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        AnimVec3fChannel *pThis = static_cast<AnimVec3fChannel *>(this);

        pThis->setData(source->getData());
    }
}

GetFieldHandlePtr AnimVec3fChannelBase::getHandleData            (void) const
{
    SFUnrecAnimVec3fDataSourcePtr::GetHandlePtr returnValue(
        new  SFUnrecAnimVec3fDataSourcePtr::GetHandle(
             &_sfData,
             this->getType().getFieldDesc(DataFieldId),
             const_cast<AnimVec3fChannelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimVec3fChannelBase::editHandleData           (void)
{
    SFUnrecAnimVec3fDataSourcePtr::EditHandlePtr returnValue(
        new  SFUnrecAnimVec3fDataSourcePtr::EditHandle(
             &_sfData,
             this->getType().getFieldDesc(DataFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&AnimVec3fChannel::setData,
                    static_cast<AnimVec3fChannel *>(this), ::boost::placeholders::_1));

    editSField(DataFieldMask);

    return returnValue;
}

GetFieldHandlePtr AnimVec3fChannelBase::getHandleOutValue        (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfOutValue,
             this->getType().getFieldDesc(OutValueFieldId),
             const_cast<AnimVec3fChannelBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimVec3fChannelBase::editHandleOutValue       (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfOutValue,
             this->getType().getFieldDesc(OutValueFieldId),
             this));


    editSField(OutValueFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void AnimVec3fChannelBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AnimVec3fChannel *pThis = static_cast<AnimVec3fChannel *>(this);

    pThis->execSync(static_cast<AnimVec3fChannel *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *AnimVec3fChannelBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    AnimVec3fChannel *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const AnimVec3fChannel *>(pRefAspect),
                  dynamic_cast<const AnimVec3fChannel *>(this));

    return returnValue;
}
#endif

void AnimVec3fChannelBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AnimVec3fChannel *>(this)->setData(NULL);


}


OSG_END_NAMESPACE
