/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AnimQuaternionDataSource!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGAnimQuaternionDataSourceBase.h"
#include "OSGAnimQuaternionDataSource.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AnimQuaternionDataSource
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Quaternion      AnimQuaternionDataSourceBase::_mfValues
    
*/

/*! \var Vec2f           AnimQuaternionDataSourceBase::_mfInTangentsX
    
*/

/*! \var Vec2f           AnimQuaternionDataSourceBase::_mfInTangentsY
    
*/

/*! \var Vec2f           AnimQuaternionDataSourceBase::_mfInTangentsZ
    
*/

/*! \var Vec2f           AnimQuaternionDataSourceBase::_mfInTangentsW
    
*/

/*! \var Vec2f           AnimQuaternionDataSourceBase::_mfOutTangentsX
    
*/

/*! \var Vec2f           AnimQuaternionDataSourceBase::_mfOutTangentsY
    
*/

/*! \var Vec2f           AnimQuaternionDataSourceBase::_mfOutTangentsZ
    
*/

/*! \var Vec2f           AnimQuaternionDataSourceBase::_mfOutTangentsW
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<AnimQuaternionDataSource *, nsOSG>::_type(
    "AnimQuaternionDataSourcePtr", 
    "AnimKeyFrameDataSourcePtr", 
    AnimQuaternionDataSource::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(AnimQuaternionDataSource *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AnimQuaternionDataSource *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AnimQuaternionDataSource *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AnimQuaternionDataSourceBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFQuaternion::Description(
        MFQuaternion::getClassType(),
        "values",
        "",
        ValuesFieldId, ValuesFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimQuaternionDataSource::editHandleValues),
        static_cast<FieldGetMethodSig >(&AnimQuaternionDataSource::getHandleValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "inTangentsX",
        "",
        InTangentsXFieldId, InTangentsXFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimQuaternionDataSource::editHandleInTangentsX),
        static_cast<FieldGetMethodSig >(&AnimQuaternionDataSource::getHandleInTangentsX));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "inTangentsY",
        "",
        InTangentsYFieldId, InTangentsYFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimQuaternionDataSource::editHandleInTangentsY),
        static_cast<FieldGetMethodSig >(&AnimQuaternionDataSource::getHandleInTangentsY));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "inTangentsZ",
        "",
        InTangentsZFieldId, InTangentsZFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimQuaternionDataSource::editHandleInTangentsZ),
        static_cast<FieldGetMethodSig >(&AnimQuaternionDataSource::getHandleInTangentsZ));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "inTangentsW",
        "",
        InTangentsWFieldId, InTangentsWFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimQuaternionDataSource::editHandleInTangentsW),
        static_cast<FieldGetMethodSig >(&AnimQuaternionDataSource::getHandleInTangentsW));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "outTangentsX",
        "",
        OutTangentsXFieldId, OutTangentsXFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimQuaternionDataSource::editHandleOutTangentsX),
        static_cast<FieldGetMethodSig >(&AnimQuaternionDataSource::getHandleOutTangentsX));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "outTangentsY",
        "",
        OutTangentsYFieldId, OutTangentsYFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimQuaternionDataSource::editHandleOutTangentsY),
        static_cast<FieldGetMethodSig >(&AnimQuaternionDataSource::getHandleOutTangentsY));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "outTangentsZ",
        "",
        OutTangentsZFieldId, OutTangentsZFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimQuaternionDataSource::editHandleOutTangentsZ),
        static_cast<FieldGetMethodSig >(&AnimQuaternionDataSource::getHandleOutTangentsZ));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "outTangentsW",
        "",
        OutTangentsWFieldId, OutTangentsWFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimQuaternionDataSource::editHandleOutTangentsW),
        static_cast<FieldGetMethodSig >(&AnimQuaternionDataSource::getHandleOutTangentsW));

    oType.addInitialDesc(pDesc);
}


AnimQuaternionDataSourceBase::TypeObject AnimQuaternionDataSourceBase::_type(
    AnimQuaternionDataSourceBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&AnimQuaternionDataSourceBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&AnimQuaternionDataSource::initMethod),
    reinterpret_cast<ExitContainerF>(&AnimQuaternionDataSource::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&AnimQuaternionDataSource::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"AnimQuaternionDataSource\"\n"
    "    parent=\"AnimKeyFrameDataSource\"\n"
    "    library=\"Dynamics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"false\"\n"
    "    parentFields=\"none\"\n"
    ">\n"
    "  <Field\n"
    "     name=\"values\"\n"
    "     category=\"data\"\n"
    "     type=\"Quaternion\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"inTangentsX\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"inTangentsY\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"inTangentsZ\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "    <Field\n"
    "     name=\"inTangentsW\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"outTangentsX\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"outTangentsY\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"outTangentsZ\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"outTangentsW\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AnimQuaternionDataSourceBase::getType(void)
{
    return _type;
}

const FieldContainerType &AnimQuaternionDataSourceBase::getType(void) const
{
    return _type;
}

UInt32 AnimQuaternionDataSourceBase::getContainerSize(void) const
{
    return sizeof(AnimQuaternionDataSource);
}

/*------------------------- decorator get ------------------------------*/


MFQuaternion *AnimQuaternionDataSourceBase::editMFValues(void)
{
    editMField(ValuesFieldMask, _mfValues);

    return &_mfValues;
}

const MFQuaternion *AnimQuaternionDataSourceBase::getMFValues(void) const
{
    return &_mfValues;
}


MFVec2f *AnimQuaternionDataSourceBase::editMFInTangentsX(void)
{
    editMField(InTangentsXFieldMask, _mfInTangentsX);

    return &_mfInTangentsX;
}

const MFVec2f *AnimQuaternionDataSourceBase::getMFInTangentsX(void) const
{
    return &_mfInTangentsX;
}


MFVec2f *AnimQuaternionDataSourceBase::editMFInTangentsY(void)
{
    editMField(InTangentsYFieldMask, _mfInTangentsY);

    return &_mfInTangentsY;
}

const MFVec2f *AnimQuaternionDataSourceBase::getMFInTangentsY(void) const
{
    return &_mfInTangentsY;
}


MFVec2f *AnimQuaternionDataSourceBase::editMFInTangentsZ(void)
{
    editMField(InTangentsZFieldMask, _mfInTangentsZ);

    return &_mfInTangentsZ;
}

const MFVec2f *AnimQuaternionDataSourceBase::getMFInTangentsZ(void) const
{
    return &_mfInTangentsZ;
}


MFVec2f *AnimQuaternionDataSourceBase::editMFInTangentsW(void)
{
    editMField(InTangentsWFieldMask, _mfInTangentsW);

    return &_mfInTangentsW;
}

const MFVec2f *AnimQuaternionDataSourceBase::getMFInTangentsW(void) const
{
    return &_mfInTangentsW;
}


MFVec2f *AnimQuaternionDataSourceBase::editMFOutTangentsX(void)
{
    editMField(OutTangentsXFieldMask, _mfOutTangentsX);

    return &_mfOutTangentsX;
}

const MFVec2f *AnimQuaternionDataSourceBase::getMFOutTangentsX(void) const
{
    return &_mfOutTangentsX;
}


MFVec2f *AnimQuaternionDataSourceBase::editMFOutTangentsY(void)
{
    editMField(OutTangentsYFieldMask, _mfOutTangentsY);

    return &_mfOutTangentsY;
}

const MFVec2f *AnimQuaternionDataSourceBase::getMFOutTangentsY(void) const
{
    return &_mfOutTangentsY;
}


MFVec2f *AnimQuaternionDataSourceBase::editMFOutTangentsZ(void)
{
    editMField(OutTangentsZFieldMask, _mfOutTangentsZ);

    return &_mfOutTangentsZ;
}

const MFVec2f *AnimQuaternionDataSourceBase::getMFOutTangentsZ(void) const
{
    return &_mfOutTangentsZ;
}


MFVec2f *AnimQuaternionDataSourceBase::editMFOutTangentsW(void)
{
    editMField(OutTangentsWFieldMask, _mfOutTangentsW);

    return &_mfOutTangentsW;
}

const MFVec2f *AnimQuaternionDataSourceBase::getMFOutTangentsW(void) const
{
    return &_mfOutTangentsW;
}






/*------------------------------ access -----------------------------------*/

SizeT AnimQuaternionDataSourceBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ValuesFieldMask & whichField))
    {
        returnValue += _mfValues.getBinSize();
    }
    if(FieldBits::NoField != (InTangentsXFieldMask & whichField))
    {
        returnValue += _mfInTangentsX.getBinSize();
    }
    if(FieldBits::NoField != (InTangentsYFieldMask & whichField))
    {
        returnValue += _mfInTangentsY.getBinSize();
    }
    if(FieldBits::NoField != (InTangentsZFieldMask & whichField))
    {
        returnValue += _mfInTangentsZ.getBinSize();
    }
    if(FieldBits::NoField != (InTangentsWFieldMask & whichField))
    {
        returnValue += _mfInTangentsW.getBinSize();
    }
    if(FieldBits::NoField != (OutTangentsXFieldMask & whichField))
    {
        returnValue += _mfOutTangentsX.getBinSize();
    }
    if(FieldBits::NoField != (OutTangentsYFieldMask & whichField))
    {
        returnValue += _mfOutTangentsY.getBinSize();
    }
    if(FieldBits::NoField != (OutTangentsZFieldMask & whichField))
    {
        returnValue += _mfOutTangentsZ.getBinSize();
    }
    if(FieldBits::NoField != (OutTangentsWFieldMask & whichField))
    {
        returnValue += _mfOutTangentsW.getBinSize();
    }

    return returnValue;
}

void AnimQuaternionDataSourceBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ValuesFieldMask & whichField))
    {
        _mfValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsXFieldMask & whichField))
    {
        _mfInTangentsX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsYFieldMask & whichField))
    {
        _mfInTangentsY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsZFieldMask & whichField))
    {
        _mfInTangentsZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsWFieldMask & whichField))
    {
        _mfInTangentsW.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsXFieldMask & whichField))
    {
        _mfOutTangentsX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsYFieldMask & whichField))
    {
        _mfOutTangentsY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsZFieldMask & whichField))
    {
        _mfOutTangentsZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsWFieldMask & whichField))
    {
        _mfOutTangentsW.copyToBin(pMem);
    }
}

void AnimQuaternionDataSourceBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ValuesFieldMask & whichField))
    {
        editMField(ValuesFieldMask, _mfValues);
        _mfValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsXFieldMask & whichField))
    {
        editMField(InTangentsXFieldMask, _mfInTangentsX);
        _mfInTangentsX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsYFieldMask & whichField))
    {
        editMField(InTangentsYFieldMask, _mfInTangentsY);
        _mfInTangentsY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsZFieldMask & whichField))
    {
        editMField(InTangentsZFieldMask, _mfInTangentsZ);
        _mfInTangentsZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsWFieldMask & whichField))
    {
        editMField(InTangentsWFieldMask, _mfInTangentsW);
        _mfInTangentsW.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsXFieldMask & whichField))
    {
        editMField(OutTangentsXFieldMask, _mfOutTangentsX);
        _mfOutTangentsX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsYFieldMask & whichField))
    {
        editMField(OutTangentsYFieldMask, _mfOutTangentsY);
        _mfOutTangentsY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsZFieldMask & whichField))
    {
        editMField(OutTangentsZFieldMask, _mfOutTangentsZ);
        _mfOutTangentsZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsWFieldMask & whichField))
    {
        editMField(OutTangentsWFieldMask, _mfOutTangentsW);
        _mfOutTangentsW.copyFromBin(pMem);
    }
}

//! create a new instance of the class
AnimQuaternionDataSourceTransitPtr AnimQuaternionDataSourceBase::createLocal(BitVector bFlags)
{
    AnimQuaternionDataSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<AnimQuaternionDataSource>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
AnimQuaternionDataSourceTransitPtr AnimQuaternionDataSourceBase::createDependent(BitVector bFlags)
{
    AnimQuaternionDataSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<AnimQuaternionDataSource>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
AnimQuaternionDataSourceTransitPtr AnimQuaternionDataSourceBase::create(void)
{
    AnimQuaternionDataSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<AnimQuaternionDataSource>(tmpPtr);
    }

    return fc;
}

AnimQuaternionDataSource *AnimQuaternionDataSourceBase::createEmptyLocal(BitVector bFlags)
{
    AnimQuaternionDataSource *returnValue;

    newPtr<AnimQuaternionDataSource>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
AnimQuaternionDataSource *AnimQuaternionDataSourceBase::createEmpty(void)
{
    AnimQuaternionDataSource *returnValue;

    newPtr<AnimQuaternionDataSource>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr AnimQuaternionDataSourceBase::shallowCopyLocal(
    BitVector bFlags) const
{
    AnimQuaternionDataSource *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AnimQuaternionDataSource *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimQuaternionDataSourceBase::shallowCopyDependent(
    BitVector bFlags) const
{
    AnimQuaternionDataSource *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AnimQuaternionDataSource *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimQuaternionDataSourceBase::shallowCopy(void) const
{
    AnimQuaternionDataSource *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const AnimQuaternionDataSource *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

AnimQuaternionDataSourceBase::AnimQuaternionDataSourceBase(void) :
    Inherited(),
    _mfValues                 (),
    _mfInTangentsX            (),
    _mfInTangentsY            (),
    _mfInTangentsZ            (),
    _mfInTangentsW            (),
    _mfOutTangentsX           (),
    _mfOutTangentsY           (),
    _mfOutTangentsZ           (),
    _mfOutTangentsW           ()
{
}

AnimQuaternionDataSourceBase::AnimQuaternionDataSourceBase(const AnimQuaternionDataSourceBase &source) :
    Inherited(source),
    _mfValues                 (source._mfValues                 ),
    _mfInTangentsX            (source._mfInTangentsX            ),
    _mfInTangentsY            (source._mfInTangentsY            ),
    _mfInTangentsZ            (source._mfInTangentsZ            ),
    _mfInTangentsW            (source._mfInTangentsW            ),
    _mfOutTangentsX           (source._mfOutTangentsX           ),
    _mfOutTangentsY           (source._mfOutTangentsY           ),
    _mfOutTangentsZ           (source._mfOutTangentsZ           ),
    _mfOutTangentsW           (source._mfOutTangentsW           )
{
}


/*-------------------------- destructors ----------------------------------*/

AnimQuaternionDataSourceBase::~AnimQuaternionDataSourceBase(void)
{
}


GetFieldHandlePtr AnimQuaternionDataSourceBase::getHandleValues          (void) const
{
    MFQuaternion::GetHandlePtr returnValue(
        new  MFQuaternion::GetHandle(
             &_mfValues,
             this->getType().getFieldDesc(ValuesFieldId),
             const_cast<AnimQuaternionDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimQuaternionDataSourceBase::editHandleValues         (void)
{
    MFQuaternion::EditHandlePtr returnValue(
        new  MFQuaternion::EditHandle(
             &_mfValues,
             this->getType().getFieldDesc(ValuesFieldId),
             this));


    editMField(ValuesFieldMask, _mfValues);

    return returnValue;
}

GetFieldHandlePtr AnimQuaternionDataSourceBase::getHandleInTangentsX     (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfInTangentsX,
             this->getType().getFieldDesc(InTangentsXFieldId),
             const_cast<AnimQuaternionDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimQuaternionDataSourceBase::editHandleInTangentsX    (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfInTangentsX,
             this->getType().getFieldDesc(InTangentsXFieldId),
             this));


    editMField(InTangentsXFieldMask, _mfInTangentsX);

    return returnValue;
}

GetFieldHandlePtr AnimQuaternionDataSourceBase::getHandleInTangentsY     (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfInTangentsY,
             this->getType().getFieldDesc(InTangentsYFieldId),
             const_cast<AnimQuaternionDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimQuaternionDataSourceBase::editHandleInTangentsY    (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfInTangentsY,
             this->getType().getFieldDesc(InTangentsYFieldId),
             this));


    editMField(InTangentsYFieldMask, _mfInTangentsY);

    return returnValue;
}

GetFieldHandlePtr AnimQuaternionDataSourceBase::getHandleInTangentsZ     (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfInTangentsZ,
             this->getType().getFieldDesc(InTangentsZFieldId),
             const_cast<AnimQuaternionDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimQuaternionDataSourceBase::editHandleInTangentsZ    (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfInTangentsZ,
             this->getType().getFieldDesc(InTangentsZFieldId),
             this));


    editMField(InTangentsZFieldMask, _mfInTangentsZ);

    return returnValue;
}

GetFieldHandlePtr AnimQuaternionDataSourceBase::getHandleInTangentsW     (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfInTangentsW,
             this->getType().getFieldDesc(InTangentsWFieldId),
             const_cast<AnimQuaternionDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimQuaternionDataSourceBase::editHandleInTangentsW    (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfInTangentsW,
             this->getType().getFieldDesc(InTangentsWFieldId),
             this));


    editMField(InTangentsWFieldMask, _mfInTangentsW);

    return returnValue;
}

GetFieldHandlePtr AnimQuaternionDataSourceBase::getHandleOutTangentsX    (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfOutTangentsX,
             this->getType().getFieldDesc(OutTangentsXFieldId),
             const_cast<AnimQuaternionDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimQuaternionDataSourceBase::editHandleOutTangentsX   (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfOutTangentsX,
             this->getType().getFieldDesc(OutTangentsXFieldId),
             this));


    editMField(OutTangentsXFieldMask, _mfOutTangentsX);

    return returnValue;
}

GetFieldHandlePtr AnimQuaternionDataSourceBase::getHandleOutTangentsY    (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfOutTangentsY,
             this->getType().getFieldDesc(OutTangentsYFieldId),
             const_cast<AnimQuaternionDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimQuaternionDataSourceBase::editHandleOutTangentsY   (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfOutTangentsY,
             this->getType().getFieldDesc(OutTangentsYFieldId),
             this));


    editMField(OutTangentsYFieldMask, _mfOutTangentsY);

    return returnValue;
}

GetFieldHandlePtr AnimQuaternionDataSourceBase::getHandleOutTangentsZ    (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfOutTangentsZ,
             this->getType().getFieldDesc(OutTangentsZFieldId),
             const_cast<AnimQuaternionDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimQuaternionDataSourceBase::editHandleOutTangentsZ   (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfOutTangentsZ,
             this->getType().getFieldDesc(OutTangentsZFieldId),
             this));


    editMField(OutTangentsZFieldMask, _mfOutTangentsZ);

    return returnValue;
}

GetFieldHandlePtr AnimQuaternionDataSourceBase::getHandleOutTangentsW    (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfOutTangentsW,
             this->getType().getFieldDesc(OutTangentsWFieldId),
             const_cast<AnimQuaternionDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimQuaternionDataSourceBase::editHandleOutTangentsW   (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfOutTangentsW,
             this->getType().getFieldDesc(OutTangentsWFieldId),
             this));


    editMField(OutTangentsWFieldMask, _mfOutTangentsW);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void AnimQuaternionDataSourceBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AnimQuaternionDataSource *pThis = static_cast<AnimQuaternionDataSource *>(this);

    pThis->execSync(static_cast<AnimQuaternionDataSource *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *AnimQuaternionDataSourceBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    AnimQuaternionDataSource *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const AnimQuaternionDataSource *>(pRefAspect),
                  dynamic_cast<const AnimQuaternionDataSource *>(this));

    return returnValue;
}
#endif

void AnimQuaternionDataSourceBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfInTangentsX.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfInTangentsY.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfInTangentsZ.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfInTangentsW.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutTangentsX.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutTangentsY.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutTangentsZ.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutTangentsW.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
