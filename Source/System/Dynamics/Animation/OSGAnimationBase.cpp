/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Animation!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGAnimTimeSensor.h"          // TimeSensor Class
#include "OSGAnimTemplate.h"            // Template Class
#include "OSGAnimChannel.h"             // Channels Class

#include "OSGAnimationBase.h"
#include "OSGAnimation.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Animation
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var AnimTimeSensor * AnimationBase::_sfTimeSensor
    
*/

/*! \var AnimTemplate *  AnimationBase::_sfTemplate
    
*/

/*! \var AnimChannel *   AnimationBase::_mfChannels
    
*/

/*! \var bool            AnimationBase::_sfEnabled
    
*/

/*! \var Real32          AnimationBase::_sfWeight
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<Animation *, nsOSG>::_type(
    "AnimationPtr", 
    "AttachmentContainerPtr", 
    Animation::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(Animation *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Animation *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Animation *,
                           nsOSG)

DataType &FieldTraits<Animation *, nsOSG + 1 >::getType(void)
{
    return FieldTraits<Animation *, nsOSG>::getType();
}


OSG_SFIELDTYPE_INST(ParentPointerSField,
                    Animation *,
                    NoRefCountPolicy,
                    nsOSG + 1);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerSField,
                         Animation *,
                         NoRefCountPolicy,
                         nsOSG + 1)


OSG_MFIELDTYPE_INST(ParentPointerMField,
                    Animation *,
                    NoRefCountPolicy,
                    1);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerMField,
                         Animation *,
                         NoRefCountPolicy,
                         1)


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AnimationBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecAnimTimeSensorPtr::Description(
        SFUnrecAnimTimeSensorPtr::getClassType(),
        "timeSensor",
        "",
        TimeSensorFieldId, TimeSensorFieldMask,
        false,
        (Field::FStdAccess | Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&Animation::editHandleTimeSensor),
        static_cast<FieldGetMethodSig >(&Animation::getHandleTimeSensor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecAnimTemplatePtr::Description(
        SFUnrecAnimTemplatePtr::getClassType(),
        "template",
        "",
        TemplateFieldId, TemplateFieldMask,
        false,
        (Field::FStdAccess | Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&Animation::editHandleTemplate),
        static_cast<FieldGetMethodSig >(&Animation::getHandleTemplate));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildAnimChannelPtr::Description(
        MFUnrecChildAnimChannelPtr::getClassType(),
        "channels",
        "",
        ChannelsFieldId, ChannelsFieldMask,
        false,
        (Field::FStdAccess | Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&Animation::editHandleChannels),
        static_cast<FieldGetMethodSig >(&Animation::getHandleChannels));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "enabled",
        "",
        EnabledFieldId, EnabledFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&Animation::editHandleEnabled),
        static_cast<FieldGetMethodSig >(&Animation::getHandleEnabled));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "weight",
        "",
        WeightFieldId, WeightFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&Animation::editHandleWeight),
        static_cast<FieldGetMethodSig >(&Animation::getHandleWeight));

    oType.addInitialDesc(pDesc);
}


AnimationBase::TypeObject AnimationBase::_type(
    AnimationBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&AnimationBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&Animation::initMethod),
    reinterpret_cast<ExitContainerF>(&Animation::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&Animation::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"Animation\"\n"
    "   parent=\"AttachmentContainer\"\n"
    "   library=\"Dynamics\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   isNodeCore=\"true\"\n"
    "   isBundle=\"false\"\n"
    "   parentFields=\"both\"\n"
    "   >\n"
    "  <Field\n"
    "     name=\"timeSensor\"\n"
    "     category=\"pointer\"\n"
    "     type=\"AnimTimeSensor\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"protected\"\n"
    "     fieldFlags=\"FStdAccess, FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"template\"\n"
    "     category=\"pointer\"\n"
    "     type=\"AnimTemplate\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FStdAccess, FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"channels\"\n"
    "     category=\"childpointer\"\n"
    "     linkParentField=\"Animation\"\n"
    "     type=\"AnimChannel\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FStdAccess, FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"enabled\"\n"
    "     type=\"bool\"\n"
    "     category=\"data\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"false\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"weight\"\n"
    "     category=\"data\"\n"
    "     type=\"Real32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"1.f\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AnimationBase::getType(void)
{
    return _type;
}

const FieldContainerType &AnimationBase::getType(void) const
{
    return _type;
}

UInt32 AnimationBase::getContainerSize(void) const
{
    return sizeof(Animation);
}

/*------------------------- decorator get ------------------------------*/


//! Get the Animation::_sfTimeSensor field.
const SFUnrecAnimTimeSensorPtr *AnimationBase::getSFTimeSensor(void) const
{
    return &_sfTimeSensor;
}

SFUnrecAnimTimeSensorPtr *AnimationBase::editSFTimeSensor     (void)
{
    editSField(TimeSensorFieldMask);

    return &_sfTimeSensor;
}

//! Get the value of the Animation::_sfTimeSensor field.
AnimTimeSensor * AnimationBase::getTimeSensor(void) const
{
    return _sfTimeSensor.getValue();
}

//! Set the value of the Animation::_sfTimeSensor field.
void AnimationBase::setTimeSensor(AnimTimeSensor * const value)
{
    editSField(TimeSensorFieldMask);

    _sfTimeSensor.setValue(value);
}


//! Get the Animation::_sfTemplate field.
const SFUnrecAnimTemplatePtr *AnimationBase::getSFTemplate(void) const
{
    return &_sfTemplate;
}

SFUnrecAnimTemplatePtr *AnimationBase::editSFTemplate       (void)
{
    editSField(TemplateFieldMask);

    return &_sfTemplate;
}

//! Get the value of the Animation::_sfTemplate field.
AnimTemplate * AnimationBase::getTemplate(void) const
{
    return _sfTemplate.getValue();
}

//! Set the value of the Animation::_sfTemplate field.
void AnimationBase::setTemplate(AnimTemplate * const value)
{
    editSField(TemplateFieldMask);

    _sfTemplate.setValue(value);
}


//! Get the Animation::_mfChannels field.
const MFUnrecChildAnimChannelPtr *AnimationBase::getMFChannels(void) const
{
    return &_mfChannels;
}

MFUnrecChildAnimChannelPtr *AnimationBase::editMFChannels       (void)
{
    editMField(ChannelsFieldMask, _mfChannels);

    return &_mfChannels;
}
AnimChannel * AnimationBase::getChannels(const UInt32 index) const
{
    return _mfChannels[index];
}

SFBool *AnimationBase::editSFEnabled(void)
{
    editSField(EnabledFieldMask);

    return &_sfEnabled;
}

const SFBool *AnimationBase::getSFEnabled(void) const
{
    return &_sfEnabled;
}


SFReal32 *AnimationBase::editSFWeight(void)
{
    editSField(WeightFieldMask);

    return &_sfWeight;
}

const SFReal32 *AnimationBase::getSFWeight(void) const
{
    return &_sfWeight;
}




void AnimationBase::pushToChannels(AnimChannel * const value)
{
    editMField(ChannelsFieldMask, _mfChannels);

    _mfChannels.push_back(value);
}

void AnimationBase::assignChannels (const MFUnrecChildAnimChannelPtr &value)
{
    MFUnrecChildAnimChannelPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildAnimChannelPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Animation *>(this)->clearChannels();

    while(elemIt != elemEnd)
    {
        this->pushToChannels(*elemIt);

        ++elemIt;
    }
}

void AnimationBase::removeFromChannels(UInt32 uiIndex)
{
    if(uiIndex < _mfChannels.size())
    {
        editMField(ChannelsFieldMask, _mfChannels);

        _mfChannels.erase(uiIndex);
    }
}

void AnimationBase::removeObjFromChannels(AnimChannel * const value)
{
    Int32 iElemIdx = _mfChannels.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ChannelsFieldMask, _mfChannels);

        _mfChannels.erase(iElemIdx);
    }
}
void AnimationBase::clearChannels(void)
{
    editMField(ChannelsFieldMask, _mfChannels);


    _mfChannels.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT AnimationBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TimeSensorFieldMask & whichField))
    {
        returnValue += _sfTimeSensor.getBinSize();
    }
    if(FieldBits::NoField != (TemplateFieldMask & whichField))
    {
        returnValue += _sfTemplate.getBinSize();
    }
    if(FieldBits::NoField != (ChannelsFieldMask & whichField))
    {
        returnValue += _mfChannels.getBinSize();
    }
    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        returnValue += _sfEnabled.getBinSize();
    }
    if(FieldBits::NoField != (WeightFieldMask & whichField))
    {
        returnValue += _sfWeight.getBinSize();
    }

    return returnValue;
}

void AnimationBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TimeSensorFieldMask & whichField))
    {
        _sfTimeSensor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TemplateFieldMask & whichField))
    {
        _sfTemplate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ChannelsFieldMask & whichField))
    {
        _mfChannels.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        _sfEnabled.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WeightFieldMask & whichField))
    {
        _sfWeight.copyToBin(pMem);
    }
}

void AnimationBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TimeSensorFieldMask & whichField))
    {
        editSField(TimeSensorFieldMask);
        _sfTimeSensor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TemplateFieldMask & whichField))
    {
        editSField(TemplateFieldMask);
        _sfTemplate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ChannelsFieldMask & whichField))
    {
        editMField(ChannelsFieldMask, _mfChannels);
        _mfChannels.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnabledFieldMask & whichField))
    {
        editSField(EnabledFieldMask);
        _sfEnabled.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WeightFieldMask & whichField))
    {
        editSField(WeightFieldMask);
        _sfWeight.copyFromBin(pMem);
    }
}

//! create a new instance of the class
AnimationTransitPtr AnimationBase::createLocal(BitVector bFlags)
{
    AnimationTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<Animation>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
AnimationTransitPtr AnimationBase::createDependent(BitVector bFlags)
{
    AnimationTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<Animation>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
AnimationTransitPtr AnimationBase::create(void)
{
    AnimationTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<Animation>(tmpPtr);
    }

    return fc;
}

Animation *AnimationBase::createEmptyLocal(BitVector bFlags)
{
    Animation *returnValue;

    newPtr<Animation>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
Animation *AnimationBase::createEmpty(void)
{
    Animation *returnValue;

    newPtr<Animation>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr AnimationBase::shallowCopyLocal(
    BitVector bFlags) const
{
    Animation *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Animation *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimationBase::shallowCopyDependent(
    BitVector bFlags) const
{
    Animation *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Animation *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimationBase::shallowCopy(void) const
{
    Animation *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const Animation *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

AnimationBase::AnimationBase(void) :
    Inherited(),
    _sfTimeSensor             (NULL),
    _sfTemplate               (NULL),
    _mfChannels               (this,
                          ChannelsFieldId,
                          AnimChannel::AnimationFieldId),
    _sfEnabled                (bool(false)),
    _sfWeight                 (Real32(1.f))
{
}

AnimationBase::AnimationBase(const AnimationBase &source) :
    Inherited(source),
    _sfTimeSensor             (NULL),
    _sfTemplate               (NULL),
    _mfChannels               (this,
                          ChannelsFieldId,
                          AnimChannel::AnimationFieldId),
    _sfEnabled                (source._sfEnabled                ),
    _sfWeight                 (source._sfWeight                 )
{
}


/*-------------------------- destructors ----------------------------------*/

AnimationBase::~AnimationBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool AnimationBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == ChannelsFieldId)
    {
        AnimChannel * pTypedChild =
            dynamic_cast<AnimChannel *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfChannels.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(ChannelsFieldMask, _mfChannels);

                _mfChannels.erase(iChildIdx);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void AnimationBase::onCreate(const Animation *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Animation *pThis = static_cast<Animation *>(this);

        pThis->setTimeSensor(source->getTimeSensor());

        pThis->setTemplate(source->getTemplate());

        MFUnrecChildAnimChannelPtr::const_iterator ChannelsIt  =
            source->_mfChannels.begin();
        MFUnrecChildAnimChannelPtr::const_iterator ChannelsEnd =
            source->_mfChannels.end  ();

        while(ChannelsIt != ChannelsEnd)
        {
            pThis->pushToChannels(*ChannelsIt);

            ++ChannelsIt;
        }
    }
}

GetFieldHandlePtr AnimationBase::getHandleTimeSensor      (void) const
{
    SFUnrecAnimTimeSensorPtr::GetHandlePtr returnValue(
        new  SFUnrecAnimTimeSensorPtr::GetHandle(
             &_sfTimeSensor,
             this->getType().getFieldDesc(TimeSensorFieldId),
             const_cast<AnimationBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimationBase::editHandleTimeSensor     (void)
{
    SFUnrecAnimTimeSensorPtr::EditHandlePtr returnValue(
        new  SFUnrecAnimTimeSensorPtr::EditHandle(
             &_sfTimeSensor,
             this->getType().getFieldDesc(TimeSensorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Animation::setTimeSensor,
                    static_cast<Animation *>(this), ::boost::placeholders::_1));

    editSField(TimeSensorFieldMask);

    return returnValue;
}

GetFieldHandlePtr AnimationBase::getHandleTemplate        (void) const
{
    SFUnrecAnimTemplatePtr::GetHandlePtr returnValue(
        new  SFUnrecAnimTemplatePtr::GetHandle(
             &_sfTemplate,
             this->getType().getFieldDesc(TemplateFieldId),
             const_cast<AnimationBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimationBase::editHandleTemplate       (void)
{
    SFUnrecAnimTemplatePtr::EditHandlePtr returnValue(
        new  SFUnrecAnimTemplatePtr::EditHandle(
             &_sfTemplate,
             this->getType().getFieldDesc(TemplateFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Animation::setTemplate,
                    static_cast<Animation *>(this), ::boost::placeholders::_1));

    editSField(TemplateFieldMask);

    return returnValue;
}

GetFieldHandlePtr AnimationBase::getHandleChannels        (void) const
{
    MFUnrecChildAnimChannelPtr::GetHandlePtr returnValue(
        new  MFUnrecChildAnimChannelPtr::GetHandle(
             &_mfChannels,
             this->getType().getFieldDesc(ChannelsFieldId),
             const_cast<AnimationBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimationBase::editHandleChannels       (void)
{
    MFUnrecChildAnimChannelPtr::EditHandlePtr returnValue(
        new  MFUnrecChildAnimChannelPtr::EditHandle(
             &_mfChannels,
             this->getType().getFieldDesc(ChannelsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Animation::pushToChannels,
                    static_cast<Animation *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&Animation::removeFromChannels,
                    static_cast<Animation *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Animation::removeObjFromChannels,
                    static_cast<Animation *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&Animation::clearChannels,
                    static_cast<Animation *>(this)));

    editMField(ChannelsFieldMask, _mfChannels);

    return returnValue;
}

GetFieldHandlePtr AnimationBase::getHandleEnabled         (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             const_cast<AnimationBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimationBase::editHandleEnabled        (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnabled,
             this->getType().getFieldDesc(EnabledFieldId),
             this));


    editSField(EnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr AnimationBase::getHandleWeight          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfWeight,
             this->getType().getFieldDesc(WeightFieldId),
             const_cast<AnimationBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimationBase::editHandleWeight         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfWeight,
             this->getType().getFieldDesc(WeightFieldId),
             this));


    editSField(WeightFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void AnimationBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Animation *pThis = static_cast<Animation *>(this);

    pThis->execSync(static_cast<Animation *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *AnimationBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    Animation *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Animation *>(pRefAspect),
                  dynamic_cast<const Animation *>(this));

    return returnValue;
}
#endif

void AnimationBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Animation *>(this)->setTimeSensor(NULL);

    static_cast<Animation *>(this)->setTemplate(NULL);

    static_cast<Animation *>(this)->clearChannels();


}


OSG_END_NAMESPACE
