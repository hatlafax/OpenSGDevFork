/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AnimVec3fDataSource!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGAnimVec3fDataSourceBase.h"
#include "OSGAnimVec3fDataSource.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AnimVec3fDataSource
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Vec3f           AnimVec3fDataSourceBase::_mfValues
    
*/

/*! \var Vec2f           AnimVec3fDataSourceBase::_mfInTangentsX
    
*/

/*! \var Vec2f           AnimVec3fDataSourceBase::_mfInTangentsY
    
*/

/*! \var Vec2f           AnimVec3fDataSourceBase::_mfInTangentsZ
    
*/

/*! \var Vec2f           AnimVec3fDataSourceBase::_mfOutTangentsX
    
*/

/*! \var Vec2f           AnimVec3fDataSourceBase::_mfOutTangentsY
    
*/

/*! \var Vec2f           AnimVec3fDataSourceBase::_mfOutTangentsZ
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<AnimVec3fDataSource *, nsOSG>::_type(
    "AnimVec3fDataSourcePtr", 
    "AnimKeyFrameDataSourcePtr", 
    AnimVec3fDataSource::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(AnimVec3fDataSource *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AnimVec3fDataSource *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AnimVec3fDataSource *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AnimVec3fDataSourceBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFVec3f::Description(
        MFVec3f::getClassType(),
        "values",
        "",
        ValuesFieldId, ValuesFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimVec3fDataSource::editHandleValues),
        static_cast<FieldGetMethodSig >(&AnimVec3fDataSource::getHandleValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "inTangentsX",
        "",
        InTangentsXFieldId, InTangentsXFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimVec3fDataSource::editHandleInTangentsX),
        static_cast<FieldGetMethodSig >(&AnimVec3fDataSource::getHandleInTangentsX));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "inTangentsY",
        "",
        InTangentsYFieldId, InTangentsYFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimVec3fDataSource::editHandleInTangentsY),
        static_cast<FieldGetMethodSig >(&AnimVec3fDataSource::getHandleInTangentsY));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "inTangentsZ",
        "",
        InTangentsZFieldId, InTangentsZFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimVec3fDataSource::editHandleInTangentsZ),
        static_cast<FieldGetMethodSig >(&AnimVec3fDataSource::getHandleInTangentsZ));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "outTangentsX",
        "",
        OutTangentsXFieldId, OutTangentsXFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimVec3fDataSource::editHandleOutTangentsX),
        static_cast<FieldGetMethodSig >(&AnimVec3fDataSource::getHandleOutTangentsX));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "outTangentsY",
        "",
        OutTangentsYFieldId, OutTangentsYFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimVec3fDataSource::editHandleOutTangentsY),
        static_cast<FieldGetMethodSig >(&AnimVec3fDataSource::getHandleOutTangentsY));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec2f::Description(
        MFVec2f::getClassType(),
        "outTangentsZ",
        "",
        OutTangentsZFieldId, OutTangentsZFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimVec3fDataSource::editHandleOutTangentsZ),
        static_cast<FieldGetMethodSig >(&AnimVec3fDataSource::getHandleOutTangentsZ));

    oType.addInitialDesc(pDesc);
}


AnimVec3fDataSourceBase::TypeObject AnimVec3fDataSourceBase::_type(
    AnimVec3fDataSourceBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&AnimVec3fDataSourceBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&AnimVec3fDataSource::initMethod),
    reinterpret_cast<ExitContainerF>(&AnimVec3fDataSource::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&AnimVec3fDataSource::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"AnimVec3fDataSource\"\n"
    "    parent=\"AnimKeyFrameDataSource\"\n"
    "    library=\"Dynamics\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"false\"\n"
    "    parentFields=\"none\"\n"
    ">\n"
    "  <Field\n"
    "     name=\"values\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec3f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"inTangentsX\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"inTangentsY\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"inTangentsZ\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"outTangentsX\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"outTangentsY\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"outTangentsZ\"\n"
    "     category=\"data\"\n"
    "     type=\"Vec2f\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AnimVec3fDataSourceBase::getType(void)
{
    return _type;
}

const FieldContainerType &AnimVec3fDataSourceBase::getType(void) const
{
    return _type;
}

UInt32 AnimVec3fDataSourceBase::getContainerSize(void) const
{
    return sizeof(AnimVec3fDataSource);
}

/*------------------------- decorator get ------------------------------*/


MFVec3f *AnimVec3fDataSourceBase::editMFValues(void)
{
    editMField(ValuesFieldMask, _mfValues);

    return &_mfValues;
}

const MFVec3f *AnimVec3fDataSourceBase::getMFValues(void) const
{
    return &_mfValues;
}


MFVec2f *AnimVec3fDataSourceBase::editMFInTangentsX(void)
{
    editMField(InTangentsXFieldMask, _mfInTangentsX);

    return &_mfInTangentsX;
}

const MFVec2f *AnimVec3fDataSourceBase::getMFInTangentsX(void) const
{
    return &_mfInTangentsX;
}


MFVec2f *AnimVec3fDataSourceBase::editMFInTangentsY(void)
{
    editMField(InTangentsYFieldMask, _mfInTangentsY);

    return &_mfInTangentsY;
}

const MFVec2f *AnimVec3fDataSourceBase::getMFInTangentsY(void) const
{
    return &_mfInTangentsY;
}


MFVec2f *AnimVec3fDataSourceBase::editMFInTangentsZ(void)
{
    editMField(InTangentsZFieldMask, _mfInTangentsZ);

    return &_mfInTangentsZ;
}

const MFVec2f *AnimVec3fDataSourceBase::getMFInTangentsZ(void) const
{
    return &_mfInTangentsZ;
}


MFVec2f *AnimVec3fDataSourceBase::editMFOutTangentsX(void)
{
    editMField(OutTangentsXFieldMask, _mfOutTangentsX);

    return &_mfOutTangentsX;
}

const MFVec2f *AnimVec3fDataSourceBase::getMFOutTangentsX(void) const
{
    return &_mfOutTangentsX;
}


MFVec2f *AnimVec3fDataSourceBase::editMFOutTangentsY(void)
{
    editMField(OutTangentsYFieldMask, _mfOutTangentsY);

    return &_mfOutTangentsY;
}

const MFVec2f *AnimVec3fDataSourceBase::getMFOutTangentsY(void) const
{
    return &_mfOutTangentsY;
}


MFVec2f *AnimVec3fDataSourceBase::editMFOutTangentsZ(void)
{
    editMField(OutTangentsZFieldMask, _mfOutTangentsZ);

    return &_mfOutTangentsZ;
}

const MFVec2f *AnimVec3fDataSourceBase::getMFOutTangentsZ(void) const
{
    return &_mfOutTangentsZ;
}






/*------------------------------ access -----------------------------------*/

SizeT AnimVec3fDataSourceBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ValuesFieldMask & whichField))
    {
        returnValue += _mfValues.getBinSize();
    }
    if(FieldBits::NoField != (InTangentsXFieldMask & whichField))
    {
        returnValue += _mfInTangentsX.getBinSize();
    }
    if(FieldBits::NoField != (InTangentsYFieldMask & whichField))
    {
        returnValue += _mfInTangentsY.getBinSize();
    }
    if(FieldBits::NoField != (InTangentsZFieldMask & whichField))
    {
        returnValue += _mfInTangentsZ.getBinSize();
    }
    if(FieldBits::NoField != (OutTangentsXFieldMask & whichField))
    {
        returnValue += _mfOutTangentsX.getBinSize();
    }
    if(FieldBits::NoField != (OutTangentsYFieldMask & whichField))
    {
        returnValue += _mfOutTangentsY.getBinSize();
    }
    if(FieldBits::NoField != (OutTangentsZFieldMask & whichField))
    {
        returnValue += _mfOutTangentsZ.getBinSize();
    }

    return returnValue;
}

void AnimVec3fDataSourceBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ValuesFieldMask & whichField))
    {
        _mfValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsXFieldMask & whichField))
    {
        _mfInTangentsX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsYFieldMask & whichField))
    {
        _mfInTangentsY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsZFieldMask & whichField))
    {
        _mfInTangentsZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsXFieldMask & whichField))
    {
        _mfOutTangentsX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsYFieldMask & whichField))
    {
        _mfOutTangentsY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsZFieldMask & whichField))
    {
        _mfOutTangentsZ.copyToBin(pMem);
    }
}

void AnimVec3fDataSourceBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ValuesFieldMask & whichField))
    {
        editMField(ValuesFieldMask, _mfValues);
        _mfValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsXFieldMask & whichField))
    {
        editMField(InTangentsXFieldMask, _mfInTangentsX);
        _mfInTangentsX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsYFieldMask & whichField))
    {
        editMField(InTangentsYFieldMask, _mfInTangentsY);
        _mfInTangentsY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InTangentsZFieldMask & whichField))
    {
        editMField(InTangentsZFieldMask, _mfInTangentsZ);
        _mfInTangentsZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsXFieldMask & whichField))
    {
        editMField(OutTangentsXFieldMask, _mfOutTangentsX);
        _mfOutTangentsX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsYFieldMask & whichField))
    {
        editMField(OutTangentsYFieldMask, _mfOutTangentsY);
        _mfOutTangentsY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutTangentsZFieldMask & whichField))
    {
        editMField(OutTangentsZFieldMask, _mfOutTangentsZ);
        _mfOutTangentsZ.copyFromBin(pMem);
    }
}

//! create a new instance of the class
AnimVec3fDataSourceTransitPtr AnimVec3fDataSourceBase::createLocal(BitVector bFlags)
{
    AnimVec3fDataSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<AnimVec3fDataSource>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
AnimVec3fDataSourceTransitPtr AnimVec3fDataSourceBase::createDependent(BitVector bFlags)
{
    AnimVec3fDataSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<AnimVec3fDataSource>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
AnimVec3fDataSourceTransitPtr AnimVec3fDataSourceBase::create(void)
{
    AnimVec3fDataSourceTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<AnimVec3fDataSource>(tmpPtr);
    }

    return fc;
}

AnimVec3fDataSource *AnimVec3fDataSourceBase::createEmptyLocal(BitVector bFlags)
{
    AnimVec3fDataSource *returnValue;

    newPtr<AnimVec3fDataSource>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
AnimVec3fDataSource *AnimVec3fDataSourceBase::createEmpty(void)
{
    AnimVec3fDataSource *returnValue;

    newPtr<AnimVec3fDataSource>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr AnimVec3fDataSourceBase::shallowCopyLocal(
    BitVector bFlags) const
{
    AnimVec3fDataSource *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AnimVec3fDataSource *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimVec3fDataSourceBase::shallowCopyDependent(
    BitVector bFlags) const
{
    AnimVec3fDataSource *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const AnimVec3fDataSource *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr AnimVec3fDataSourceBase::shallowCopy(void) const
{
    AnimVec3fDataSource *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const AnimVec3fDataSource *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

AnimVec3fDataSourceBase::AnimVec3fDataSourceBase(void) :
    Inherited(),
    _mfValues                 (),
    _mfInTangentsX            (),
    _mfInTangentsY            (),
    _mfInTangentsZ            (),
    _mfOutTangentsX           (),
    _mfOutTangentsY           (),
    _mfOutTangentsZ           ()
{
}

AnimVec3fDataSourceBase::AnimVec3fDataSourceBase(const AnimVec3fDataSourceBase &source) :
    Inherited(source),
    _mfValues                 (source._mfValues                 ),
    _mfInTangentsX            (source._mfInTangentsX            ),
    _mfInTangentsY            (source._mfInTangentsY            ),
    _mfInTangentsZ            (source._mfInTangentsZ            ),
    _mfOutTangentsX           (source._mfOutTangentsX           ),
    _mfOutTangentsY           (source._mfOutTangentsY           ),
    _mfOutTangentsZ           (source._mfOutTangentsZ           )
{
}


/*-------------------------- destructors ----------------------------------*/

AnimVec3fDataSourceBase::~AnimVec3fDataSourceBase(void)
{
}


GetFieldHandlePtr AnimVec3fDataSourceBase::getHandleValues          (void) const
{
    MFVec3f::GetHandlePtr returnValue(
        new  MFVec3f::GetHandle(
             &_mfValues,
             this->getType().getFieldDesc(ValuesFieldId),
             const_cast<AnimVec3fDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimVec3fDataSourceBase::editHandleValues         (void)
{
    MFVec3f::EditHandlePtr returnValue(
        new  MFVec3f::EditHandle(
             &_mfValues,
             this->getType().getFieldDesc(ValuesFieldId),
             this));


    editMField(ValuesFieldMask, _mfValues);

    return returnValue;
}

GetFieldHandlePtr AnimVec3fDataSourceBase::getHandleInTangentsX     (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfInTangentsX,
             this->getType().getFieldDesc(InTangentsXFieldId),
             const_cast<AnimVec3fDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimVec3fDataSourceBase::editHandleInTangentsX    (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfInTangentsX,
             this->getType().getFieldDesc(InTangentsXFieldId),
             this));


    editMField(InTangentsXFieldMask, _mfInTangentsX);

    return returnValue;
}

GetFieldHandlePtr AnimVec3fDataSourceBase::getHandleInTangentsY     (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfInTangentsY,
             this->getType().getFieldDesc(InTangentsYFieldId),
             const_cast<AnimVec3fDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimVec3fDataSourceBase::editHandleInTangentsY    (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfInTangentsY,
             this->getType().getFieldDesc(InTangentsYFieldId),
             this));


    editMField(InTangentsYFieldMask, _mfInTangentsY);

    return returnValue;
}

GetFieldHandlePtr AnimVec3fDataSourceBase::getHandleInTangentsZ     (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfInTangentsZ,
             this->getType().getFieldDesc(InTangentsZFieldId),
             const_cast<AnimVec3fDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimVec3fDataSourceBase::editHandleInTangentsZ    (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfInTangentsZ,
             this->getType().getFieldDesc(InTangentsZFieldId),
             this));


    editMField(InTangentsZFieldMask, _mfInTangentsZ);

    return returnValue;
}

GetFieldHandlePtr AnimVec3fDataSourceBase::getHandleOutTangentsX    (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfOutTangentsX,
             this->getType().getFieldDesc(OutTangentsXFieldId),
             const_cast<AnimVec3fDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimVec3fDataSourceBase::editHandleOutTangentsX   (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfOutTangentsX,
             this->getType().getFieldDesc(OutTangentsXFieldId),
             this));


    editMField(OutTangentsXFieldMask, _mfOutTangentsX);

    return returnValue;
}

GetFieldHandlePtr AnimVec3fDataSourceBase::getHandleOutTangentsY    (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfOutTangentsY,
             this->getType().getFieldDesc(OutTangentsYFieldId),
             const_cast<AnimVec3fDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimVec3fDataSourceBase::editHandleOutTangentsY   (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfOutTangentsY,
             this->getType().getFieldDesc(OutTangentsYFieldId),
             this));


    editMField(OutTangentsYFieldMask, _mfOutTangentsY);

    return returnValue;
}

GetFieldHandlePtr AnimVec3fDataSourceBase::getHandleOutTangentsZ    (void) const
{
    MFVec2f::GetHandlePtr returnValue(
        new  MFVec2f::GetHandle(
             &_mfOutTangentsZ,
             this->getType().getFieldDesc(OutTangentsZFieldId),
             const_cast<AnimVec3fDataSourceBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimVec3fDataSourceBase::editHandleOutTangentsZ   (void)
{
    MFVec2f::EditHandlePtr returnValue(
        new  MFVec2f::EditHandle(
             &_mfOutTangentsZ,
             this->getType().getFieldDesc(OutTangentsZFieldId),
             this));


    editMField(OutTangentsZFieldMask, _mfOutTangentsZ);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void AnimVec3fDataSourceBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AnimVec3fDataSource *pThis = static_cast<AnimVec3fDataSource *>(this);

    pThis->execSync(static_cast<AnimVec3fDataSource *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *AnimVec3fDataSourceBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    AnimVec3fDataSource *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const AnimVec3fDataSource *>(pRefAspect),
                  dynamic_cast<const AnimVec3fDataSource *>(this));

    return returnValue;
}
#endif

void AnimVec3fDataSourceBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfInTangentsX.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfInTangentsY.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfInTangentsZ.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutTangentsX.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutTangentsY.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutTangentsZ.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
