/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AnimTemplate!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGAnimDataSource.h"          // Sources Class

#include "OSGAnimTemplateBase.h"
#include "OSGAnimTemplate.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AnimTemplate
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     AnimTemplateBase::_sfName
    
*/

/*! \var AnimDataSource * AnimTemplateBase::_mfSources
    
*/

/*! \var std::string     AnimTemplateBase::_mfTargetIds
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<AnimTemplate *, nsOSG>::_type(
    "AnimTemplatePtr", 
    "AttachmentContainerPtr", 
    AnimTemplate::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(AnimTemplate *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           AnimTemplate *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           AnimTemplate *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void AnimTemplateBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFString::Description(
        SFString::getClassType(),
        "name",
        "",
        NameFieldId, NameFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimTemplate::editHandleName),
        static_cast<FieldGetMethodSig >(&AnimTemplate::getHandleName));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecAnimDataSourcePtr::Description(
        MFUnrecAnimDataSourcePtr::getClassType(),
        "sources",
        "",
        SourcesFieldId, SourcesFieldMask,
        false,
        (Field::FStdAccess | Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimTemplate::editHandleSources),
        static_cast<FieldGetMethodSig >(&AnimTemplate::getHandleSources));

    oType.addInitialDesc(pDesc);

    pDesc = new MFString::Description(
        MFString::getClassType(),
        "targetIds",
        "",
        TargetIdsFieldId, TargetIdsFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&AnimTemplate::editHandleTargetIds),
        static_cast<FieldGetMethodSig >(&AnimTemplate::getHandleTargetIds));

    oType.addInitialDesc(pDesc);
}


AnimTemplateBase::TypeObject AnimTemplateBase::_type(
    AnimTemplateBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    reinterpret_cast<InitContainerF>(&AnimTemplate::initMethod),
    reinterpret_cast<ExitContainerF>(&AnimTemplate::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&AnimTemplate::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"AnimTemplate\"\n"
    "   parent=\"AttachmentContainer\"\n"
    "   library=\"Dynamics\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"abstract\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   isNodeCore=\"false\"\n"
    "   isBundle=\"false\"\n"
    "   parentFields=\"none\"\n"
    "   >\n"
    "  <Field\n"
    "     name=\"name\"\n"
    "     category=\"data\"\n"
    "     type=\"std::string\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"sources\"\n"
    "     category=\"pointer\"\n"
    "     type=\"AnimDataSource\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FStdAccess, FClusterLocal\"\n"
    "     >\n"
    "    </Field>\n"
    "  <Field\n"
    "     name=\"targetIds\"\n"
    "     category=\"data\"\n"
    "     type=\"std::string\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     fieldFlags=\"FClusterLocal\"\n"
    "     >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AnimTemplateBase::getType(void)
{
    return _type;
}

const FieldContainerType &AnimTemplateBase::getType(void) const
{
    return _type;
}

UInt32 AnimTemplateBase::getContainerSize(void) const
{
    return sizeof(AnimTemplate);
}

/*------------------------- decorator get ------------------------------*/


SFString *AnimTemplateBase::editSFName(void)
{
    editSField(NameFieldMask);

    return &_sfName;
}

const SFString *AnimTemplateBase::getSFName(void) const
{
    return &_sfName;
}


//! Get the AnimTemplate::_mfSources field.
const MFUnrecAnimDataSourcePtr *AnimTemplateBase::getMFSources(void) const
{
    return &_mfSources;
}

MFUnrecAnimDataSourcePtr *AnimTemplateBase::editMFSources        (void)
{
    editMField(SourcesFieldMask, _mfSources);

    return &_mfSources;
}
AnimDataSource * AnimTemplateBase::getSources(const UInt32 index) const
{
    return _mfSources[index];
}

MFString *AnimTemplateBase::editMFTargetIds(void)
{
    editMField(TargetIdsFieldMask, _mfTargetIds);

    return &_mfTargetIds;
}

const MFString *AnimTemplateBase::getMFTargetIds(void) const
{
    return &_mfTargetIds;
}




void AnimTemplateBase::pushToSources(AnimDataSource * const value)
{
    editMField(SourcesFieldMask, _mfSources);

    _mfSources.push_back(value);
}

void AnimTemplateBase::assignSources  (const MFUnrecAnimDataSourcePtr &value)
{
    MFUnrecAnimDataSourcePtr::const_iterator elemIt  =
        value.begin();
    MFUnrecAnimDataSourcePtr::const_iterator elemEnd =
        value.end  ();

    static_cast<AnimTemplate *>(this)->clearSources();

    while(elemIt != elemEnd)
    {
        this->pushToSources(*elemIt);

        ++elemIt;
    }
}

void AnimTemplateBase::removeFromSources(UInt32 uiIndex)
{
    if(uiIndex < _mfSources.size())
    {
        editMField(SourcesFieldMask, _mfSources);

        _mfSources.erase(uiIndex);
    }
}

void AnimTemplateBase::removeObjFromSources(AnimDataSource * const value)
{
    Int32 iElemIdx = _mfSources.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(SourcesFieldMask, _mfSources);

        _mfSources.erase(iElemIdx);
    }
}
void AnimTemplateBase::clearSources(void)
{
    editMField(SourcesFieldMask, _mfSources);


    _mfSources.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT AnimTemplateBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (NameFieldMask & whichField))
    {
        returnValue += _sfName.getBinSize();
    }
    if(FieldBits::NoField != (SourcesFieldMask & whichField))
    {
        returnValue += _mfSources.getBinSize();
    }
    if(FieldBits::NoField != (TargetIdsFieldMask & whichField))
    {
        returnValue += _mfTargetIds.getBinSize();
    }

    return returnValue;
}

void AnimTemplateBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (NameFieldMask & whichField))
    {
        _sfName.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SourcesFieldMask & whichField))
    {
        _mfSources.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TargetIdsFieldMask & whichField))
    {
        _mfTargetIds.copyToBin(pMem);
    }
}

void AnimTemplateBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (NameFieldMask & whichField))
    {
        editSField(NameFieldMask);
        _sfName.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SourcesFieldMask & whichField))
    {
        editMField(SourcesFieldMask, _mfSources);
        _mfSources.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TargetIdsFieldMask & whichField))
    {
        editMField(TargetIdsFieldMask, _mfTargetIds);
        _mfTargetIds.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

AnimTemplateBase::AnimTemplateBase(void) :
    Inherited(),
    _sfName                   (),
    _mfSources                (),
    _mfTargetIds              ()
{
}

AnimTemplateBase::AnimTemplateBase(const AnimTemplateBase &source) :
    Inherited(source),
    _sfName                   (source._sfName                   ),
    _mfSources                (),
    _mfTargetIds              (source._mfTargetIds              )
{
}


/*-------------------------- destructors ----------------------------------*/

AnimTemplateBase::~AnimTemplateBase(void)
{
}

void AnimTemplateBase::onCreate(const AnimTemplate *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        AnimTemplate *pThis = static_cast<AnimTemplate *>(this);

        MFUnrecAnimDataSourcePtr::const_iterator SourcesIt  =
            source->_mfSources.begin();
        MFUnrecAnimDataSourcePtr::const_iterator SourcesEnd =
            source->_mfSources.end  ();

        while(SourcesIt != SourcesEnd)
        {
            pThis->pushToSources(*SourcesIt);

            ++SourcesIt;
        }
    }
}

GetFieldHandlePtr AnimTemplateBase::getHandleName            (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfName,
             this->getType().getFieldDesc(NameFieldId),
             const_cast<AnimTemplateBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimTemplateBase::editHandleName           (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfName,
             this->getType().getFieldDesc(NameFieldId),
             this));


    editSField(NameFieldMask);

    return returnValue;
}

GetFieldHandlePtr AnimTemplateBase::getHandleSources         (void) const
{
    MFUnrecAnimDataSourcePtr::GetHandlePtr returnValue(
        new  MFUnrecAnimDataSourcePtr::GetHandle(
             &_mfSources,
             this->getType().getFieldDesc(SourcesFieldId),
             const_cast<AnimTemplateBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimTemplateBase::editHandleSources        (void)
{
    MFUnrecAnimDataSourcePtr::EditHandlePtr returnValue(
        new  MFUnrecAnimDataSourcePtr::EditHandle(
             &_mfSources,
             this->getType().getFieldDesc(SourcesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&AnimTemplate::pushToSources,
                    static_cast<AnimTemplate *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&AnimTemplate::removeFromSources,
                    static_cast<AnimTemplate *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&AnimTemplate::removeObjFromSources,
                    static_cast<AnimTemplate *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&AnimTemplate::clearSources,
                    static_cast<AnimTemplate *>(this)));

    editMField(SourcesFieldMask, _mfSources);

    return returnValue;
}

GetFieldHandlePtr AnimTemplateBase::getHandleTargetIds       (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfTargetIds,
             this->getType().getFieldDesc(TargetIdsFieldId),
             const_cast<AnimTemplateBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr AnimTemplateBase::editHandleTargetIds      (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfTargetIds,
             this->getType().getFieldDesc(TargetIdsFieldId),
             this));


    editMField(TargetIdsFieldMask, _mfTargetIds);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void AnimTemplateBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    AnimTemplate *pThis = static_cast<AnimTemplate *>(this);

    pThis->execSync(static_cast<AnimTemplate *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void AnimTemplateBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AnimTemplate *>(this)->clearSources();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfTargetIds.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
