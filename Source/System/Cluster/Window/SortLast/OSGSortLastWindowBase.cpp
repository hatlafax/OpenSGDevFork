/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SortLastWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGNode.h"                    // GroupNodes Class

#include "OSGSortLastWindowBase.h"
#include "OSGSortLastWindow.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SortLastWindow
    Cluster rendering configuration for sort first image composition
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Node *          SortLastWindowBase::_mfGroupNodes
    
*/

/*! \var UInt32          SortLastWindowBase::_mfGroupLengths
    
*/

/*! \var bool            SortLastWindowBase::_sfGroupsChanged
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<SortLastWindow *, nsOSG>::_type(
    "SortLastWindowPtr", 
    "ClusterWindowPtr", 
    SortLastWindow::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(SortLastWindow *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SortLastWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecNodePtr::Description(
        MFUnrecNodePtr::getClassType(),
        "groupNodes",
        "",
        GroupNodesFieldId, GroupNodesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SortLastWindow::editHandleGroupNodes),
        static_cast<FieldGetMethodSig >(&SortLastWindow::getHandleGroupNodes));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "groupLengths",
        "",
        GroupLengthsFieldId, GroupLengthsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SortLastWindow::editHandleGroupLengths),
        static_cast<FieldGetMethodSig >(&SortLastWindow::getHandleGroupLengths));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "groupsChanged",
        "",
        GroupsChangedFieldId, GroupsChangedFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SortLastWindow::editHandleGroupsChanged),
        static_cast<FieldGetMethodSig >(&SortLastWindow::getHandleGroupsChanged));

    oType.addInitialDesc(pDesc);
}


SortLastWindowBase::TypeObject SortLastWindowBase::_type(
    SortLastWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&SortLastWindowBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&SortLastWindow::initMethod),
    reinterpret_cast<ExitContainerF>(&SortLastWindow::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&SortLastWindow::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"SortLastWindow\"\n"
    "   parent=\"ClusterWindow\"\n"
    "   library=\"Cluster\"\n"
    "   pointerfieldtypes=\"none\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   docGroupBase=\"GrpClusterWindow\"\n"
    "   >\n"
    "  Cluster rendering configuration for sort first image composition\n"
    "  <Field\n"
    "\t name=\"groupNodes\"\n"
    "\t type=\"NodePtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"protected\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"groupLengths\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"protected\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"groupsChanged\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t access=\"protected\"\n"
    "\t >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "Cluster rendering configuration for sort first image composition\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SortLastWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &SortLastWindowBase::getType(void) const
{
    return _type;
}

UInt32 SortLastWindowBase::getContainerSize(void) const
{
    return sizeof(SortLastWindow);
}

/*------------------------- decorator get ------------------------------*/


//! Get the SortLastWindow::_mfGroupNodes field.
const MFUnrecNodePtr *SortLastWindowBase::getMFGroupNodes(void) const
{
    return &_mfGroupNodes;
}

MFUnrecNodePtr      *SortLastWindowBase::editMFGroupNodes     (void)
{
    editMField(GroupNodesFieldMask, _mfGroupNodes);

    return &_mfGroupNodes;
}
Node * SortLastWindowBase::getGroupNodes(const UInt32 index) const
{
    return _mfGroupNodes[index];
}

MFUInt32 *SortLastWindowBase::editMFGroupLengths(void)
{
    editMField(GroupLengthsFieldMask, _mfGroupLengths);

    return &_mfGroupLengths;
}

const MFUInt32 *SortLastWindowBase::getMFGroupLengths(void) const
{
    return &_mfGroupLengths;
}


SFBool *SortLastWindowBase::editSFGroupsChanged(void)
{
    editSField(GroupsChangedFieldMask);

    return &_sfGroupsChanged;
}

const SFBool *SortLastWindowBase::getSFGroupsChanged(void) const
{
    return &_sfGroupsChanged;
}




void SortLastWindowBase::pushToGroupNodes(Node * const value)
{
    editMField(GroupNodesFieldMask, _mfGroupNodes);

    _mfGroupNodes.push_back(value);
}

void SortLastWindowBase::assignGroupNodes(const MFUnrecNodePtr    &value)
{
    MFUnrecNodePtr   ::const_iterator elemIt  =
        value.begin();
    MFUnrecNodePtr   ::const_iterator elemEnd =
        value.end  ();

    static_cast<SortLastWindow *>(this)->clearGroupNodes();

    while(elemIt != elemEnd)
    {
        this->pushToGroupNodes(*elemIt);

        ++elemIt;
    }
}

void SortLastWindowBase::removeFromGroupNodes(UInt32 uiIndex)
{
    if(uiIndex < _mfGroupNodes.size())
    {
        editMField(GroupNodesFieldMask, _mfGroupNodes);

        _mfGroupNodes.erase(uiIndex);
    }
}

void SortLastWindowBase::removeObjFromGroupNodes(Node * const value)
{
    Int32 iElemIdx = _mfGroupNodes.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(GroupNodesFieldMask, _mfGroupNodes);

        _mfGroupNodes.erase(iElemIdx);
    }
}
void SortLastWindowBase::clearGroupNodes(void)
{
    editMField(GroupNodesFieldMask, _mfGroupNodes);


    _mfGroupNodes.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT SortLastWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (GroupNodesFieldMask & whichField))
    {
        returnValue += _mfGroupNodes.getBinSize();
    }
    if(FieldBits::NoField != (GroupLengthsFieldMask & whichField))
    {
        returnValue += _mfGroupLengths.getBinSize();
    }
    if(FieldBits::NoField != (GroupsChangedFieldMask & whichField))
    {
        returnValue += _sfGroupsChanged.getBinSize();
    }

    return returnValue;
}

void SortLastWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (GroupNodesFieldMask & whichField))
    {
        _mfGroupNodes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GroupLengthsFieldMask & whichField))
    {
        _mfGroupLengths.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GroupsChangedFieldMask & whichField))
    {
        _sfGroupsChanged.copyToBin(pMem);
    }
}

void SortLastWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (GroupNodesFieldMask & whichField))
    {
        editMField(GroupNodesFieldMask, _mfGroupNodes);
        _mfGroupNodes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GroupLengthsFieldMask & whichField))
    {
        editMField(GroupLengthsFieldMask, _mfGroupLengths);
        _mfGroupLengths.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GroupsChangedFieldMask & whichField))
    {
        editSField(GroupsChangedFieldMask);
        _sfGroupsChanged.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SortLastWindowTransitPtr SortLastWindowBase::createLocal(BitVector bFlags)
{
    SortLastWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SortLastWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SortLastWindowTransitPtr SortLastWindowBase::createDependent(BitVector bFlags)
{
    SortLastWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SortLastWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SortLastWindowTransitPtr SortLastWindowBase::create(void)
{
    SortLastWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SortLastWindow>(tmpPtr);
    }

    return fc;
}

SortLastWindow *SortLastWindowBase::createEmptyLocal(BitVector bFlags)
{
    SortLastWindow *returnValue;

    newPtr<SortLastWindow>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SortLastWindow *SortLastWindowBase::createEmpty(void)
{
    SortLastWindow *returnValue;

    newPtr<SortLastWindow>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SortLastWindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SortLastWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SortLastWindow *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SortLastWindowBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SortLastWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SortLastWindow *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SortLastWindowBase::shallowCopy(void) const
{
    SortLastWindow *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SortLastWindow *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SortLastWindowBase::SortLastWindowBase(void) :
    Inherited(),
    _mfGroupNodes             (),
    _mfGroupLengths           (),
    _sfGroupsChanged          ()
{
}

SortLastWindowBase::SortLastWindowBase(const SortLastWindowBase &source) :
    Inherited(source),
    _mfGroupNodes             (),
    _mfGroupLengths           (source._mfGroupLengths           ),
    _sfGroupsChanged          (source._sfGroupsChanged          )
{
}


/*-------------------------- destructors ----------------------------------*/

SortLastWindowBase::~SortLastWindowBase(void)
{
}

void SortLastWindowBase::onCreate(const SortLastWindow *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SortLastWindow *pThis = static_cast<SortLastWindow *>(this);

        MFUnrecNodePtr::const_iterator GroupNodesIt  =
            source->_mfGroupNodes.begin();
        MFUnrecNodePtr::const_iterator GroupNodesEnd =
            source->_mfGroupNodes.end  ();

        while(GroupNodesIt != GroupNodesEnd)
        {
            pThis->pushToGroupNodes(*GroupNodesIt);

            ++GroupNodesIt;
        }
    }
}

GetFieldHandlePtr SortLastWindowBase::getHandleGroupNodes      (void) const
{
    MFUnrecNodePtr::GetHandlePtr returnValue(
        new  MFUnrecNodePtr::GetHandle(
             &_mfGroupNodes,
             this->getType().getFieldDesc(GroupNodesFieldId),
             const_cast<SortLastWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SortLastWindowBase::editHandleGroupNodes     (void)
{
    MFUnrecNodePtr::EditHandlePtr returnValue(
        new  MFUnrecNodePtr::EditHandle(
             &_mfGroupNodes,
             this->getType().getFieldDesc(GroupNodesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&SortLastWindow::pushToGroupNodes,
                    static_cast<SortLastWindow *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&SortLastWindow::removeFromGroupNodes,
                    static_cast<SortLastWindow *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&SortLastWindow::removeObjFromGroupNodes,
                    static_cast<SortLastWindow *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&SortLastWindow::clearGroupNodes,
                    static_cast<SortLastWindow *>(this)));

    editMField(GroupNodesFieldMask, _mfGroupNodes);

    return returnValue;
}

GetFieldHandlePtr SortLastWindowBase::getHandleGroupLengths    (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfGroupLengths,
             this->getType().getFieldDesc(GroupLengthsFieldId),
             const_cast<SortLastWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SortLastWindowBase::editHandleGroupLengths   (void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfGroupLengths,
             this->getType().getFieldDesc(GroupLengthsFieldId),
             this));


    editMField(GroupLengthsFieldMask, _mfGroupLengths);

    return returnValue;
}

GetFieldHandlePtr SortLastWindowBase::getHandleGroupsChanged   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfGroupsChanged,
             this->getType().getFieldDesc(GroupsChangedFieldId),
             const_cast<SortLastWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SortLastWindowBase::editHandleGroupsChanged  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfGroupsChanged,
             this->getType().getFieldDesc(GroupsChangedFieldId),
             this));


    editSField(GroupsChangedFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SortLastWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SortLastWindow *pThis = static_cast<SortLastWindow *>(this);

    pThis->execSync(static_cast<SortLastWindow *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SortLastWindowBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SortLastWindow *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SortLastWindow *>(pRefAspect),
                  dynamic_cast<const SortLastWindow *>(this));

    return returnValue;
}
#endif

void SortLastWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SortLastWindow *>(this)->clearGroupNodes();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfGroupLengths.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
