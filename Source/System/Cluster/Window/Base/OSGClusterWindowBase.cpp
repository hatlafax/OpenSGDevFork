/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ClusterWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGWindow.h"                  // ClientWindow Class
#include "OSGImageComposer.h"           // Composer Class

#include "OSGClusterWindowBase.h"
#include "OSGClusterWindow.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ClusterWindow
    The base class for all windows.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     ClusterWindowBase::_mfServers
    List of all symbolic server names
*/

/*! \var UInt32          ClusterWindowBase::_mfServerIds
    
*/

/*! \var std::string     ClusterWindowBase::_sfConnectionType
    How to connect to the servers
*/

/*! \var std::string     ClusterWindowBase::_sfConnectionInterface
    Which network interface to use for communication
*/

/*! \var std::string     ClusterWindowBase::_sfConnectionDestination
    Multicast address for multicast connections
*/

/*! \var std::string     ClusterWindowBase::_sfConnectionParams
    Optional parameters e.g. "TTL=2"
*/

/*! \var UInt32          ClusterWindowBase::_sfServicePort
    Broadcastport used for server search
*/

/*! \var std::string     ClusterWindowBase::_sfServiceAddress
    Broadcast or Multicast address used for server search
*/

/*! \var std::string     ClusterWindowBase::_sfServiceInterface
    Ethernet interface to be used for server search
*/

/*! \var Window *        ClusterWindowBase::_sfClientWindow
    Window for client rendering
*/

/*! \var UInt32          ClusterWindowBase::_sfInterleave
    
*/

/*! \var UInt32          ClusterWindowBase::_sfFrameCount
    
*/

/*! \var ImageComposer * ClusterWindowBase::_sfComposer
    
*/

/*! \var std::string     ClusterWindowBase::_mfAutostart
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ClusterWindow *, nsOSG>::_type(
    "ClusterWindowPtr", 
    "WindowPtr", 
    ClusterWindow::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ClusterWindow *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ClusterWindow *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ClusterWindow *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ClusterWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFString::Description(
        MFString::getClassType(),
        "servers",
        "List of all symbolic server names\n",
        ServersFieldId, ServersFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleServers),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleServers));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "serverIds",
        "",
        ServerIdsFieldId, ServerIdsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleServerIds),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleServerIds));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "connectionType",
        "How to connect to the servers\n",
        ConnectionTypeFieldId, ConnectionTypeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleConnectionType),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleConnectionType));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "connectionInterface",
        "Which network interface to use for communication\n",
        ConnectionInterfaceFieldId, ConnectionInterfaceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleConnectionInterface),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleConnectionInterface));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "connectionDestination",
        "Multicast address for multicast connections\n",
        ConnectionDestinationFieldId, ConnectionDestinationFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleConnectionDestination),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleConnectionDestination));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "connectionParams",
        "Optional parameters e.g. \"TTL=2\"\n",
        ConnectionParamsFieldId, ConnectionParamsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleConnectionParams),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleConnectionParams));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "servicePort",
        "Broadcastport used for server search\n",
        ServicePortFieldId, ServicePortFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleServicePort),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleServicePort));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "serviceAddress",
        "Broadcast or Multicast address used for server search\n",
        ServiceAddressFieldId, ServiceAddressFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleServiceAddress),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleServiceAddress));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "serviceInterface",
        "Ethernet interface to be used for server search\n",
        ServiceInterfaceFieldId, ServiceInterfaceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleServiceInterface),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleServiceInterface));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecWindowPtr::Description(
        SFUnrecWindowPtr::getClassType(),
        "clientWindow",
        "Window for client rendering\n",
        ClientWindowFieldId, ClientWindowFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleClientWindow),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleClientWindow));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "interleave",
        "",
        InterleaveFieldId, InterleaveFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleInterleave),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleInterleave));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "frameCount",
        "",
        FrameCountFieldId, FrameCountFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleFrameCount),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleFrameCount));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecImageComposerPtr::Description(
        SFUnrecImageComposerPtr::getClassType(),
        "composer",
        "",
        ComposerFieldId, ComposerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleComposer),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleComposer));

    oType.addInitialDesc(pDesc);

    pDesc = new MFString::Description(
        MFString::getClassType(),
        "autostart",
        "",
        AutostartFieldId, AutostartFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleAutostart),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleAutostart));

    oType.addInitialDesc(pDesc);
}


ClusterWindowBase::TypeObject ClusterWindowBase::_type(
    ClusterWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ClusterWindowBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ClusterWindow::initMethod),
    reinterpret_cast<ExitContainerF>(&ClusterWindow::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ClusterWindow::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"ClusterWindow\"\n"
    "   parent=\"Window\"\n"
    "   library=\"Cluster\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   docGroupBase=\"GrpClusterWindow\"\n"
    "   >\n"
    "  The base class for all windows.\n"
    "  <Field\n"
    "\t name=\"servers\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tList of all symbolic server names\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"serverIds\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"connectionType\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tHow to connect to the servers\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"connectionInterface\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tWhich network interface to use for communication\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"connectionDestination\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tMulticast address for multicast connections\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"connectionParams\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tOptional parameters e.g. \"TTL=2\"\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"servicePort\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"8437\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tBroadcastport used for server search\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"serviceAddress\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue='\"224.245.211.234\"'\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tBroadcast or Multicast address used for server search\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"serviceInterface\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tEthernet interface to be used for server search\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"clientWindow\"\n"
    "\t type=\"WindowPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tWindow for client rendering\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"interleave\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"frameCount\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"composer\"\n"
    "\t type=\"ImageComposerPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"autostart\"\n"
    "\t type=\"std::string\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <!--\n"
    "\t <Field\n"
    "\t\tname=\"calibration\"\n"
    "\t\ttype=\"DisplayCalibrationPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t    >\n"
    "\t </Field>\n"
    "\t <Field\n"
    "\t\tname=\"filter\"\n"
    "\t\ttype=\"DisplayFilterForegroundPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t    >\n"
    "\t   Display filter foregrounds can be used instead of calibration\n"
    "\t </Field>\n"
    "\t <Field\n"
    "\t\tname=\"dirty\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"protected\"\n"
    "\t    >\n"
    "\t   Internally set for forceing re-initialization of foregrounds\n"
    "\t </Field>\n"
    "     -->\n"
    "</FieldContainer>\n",
    "The base class for all windows.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ClusterWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &ClusterWindowBase::getType(void) const
{
    return _type;
}

UInt32 ClusterWindowBase::getContainerSize(void) const
{
    return sizeof(ClusterWindow);
}

/*------------------------- decorator get ------------------------------*/


MFString *ClusterWindowBase::editMFServers(void)
{
    editMField(ServersFieldMask, _mfServers);

    return &_mfServers;
}

const MFString *ClusterWindowBase::getMFServers(void) const
{
    return &_mfServers;
}


MFUInt32 *ClusterWindowBase::editMFServerIds(void)
{
    editMField(ServerIdsFieldMask, _mfServerIds);

    return &_mfServerIds;
}

const MFUInt32 *ClusterWindowBase::getMFServerIds(void) const
{
    return &_mfServerIds;
}


SFString *ClusterWindowBase::editSFConnectionType(void)
{
    editSField(ConnectionTypeFieldMask);

    return &_sfConnectionType;
}

const SFString *ClusterWindowBase::getSFConnectionType(void) const
{
    return &_sfConnectionType;
}


SFString *ClusterWindowBase::editSFConnectionInterface(void)
{
    editSField(ConnectionInterfaceFieldMask);

    return &_sfConnectionInterface;
}

const SFString *ClusterWindowBase::getSFConnectionInterface(void) const
{
    return &_sfConnectionInterface;
}


SFString *ClusterWindowBase::editSFConnectionDestination(void)
{
    editSField(ConnectionDestinationFieldMask);

    return &_sfConnectionDestination;
}

const SFString *ClusterWindowBase::getSFConnectionDestination(void) const
{
    return &_sfConnectionDestination;
}


SFString *ClusterWindowBase::editSFConnectionParams(void)
{
    editSField(ConnectionParamsFieldMask);

    return &_sfConnectionParams;
}

const SFString *ClusterWindowBase::getSFConnectionParams(void) const
{
    return &_sfConnectionParams;
}


SFUInt32 *ClusterWindowBase::editSFServicePort(void)
{
    editSField(ServicePortFieldMask);

    return &_sfServicePort;
}

const SFUInt32 *ClusterWindowBase::getSFServicePort(void) const
{
    return &_sfServicePort;
}


SFString *ClusterWindowBase::editSFServiceAddress(void)
{
    editSField(ServiceAddressFieldMask);

    return &_sfServiceAddress;
}

const SFString *ClusterWindowBase::getSFServiceAddress(void) const
{
    return &_sfServiceAddress;
}


SFString *ClusterWindowBase::editSFServiceInterface(void)
{
    editSField(ServiceInterfaceFieldMask);

    return &_sfServiceInterface;
}

const SFString *ClusterWindowBase::getSFServiceInterface(void) const
{
    return &_sfServiceInterface;
}


//! Get the ClusterWindow::_sfClientWindow field.
const SFUnrecWindowPtr *ClusterWindowBase::getSFClientWindow(void) const
{
    return &_sfClientWindow;
}

SFUnrecWindowPtr    *ClusterWindowBase::editSFClientWindow   (void)
{
    editSField(ClientWindowFieldMask);

    return &_sfClientWindow;
}

//! Get the value of the ClusterWindow::_sfClientWindow field.
Window * ClusterWindowBase::getClientWindow(void) const
{
    return _sfClientWindow.getValue();
}

//! Set the value of the ClusterWindow::_sfClientWindow field.
void ClusterWindowBase::setClientWindow(Window * const value)
{
    editSField(ClientWindowFieldMask);

    _sfClientWindow.setValue(value);
}


SFUInt32 *ClusterWindowBase::editSFInterleave(void)
{
    editSField(InterleaveFieldMask);

    return &_sfInterleave;
}

const SFUInt32 *ClusterWindowBase::getSFInterleave(void) const
{
    return &_sfInterleave;
}


SFUInt32 *ClusterWindowBase::editSFFrameCount(void)
{
    editSField(FrameCountFieldMask);

    return &_sfFrameCount;
}

const SFUInt32 *ClusterWindowBase::getSFFrameCount(void) const
{
    return &_sfFrameCount;
}


//! Get the ClusterWindow::_sfComposer field.
const SFUnrecImageComposerPtr *ClusterWindowBase::getSFComposer(void) const
{
    return &_sfComposer;
}

SFUnrecImageComposerPtr *ClusterWindowBase::editSFComposer       (void)
{
    editSField(ComposerFieldMask);

    return &_sfComposer;
}

//! Get the value of the ClusterWindow::_sfComposer field.
ImageComposer * ClusterWindowBase::getComposer(void) const
{
    return _sfComposer.getValue();
}

//! Set the value of the ClusterWindow::_sfComposer field.
void ClusterWindowBase::setComposer(ImageComposer * const value)
{
    editSField(ComposerFieldMask);

    _sfComposer.setValue(value);
}


MFString *ClusterWindowBase::editMFAutostart(void)
{
    editMField(AutostartFieldMask, _mfAutostart);

    return &_mfAutostart;
}

const MFString *ClusterWindowBase::getMFAutostart(void) const
{
    return &_mfAutostart;
}






/*------------------------------ access -----------------------------------*/

SizeT ClusterWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ServersFieldMask & whichField))
    {
        returnValue += _mfServers.getBinSize();
    }
    if(FieldBits::NoField != (ServerIdsFieldMask & whichField))
    {
        returnValue += _mfServerIds.getBinSize();
    }
    if(FieldBits::NoField != (ConnectionTypeFieldMask & whichField))
    {
        returnValue += _sfConnectionType.getBinSize();
    }
    if(FieldBits::NoField != (ConnectionInterfaceFieldMask & whichField))
    {
        returnValue += _sfConnectionInterface.getBinSize();
    }
    if(FieldBits::NoField != (ConnectionDestinationFieldMask & whichField))
    {
        returnValue += _sfConnectionDestination.getBinSize();
    }
    if(FieldBits::NoField != (ConnectionParamsFieldMask & whichField))
    {
        returnValue += _sfConnectionParams.getBinSize();
    }
    if(FieldBits::NoField != (ServicePortFieldMask & whichField))
    {
        returnValue += _sfServicePort.getBinSize();
    }
    if(FieldBits::NoField != (ServiceAddressFieldMask & whichField))
    {
        returnValue += _sfServiceAddress.getBinSize();
    }
    if(FieldBits::NoField != (ServiceInterfaceFieldMask & whichField))
    {
        returnValue += _sfServiceInterface.getBinSize();
    }
    if(FieldBits::NoField != (ClientWindowFieldMask & whichField))
    {
        returnValue += _sfClientWindow.getBinSize();
    }
    if(FieldBits::NoField != (InterleaveFieldMask & whichField))
    {
        returnValue += _sfInterleave.getBinSize();
    }
    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
    {
        returnValue += _sfFrameCount.getBinSize();
    }
    if(FieldBits::NoField != (ComposerFieldMask & whichField))
    {
        returnValue += _sfComposer.getBinSize();
    }
    if(FieldBits::NoField != (AutostartFieldMask & whichField))
    {
        returnValue += _mfAutostart.getBinSize();
    }

    return returnValue;
}

void ClusterWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ServersFieldMask & whichField))
    {
        _mfServers.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ServerIdsFieldMask & whichField))
    {
        _mfServerIds.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionTypeFieldMask & whichField))
    {
        _sfConnectionType.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionInterfaceFieldMask & whichField))
    {
        _sfConnectionInterface.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionDestinationFieldMask & whichField))
    {
        _sfConnectionDestination.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionParamsFieldMask & whichField))
    {
        _sfConnectionParams.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ServicePortFieldMask & whichField))
    {
        _sfServicePort.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ServiceAddressFieldMask & whichField))
    {
        _sfServiceAddress.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ServiceInterfaceFieldMask & whichField))
    {
        _sfServiceInterface.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClientWindowFieldMask & whichField))
    {
        _sfClientWindow.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InterleaveFieldMask & whichField))
    {
        _sfInterleave.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
    {
        _sfFrameCount.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ComposerFieldMask & whichField))
    {
        _sfComposer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutostartFieldMask & whichField))
    {
        _mfAutostart.copyToBin(pMem);
    }
}

void ClusterWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ServersFieldMask & whichField))
    {
        editMField(ServersFieldMask, _mfServers);
        _mfServers.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ServerIdsFieldMask & whichField))
    {
        editMField(ServerIdsFieldMask, _mfServerIds);
        _mfServerIds.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionTypeFieldMask & whichField))
    {
        editSField(ConnectionTypeFieldMask);
        _sfConnectionType.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionInterfaceFieldMask & whichField))
    {
        editSField(ConnectionInterfaceFieldMask);
        _sfConnectionInterface.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionDestinationFieldMask & whichField))
    {
        editSField(ConnectionDestinationFieldMask);
        _sfConnectionDestination.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionParamsFieldMask & whichField))
    {
        editSField(ConnectionParamsFieldMask);
        _sfConnectionParams.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ServicePortFieldMask & whichField))
    {
        editSField(ServicePortFieldMask);
        _sfServicePort.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ServiceAddressFieldMask & whichField))
    {
        editSField(ServiceAddressFieldMask);
        _sfServiceAddress.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ServiceInterfaceFieldMask & whichField))
    {
        editSField(ServiceInterfaceFieldMask);
        _sfServiceInterface.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClientWindowFieldMask & whichField))
    {
        editSField(ClientWindowFieldMask);
        _sfClientWindow.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InterleaveFieldMask & whichField))
    {
        editSField(InterleaveFieldMask);
        _sfInterleave.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
    {
        editSField(FrameCountFieldMask);
        _sfFrameCount.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ComposerFieldMask & whichField))
    {
        editSField(ComposerFieldMask);
        _sfComposer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutostartFieldMask & whichField))
    {
        editMField(AutostartFieldMask, _mfAutostart);
        _mfAutostart.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ClusterWindowTransitPtr ClusterWindowBase::createLocal(BitVector bFlags)
{
    ClusterWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ClusterWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ClusterWindowTransitPtr ClusterWindowBase::createDependent(BitVector bFlags)
{
    ClusterWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ClusterWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ClusterWindowTransitPtr ClusterWindowBase::create(void)
{
    ClusterWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ClusterWindow>(tmpPtr);
    }

    return fc;
}

ClusterWindow *ClusterWindowBase::createEmptyLocal(BitVector bFlags)
{
    ClusterWindow *returnValue;

    newPtr<ClusterWindow>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ClusterWindow *ClusterWindowBase::createEmpty(void)
{
    ClusterWindow *returnValue;

    newPtr<ClusterWindow>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ClusterWindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ClusterWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ClusterWindow *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ClusterWindowBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ClusterWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ClusterWindow *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ClusterWindowBase::shallowCopy(void) const
{
    ClusterWindow *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ClusterWindow *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ClusterWindowBase::ClusterWindowBase(void) :
    Inherited(),
    _mfServers                (),
    _mfServerIds              (),
    _sfConnectionType         (),
    _sfConnectionInterface    (),
    _sfConnectionDestination  (),
    _sfConnectionParams       (),
    _sfServicePort            (UInt32(8437)),
    _sfServiceAddress         (std::string("224.245.211.234")),
    _sfServiceInterface       (),
    _sfClientWindow           (NULL),
    _sfInterleave             (UInt32(0)),
    _sfFrameCount             (UInt32(0)),
    _sfComposer               (NULL),
    _mfAutostart              ()
{
}

ClusterWindowBase::ClusterWindowBase(const ClusterWindowBase &source) :
    Inherited(source),
    _mfServers                (source._mfServers                ),
    _mfServerIds              (source._mfServerIds              ),
    _sfConnectionType         (source._sfConnectionType         ),
    _sfConnectionInterface    (source._sfConnectionInterface    ),
    _sfConnectionDestination  (source._sfConnectionDestination  ),
    _sfConnectionParams       (source._sfConnectionParams       ),
    _sfServicePort            (source._sfServicePort            ),
    _sfServiceAddress         (source._sfServiceAddress         ),
    _sfServiceInterface       (source._sfServiceInterface       ),
    _sfClientWindow           (NULL),
    _sfInterleave             (source._sfInterleave             ),
    _sfFrameCount             (source._sfFrameCount             ),
    _sfComposer               (NULL),
    _mfAutostart              (source._mfAutostart              )
{
}


/*-------------------------- destructors ----------------------------------*/

ClusterWindowBase::~ClusterWindowBase(void)
{
}

void ClusterWindowBase::onCreate(const ClusterWindow *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ClusterWindow *pThis = static_cast<ClusterWindow *>(this);

        pThis->setClientWindow(source->getClientWindow());

        pThis->setComposer(source->getComposer());
    }
}

GetFieldHandlePtr ClusterWindowBase::getHandleServers         (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfServers,
             this->getType().getFieldDesc(ServersFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleServers        (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfServers,
             this->getType().getFieldDesc(ServersFieldId),
             this));


    editMField(ServersFieldMask, _mfServers);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleServerIds       (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfServerIds,
             this->getType().getFieldDesc(ServerIdsFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleServerIds      (void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfServerIds,
             this->getType().getFieldDesc(ServerIdsFieldId),
             this));


    editMField(ServerIdsFieldMask, _mfServerIds);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleConnectionType  (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfConnectionType,
             this->getType().getFieldDesc(ConnectionTypeFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleConnectionType (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfConnectionType,
             this->getType().getFieldDesc(ConnectionTypeFieldId),
             this));


    editSField(ConnectionTypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleConnectionInterface (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfConnectionInterface,
             this->getType().getFieldDesc(ConnectionInterfaceFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleConnectionInterface(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfConnectionInterface,
             this->getType().getFieldDesc(ConnectionInterfaceFieldId),
             this));


    editSField(ConnectionInterfaceFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleConnectionDestination (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfConnectionDestination,
             this->getType().getFieldDesc(ConnectionDestinationFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleConnectionDestination(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfConnectionDestination,
             this->getType().getFieldDesc(ConnectionDestinationFieldId),
             this));


    editSField(ConnectionDestinationFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleConnectionParams (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfConnectionParams,
             this->getType().getFieldDesc(ConnectionParamsFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleConnectionParams(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfConnectionParams,
             this->getType().getFieldDesc(ConnectionParamsFieldId),
             this));


    editSField(ConnectionParamsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleServicePort     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfServicePort,
             this->getType().getFieldDesc(ServicePortFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleServicePort    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfServicePort,
             this->getType().getFieldDesc(ServicePortFieldId),
             this));


    editSField(ServicePortFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleServiceAddress  (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfServiceAddress,
             this->getType().getFieldDesc(ServiceAddressFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleServiceAddress (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfServiceAddress,
             this->getType().getFieldDesc(ServiceAddressFieldId),
             this));


    editSField(ServiceAddressFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleServiceInterface (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfServiceInterface,
             this->getType().getFieldDesc(ServiceInterfaceFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleServiceInterface(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfServiceInterface,
             this->getType().getFieldDesc(ServiceInterfaceFieldId),
             this));


    editSField(ServiceInterfaceFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleClientWindow    (void) const
{
    SFUnrecWindowPtr::GetHandlePtr returnValue(
        new  SFUnrecWindowPtr::GetHandle(
             &_sfClientWindow,
             this->getType().getFieldDesc(ClientWindowFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleClientWindow   (void)
{
    SFUnrecWindowPtr::EditHandlePtr returnValue(
        new  SFUnrecWindowPtr::EditHandle(
             &_sfClientWindow,
             this->getType().getFieldDesc(ClientWindowFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterWindow::setClientWindow,
                    static_cast<ClusterWindow *>(this), ::boost::placeholders::_1));

    editSField(ClientWindowFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleInterleave      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfInterleave,
             this->getType().getFieldDesc(InterleaveFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleInterleave     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfInterleave,
             this->getType().getFieldDesc(InterleaveFieldId),
             this));


    editSField(InterleaveFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleFrameCount      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfFrameCount,
             this->getType().getFieldDesc(FrameCountFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleFrameCount     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfFrameCount,
             this->getType().getFieldDesc(FrameCountFieldId),
             this));


    editSField(FrameCountFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleComposer        (void) const
{
    SFUnrecImageComposerPtr::GetHandlePtr returnValue(
        new  SFUnrecImageComposerPtr::GetHandle(
             &_sfComposer,
             this->getType().getFieldDesc(ComposerFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleComposer       (void)
{
    SFUnrecImageComposerPtr::EditHandlePtr returnValue(
        new  SFUnrecImageComposerPtr::EditHandle(
             &_sfComposer,
             this->getType().getFieldDesc(ComposerFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ClusterWindow::setComposer,
                    static_cast<ClusterWindow *>(this), ::boost::placeholders::_1));

    editSField(ComposerFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleAutostart       (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfAutostart,
             this->getType().getFieldDesc(AutostartFieldId),
             const_cast<ClusterWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleAutostart      (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfAutostart,
             this->getType().getFieldDesc(AutostartFieldId),
             this));


    editMField(AutostartFieldMask, _mfAutostart);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ClusterWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ClusterWindow *pThis = static_cast<ClusterWindow *>(this);

    pThis->execSync(static_cast<ClusterWindow *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ClusterWindowBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ClusterWindow *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ClusterWindow *>(pRefAspect),
                  dynamic_cast<const ClusterWindow *>(this));

    return returnValue;
}
#endif

void ClusterWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ClusterWindow *>(this)->setClientWindow(NULL);

    static_cast<ClusterWindow *>(this)->setComposer(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfServers.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfServerIds.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfAutostart.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
