/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureObjRefChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"


#include "OSGGL.h"                        // InternalFormat default header


#include "OSGTextureObjRefChunkBase.h"
#include "OSGTextureObjRefChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextureObjRefChunk
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var GLenum          TextureObjRefChunkBase::_sfOsgGLId
    OpenSG-OpenGL id of texture object.
*/

/*! \var GLenum          TextureObjRefChunkBase::_sfOglGLId
    Native OpenGL id of texture object.
*/

/*! \var GLenum          TextureObjRefChunkBase::_sfInternalFormat
    The internal texture format, needed if the texture is bound to an image
    unit
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<TextureObjRefChunk *, nsOSG>::_type(
    "TextureObjRefChunkPtr", 
    "TextureBaseChunkPtr", 
    TextureObjRefChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(TextureObjRefChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TextureObjRefChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TextureObjRefChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextureObjRefChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "osgGLId",
        "OpenSG-OpenGL id of texture object.\n",
        OsgGLIdFieldId, OsgGLIdFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&TextureObjRefChunk::editHandleOsgGLId),
        static_cast<FieldGetMethodSig >(&TextureObjRefChunk::getHandleOsgGLId));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "oglGLId",
        "Native OpenGL id of texture object.\n",
        OglGLIdFieldId, OglGLIdFieldMask,
        false,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&TextureObjRefChunk::editHandleOglGLId),
        static_cast<FieldGetMethodSig >(&TextureObjRefChunk::getHandleOglGLId));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "internalFormat",
        "The internal texture format, needed if the texture is bound to an image\n"
        "unit\n",
        InternalFormatFieldId, InternalFormatFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjRefChunk::editHandleInternalFormat),
        static_cast<FieldGetMethodSig >(&TextureObjRefChunk::getHandleInternalFormat));

    oType.addInitialDesc(pDesc);
}


TextureObjRefChunkBase::TypeObject TextureObjRefChunkBase::_type(
    TextureObjRefChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&TextureObjRefChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&TextureObjRefChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&TextureObjRefChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&TextureObjRefChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"TextureObjRefChunk\"\n"
    "    parent=\"TextureBaseChunk\"\n"
    "    library=\"State\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    docGroupBase=\"GrpStateAuxiliary\"\n"
    "    >\n"
    "    <Field\n"
    "        name=\"osgGLId\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "        >\n"
    "        OpenSG-OpenGL id of texture object.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"oglGLId\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "        >\n"
    "        Native OpenGL id of texture object.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"internalFormat\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_NONE\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_NONE,GL_ALPHA, GL_DEPTH_COMPONENT, GL_LUMINANCE, GL_LUMINANCE_ALPH, GL_INTENSITY, GL_RGB, GL_RGBA, COMPRESSED_ALPHA, COMPRESSED_LUMINANCE, COMPRESSED_LUMINANCE_ALPHA, COMPRESSED_RGB, COMPRESSED_RGBA\"\n"
    "\t>\n"
    "\tThe internal texture format, needed if the texture is bound to an image\n"
    "    unit\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextureObjRefChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextureObjRefChunkBase::getType(void) const
{
    return _type;
}

UInt32 TextureObjRefChunkBase::getContainerSize(void) const
{
    return sizeof(TextureObjRefChunk);
}

/*------------------------- decorator get ------------------------------*/


SFGLenum *TextureObjRefChunkBase::editSFOsgGLId(void)
{
    editSField(OsgGLIdFieldMask);

    return &_sfOsgGLId;
}

const SFGLenum *TextureObjRefChunkBase::getSFOsgGLId(void) const
{
    return &_sfOsgGLId;
}


SFGLenum *TextureObjRefChunkBase::editSFOglGLId(void)
{
    editSField(OglGLIdFieldMask);

    return &_sfOglGLId;
}

const SFGLenum *TextureObjRefChunkBase::getSFOglGLId(void) const
{
    return &_sfOglGLId;
}


SFGLenum *TextureObjRefChunkBase::editSFInternalFormat(void)
{
    editSField(InternalFormatFieldMask);

    return &_sfInternalFormat;
}

const SFGLenum *TextureObjRefChunkBase::getSFInternalFormat(void) const
{
    return &_sfInternalFormat;
}






/*------------------------------ access -----------------------------------*/

SizeT TextureObjRefChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OsgGLIdFieldMask & whichField))
    {
        returnValue += _sfOsgGLId.getBinSize();
    }
    if(FieldBits::NoField != (OglGLIdFieldMask & whichField))
    {
        returnValue += _sfOglGLId.getBinSize();
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        returnValue += _sfInternalFormat.getBinSize();
    }

    return returnValue;
}

void TextureObjRefChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OsgGLIdFieldMask & whichField))
    {
        _sfOsgGLId.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OglGLIdFieldMask & whichField))
    {
        _sfOglGLId.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        _sfInternalFormat.copyToBin(pMem);
    }
}

void TextureObjRefChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OsgGLIdFieldMask & whichField))
    {
        editSField(OsgGLIdFieldMask);
        _sfOsgGLId.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OglGLIdFieldMask & whichField))
    {
        editSField(OglGLIdFieldMask);
        _sfOglGLId.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        editSField(InternalFormatFieldMask);
        _sfInternalFormat.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TextureObjRefChunkTransitPtr TextureObjRefChunkBase::createLocal(BitVector bFlags)
{
    TextureObjRefChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TextureObjRefChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TextureObjRefChunkTransitPtr TextureObjRefChunkBase::createDependent(BitVector bFlags)
{
    TextureObjRefChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TextureObjRefChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TextureObjRefChunkTransitPtr TextureObjRefChunkBase::create(void)
{
    TextureObjRefChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TextureObjRefChunk>(tmpPtr);
    }

    return fc;
}

TextureObjRefChunk *TextureObjRefChunkBase::createEmptyLocal(BitVector bFlags)
{
    TextureObjRefChunk *returnValue;

    newPtr<TextureObjRefChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TextureObjRefChunk *TextureObjRefChunkBase::createEmpty(void)
{
    TextureObjRefChunk *returnValue;

    newPtr<TextureObjRefChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TextureObjRefChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TextureObjRefChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureObjRefChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureObjRefChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TextureObjRefChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureObjRefChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureObjRefChunkBase::shallowCopy(void) const
{
    TextureObjRefChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TextureObjRefChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TextureObjRefChunkBase::TextureObjRefChunkBase(void) :
    Inherited(),
    _sfOsgGLId                (GLenum(0)),
    _sfOglGLId                (GLenum(0)),
    _sfInternalFormat         (GLenum(GL_NONE))
{
}

TextureObjRefChunkBase::TextureObjRefChunkBase(const TextureObjRefChunkBase &source) :
    Inherited(source),
    _sfOsgGLId                (source._sfOsgGLId                ),
    _sfOglGLId                (source._sfOglGLId                ),
    _sfInternalFormat         (source._sfInternalFormat         )
{
}


/*-------------------------- destructors ----------------------------------*/

TextureObjRefChunkBase::~TextureObjRefChunkBase(void)
{
}


GetFieldHandlePtr TextureObjRefChunkBase::getHandleOsgGLId         (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfOsgGLId,
             this->getType().getFieldDesc(OsgGLIdFieldId),
             const_cast<TextureObjRefChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjRefChunkBase::editHandleOsgGLId        (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfOsgGLId,
             this->getType().getFieldDesc(OsgGLIdFieldId),
             this));


    editSField(OsgGLIdFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjRefChunkBase::getHandleOglGLId         (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfOglGLId,
             this->getType().getFieldDesc(OglGLIdFieldId),
             const_cast<TextureObjRefChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjRefChunkBase::editHandleOglGLId        (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfOglGLId,
             this->getType().getFieldDesc(OglGLIdFieldId),
             this));


    editSField(OglGLIdFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjRefChunkBase::getHandleInternalFormat  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfInternalFormat,
             this->getType().getFieldDesc(InternalFormatFieldId),
             const_cast<TextureObjRefChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjRefChunkBase::editHandleInternalFormat (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfInternalFormat,
             this->getType().getFieldDesc(InternalFormatFieldId),
             this));


    editSField(InternalFormatFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TextureObjRefChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextureObjRefChunk *pThis = static_cast<TextureObjRefChunk *>(this);

    pThis->execSync(static_cast<TextureObjRefChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TextureObjRefChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TextureObjRefChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextureObjRefChunk *>(pRefAspect),
                  dynamic_cast<const TextureObjRefChunk *>(this));

    return returnValue;
}
#endif

void TextureObjRefChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
