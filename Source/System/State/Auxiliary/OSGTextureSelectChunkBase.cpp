/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureSelectChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGTextureBaseChunk.h"        // Textures Class

#include "OSGTextureSelectChunkBase.h"
#include "OSGTextureSelectChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextureSelectChunk
    The TextureSelectChunk allows choosing from a field of textures. It can be 
    used to change between a set of textures more easily than adding/removing 
    chunks the the used material, and can be used in places where only chunks
    are allowed.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          TextureSelectChunkBase::_sfChoice
    Texture selector
*/

/*! \var TextureBaseChunk * TextureSelectChunkBase::_mfTextures
    Texture chunks to choose from 
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<TextureSelectChunk *, nsOSG>::_type(
    "TextureSelectChunkPtr", 
    "TextureBaseChunkPtr", 
    TextureSelectChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(TextureSelectChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TextureSelectChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TextureSelectChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextureSelectChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "choice",
        "Texture selector\n",
        ChoiceFieldId, ChoiceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureSelectChunk::editHandleChoice),
        static_cast<FieldGetMethodSig >(&TextureSelectChunk::getHandleChoice));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecTextureBaseChunkPtr::Description(
        MFUnrecTextureBaseChunkPtr::getClassType(),
        "textures",
        "Texture chunks to choose from \n",
        TexturesFieldId, TexturesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureSelectChunk::editHandleTextures),
        static_cast<FieldGetMethodSig >(&TextureSelectChunk::getHandleTextures));

    oType.addInitialDesc(pDesc);
}


TextureSelectChunkBase::TypeObject TextureSelectChunkBase::_type(
    TextureSelectChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&TextureSelectChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&TextureSelectChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&TextureSelectChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&TextureSelectChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"TextureSelectChunk\"\n"
    "   parent=\"TextureBaseChunk\"\n"
    "   library=\"State\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   docGroupBase=\"GrpStateAuxiliary\"\n"
    "   >\n"
    "  The TextureSelectChunk allows choosing from a field of textures. It can be \n"
    "  used to change between a set of textures more easily than adding/removing \n"
    "  chunks the the used material, and can be used in places where only chunks\n"
    "  are allowed.\n"
    "\n"
    "  <Field\n"
    "\t name=\"choice\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t defaultValue=\"0\"\n"
    "\t >\n"
    "\tTexture selector\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"textures\"\n"
    "\t type=\"TextureBaseChunkPtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tTexture chunks to choose from \n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "The TextureSelectChunk allows choosing from a field of textures. It can be \n"
    "used to change between a set of textures more easily than adding/removing \n"
    "chunks the the used material, and can be used in places where only chunks\n"
    "are allowed.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextureSelectChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextureSelectChunkBase::getType(void) const
{
    return _type;
}

UInt32 TextureSelectChunkBase::getContainerSize(void) const
{
    return sizeof(TextureSelectChunk);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *TextureSelectChunkBase::editSFChoice(void)
{
    editSField(ChoiceFieldMask);

    return &_sfChoice;
}

const SFUInt32 *TextureSelectChunkBase::getSFChoice(void) const
{
    return &_sfChoice;
}


//! Get the TextureSelectChunk::_mfTextures field.
const MFUnrecTextureBaseChunkPtr *TextureSelectChunkBase::getMFTextures(void) const
{
    return &_mfTextures;
}

MFUnrecTextureBaseChunkPtr *TextureSelectChunkBase::editMFTextures       (void)
{
    editMField(TexturesFieldMask, _mfTextures);

    return &_mfTextures;
}
TextureBaseChunk * TextureSelectChunkBase::getTextures(const UInt32 index) const
{
    return _mfTextures[index];
}



void TextureSelectChunkBase::pushToTextures(TextureBaseChunk * const value)
{
    editMField(TexturesFieldMask, _mfTextures);

    _mfTextures.push_back(value);
}

void TextureSelectChunkBase::assignTextures (const MFUnrecTextureBaseChunkPtr &value)
{
    MFUnrecTextureBaseChunkPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecTextureBaseChunkPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<TextureSelectChunk *>(this)->clearTextures();

    while(elemIt != elemEnd)
    {
        this->pushToTextures(*elemIt);

        ++elemIt;
    }
}

void TextureSelectChunkBase::removeFromTextures(UInt32 uiIndex)
{
    if(uiIndex < _mfTextures.size())
    {
        editMField(TexturesFieldMask, _mfTextures);

        _mfTextures.erase(uiIndex);
    }
}

void TextureSelectChunkBase::removeObjFromTextures(TextureBaseChunk * const value)
{
    Int32 iElemIdx = _mfTextures.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(TexturesFieldMask, _mfTextures);

        _mfTextures.erase(iElemIdx);
    }
}
void TextureSelectChunkBase::clearTextures(void)
{
    editMField(TexturesFieldMask, _mfTextures);


    _mfTextures.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT TextureSelectChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ChoiceFieldMask & whichField))
    {
        returnValue += _sfChoice.getBinSize();
    }
    if(FieldBits::NoField != (TexturesFieldMask & whichField))
    {
        returnValue += _mfTextures.getBinSize();
    }

    return returnValue;
}

void TextureSelectChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ChoiceFieldMask & whichField))
    {
        _sfChoice.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexturesFieldMask & whichField))
    {
        _mfTextures.copyToBin(pMem);
    }
}

void TextureSelectChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ChoiceFieldMask & whichField))
    {
        editSField(ChoiceFieldMask);
        _sfChoice.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexturesFieldMask & whichField))
    {
        editMField(TexturesFieldMask, _mfTextures);
        _mfTextures.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TextureSelectChunkTransitPtr TextureSelectChunkBase::createLocal(BitVector bFlags)
{
    TextureSelectChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TextureSelectChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TextureSelectChunkTransitPtr TextureSelectChunkBase::createDependent(BitVector bFlags)
{
    TextureSelectChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TextureSelectChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TextureSelectChunkTransitPtr TextureSelectChunkBase::create(void)
{
    TextureSelectChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TextureSelectChunk>(tmpPtr);
    }

    return fc;
}

TextureSelectChunk *TextureSelectChunkBase::createEmptyLocal(BitVector bFlags)
{
    TextureSelectChunk *returnValue;

    newPtr<TextureSelectChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TextureSelectChunk *TextureSelectChunkBase::createEmpty(void)
{
    TextureSelectChunk *returnValue;

    newPtr<TextureSelectChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TextureSelectChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TextureSelectChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureSelectChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureSelectChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TextureSelectChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureSelectChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureSelectChunkBase::shallowCopy(void) const
{
    TextureSelectChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TextureSelectChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TextureSelectChunkBase::TextureSelectChunkBase(void) :
    Inherited(),
    _sfChoice                 (UInt32(0)),
    _mfTextures               ()
{
}

TextureSelectChunkBase::TextureSelectChunkBase(const TextureSelectChunkBase &source) :
    Inherited(source),
    _sfChoice                 (source._sfChoice                 ),
    _mfTextures               ()
{
}


/*-------------------------- destructors ----------------------------------*/

TextureSelectChunkBase::~TextureSelectChunkBase(void)
{
}

void TextureSelectChunkBase::onCreate(const TextureSelectChunk *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TextureSelectChunk *pThis = static_cast<TextureSelectChunk *>(this);

        MFUnrecTextureBaseChunkPtr::const_iterator TexturesIt  =
            source->_mfTextures.begin();
        MFUnrecTextureBaseChunkPtr::const_iterator TexturesEnd =
            source->_mfTextures.end  ();

        while(TexturesIt != TexturesEnd)
        {
            pThis->pushToTextures(*TexturesIt);

            ++TexturesIt;
        }
    }
}

GetFieldHandlePtr TextureSelectChunkBase::getHandleChoice          (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfChoice,
             this->getType().getFieldDesc(ChoiceFieldId),
             const_cast<TextureSelectChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureSelectChunkBase::editHandleChoice         (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfChoice,
             this->getType().getFieldDesc(ChoiceFieldId),
             this));


    editSField(ChoiceFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureSelectChunkBase::getHandleTextures        (void) const
{
    MFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  MFUnrecTextureBaseChunkPtr::GetHandle(
             &_mfTextures,
             this->getType().getFieldDesc(TexturesFieldId),
             const_cast<TextureSelectChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureSelectChunkBase::editHandleTextures       (void)
{
    MFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  MFUnrecTextureBaseChunkPtr::EditHandle(
             &_mfTextures,
             this->getType().getFieldDesc(TexturesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&TextureSelectChunk::pushToTextures,
                    static_cast<TextureSelectChunk *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&TextureSelectChunk::removeFromTextures,
                    static_cast<TextureSelectChunk *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&TextureSelectChunk::removeObjFromTextures,
                    static_cast<TextureSelectChunk *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&TextureSelectChunk::clearTextures,
                    static_cast<TextureSelectChunk *>(this)));

    editMField(TexturesFieldMask, _mfTextures);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TextureSelectChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextureSelectChunk *pThis = static_cast<TextureSelectChunk *>(this);

    pThis->execSync(static_cast<TextureSelectChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TextureSelectChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TextureSelectChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextureSelectChunk *>(pRefAspect),
                  dynamic_cast<const TextureSelectChunk *>(this));

    return returnValue;
}
#endif

void TextureSelectChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextureSelectChunk *>(this)->clearTextures();


}


OSG_END_NAMESPACE
