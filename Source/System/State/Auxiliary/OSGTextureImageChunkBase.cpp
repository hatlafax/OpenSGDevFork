/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureImageChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"


#include "OSGGL.h"                        // Access default header
#include "OSGGL.h"                        // Format default header

#include "OSGTextureBaseChunk.h"        // Texture Class

#include "OSGTextureImageChunkBase.h"
#include "OSGTextureImageChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextureImageChunk
    uses glBindTextureImage
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TextureBaseChunk * TextureImageChunkBase::_sfTexture
    Texture chunks to choose from 
*/

/*! \var Int32           TextureImageChunkBase::_sfLevel
    
*/

/*! \var Int32           TextureImageChunkBase::_sfLayer
    
*/

/*! \var GLenum          TextureImageChunkBase::_sfAccess
    
*/

/*! \var GLenum          TextureImageChunkBase::_sfFormat
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<TextureImageChunk *, nsOSG>::_type(
    "TextureImageChunkPtr", 
    "StateChunkPtr", 
    TextureImageChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(TextureImageChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TextureImageChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TextureImageChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextureImageChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "texture",
        "Texture chunks to choose from \n",
        TextureFieldId, TextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureImageChunk::editHandleTexture),
        static_cast<FieldGetMethodSig >(&TextureImageChunk::getHandleTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "level",
        "",
        LevelFieldId, LevelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureImageChunk::editHandleLevel),
        static_cast<FieldGetMethodSig >(&TextureImageChunk::getHandleLevel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "layer",
        "",
        LayerFieldId, LayerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureImageChunk::editHandleLayer),
        static_cast<FieldGetMethodSig >(&TextureImageChunk::getHandleLayer));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "access",
        "",
        AccessFieldId, AccessFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureImageChunk::editHandleAccess),
        static_cast<FieldGetMethodSig >(&TextureImageChunk::getHandleAccess));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "format",
        "",
        FormatFieldId, FormatFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureImageChunk::editHandleFormat),
        static_cast<FieldGetMethodSig >(&TextureImageChunk::getHandleFormat));

    oType.addInitialDesc(pDesc);
}


TextureImageChunkBase::TypeObject TextureImageChunkBase::_type(
    TextureImageChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&TextureImageChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&TextureImageChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&TextureImageChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&TextureImageChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"TextureImageChunk\"\n"
    "    parent=\"StateChunk\"\n"
    "    library=\"State\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    docGroupBase=\"GrpStateAuxiliary\"\n"
    "    >\n"
    "\n"
    "  uses glBindTextureImage\n"
    "\n"
    "  <Field\n"
    "\t  name=\"texture\"\n"
    "\t  type=\"TextureBaseChunk\"\n"
    "      category=\"pointer\"\n"
    "\t  cardinality=\"single\"\n"
    "\t  visibility=\"external\"\n"
    "\t  access=\"public\"\n"
    "      defaultValue=\"NULL\"\n"
    "\t  >\n"
    "\tTexture chunks to choose from \n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "      name=\"level\"\n"
    "      type=\"Int32\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      defaultValue=\"0\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "      name=\"layer\"\n"
    "      type=\"Int32\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      defaultValue=\"-1\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "      name=\"access\"\n"
    "      type=\"GLenum\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      defaultValue=\"GL_READ_ONLY\"\n"
    "      defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "      access=\"public\"\n"
    "      potential_values=\"GL_READ_ONLY, GL_WRITE_ONLY, GL_READ_WRITE\"\n"
    "\t  >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "      name=\"format\"\n"
    "      type=\"GLenum\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      defaultValue=\"GL_NONE\"\n"
    "      defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "      access=\"public\"\n"
    "\t  >\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "uses glBindTextureImage\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextureImageChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextureImageChunkBase::getType(void) const
{
    return _type;
}

UInt32 TextureImageChunkBase::getContainerSize(void) const
{
    return sizeof(TextureImageChunk);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TextureImageChunk::_sfTexture field.
const SFUnrecTextureBaseChunkPtr *TextureImageChunkBase::getSFTexture(void) const
{
    return &_sfTexture;
}

SFUnrecTextureBaseChunkPtr *TextureImageChunkBase::editSFTexture        (void)
{
    editSField(TextureFieldMask);

    return &_sfTexture;
}

//! Get the value of the TextureImageChunk::_sfTexture field.
TextureBaseChunk * TextureImageChunkBase::getTexture(void) const
{
    return _sfTexture.getValue();
}

//! Set the value of the TextureImageChunk::_sfTexture field.
void TextureImageChunkBase::setTexture(TextureBaseChunk * const value)
{
    editSField(TextureFieldMask);

    _sfTexture.setValue(value);
}


SFInt32 *TextureImageChunkBase::editSFLevel(void)
{
    editSField(LevelFieldMask);

    return &_sfLevel;
}

const SFInt32 *TextureImageChunkBase::getSFLevel(void) const
{
    return &_sfLevel;
}


SFInt32 *TextureImageChunkBase::editSFLayer(void)
{
    editSField(LayerFieldMask);

    return &_sfLayer;
}

const SFInt32 *TextureImageChunkBase::getSFLayer(void) const
{
    return &_sfLayer;
}


SFGLenum *TextureImageChunkBase::editSFAccess(void)
{
    editSField(AccessFieldMask);

    return &_sfAccess;
}

const SFGLenum *TextureImageChunkBase::getSFAccess(void) const
{
    return &_sfAccess;
}


SFGLenum *TextureImageChunkBase::editSFFormat(void)
{
    editSField(FormatFieldMask);

    return &_sfFormat;
}

const SFGLenum *TextureImageChunkBase::getSFFormat(void) const
{
    return &_sfFormat;
}






/*------------------------------ access -----------------------------------*/

SizeT TextureImageChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        returnValue += _sfTexture.getBinSize();
    }
    if(FieldBits::NoField != (LevelFieldMask & whichField))
    {
        returnValue += _sfLevel.getBinSize();
    }
    if(FieldBits::NoField != (LayerFieldMask & whichField))
    {
        returnValue += _sfLayer.getBinSize();
    }
    if(FieldBits::NoField != (AccessFieldMask & whichField))
    {
        returnValue += _sfAccess.getBinSize();
    }
    if(FieldBits::NoField != (FormatFieldMask & whichField))
    {
        returnValue += _sfFormat.getBinSize();
    }

    return returnValue;
}

void TextureImageChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        _sfTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LevelFieldMask & whichField))
    {
        _sfLevel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LayerFieldMask & whichField))
    {
        _sfLayer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AccessFieldMask & whichField))
    {
        _sfAccess.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FormatFieldMask & whichField))
    {
        _sfFormat.copyToBin(pMem);
    }
}

void TextureImageChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        editSField(TextureFieldMask);
        _sfTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LevelFieldMask & whichField))
    {
        editSField(LevelFieldMask);
        _sfLevel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LayerFieldMask & whichField))
    {
        editSField(LayerFieldMask);
        _sfLayer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AccessFieldMask & whichField))
    {
        editSField(AccessFieldMask);
        _sfAccess.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FormatFieldMask & whichField))
    {
        editSField(FormatFieldMask);
        _sfFormat.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TextureImageChunkTransitPtr TextureImageChunkBase::createLocal(BitVector bFlags)
{
    TextureImageChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TextureImageChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TextureImageChunkTransitPtr TextureImageChunkBase::createDependent(BitVector bFlags)
{
    TextureImageChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TextureImageChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TextureImageChunkTransitPtr TextureImageChunkBase::create(void)
{
    TextureImageChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TextureImageChunk>(tmpPtr);
    }

    return fc;
}

TextureImageChunk *TextureImageChunkBase::createEmptyLocal(BitVector bFlags)
{
    TextureImageChunk *returnValue;

    newPtr<TextureImageChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TextureImageChunk *TextureImageChunkBase::createEmpty(void)
{
    TextureImageChunk *returnValue;

    newPtr<TextureImageChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TextureImageChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TextureImageChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureImageChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureImageChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TextureImageChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureImageChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureImageChunkBase::shallowCopy(void) const
{
    TextureImageChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TextureImageChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TextureImageChunkBase::TextureImageChunkBase(void) :
    Inherited(),
    _sfTexture                (NULL),
    _sfLevel                  (Int32(0)),
    _sfLayer                  (Int32(-1)),
    _sfAccess                 (GLenum(GL_READ_ONLY)),
    _sfFormat                 (GLenum(GL_NONE))
{
}

TextureImageChunkBase::TextureImageChunkBase(const TextureImageChunkBase &source) :
    Inherited(source),
    _sfTexture                (NULL),
    _sfLevel                  (source._sfLevel                  ),
    _sfLayer                  (source._sfLayer                  ),
    _sfAccess                 (source._sfAccess                 ),
    _sfFormat                 (source._sfFormat                 )
{
}


/*-------------------------- destructors ----------------------------------*/

TextureImageChunkBase::~TextureImageChunkBase(void)
{
}

void TextureImageChunkBase::onCreate(const TextureImageChunk *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TextureImageChunk *pThis = static_cast<TextureImageChunk *>(this);

        pThis->setTexture(source->getTexture());
    }
}

GetFieldHandlePtr TextureImageChunkBase::getHandleTexture         (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfTexture,
             this->getType().getFieldDesc(TextureFieldId),
             const_cast<TextureImageChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureImageChunkBase::editHandleTexture        (void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfTexture,
             this->getType().getFieldDesc(TextureFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TextureImageChunk::setTexture,
                    static_cast<TextureImageChunk *>(this), ::boost::placeholders::_1));

    editSField(TextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureImageChunkBase::getHandleLevel           (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfLevel,
             this->getType().getFieldDesc(LevelFieldId),
             const_cast<TextureImageChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureImageChunkBase::editHandleLevel          (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfLevel,
             this->getType().getFieldDesc(LevelFieldId),
             this));


    editSField(LevelFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureImageChunkBase::getHandleLayer           (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfLayer,
             this->getType().getFieldDesc(LayerFieldId),
             const_cast<TextureImageChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureImageChunkBase::editHandleLayer          (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfLayer,
             this->getType().getFieldDesc(LayerFieldId),
             this));


    editSField(LayerFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureImageChunkBase::getHandleAccess          (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfAccess,
             this->getType().getFieldDesc(AccessFieldId),
             const_cast<TextureImageChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureImageChunkBase::editHandleAccess         (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfAccess,
             this->getType().getFieldDesc(AccessFieldId),
             this));


    editSField(AccessFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureImageChunkBase::getHandleFormat          (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfFormat,
             this->getType().getFieldDesc(FormatFieldId),
             const_cast<TextureImageChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureImageChunkBase::editHandleFormat         (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfFormat,
             this->getType().getFieldDesc(FormatFieldId),
             this));


    editSField(FormatFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TextureImageChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextureImageChunk *pThis = static_cast<TextureImageChunk *>(this);

    pThis->execSync(static_cast<TextureImageChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TextureImageChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TextureImageChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextureImageChunk *>(pRefAspect),
                  dynamic_cast<const TextureImageChunk *>(this));

    return returnValue;
}
#endif

void TextureImageChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextureImageChunk *>(this)->setTexture(NULL);


}


OSG_END_NAMESPACE
