/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShadeModelChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGShadeModelChunkBase.h"
#include "OSGShadeModelChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShadeModelChunk
    ShadeModelChunk controls the shading model used for rendering lines and filled
    polygons.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var GLenum          ShadeModelChunkBase::_sfShadeModel
    The shading model to use (glShadeModel).
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ShadeModelChunk *, nsOSG>::_type(
    "ShadeModelChunkPtr", 
    "StateChunkPtr", 
    ShadeModelChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ShadeModelChunk *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ShadeModelChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "shadeModel",
        "The shading model to use (glShadeModel).\n",
        ShadeModelFieldId, ShadeModelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadeModelChunk::editHandleShadeModel),
        static_cast<FieldGetMethodSig >(&ShadeModelChunk::getHandleShadeModel));

    oType.addInitialDesc(pDesc);
}


ShadeModelChunkBase::TypeObject ShadeModelChunkBase::_type(
    ShadeModelChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ShadeModelChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ShadeModelChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&ShadeModelChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ShadeModelChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"ShadeModelChunk\"\n"
    "   parent=\"StateChunk\"\n"
    "   library=\"State\"\n"
    "   pointerfieldtypes=\"none\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   docGroupBase=\"GrpStateOpenGL\"\n"
    "   >\n"
    "  ShadeModelChunk controls the shading model used for rendering lines and filled\n"
    "  polygons.\n"
    "  <Field\n"
    "     name=\"shadeModel\"\n"
    "     type=\"GLenum\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"GL_SMOOTH\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    The shading model to use (glShadeModel).\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "ShadeModelChunk controls the shading model used for rendering lines and filled\n"
    "polygons.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShadeModelChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShadeModelChunkBase::getType(void) const
{
    return _type;
}

UInt32 ShadeModelChunkBase::getContainerSize(void) const
{
    return sizeof(ShadeModelChunk);
}

/*------------------------- decorator get ------------------------------*/


SFGLenum *ShadeModelChunkBase::editSFShadeModel(void)
{
    editSField(ShadeModelFieldMask);

    return &_sfShadeModel;
}

const SFGLenum *ShadeModelChunkBase::getSFShadeModel(void) const
{
    return &_sfShadeModel;
}






/*------------------------------ access -----------------------------------*/

SizeT ShadeModelChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ShadeModelFieldMask & whichField))
    {
        returnValue += _sfShadeModel.getBinSize();
    }

    return returnValue;
}

void ShadeModelChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ShadeModelFieldMask & whichField))
    {
        _sfShadeModel.copyToBin(pMem);
    }
}

void ShadeModelChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ShadeModelFieldMask & whichField))
    {
        editSField(ShadeModelFieldMask);
        _sfShadeModel.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ShadeModelChunkTransitPtr ShadeModelChunkBase::createLocal(BitVector bFlags)
{
    ShadeModelChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ShadeModelChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ShadeModelChunkTransitPtr ShadeModelChunkBase::createDependent(BitVector bFlags)
{
    ShadeModelChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ShadeModelChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ShadeModelChunkTransitPtr ShadeModelChunkBase::create(void)
{
    ShadeModelChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ShadeModelChunk>(tmpPtr);
    }

    return fc;
}

ShadeModelChunk *ShadeModelChunkBase::createEmptyLocal(BitVector bFlags)
{
    ShadeModelChunk *returnValue;

    newPtr<ShadeModelChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ShadeModelChunk *ShadeModelChunkBase::createEmpty(void)
{
    ShadeModelChunk *returnValue;

    newPtr<ShadeModelChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ShadeModelChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ShadeModelChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShadeModelChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShadeModelChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ShadeModelChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShadeModelChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShadeModelChunkBase::shallowCopy(void) const
{
    ShadeModelChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ShadeModelChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ShadeModelChunkBase::ShadeModelChunkBase(void) :
    Inherited(),
    _sfShadeModel             (GLenum(GL_SMOOTH))
{
}

ShadeModelChunkBase::ShadeModelChunkBase(const ShadeModelChunkBase &source) :
    Inherited(source),
    _sfShadeModel             (source._sfShadeModel             )
{
}


/*-------------------------- destructors ----------------------------------*/

ShadeModelChunkBase::~ShadeModelChunkBase(void)
{
}


GetFieldHandlePtr ShadeModelChunkBase::getHandleShadeModel      (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfShadeModel,
             this->getType().getFieldDesc(ShadeModelFieldId),
             const_cast<ShadeModelChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShadeModelChunkBase::editHandleShadeModel     (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfShadeModel,
             this->getType().getFieldDesc(ShadeModelFieldId),
             this));


    editSField(ShadeModelFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ShadeModelChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShadeModelChunk *pThis = static_cast<ShadeModelChunk *>(this);

    pThis->execSync(static_cast<ShadeModelChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ShadeModelChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ShadeModelChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ShadeModelChunk *>(pRefAspect),
                  dynamic_cast<const ShadeModelChunk *>(this));

    return returnValue;
}
#endif

void ShadeModelChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
