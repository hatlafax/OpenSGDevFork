/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleSHLChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGShaderProgramVariables.h"  // Variables Class

#include "OSGSimpleSHLChunkBase.h"
#include "OSGSimpleSHLChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SimpleSHLChunk
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     SimpleSHLChunkBase::_sfVertexProgram
    vertex program source
*/

/*! \var std::string     SimpleSHLChunkBase::_sfTessControlProgram
    tessalation control program source
*/

/*! \var std::string     SimpleSHLChunkBase::_sfTessEvaluationProgram
    tessalation eval program source
*/

/*! \var std::string     SimpleSHLChunkBase::_sfGeometryProgram
    geometry program source
*/

/*! \var std::string     SimpleSHLChunkBase::_sfFragmentProgram
    fragment program source
*/

/*! \var bool            SimpleSHLChunkBase::_sfCgFrontEnd
    
*/

/*! \var ShaderProgramVariables * SimpleSHLChunkBase::_sfVariables
    fragment program object
*/

/*! \var Int32           SimpleSHLChunkBase::_mfVariableLocations
    fragment program object
*/

/*! \var Int32           SimpleSHLChunkBase::_mfProceduralVariableLocations
    fragment program object
*/

/*! \var UInt32          SimpleSHLChunkBase::_sfGLId
    
*/

/*! \var bool            SimpleSHLChunkBase::_sfPointSize
    Flag to set whether the shader can change the point size.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<SimpleSHLChunk *, nsOSG>::_type(
    "SimpleSHLChunkPtr", 
    "ShaderProgramChunkPtr", 
    SimpleSHLChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(SimpleSHLChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SimpleSHLChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SimpleSHLChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SimpleSHLChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFString::Description(
        SFString::getClassType(),
        "vertexProgram",
        "vertex program source\n",
        VertexProgramFieldId, VertexProgramFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandleVertexProgram),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandleVertexProgram));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "tessControlProgram",
        "tessalation control program source\n",
        TessControlProgramFieldId, TessControlProgramFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandleTessControlProgram),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandleTessControlProgram));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "tessEvaluationProgram",
        "tessalation eval program source\n",
        TessEvaluationProgramFieldId, TessEvaluationProgramFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandleTessEvaluationProgram),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandleTessEvaluationProgram));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "geometryProgram",
        "geometry program source\n",
        GeometryProgramFieldId, GeometryProgramFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandleGeometryProgram),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandleGeometryProgram));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "fragmentProgram",
        "fragment program source\n",
        FragmentProgramFieldId, FragmentProgramFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandleFragmentProgram),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandleFragmentProgram));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "cgFrontEnd",
        "",
        CgFrontEndFieldId, CgFrontEndFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandleCgFrontEnd),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandleCgFrontEnd));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildShaderProgramVariablesPtr::Description(
        SFUnrecChildShaderProgramVariablesPtr::getClassType(),
        "variables",
        "fragment program object\n",
        VariablesFieldId, VariablesFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandleVariables),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandleVariables));

    oType.addInitialDesc(pDesc);

    pDesc = new MFInt32::Description(
        MFInt32::getClassType(),
        "variableLocations",
        "fragment program object\n",
        VariableLocationsFieldId, VariableLocationsFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandleVariableLocations),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandleVariableLocations));

    oType.addInitialDesc(pDesc);

    pDesc = new MFInt32::Description(
        MFInt32::getClassType(),
        "proceduralVariableLocations",
        "fragment program object\n",
        ProceduralVariableLocationsFieldId, ProceduralVariableLocationsFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandleProceduralVariableLocations),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandleProceduralVariableLocations));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "GLId",
        "",
        GLIdFieldId, GLIdFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandleGLId),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandleGLId));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "pointSize",
        "Flag to set whether the shader can change the point size.\n",
        PointSizeFieldId, PointSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleSHLChunk::editHandlePointSize),
        static_cast<FieldGetMethodSig >(&SimpleSHLChunk::getHandlePointSize));

    oType.addInitialDesc(pDesc);
}


SimpleSHLChunkBase::TypeObject SimpleSHLChunkBase::_type(
    SimpleSHLChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&SimpleSHLChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&SimpleSHLChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&SimpleSHLChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&SimpleSHLChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"SimpleSHLChunk\"\n"
    "    parent=\"ShaderProgramChunk\"\n"
    "    library=\"System\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    docGroupBase=\"GrpSystemShader\"\n"
    "    >\n"
    "    <Field\n"
    "        name=\"vertexProgram\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "\tvertex program source\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"tessControlProgram\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "\ttessalation control program source\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"tessEvaluationProgram\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "\ttessalation eval program source\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"geometryProgram\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "\tgeometry program source\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"fragmentProgram\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "\tfragment program source\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"cgFrontEnd\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"variables\"\n"
    "        type=\"ShaderProgramVariables\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        linkParentField=\"Parents\"\n"
    "        >\n"
    "\tfragment program object\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"variableLocations\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "\tfragment program object\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"proceduralVariableLocations\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"protected\"\n"
    "        >\n"
    "\tfragment program object\n"
    "    </Field>\n"
    "    \n"
    "    <Field\n"
    "        name=\"GLId\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "        >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"pointSize\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "\tFlag to set whether the shader can change the point size.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SimpleSHLChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &SimpleSHLChunkBase::getType(void) const
{
    return _type;
}

UInt32 SimpleSHLChunkBase::getContainerSize(void) const
{
    return sizeof(SimpleSHLChunk);
}

/*------------------------- decorator get ------------------------------*/


SFString *SimpleSHLChunkBase::editSFVertexProgram(void)
{
    editSField(VertexProgramFieldMask);

    return &_sfVertexProgram;
}

const SFString *SimpleSHLChunkBase::getSFVertexProgram(void) const
{
    return &_sfVertexProgram;
}


SFString *SimpleSHLChunkBase::editSFTessControlProgram(void)
{
    editSField(TessControlProgramFieldMask);

    return &_sfTessControlProgram;
}

const SFString *SimpleSHLChunkBase::getSFTessControlProgram(void) const
{
    return &_sfTessControlProgram;
}


SFString *SimpleSHLChunkBase::editSFTessEvaluationProgram(void)
{
    editSField(TessEvaluationProgramFieldMask);

    return &_sfTessEvaluationProgram;
}

const SFString *SimpleSHLChunkBase::getSFTessEvaluationProgram(void) const
{
    return &_sfTessEvaluationProgram;
}


SFString *SimpleSHLChunkBase::editSFGeometryProgram(void)
{
    editSField(GeometryProgramFieldMask);

    return &_sfGeometryProgram;
}

const SFString *SimpleSHLChunkBase::getSFGeometryProgram(void) const
{
    return &_sfGeometryProgram;
}


SFString *SimpleSHLChunkBase::editSFFragmentProgram(void)
{
    editSField(FragmentProgramFieldMask);

    return &_sfFragmentProgram;
}

const SFString *SimpleSHLChunkBase::getSFFragmentProgram(void) const
{
    return &_sfFragmentProgram;
}


SFBool *SimpleSHLChunkBase::editSFCgFrontEnd(void)
{
    editSField(CgFrontEndFieldMask);

    return &_sfCgFrontEnd;
}

const SFBool *SimpleSHLChunkBase::getSFCgFrontEnd(void) const
{
    return &_sfCgFrontEnd;
}


//! Get the SimpleSHLChunk::_sfVariables field.
const SFUnrecChildShaderProgramVariablesPtr *SimpleSHLChunkBase::getSFVariables(void) const
{
    return &_sfVariables;
}

SFUnrecChildShaderProgramVariablesPtr *SimpleSHLChunkBase::editSFVariables      (void)
{
    editSField(VariablesFieldMask);

    return &_sfVariables;
}

//! Get the value of the SimpleSHLChunk::_sfVariables field.
ShaderProgramVariables * SimpleSHLChunkBase::getVariables(void) const
{
    return _sfVariables.getValue();
}

//! Set the value of the SimpleSHLChunk::_sfVariables field.
void SimpleSHLChunkBase::setVariables(ShaderProgramVariables * const value)
{
    editSField(VariablesFieldMask);

    _sfVariables.setValue(value);
}


MFInt32 *SimpleSHLChunkBase::editMFVariableLocations(void)
{
    editMField(VariableLocationsFieldMask, _mfVariableLocations);

    return &_mfVariableLocations;
}

const MFInt32 *SimpleSHLChunkBase::getMFVariableLocations(void) const
{
    return &_mfVariableLocations;
}


MFInt32 *SimpleSHLChunkBase::editMFProceduralVariableLocations(void)
{
    editMField(ProceduralVariableLocationsFieldMask, _mfProceduralVariableLocations);

    return &_mfProceduralVariableLocations;
}

const MFInt32 *SimpleSHLChunkBase::getMFProceduralVariableLocations(void) const
{
    return &_mfProceduralVariableLocations;
}


SFUInt32 *SimpleSHLChunkBase::editSFGLId(void)
{
    editSField(GLIdFieldMask);

    return &_sfGLId;
}

const SFUInt32 *SimpleSHLChunkBase::getSFGLId(void) const
{
    return &_sfGLId;
}


SFBool *SimpleSHLChunkBase::editSFPointSize(void)
{
    editSField(PointSizeFieldMask);

    return &_sfPointSize;
}

const SFBool *SimpleSHLChunkBase::getSFPointSize(void) const
{
    return &_sfPointSize;
}






/*------------------------------ access -----------------------------------*/

SizeT SimpleSHLChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (VertexProgramFieldMask & whichField))
    {
        returnValue += _sfVertexProgram.getBinSize();
    }
    if(FieldBits::NoField != (TessControlProgramFieldMask & whichField))
    {
        returnValue += _sfTessControlProgram.getBinSize();
    }
    if(FieldBits::NoField != (TessEvaluationProgramFieldMask & whichField))
    {
        returnValue += _sfTessEvaluationProgram.getBinSize();
    }
    if(FieldBits::NoField != (GeometryProgramFieldMask & whichField))
    {
        returnValue += _sfGeometryProgram.getBinSize();
    }
    if(FieldBits::NoField != (FragmentProgramFieldMask & whichField))
    {
        returnValue += _sfFragmentProgram.getBinSize();
    }
    if(FieldBits::NoField != (CgFrontEndFieldMask & whichField))
    {
        returnValue += _sfCgFrontEnd.getBinSize();
    }
    if(FieldBits::NoField != (VariablesFieldMask & whichField))
    {
        returnValue += _sfVariables.getBinSize();
    }
    if(FieldBits::NoField != (VariableLocationsFieldMask & whichField))
    {
        returnValue += _mfVariableLocations.getBinSize();
    }
    if(FieldBits::NoField != (ProceduralVariableLocationsFieldMask & whichField))
    {
        returnValue += _mfProceduralVariableLocations.getBinSize();
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }
    if(FieldBits::NoField != (PointSizeFieldMask & whichField))
    {
        returnValue += _sfPointSize.getBinSize();
    }

    return returnValue;
}

void SimpleSHLChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (VertexProgramFieldMask & whichField))
    {
        _sfVertexProgram.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TessControlProgramFieldMask & whichField))
    {
        _sfTessControlProgram.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TessEvaluationProgramFieldMask & whichField))
    {
        _sfTessEvaluationProgram.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GeometryProgramFieldMask & whichField))
    {
        _sfGeometryProgram.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FragmentProgramFieldMask & whichField))
    {
        _sfFragmentProgram.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CgFrontEndFieldMask & whichField))
    {
        _sfCgFrontEnd.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariablesFieldMask & whichField))
    {
        _sfVariables.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableLocationsFieldMask & whichField))
    {
        _mfVariableLocations.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ProceduralVariableLocationsFieldMask & whichField))
    {
        _mfProceduralVariableLocations.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PointSizeFieldMask & whichField))
    {
        _sfPointSize.copyToBin(pMem);
    }
}

void SimpleSHLChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (VertexProgramFieldMask & whichField))
    {
        editSField(VertexProgramFieldMask);
        _sfVertexProgram.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TessControlProgramFieldMask & whichField))
    {
        editSField(TessControlProgramFieldMask);
        _sfTessControlProgram.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TessEvaluationProgramFieldMask & whichField))
    {
        editSField(TessEvaluationProgramFieldMask);
        _sfTessEvaluationProgram.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GeometryProgramFieldMask & whichField))
    {
        editSField(GeometryProgramFieldMask);
        _sfGeometryProgram.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FragmentProgramFieldMask & whichField))
    {
        editSField(FragmentProgramFieldMask);
        _sfFragmentProgram.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CgFrontEndFieldMask & whichField))
    {
        editSField(CgFrontEndFieldMask);
        _sfCgFrontEnd.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariablesFieldMask & whichField))
    {
        editSField(VariablesFieldMask);
        _sfVariables.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableLocationsFieldMask & whichField))
    {
        editMField(VariableLocationsFieldMask, _mfVariableLocations);
        _mfVariableLocations.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ProceduralVariableLocationsFieldMask & whichField))
    {
        editMField(ProceduralVariableLocationsFieldMask, _mfProceduralVariableLocations);
        _mfProceduralVariableLocations.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        editSField(GLIdFieldMask);
        _sfGLId.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PointSizeFieldMask & whichField))
    {
        editSField(PointSizeFieldMask);
        _sfPointSize.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SimpleSHLChunkTransitPtr SimpleSHLChunkBase::createLocal(BitVector bFlags)
{
    SimpleSHLChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SimpleSHLChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SimpleSHLChunkTransitPtr SimpleSHLChunkBase::createDependent(BitVector bFlags)
{
    SimpleSHLChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SimpleSHLChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SimpleSHLChunkTransitPtr SimpleSHLChunkBase::create(void)
{
    SimpleSHLChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SimpleSHLChunk>(tmpPtr);
    }

    return fc;
}

SimpleSHLChunk *SimpleSHLChunkBase::createEmptyLocal(BitVector bFlags)
{
    SimpleSHLChunk *returnValue;

    newPtr<SimpleSHLChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SimpleSHLChunk *SimpleSHLChunkBase::createEmpty(void)
{
    SimpleSHLChunk *returnValue;

    newPtr<SimpleSHLChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SimpleSHLChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SimpleSHLChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SimpleSHLChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SimpleSHLChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SimpleSHLChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SimpleSHLChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SimpleSHLChunkBase::shallowCopy(void) const
{
    SimpleSHLChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SimpleSHLChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SimpleSHLChunkBase::SimpleSHLChunkBase(void) :
    Inherited(),
    _sfVertexProgram          (),
    _sfTessControlProgram     (),
    _sfTessEvaluationProgram  (),
    _sfGeometryProgram        (),
    _sfFragmentProgram        (),
    _sfCgFrontEnd             (bool(false)),
    _sfVariables              (this,
                          VariablesFieldId,
                          ShaderProgramVariables::ParentsFieldId),
    _mfVariableLocations      (),
    _mfProceduralVariableLocations(),
    _sfGLId                   (UInt32(0)),
    _sfPointSize              (bool(false))
{
}

SimpleSHLChunkBase::SimpleSHLChunkBase(const SimpleSHLChunkBase &source) :
    Inherited(source),
    _sfVertexProgram          (source._sfVertexProgram          ),
    _sfTessControlProgram     (source._sfTessControlProgram     ),
    _sfTessEvaluationProgram  (source._sfTessEvaluationProgram  ),
    _sfGeometryProgram        (source._sfGeometryProgram        ),
    _sfFragmentProgram        (source._sfFragmentProgram        ),
    _sfCgFrontEnd             (source._sfCgFrontEnd             ),
    _sfVariables              (this,
                          VariablesFieldId,
                          ShaderProgramVariables::ParentsFieldId),
    _mfVariableLocations      (source._mfVariableLocations      ),
    _mfProceduralVariableLocations(source._mfProceduralVariableLocations),
    _sfGLId                   (source._sfGLId                   ),
    _sfPointSize              (source._sfPointSize              )
{
}


/*-------------------------- destructors ----------------------------------*/

SimpleSHLChunkBase::~SimpleSHLChunkBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool SimpleSHLChunkBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == VariablesFieldId)
    {
        ShaderProgramVariables * pTypedChild =
            dynamic_cast<ShaderProgramVariables *>(pChild);

        if(pTypedChild != NULL)
        {
            if(_sfVariables.getValue() == pTypedChild)
            {
                editSField(VariablesFieldMask);

                _sfVariables.setValue(NULL);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void SimpleSHLChunkBase::onCreate(const SimpleSHLChunk *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SimpleSHLChunk *pThis = static_cast<SimpleSHLChunk *>(this);

        pThis->setVariables(source->getVariables());
    }
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandleVertexProgram   (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfVertexProgram,
             this->getType().getFieldDesc(VertexProgramFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandleVertexProgram  (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfVertexProgram,
             this->getType().getFieldDesc(VertexProgramFieldId),
             this));


    editSField(VertexProgramFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandleTessControlProgram (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfTessControlProgram,
             this->getType().getFieldDesc(TessControlProgramFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandleTessControlProgram(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfTessControlProgram,
             this->getType().getFieldDesc(TessControlProgramFieldId),
             this));


    editSField(TessControlProgramFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandleTessEvaluationProgram (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfTessEvaluationProgram,
             this->getType().getFieldDesc(TessEvaluationProgramFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandleTessEvaluationProgram(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfTessEvaluationProgram,
             this->getType().getFieldDesc(TessEvaluationProgramFieldId),
             this));


    editSField(TessEvaluationProgramFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandleGeometryProgram (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfGeometryProgram,
             this->getType().getFieldDesc(GeometryProgramFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandleGeometryProgram(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfGeometryProgram,
             this->getType().getFieldDesc(GeometryProgramFieldId),
             this));


    editSField(GeometryProgramFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandleFragmentProgram (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfFragmentProgram,
             this->getType().getFieldDesc(FragmentProgramFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandleFragmentProgram(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfFragmentProgram,
             this->getType().getFieldDesc(FragmentProgramFieldId),
             this));


    editSField(FragmentProgramFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandleCgFrontEnd      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfCgFrontEnd,
             this->getType().getFieldDesc(CgFrontEndFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandleCgFrontEnd     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfCgFrontEnd,
             this->getType().getFieldDesc(CgFrontEndFieldId),
             this));


    editSField(CgFrontEndFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandleVariables       (void) const
{
    SFUnrecChildShaderProgramVariablesPtr::GetHandlePtr returnValue(
        new  SFUnrecChildShaderProgramVariablesPtr::GetHandle(
             &_sfVariables,
             this->getType().getFieldDesc(VariablesFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandleVariables      (void)
{
    SFUnrecChildShaderProgramVariablesPtr::EditHandlePtr returnValue(
        new  SFUnrecChildShaderProgramVariablesPtr::EditHandle(
             &_sfVariables,
             this->getType().getFieldDesc(VariablesFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SimpleSHLChunk::setVariables,
                    static_cast<SimpleSHLChunk *>(this), ::boost::placeholders::_1));

    editSField(VariablesFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandleVariableLocations (void) const
{
    MFInt32::GetHandlePtr returnValue(
        new  MFInt32::GetHandle(
             &_mfVariableLocations,
             this->getType().getFieldDesc(VariableLocationsFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandleVariableLocations(void)
{
    MFInt32::EditHandlePtr returnValue(
        new  MFInt32::EditHandle(
             &_mfVariableLocations,
             this->getType().getFieldDesc(VariableLocationsFieldId),
             this));


    editMField(VariableLocationsFieldMask, _mfVariableLocations);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandleProceduralVariableLocations (void) const
{
    MFInt32::GetHandlePtr returnValue(
        new  MFInt32::GetHandle(
             &_mfProceduralVariableLocations,
             this->getType().getFieldDesc(ProceduralVariableLocationsFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandleProceduralVariableLocations(void)
{
    MFInt32::EditHandlePtr returnValue(
        new  MFInt32::EditHandle(
             &_mfProceduralVariableLocations,
             this->getType().getFieldDesc(ProceduralVariableLocationsFieldId),
             this));


    editMField(ProceduralVariableLocationsFieldMask, _mfProceduralVariableLocations);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandleGLId            (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfGLId,
             this->getType().getFieldDesc(GLIdFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandleGLId           (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfGLId,
             this->getType().getFieldDesc(GLIdFieldId),
             this));


    editSField(GLIdFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleSHLChunkBase::getHandlePointSize       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfPointSize,
             this->getType().getFieldDesc(PointSizeFieldId),
             const_cast<SimpleSHLChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleSHLChunkBase::editHandlePointSize      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfPointSize,
             this->getType().getFieldDesc(PointSizeFieldId),
             this));


    editSField(PointSizeFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SimpleSHLChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SimpleSHLChunk *pThis = static_cast<SimpleSHLChunk *>(this);

    pThis->execSync(static_cast<SimpleSHLChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SimpleSHLChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SimpleSHLChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SimpleSHLChunk *>(pRefAspect),
                  dynamic_cast<const SimpleSHLChunk *>(this));

    return returnValue;
}
#endif

void SimpleSHLChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SimpleSHLChunk *>(this)->setVariables(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableLocations.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfProceduralVariableLocations.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
