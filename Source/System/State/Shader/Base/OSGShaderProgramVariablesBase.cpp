/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderProgramVariables!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGShaderValueVariable.h"     // Variables Class
#include "OSGShaderProcVariable.h"      // ProceduralVariables Class

#include "OSGShaderProgramVariablesBase.h"
#include "OSGShaderProgramVariables.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShaderProgramVariables
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ShaderValueVariable * ShaderProgramVariablesBase::_mfVariables
    
*/

/*! \var ShaderProcVariable * ShaderProgramVariablesBase::_mfProceduralVariables
    
*/

/*! \var UInt8           ShaderProgramVariablesBase::_mfVariableChanged
    fragment program object
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ShaderProgramVariables *, nsOSG>::_type(
    "ShaderProgramVariablesPtr", 
    "AttachmentPtr", 
    ShaderProgramVariables::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ShaderProgramVariables *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ShaderProgramVariables *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ShaderProgramVariables *,
                           nsOSG)

DataType &FieldTraits< ShaderProgramVariables *, nsOSG + 1 >::getType(void)
{
    return FieldTraits<ShaderProgramVariables *, nsOSG>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      ShaderProgramVariables *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ShaderProgramVariablesBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecShaderValueVariablePtr::Description(
        MFUnrecShaderValueVariablePtr::getClassType(),
        "variables",
        "",
        VariablesFieldId, VariablesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FCustomAccess),
        static_cast<FieldEditMethodSig>(&ShaderProgramVariables::editHandleVariables),
        static_cast<FieldGetMethodSig >(&ShaderProgramVariables::getHandleVariables));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildShaderProcVariablePtr::Description(
        MFUnrecChildShaderProcVariablePtr::getClassType(),
        "proceduralVariables",
        "",
        ProceduralVariablesFieldId, ProceduralVariablesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FCustomAccess),
        static_cast<FieldEditMethodSig>(&ShaderProgramVariables::editHandleProceduralVariables),
        static_cast<FieldGetMethodSig >(&ShaderProgramVariables::getHandleProceduralVariables));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "variableChanged",
        "fragment program object\n",
        VariableChangedFieldId, VariableChangedFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderProgramVariables::editHandleVariableChanged),
        static_cast<FieldGetMethodSig >(&ShaderProgramVariables::getHandleVariableChanged));

    oType.addInitialDesc(pDesc);
}


ShaderProgramVariablesBase::TypeObject ShaderProgramVariablesBase::_type(
    ShaderProgramVariablesBase::getClassname(),
    Inherited::getClassname(),
    "ShaderProgramVariables",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ShaderProgramVariablesBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ShaderProgramVariables::initMethod),
    reinterpret_cast<ExitContainerF>(&ShaderProgramVariables::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ShaderProgramVariables::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"ShaderProgramVariables\"\n"
    "   parent=\"Attachment\"\n"
    "   library=\"System\"\n"
    "   structure=\"concrete\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   childFields=\"single\"\n"
    "   docGroupBase=\"GrpSystemShader\"\n"
    "   >\n"
    "\n"
    "  <Field\n"
    "     name=\"variables\"\n"
    "     type=\"ShaderValueVariable\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"protected\"\n"
    "     category=\"pointer\"\n"
    "     ptrFieldAccess=\"custom\"\n"
    "\n"
    "     pushToFieldAs=\"addVariable\"\n"
    "     removeFromMFieldIndexAs=\"subVariable\"\n"
    "     clearFieldAs=\"clearVariables\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "     name=\"proceduralVariables\"\n"
    "     type=\"ShaderProcVariable\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"protected\"\n"
    "     category=\"childpointer\"\n"
    "     childParentType=\"FieldContainer\"\n"
    "     linkParentField=\"Parents\"\n"
    "     ptrFieldAccess=\"custom\"\n"
    "\n"
    "     pushToFieldAs=\"addProceduralVariable\"\n"
    "     removeFromMFieldIndexAs=\"subProceduralVariable\"\n"
    "     clearFieldAs=\"clearProceduralVariables\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "\t name=\"variableChanged\"\n"
    "\t type=\"UInt8\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"internal\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tfragment program object\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShaderProgramVariablesBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShaderProgramVariablesBase::getType(void) const
{
    return _type;
}

UInt32 ShaderProgramVariablesBase::getContainerSize(void) const
{
    return sizeof(ShaderProgramVariables);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ShaderProgramVariables::_mfVariables field.
const MFUnrecShaderValueVariablePtr *ShaderProgramVariablesBase::getMFVariables(void) const
{
    return &_mfVariables;
}
ShaderValueVariable * ShaderProgramVariablesBase::getVariables(const UInt32 index) const
{
    return _mfVariables[index];
}

//! Get the ShaderProgramVariables::_mfProceduralVariables field.
const MFUnrecChildShaderProcVariablePtr *ShaderProgramVariablesBase::getMFProceduralVariables(void) const
{
    return &_mfProceduralVariables;
}
ShaderProcVariable * ShaderProgramVariablesBase::getProceduralVariables(const UInt32 index) const
{
    return _mfProceduralVariables[index];
}

MFUInt8 *ShaderProgramVariablesBase::editMFVariableChanged(void)
{
    editMField(VariableChangedFieldMask, _mfVariableChanged);

    return &_mfVariableChanged;
}

const MFUInt8 *ShaderProgramVariablesBase::getMFVariableChanged(void) const
{
    return &_mfVariableChanged;
}








/*------------------------------ access -----------------------------------*/

SizeT ShaderProgramVariablesBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (VariablesFieldMask & whichField))
    {
        returnValue += _mfVariables.getBinSize();
    }
    if(FieldBits::NoField != (ProceduralVariablesFieldMask & whichField))
    {
        returnValue += _mfProceduralVariables.getBinSize();
    }
    if(FieldBits::NoField != (VariableChangedFieldMask & whichField))
    {
        returnValue += _mfVariableChanged.getBinSize();
    }

    return returnValue;
}

void ShaderProgramVariablesBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (VariablesFieldMask & whichField))
    {
        _mfVariables.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ProceduralVariablesFieldMask & whichField))
    {
        _mfProceduralVariables.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableChangedFieldMask & whichField))
    {
        _mfVariableChanged.copyToBin(pMem);
    }
}

void ShaderProgramVariablesBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (VariablesFieldMask & whichField))
    {
        editMField(VariablesFieldMask, _mfVariables);
        _mfVariables.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ProceduralVariablesFieldMask & whichField))
    {
        editMField(ProceduralVariablesFieldMask, _mfProceduralVariables);
        _mfProceduralVariables.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableChangedFieldMask & whichField))
    {
        editMField(VariableChangedFieldMask, _mfVariableChanged);
        _mfVariableChanged.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ShaderProgramVariablesTransitPtr ShaderProgramVariablesBase::createLocal(BitVector bFlags)
{
    ShaderProgramVariablesTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ShaderProgramVariables>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ShaderProgramVariablesTransitPtr ShaderProgramVariablesBase::createDependent(BitVector bFlags)
{
    ShaderProgramVariablesTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ShaderProgramVariables>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ShaderProgramVariablesTransitPtr ShaderProgramVariablesBase::create(void)
{
    ShaderProgramVariablesTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ShaderProgramVariables>(tmpPtr);
    }

    return fc;
}

ShaderProgramVariables *ShaderProgramVariablesBase::createEmptyLocal(BitVector bFlags)
{
    ShaderProgramVariables *returnValue;

    newPtr<ShaderProgramVariables>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ShaderProgramVariables *ShaderProgramVariablesBase::createEmpty(void)
{
    ShaderProgramVariables *returnValue;

    newPtr<ShaderProgramVariables>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ShaderProgramVariablesBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ShaderProgramVariables *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderProgramVariables *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderProgramVariablesBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ShaderProgramVariables *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderProgramVariables *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderProgramVariablesBase::shallowCopy(void) const
{
    ShaderProgramVariables *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ShaderProgramVariables *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ShaderProgramVariablesBase::ShaderProgramVariablesBase(void) :
    Inherited(),
    _mfVariables              (),
    _mfProceduralVariables    (this,
                          ProceduralVariablesFieldId,
                          ShaderProcVariable::ParentsFieldId),
    _mfVariableChanged        ()
{
}

ShaderProgramVariablesBase::ShaderProgramVariablesBase(const ShaderProgramVariablesBase &source) :
    Inherited(source),
    _mfVariables              (),
    _mfProceduralVariables    (this,
                          ProceduralVariablesFieldId,
                          ShaderProcVariable::ParentsFieldId),
    _mfVariableChanged        (source._mfVariableChanged        )
{
}


/*-------------------------- destructors ----------------------------------*/

ShaderProgramVariablesBase::~ShaderProgramVariablesBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool ShaderProgramVariablesBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == ProceduralVariablesFieldId)
    {
        ShaderProcVariable * pTypedChild =
            dynamic_cast<ShaderProcVariable *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfProceduralVariables.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(ProceduralVariablesFieldMask, _mfProceduralVariables);

                _mfProceduralVariables.erase(iChildIdx);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void ShaderProgramVariablesBase::onCreate(const ShaderProgramVariables *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ShaderProgramVariables *pThis = static_cast<ShaderProgramVariables *>(this);

        MFUnrecShaderValueVariablePtr::const_iterator VariablesIt  =
            source->_mfVariables.begin();
        MFUnrecShaderValueVariablePtr::const_iterator VariablesEnd =
            source->_mfVariables.end  ();

        while(VariablesIt != VariablesEnd)
        {
            pThis->addVariable(*VariablesIt);

            ++VariablesIt;
        }

        MFUnrecChildShaderProcVariablePtr::const_iterator ProceduralVariablesIt  =
            source->_mfProceduralVariables.begin();
        MFUnrecChildShaderProcVariablePtr::const_iterator ProceduralVariablesEnd =
            source->_mfProceduralVariables.end  ();

        while(ProceduralVariablesIt != ProceduralVariablesEnd)
        {
            pThis->addProceduralVariable(*ProceduralVariablesIt);

            ++ProceduralVariablesIt;
        }
    }
}

GetFieldHandlePtr ShaderProgramVariablesBase::getHandleVariables       (void) const
{
    MFUnrecShaderValueVariablePtr::GetHandlePtr returnValue(
        new  MFUnrecShaderValueVariablePtr::GetHandle(
             &_mfVariables,
             this->getType().getFieldDesc(VariablesFieldId),
             const_cast<ShaderProgramVariablesBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderProgramVariablesBase::editHandleVariables      (void)
{
    MFUnrecShaderValueVariablePtr::EditHandlePtr returnValue(
        new  MFUnrecShaderValueVariablePtr::EditHandle(
             &_mfVariables,
             this->getType().getFieldDesc(VariablesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&ShaderProgramVariables::addVariable,
                    static_cast<ShaderProgramVariables *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&ShaderProgramVariables::subVariable,
                    static_cast<ShaderProgramVariables *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&ShaderProgramVariables::clearVariables,
                    static_cast<ShaderProgramVariables *>(this)));

    editMField(VariablesFieldMask, _mfVariables);

    return returnValue;
}

GetFieldHandlePtr ShaderProgramVariablesBase::getHandleProceduralVariables (void) const
{
    MFUnrecChildShaderProcVariablePtr::GetHandlePtr returnValue(
        new  MFUnrecChildShaderProcVariablePtr::GetHandle(
             &_mfProceduralVariables,
             this->getType().getFieldDesc(ProceduralVariablesFieldId),
             const_cast<ShaderProgramVariablesBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderProgramVariablesBase::editHandleProceduralVariables(void)
{
    MFUnrecChildShaderProcVariablePtr::EditHandlePtr returnValue(
        new  MFUnrecChildShaderProcVariablePtr::EditHandle(
             &_mfProceduralVariables,
             this->getType().getFieldDesc(ProceduralVariablesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&ShaderProgramVariables::addProceduralVariable,
                    static_cast<ShaderProgramVariables *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&ShaderProgramVariables::subProceduralVariable,
                    static_cast<ShaderProgramVariables *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&ShaderProgramVariables::clearProceduralVariables,
                    static_cast<ShaderProgramVariables *>(this)));

    editMField(ProceduralVariablesFieldMask, _mfProceduralVariables);

    return returnValue;
}

GetFieldHandlePtr ShaderProgramVariablesBase::getHandleVariableChanged (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfVariableChanged,
             this->getType().getFieldDesc(VariableChangedFieldId),
             const_cast<ShaderProgramVariablesBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderProgramVariablesBase::editHandleVariableChanged(void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfVariableChanged,
             this->getType().getFieldDesc(VariableChangedFieldId),
             this));


    editMField(VariableChangedFieldMask, _mfVariableChanged);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ShaderProgramVariablesBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShaderProgramVariables *pThis = static_cast<ShaderProgramVariables *>(this);

    pThis->execSync(static_cast<ShaderProgramVariables *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ShaderProgramVariablesBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ShaderProgramVariables *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ShaderProgramVariables *>(pRefAspect),
                  dynamic_cast<const ShaderProgramVariables *>(this));

    return returnValue;
}
#endif

void ShaderProgramVariablesBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ShaderProgramVariables *>(this)->clearVariables();

    static_cast<ShaderProgramVariables *>(this)->clearProceduralVariables();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableChanged.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
