/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MaterialChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"


#include "OSGGL.h"                        // ColorMaterial default header
#include "OSGGL.h"                        // BackColorMaterial default header


#include "OSGMaterialChunkBase.h"
#include "OSGMaterialChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MaterialChunk
    See \ref PageSystemMaterialChunk for details.

    This chunk wraps glMaterial() (OSG::MaterialChunk::_sfDiffuse,
    OSG::MaterialChunk::_sfSpecular, OSG::MaterialChunk::_sfEmission,
    OSG::MaterialChunk::_sfShininess, OSG::MaterialChunk::_sfAmbient),
    glEnable(GL_LIGHTING)(OSG::MaterialChunk::_sfLit) and glColorMaterial()
    (OSG::MaterialChunk::_sfColorMaterial).
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Color4f         MaterialChunkBase::_sfDiffuse
    
*/

/*! \var Color4f         MaterialChunkBase::_sfAmbient
    
*/

/*! \var Color4f         MaterialChunkBase::_sfSpecular
    
*/

/*! \var Color4f         MaterialChunkBase::_sfEmission
    
*/

/*! \var Real32          MaterialChunkBase::_sfShininess
    
*/

/*! \var bool            MaterialChunkBase::_sfLit
    Switch for using this material in lighting calculation. 
    If not set the diffuse color is used as is.
*/

/*! \var GLenum          MaterialChunkBase::_sfColorMaterial
    The mode for using Geometry colors in lighting. Defaults to GL_DIFFUSE.
*/

/*! \var bool            MaterialChunkBase::_sfBackMaterial
    Switch for using separate material properties for front- and back-facing
    polygons. If set to false the standard parameters will be used for front- and 
    backfaces.
*/

/*! \var Color4f         MaterialChunkBase::_sfBackDiffuse
    
*/

/*! \var Color4f         MaterialChunkBase::_sfBackAmbient
    
*/

/*! \var Color4f         MaterialChunkBase::_sfBackSpecular
    
*/

/*! \var Color4f         MaterialChunkBase::_sfBackEmission
    
*/

/*! \var Real32          MaterialChunkBase::_sfBackShininess
    
*/

/*! \var GLenum          MaterialChunkBase::_sfBackColorMaterial
    The mode for using Geometry colors in lighting. Defaults to GL_DIFFUSE.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<MaterialChunk *, nsOSG>::_type(
    "MaterialChunkPtr", 
    "StateChunkPtr", 
    MaterialChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(MaterialChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MaterialChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MaterialChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MaterialChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "diffuse",
        "",
        DiffuseFieldId, DiffuseFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleDiffuse),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleDiffuse));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "ambient",
        "",
        AmbientFieldId, AmbientFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleAmbient),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleAmbient));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "specular",
        "",
        SpecularFieldId, SpecularFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleSpecular),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleSpecular));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "emission",
        "",
        EmissionFieldId, EmissionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleEmission),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleEmission));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "shininess",
        "",
        ShininessFieldId, ShininessFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleShininess),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleShininess));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "lit",
        "Switch for using this material in lighting calculation. \n"
        "If not set the diffuse color is used as is.\n",
        LitFieldId, LitFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleLit),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleLit));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "colorMaterial",
        "The mode for using Geometry colors in lighting. Defaults to GL_DIFFUSE.\n",
        ColorMaterialFieldId, ColorMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleColorMaterial),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleColorMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "backMaterial",
        "Switch for using separate material properties for front- and back-facing\n"
        "polygons. If set to false the standard parameters will be used for front- and \n"
        "backfaces.\n",
        BackMaterialFieldId, BackMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleBackMaterial),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleBackMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "backDiffuse",
        "",
        BackDiffuseFieldId, BackDiffuseFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleBackDiffuse),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleBackDiffuse));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "backAmbient",
        "",
        BackAmbientFieldId, BackAmbientFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleBackAmbient),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleBackAmbient));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "backSpecular",
        "",
        BackSpecularFieldId, BackSpecularFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleBackSpecular),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleBackSpecular));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "backEmission",
        "",
        BackEmissionFieldId, BackEmissionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleBackEmission),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleBackEmission));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "backShininess",
        "",
        BackShininessFieldId, BackShininessFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleBackShininess),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleBackShininess));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "backColorMaterial",
        "The mode for using Geometry colors in lighting. Defaults to GL_DIFFUSE.\n",
        BackColorMaterialFieldId, BackColorMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MaterialChunk::editHandleBackColorMaterial),
        static_cast<FieldGetMethodSig >(&MaterialChunk::getHandleBackColorMaterial));

    oType.addInitialDesc(pDesc);
}


MaterialChunkBase::TypeObject MaterialChunkBase::_type(
    MaterialChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&MaterialChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&MaterialChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&MaterialChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&MaterialChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"MaterialChunk\"\n"
    "   parent=\"StateChunk\"\n"
    "   library=\"System\"\n"
    "   structure=\"concrete\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   docGroupBase=\"GrpSystemState\"\n"
    ">\n"
    "See \\ref PageSystemMaterialChunk for details.\n"
    "\n"
    "This chunk wraps glMaterial() (OSG::MaterialChunk::_sfDiffuse,\n"
    "OSG::MaterialChunk::_sfSpecular, OSG::MaterialChunk::_sfEmission,\n"
    "OSG::MaterialChunk::_sfShininess, OSG::MaterialChunk::_sfAmbient),\n"
    "glEnable(GL_LIGHTING)(OSG::MaterialChunk::_sfLit) and glColorMaterial()\n"
    "(OSG::MaterialChunk::_sfColorMaterial).\n"
    "\t<Field\n"
    "\t\tname=\"diffuse\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.f,1.f,1.f,1.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ambient\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\".2f,.2f,.2f,1.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"specular\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\".5f,.5f,.5f,1.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"emission\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.f,0.f,0.f,1.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shininess\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"10.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"lit\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t>\n"
    "        Switch for using this material in lighting calculation. \n"
    "        If not set the diffuse color is used as is.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"colorMaterial\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_DIFFUSE\"\n"
    "\t\tdefaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "\t>\n"
    "        The mode for using Geometry colors in lighting. Defaults to GL_DIFFUSE.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"backMaterial\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t>\n"
    "        Switch for using separate material properties for front- and back-facing\n"
    "        polygons. If set to false the standard parameters will be used for front- and \n"
    "        backfaces.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"backDiffuse\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.f,1.f,1.f,0.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"backAmbient\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\".2f,.2f,.2f,0.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"backSpecular\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\".5f,.5f,.5f,0.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"backEmission\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.f,0.f,0.f,0.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"backShininess\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"10.f\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"backColorMaterial\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_DIFFUSE\"\n"
    "\t\tdefaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "\t>\n"
    "        The mode for using Geometry colors in lighting. Defaults to GL_DIFFUSE.\n"
    "\t</Field>       \n"
    "</FieldContainer>\n",
    "See \\ref PageSystemMaterialChunk for details.\n"
    "\n"
    "This chunk wraps glMaterial() (OSG::MaterialChunk::_sfDiffuse,\n"
    "OSG::MaterialChunk::_sfSpecular, OSG::MaterialChunk::_sfEmission,\n"
    "OSG::MaterialChunk::_sfShininess, OSG::MaterialChunk::_sfAmbient),\n"
    "glEnable(GL_LIGHTING)(OSG::MaterialChunk::_sfLit) and glColorMaterial()\n"
    "(OSG::MaterialChunk::_sfColorMaterial).\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MaterialChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &MaterialChunkBase::getType(void) const
{
    return _type;
}

UInt32 MaterialChunkBase::getContainerSize(void) const
{
    return sizeof(MaterialChunk);
}

/*------------------------- decorator get ------------------------------*/


SFColor4f *MaterialChunkBase::editSFDiffuse(void)
{
    editSField(DiffuseFieldMask);

    return &_sfDiffuse;
}

const SFColor4f *MaterialChunkBase::getSFDiffuse(void) const
{
    return &_sfDiffuse;
}


SFColor4f *MaterialChunkBase::editSFAmbient(void)
{
    editSField(AmbientFieldMask);

    return &_sfAmbient;
}

const SFColor4f *MaterialChunkBase::getSFAmbient(void) const
{
    return &_sfAmbient;
}


SFColor4f *MaterialChunkBase::editSFSpecular(void)
{
    editSField(SpecularFieldMask);

    return &_sfSpecular;
}

const SFColor4f *MaterialChunkBase::getSFSpecular(void) const
{
    return &_sfSpecular;
}


SFColor4f *MaterialChunkBase::editSFEmission(void)
{
    editSField(EmissionFieldMask);

    return &_sfEmission;
}

const SFColor4f *MaterialChunkBase::getSFEmission(void) const
{
    return &_sfEmission;
}


SFReal32 *MaterialChunkBase::editSFShininess(void)
{
    editSField(ShininessFieldMask);

    return &_sfShininess;
}

const SFReal32 *MaterialChunkBase::getSFShininess(void) const
{
    return &_sfShininess;
}


SFBool *MaterialChunkBase::editSFLit(void)
{
    editSField(LitFieldMask);

    return &_sfLit;
}

const SFBool *MaterialChunkBase::getSFLit(void) const
{
    return &_sfLit;
}


SFGLenum *MaterialChunkBase::editSFColorMaterial(void)
{
    editSField(ColorMaterialFieldMask);

    return &_sfColorMaterial;
}

const SFGLenum *MaterialChunkBase::getSFColorMaterial(void) const
{
    return &_sfColorMaterial;
}


SFBool *MaterialChunkBase::editSFBackMaterial(void)
{
    editSField(BackMaterialFieldMask);

    return &_sfBackMaterial;
}

const SFBool *MaterialChunkBase::getSFBackMaterial(void) const
{
    return &_sfBackMaterial;
}


SFColor4f *MaterialChunkBase::editSFBackDiffuse(void)
{
    editSField(BackDiffuseFieldMask);

    return &_sfBackDiffuse;
}

const SFColor4f *MaterialChunkBase::getSFBackDiffuse(void) const
{
    return &_sfBackDiffuse;
}


SFColor4f *MaterialChunkBase::editSFBackAmbient(void)
{
    editSField(BackAmbientFieldMask);

    return &_sfBackAmbient;
}

const SFColor4f *MaterialChunkBase::getSFBackAmbient(void) const
{
    return &_sfBackAmbient;
}


SFColor4f *MaterialChunkBase::editSFBackSpecular(void)
{
    editSField(BackSpecularFieldMask);

    return &_sfBackSpecular;
}

const SFColor4f *MaterialChunkBase::getSFBackSpecular(void) const
{
    return &_sfBackSpecular;
}


SFColor4f *MaterialChunkBase::editSFBackEmission(void)
{
    editSField(BackEmissionFieldMask);

    return &_sfBackEmission;
}

const SFColor4f *MaterialChunkBase::getSFBackEmission(void) const
{
    return &_sfBackEmission;
}


SFReal32 *MaterialChunkBase::editSFBackShininess(void)
{
    editSField(BackShininessFieldMask);

    return &_sfBackShininess;
}

const SFReal32 *MaterialChunkBase::getSFBackShininess(void) const
{
    return &_sfBackShininess;
}


SFGLenum *MaterialChunkBase::editSFBackColorMaterial(void)
{
    editSField(BackColorMaterialFieldMask);

    return &_sfBackColorMaterial;
}

const SFGLenum *MaterialChunkBase::getSFBackColorMaterial(void) const
{
    return &_sfBackColorMaterial;
}






/*------------------------------ access -----------------------------------*/

SizeT MaterialChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        returnValue += _sfDiffuse.getBinSize();
    }
    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        returnValue += _sfAmbient.getBinSize();
    }
    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        returnValue += _sfSpecular.getBinSize();
    }
    if(FieldBits::NoField != (EmissionFieldMask & whichField))
    {
        returnValue += _sfEmission.getBinSize();
    }
    if(FieldBits::NoField != (ShininessFieldMask & whichField))
    {
        returnValue += _sfShininess.getBinSize();
    }
    if(FieldBits::NoField != (LitFieldMask & whichField))
    {
        returnValue += _sfLit.getBinSize();
    }
    if(FieldBits::NoField != (ColorMaterialFieldMask & whichField))
    {
        returnValue += _sfColorMaterial.getBinSize();
    }
    if(FieldBits::NoField != (BackMaterialFieldMask & whichField))
    {
        returnValue += _sfBackMaterial.getBinSize();
    }
    if(FieldBits::NoField != (BackDiffuseFieldMask & whichField))
    {
        returnValue += _sfBackDiffuse.getBinSize();
    }
    if(FieldBits::NoField != (BackAmbientFieldMask & whichField))
    {
        returnValue += _sfBackAmbient.getBinSize();
    }
    if(FieldBits::NoField != (BackSpecularFieldMask & whichField))
    {
        returnValue += _sfBackSpecular.getBinSize();
    }
    if(FieldBits::NoField != (BackEmissionFieldMask & whichField))
    {
        returnValue += _sfBackEmission.getBinSize();
    }
    if(FieldBits::NoField != (BackShininessFieldMask & whichField))
    {
        returnValue += _sfBackShininess.getBinSize();
    }
    if(FieldBits::NoField != (BackColorMaterialFieldMask & whichField))
    {
        returnValue += _sfBackColorMaterial.getBinSize();
    }

    return returnValue;
}

void MaterialChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        _sfAmbient.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        _sfSpecular.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EmissionFieldMask & whichField))
    {
        _sfEmission.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShininessFieldMask & whichField))
    {
        _sfShininess.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LitFieldMask & whichField))
    {
        _sfLit.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorMaterialFieldMask & whichField))
    {
        _sfColorMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackMaterialFieldMask & whichField))
    {
        _sfBackMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackDiffuseFieldMask & whichField))
    {
        _sfBackDiffuse.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackAmbientFieldMask & whichField))
    {
        _sfBackAmbient.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackSpecularFieldMask & whichField))
    {
        _sfBackSpecular.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackEmissionFieldMask & whichField))
    {
        _sfBackEmission.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackShininessFieldMask & whichField))
    {
        _sfBackShininess.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackColorMaterialFieldMask & whichField))
    {
        _sfBackColorMaterial.copyToBin(pMem);
    }
}

void MaterialChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        editSField(DiffuseFieldMask);
        _sfDiffuse.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        editSField(AmbientFieldMask);
        _sfAmbient.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        editSField(SpecularFieldMask);
        _sfSpecular.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EmissionFieldMask & whichField))
    {
        editSField(EmissionFieldMask);
        _sfEmission.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShininessFieldMask & whichField))
    {
        editSField(ShininessFieldMask);
        _sfShininess.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LitFieldMask & whichField))
    {
        editSField(LitFieldMask);
        _sfLit.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorMaterialFieldMask & whichField))
    {
        editSField(ColorMaterialFieldMask);
        _sfColorMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackMaterialFieldMask & whichField))
    {
        editSField(BackMaterialFieldMask);
        _sfBackMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackDiffuseFieldMask & whichField))
    {
        editSField(BackDiffuseFieldMask);
        _sfBackDiffuse.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackAmbientFieldMask & whichField))
    {
        editSField(BackAmbientFieldMask);
        _sfBackAmbient.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackSpecularFieldMask & whichField))
    {
        editSField(BackSpecularFieldMask);
        _sfBackSpecular.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackEmissionFieldMask & whichField))
    {
        editSField(BackEmissionFieldMask);
        _sfBackEmission.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackShininessFieldMask & whichField))
    {
        editSField(BackShininessFieldMask);
        _sfBackShininess.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackColorMaterialFieldMask & whichField))
    {
        editSField(BackColorMaterialFieldMask);
        _sfBackColorMaterial.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MaterialChunkTransitPtr MaterialChunkBase::createLocal(BitVector bFlags)
{
    MaterialChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MaterialChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MaterialChunkTransitPtr MaterialChunkBase::createDependent(BitVector bFlags)
{
    MaterialChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MaterialChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MaterialChunkTransitPtr MaterialChunkBase::create(void)
{
    MaterialChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MaterialChunk>(tmpPtr);
    }

    return fc;
}

MaterialChunk *MaterialChunkBase::createEmptyLocal(BitVector bFlags)
{
    MaterialChunk *returnValue;

    newPtr<MaterialChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MaterialChunk *MaterialChunkBase::createEmpty(void)
{
    MaterialChunk *returnValue;

    newPtr<MaterialChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MaterialChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MaterialChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MaterialChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MaterialChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MaterialChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MaterialChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MaterialChunkBase::shallowCopy(void) const
{
    MaterialChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MaterialChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

MaterialChunkBase::MaterialChunkBase(void) :
    Inherited(),
    _sfDiffuse                (Color4f(1.f,1.f,1.f,1.f)),
    _sfAmbient                (Color4f(.2f,.2f,.2f,1.f)),
    _sfSpecular               (Color4f(.5f,.5f,.5f,1.f)),
    _sfEmission               (Color4f(0.f,0.f,0.f,1.f)),
    _sfShininess              (Real32(10.f)),
    _sfLit                    (bool(true)),
    _sfColorMaterial          (GLenum(GL_DIFFUSE)),
    _sfBackMaterial           (bool(false)),
    _sfBackDiffuse            (Color4f(1.f,1.f,1.f,0.f)),
    _sfBackAmbient            (Color4f(.2f,.2f,.2f,0.f)),
    _sfBackSpecular           (Color4f(.5f,.5f,.5f,0.f)),
    _sfBackEmission           (Color4f(0.f,0.f,0.f,0.f)),
    _sfBackShininess          (Real32(10.f)),
    _sfBackColorMaterial      (GLenum(GL_DIFFUSE))
{
}

MaterialChunkBase::MaterialChunkBase(const MaterialChunkBase &source) :
    Inherited(source),
    _sfDiffuse                (source._sfDiffuse                ),
    _sfAmbient                (source._sfAmbient                ),
    _sfSpecular               (source._sfSpecular               ),
    _sfEmission               (source._sfEmission               ),
    _sfShininess              (source._sfShininess              ),
    _sfLit                    (source._sfLit                    ),
    _sfColorMaterial          (source._sfColorMaterial          ),
    _sfBackMaterial           (source._sfBackMaterial           ),
    _sfBackDiffuse            (source._sfBackDiffuse            ),
    _sfBackAmbient            (source._sfBackAmbient            ),
    _sfBackSpecular           (source._sfBackSpecular           ),
    _sfBackEmission           (source._sfBackEmission           ),
    _sfBackShininess          (source._sfBackShininess          ),
    _sfBackColorMaterial      (source._sfBackColorMaterial      )
{
}


/*-------------------------- destructors ----------------------------------*/

MaterialChunkBase::~MaterialChunkBase(void)
{
}


GetFieldHandlePtr MaterialChunkBase::getHandleDiffuse         (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfDiffuse,
             this->getType().getFieldDesc(DiffuseFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleDiffuse        (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfDiffuse,
             this->getType().getFieldDesc(DiffuseFieldId),
             this));


    editSField(DiffuseFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleAmbient         (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfAmbient,
             this->getType().getFieldDesc(AmbientFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleAmbient        (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfAmbient,
             this->getType().getFieldDesc(AmbientFieldId),
             this));


    editSField(AmbientFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleSpecular        (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfSpecular,
             this->getType().getFieldDesc(SpecularFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleSpecular       (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfSpecular,
             this->getType().getFieldDesc(SpecularFieldId),
             this));


    editSField(SpecularFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleEmission        (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfEmission,
             this->getType().getFieldDesc(EmissionFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleEmission       (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfEmission,
             this->getType().getFieldDesc(EmissionFieldId),
             this));


    editSField(EmissionFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleShininess       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfShininess,
             this->getType().getFieldDesc(ShininessFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleShininess      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfShininess,
             this->getType().getFieldDesc(ShininessFieldId),
             this));


    editSField(ShininessFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleLit             (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfLit,
             this->getType().getFieldDesc(LitFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleLit            (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfLit,
             this->getType().getFieldDesc(LitFieldId),
             this));


    editSField(LitFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleColorMaterial   (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfColorMaterial,
             this->getType().getFieldDesc(ColorMaterialFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleColorMaterial  (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfColorMaterial,
             this->getType().getFieldDesc(ColorMaterialFieldId),
             this));


    editSField(ColorMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleBackMaterial    (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfBackMaterial,
             this->getType().getFieldDesc(BackMaterialFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleBackMaterial   (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfBackMaterial,
             this->getType().getFieldDesc(BackMaterialFieldId),
             this));


    editSField(BackMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleBackDiffuse     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBackDiffuse,
             this->getType().getFieldDesc(BackDiffuseFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleBackDiffuse    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBackDiffuse,
             this->getType().getFieldDesc(BackDiffuseFieldId),
             this));


    editSField(BackDiffuseFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleBackAmbient     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBackAmbient,
             this->getType().getFieldDesc(BackAmbientFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleBackAmbient    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBackAmbient,
             this->getType().getFieldDesc(BackAmbientFieldId),
             this));


    editSField(BackAmbientFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleBackSpecular    (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBackSpecular,
             this->getType().getFieldDesc(BackSpecularFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleBackSpecular   (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBackSpecular,
             this->getType().getFieldDesc(BackSpecularFieldId),
             this));


    editSField(BackSpecularFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleBackEmission    (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBackEmission,
             this->getType().getFieldDesc(BackEmissionFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleBackEmission   (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBackEmission,
             this->getType().getFieldDesc(BackEmissionFieldId),
             this));


    editSField(BackEmissionFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleBackShininess   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBackShininess,
             this->getType().getFieldDesc(BackShininessFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleBackShininess  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBackShininess,
             this->getType().getFieldDesc(BackShininessFieldId),
             this));


    editSField(BackShininessFieldMask);

    return returnValue;
}

GetFieldHandlePtr MaterialChunkBase::getHandleBackColorMaterial (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfBackColorMaterial,
             this->getType().getFieldDesc(BackColorMaterialFieldId),
             const_cast<MaterialChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MaterialChunkBase::editHandleBackColorMaterial(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfBackColorMaterial,
             this->getType().getFieldDesc(BackColorMaterialFieldId),
             this));


    editSField(BackColorMaterialFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void MaterialChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MaterialChunk *pThis = static_cast<MaterialChunk *>(this);

    pThis->execSync(static_cast<MaterialChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MaterialChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MaterialChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MaterialChunk *>(pRefAspect),
                  dynamic_cast<const MaterialChunk *>(this));

    return returnValue;
}
#endif

void MaterialChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
