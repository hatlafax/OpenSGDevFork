/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureObjChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"


#include "OSGGL.h"                        // InternalFormat default header
#include "OSGGL.h"                        // ExternalFormat default header
#include "OSGGL.h"                        // MinFilter default header
#include "OSGGL.h"                        // MagFilter default header
#include "OSGGL.h"                        // WrapS default header
#include "OSGGL.h"                        // WrapT default header
#include "OSGGL.h"                        // WrapR default header
#include "OSGGL.h"                        // CompareMode default header
#include "OSGGL.h"                        // CompareFunc default header
#include "OSGGL.h"                        // DepthMode default header

#include "OSGImage.h"                   // Image Class

#include "OSGTextureObjChunkBase.h"
#include "OSGTextureObjChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextureObjChunk
    See \ref PageSystemTextureObjChunk for a description.

    This chunk wraps glTexImage[123]D (OSG::TextureObjChunk::_sfImage,
    OSG::TextureObjChunk::_sfInternalFormat, OSG::TextureObjChunk::_sfExternalFormat),
    glTexParameter (OSG::TextureObjChunk::_sfMinFilter,
    OSG::TextureObjChunk::_sfMagFilter, OSG::TextureObjChunk::_sfWrapS,
    OSG::TextureObjChunk::_sfWrapT, OSG::TextureObjChunk::_sfWrapR), glTexEnv
    (OSG::TextureObjChunk::_sfEnvMode, OSG::TextureObjChunk::_sfEnvColor,
    OSG::TextureObjChunk::_sfPriority).

    The ARB combine extension is also supported,
    where available (OSG::TextureObjChunk::_sfEnvCombineRGB,
    OSG::TextureObjChunk::_sfEnvScaleRGB, OSG::TextureObjChunk::_sfEnvSource0RGB,
    OSG::TextureObjChunk::_sfEnvSource1RGB, OSG::TextureObjChunk::_sfEnvSource2RGB,
    OSG::TextureObjChunk::_sfEnvOperand0RGB, OSG::TextureObjChunk::_sfEnvOperand1RGB,
    OSG::TextureObjChunk::_sfEnvOperand2RGB,
    OSG::TextureObjChunk::_sfEnvCombineAlpha,   OSG::TextureObjChunk::_sfEnvScaleAlpha,
    OSG::TextureObjChunk::_sfEnvSource0Alpha, OSG::TextureObjChunk::_sfEnvSource1Alpha,
    OSG::TextureObjChunk::_sfEnvSource2Alpha, OSG::TextureObjChunk::_sfEnvOperand0Alpha,
    OSG::TextureObjChunk::_sfEnvOperand1Alpha,
    OSG::TextureObjChunk::_sfEnvOperand2Alpha).

    It is possible to enable the point
    sprite coordinate replacement  (OSG::TextureObjChunk::_sfPointSprite), see \ref
    PageSystemPointChunk for details. The two parameters
    OSG::TextureObjChunk::_sfScale and OSG::TextureObjChunk::_sfFrame specify details
    about the texture.

    On hardware that supports it (i.e. NVidia boards) the texture shader
    extension(s) are also available.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Image *         TextureObjChunkBase::_sfImage
    The texture image.
*/

/*! \var GLenum          TextureObjChunkBase::_sfInternalFormat
    The internal texture format.
*/

/*! \var GLenum          TextureObjChunkBase::_sfExternalFormat
    The external texture format - overwrites 
    external format of image when set to a value not equal to 
    GL_NONE (which is the default).
*/

/*! \var bool            TextureObjChunkBase::_sfScale
    Specifies whether the image should be scaled to the next power of two,
    thus filling the whole texture coordinate range, or if it should be put
    in the lower left corner, leaving the rest of the texture undefined.
    This is mainly used for rapidly changing non power of two textures, to
    get around the scaling overhead.
*/

/*! \var UInt32          TextureObjChunkBase::_sfFrame
    Select the frame of the image to be used. See OSG::Image about details
    concerning multi-frame images.
    \hint For fast update use GL_LINEAR or GL_NEAREST filters, as mipmap
    creation is slow right now \endhint.
*/

/*! \var GLenum          TextureObjChunkBase::_sfMinFilter
    The minimisation filter, default GL_LINEAR_MIPMAP_LINEAR.
*/

/*! \var GLenum          TextureObjChunkBase::_sfMagFilter
    The magnification filter, default GL_LINEAR.
*/

/*! \var GLenum          TextureObjChunkBase::_sfWrapS
    Texture coordinate S wrapping, default GL_REPEAT.
*/

/*! \var GLenum          TextureObjChunkBase::_sfWrapT
    Texture coordinate T wrapping, default GL_REPEAT.
*/

/*! \var GLenum          TextureObjChunkBase::_sfWrapR
    Texture coordinate R wrapping, default GL_REPEAT.
*/

/*! \var GLenum          TextureObjChunkBase::_sfGLId
    The OpenGL texture id for this texture.
*/

/*! \var Real32          TextureObjChunkBase::_sfPriority
    Priority of this texture, between 0 and 1, the default is 0.  (GL_TEXTURE_PRIORITY)
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyLeft
    Left coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMinX
    Minimum X coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMaxX
    Maximum X coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMinY
    Minimum Y coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMaxY
    Maximum Y coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMinZ
    Minimum Z coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMaxZ
    Maximum Z coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Real32          TextureObjChunkBase::_sfAnisotropy
    Anisotropic filtering the default 1.0f means isotropic filtering.
*/

/*! \var Color4f         TextureObjChunkBase::_sfBorderColor
    Texture border color
*/

/*! \var GLenum          TextureObjChunkBase::_sfCompareMode
    
*/

/*! \var GLenum          TextureObjChunkBase::_sfCompareFunc
    
*/

/*! \var GLenum          TextureObjChunkBase::_sfDepthMode
    
*/

/*! \var UInt32          TextureObjChunkBase::_sfBorderWidth
    Texture border width in pixels.
*/

/*! \var Real32          TextureObjChunkBase::_sfSkipMipMapLevels
    Percentage of mipmap levels to be skipped. Especially useful in combination with image formats that already hold all levels and GPUs with only low mem.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<TextureObjChunk *, nsOSG>::_type(
    "TextureObjChunkPtr", 
    "TextureBaseChunkPtr", 
    TextureObjChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(TextureObjChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TextureObjChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TextureObjChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextureObjChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecChildImagePtr::Description(
        SFUnrecChildImagePtr::getClassType(),
        "image",
        "The texture image.\n",
        ImageFieldId, ImageFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleImage),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleImage));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "internalFormat",
        "The internal texture format.\n",
        InternalFormatFieldId, InternalFormatFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleInternalFormat),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleInternalFormat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "externalFormat",
        "The external texture format - overwrites \n"
        "external format of image when set to a value not equal to \n"
        "GL_NONE (which is the default).\n",
        ExternalFormatFieldId, ExternalFormatFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleExternalFormat),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleExternalFormat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "scale",
        "Specifies whether the image should be scaled to the next power of two,\n"
        "thus filling the whole texture coordinate range, or if it should be put\n"
        "in the lower left corner, leaving the rest of the texture undefined.\n"
        "This is mainly used for rapidly changing non power of two textures, to\n"
        "get around the scaling overhead.\n",
        ScaleFieldId, ScaleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleScale),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "frame",
        "Select the frame of the image to be used. See OSG::Image about details\n"
        "concerning multi-frame images.\n"
        "\\hint For fast update use GL_LINEAR or GL_NEAREST filters, as mipmap\n"
        "creation is slow right now \\endhint.\n",
        FrameFieldId, FrameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleFrame),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleFrame));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "minFilter",
        "The minimisation filter, default GL_LINEAR_MIPMAP_LINEAR.\n",
        MinFilterFieldId, MinFilterFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleMinFilter),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleMinFilter));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "magFilter",
        "The magnification filter, default GL_LINEAR.\n",
        MagFilterFieldId, MagFilterFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleMagFilter),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleMagFilter));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "wrapS",
        "Texture coordinate S wrapping, default GL_REPEAT.\n",
        WrapSFieldId, WrapSFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleWrapS),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleWrapS));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "wrapT",
        "Texture coordinate T wrapping, default GL_REPEAT.\n",
        WrapTFieldId, WrapTFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleWrapT),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleWrapT));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "wrapR",
        "Texture coordinate R wrapping, default GL_REPEAT.\n",
        WrapRFieldId, WrapRFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleWrapR),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleWrapR));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "GLId",
        "The OpenGL texture id for this texture.\n",
        GLIdFieldId, GLIdFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleGLId),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleGLId));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "priority",
        "Priority of this texture, between 0 and 1, the default is 0.  (GL_TEXTURE_PRIORITY)\n",
        PriorityFieldId, PriorityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandlePriority),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandlePriority));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyLeft",
        "Left coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyLeftFieldId, DirtyLeftFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleDirtyLeft),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleDirtyLeft));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMinX",
        "Minimum X coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMinXFieldId, DirtyMinXFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleDirtyMinX),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleDirtyMinX));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMaxX",
        "Maximum X coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMaxXFieldId, DirtyMaxXFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleDirtyMaxX),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleDirtyMaxX));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMinY",
        "Minimum Y coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMinYFieldId, DirtyMinYFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleDirtyMinY),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleDirtyMinY));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMaxY",
        "Maximum Y coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMaxYFieldId, DirtyMaxYFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleDirtyMaxY),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleDirtyMaxY));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMinZ",
        "Minimum Z coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMinZFieldId, DirtyMinZFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleDirtyMinZ),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleDirtyMinZ));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMaxZ",
        "Maximum Z coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMaxZFieldId, DirtyMaxZFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleDirtyMaxZ),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleDirtyMaxZ));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "anisotropy",
        "Anisotropic filtering the default 1.0f means isotropic filtering.\n",
        AnisotropyFieldId, AnisotropyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleAnisotropy),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleAnisotropy));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "borderColor",
        "Texture border color\n",
        BorderColorFieldId, BorderColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleBorderColor),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleBorderColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "compareMode",
        "",
        CompareModeFieldId, CompareModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleCompareMode),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleCompareMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "compareFunc",
        "",
        CompareFuncFieldId, CompareFuncFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleCompareFunc),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleCompareFunc));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "depthMode",
        "",
        DepthModeFieldId, DepthModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleDepthMode),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleDepthMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "borderWidth",
        "Texture border width in pixels.\n",
        BorderWidthFieldId, BorderWidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleBorderWidth),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleBorderWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "skipMipMapLevels",
        "Percentage of mipmap levels to be skipped. Especially useful in combination with image formats that already hold all levels and GPUs with only low mem.\n",
        SkipMipMapLevelsFieldId, SkipMipMapLevelsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureObjChunk::editHandleSkipMipMapLevels),
        static_cast<FieldGetMethodSig >(&TextureObjChunk::getHandleSkipMipMapLevels));

    oType.addInitialDesc(pDesc);
}


TextureObjChunkBase::TypeObject TextureObjChunkBase::_type(
    TextureObjChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&TextureObjChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&TextureObjChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&TextureObjChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&TextureObjChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"TextureObjChunk\"\n"
    "    parent=\"TextureBaseChunk\"\n"
    "    library=\"System\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    docGroupBase=\"GrpSystemState\"\n"
    "    >\n"
    "    See \\ref PageSystemTextureObjChunk for a description.\n"
    "\n"
    "    This chunk wraps glTexImage[123]D (OSG::TextureObjChunk::_sfImage,\n"
    "    OSG::TextureObjChunk::_sfInternalFormat, OSG::TextureObjChunk::_sfExternalFormat),\n"
    "    glTexParameter (OSG::TextureObjChunk::_sfMinFilter,\n"
    "    OSG::TextureObjChunk::_sfMagFilter, OSG::TextureObjChunk::_sfWrapS,\n"
    "    OSG::TextureObjChunk::_sfWrapT, OSG::TextureObjChunk::_sfWrapR), glTexEnv\n"
    "    (OSG::TextureObjChunk::_sfEnvMode, OSG::TextureObjChunk::_sfEnvColor,\n"
    "    OSG::TextureObjChunk::_sfPriority).\n"
    "\n"
    "    The ARB combine extension is also supported,\n"
    "    where available (OSG::TextureObjChunk::_sfEnvCombineRGB,\n"
    "    OSG::TextureObjChunk::_sfEnvScaleRGB, OSG::TextureObjChunk::_sfEnvSource0RGB,\n"
    "    OSG::TextureObjChunk::_sfEnvSource1RGB, OSG::TextureObjChunk::_sfEnvSource2RGB,\n"
    "    OSG::TextureObjChunk::_sfEnvOperand0RGB, OSG::TextureObjChunk::_sfEnvOperand1RGB,\n"
    "    OSG::TextureObjChunk::_sfEnvOperand2RGB,\n"
    "    OSG::TextureObjChunk::_sfEnvCombineAlpha,   OSG::TextureObjChunk::_sfEnvScaleAlpha,\n"
    "    OSG::TextureObjChunk::_sfEnvSource0Alpha, OSG::TextureObjChunk::_sfEnvSource1Alpha,\n"
    "    OSG::TextureObjChunk::_sfEnvSource2Alpha, OSG::TextureObjChunk::_sfEnvOperand0Alpha,\n"
    "    OSG::TextureObjChunk::_sfEnvOperand1Alpha,\n"
    "    OSG::TextureObjChunk::_sfEnvOperand2Alpha).\n"
    "\n"
    "    It is possible to enable the point\n"
    "    sprite coordinate replacement  (OSG::TextureObjChunk::_sfPointSprite), see \\ref\n"
    "    PageSystemPointChunk for details. The two parameters\n"
    "    OSG::TextureObjChunk::_sfScale and OSG::TextureObjChunk::_sfFrame specify details\n"
    "    about the texture.\n"
    "\n"
    "    On hardware that supports it (i.e. NVidia boards) the texture shader\n"
    "    extension(s) are also available.\n"
    "    <Field\n"
    "        name=\"image\"\n"
    "        type=\"Image\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        linkParentField=\"Parents\"\n"
    "\t>\n"
    "\tThe texture image.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"internalFormat\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_NONE\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_NONE,GL_ALPHA, GL_DEPTH_COMPONENT, GL_LUMINANCE, GL_LUMINANCE_ALPH, GL_INTENSITY, GL_RGB, GL_RGBA, COMPRESSED_ALPHA, COMPRESSED_LUMINANCE, COMPRESSED_LUMINANCE_ALPHA, COMPRESSED_RGB, COMPRESSED_RGBA\"\n"
    "\t>\n"
    "\tThe internal texture format.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"externalFormat\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_NONE\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_NONE,GL_DEPTH_COMPONENT, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_RGBA, GL_BGR, GL_BGRA, GL_LUMINANCE, GL_LUMINANCE_ALPHA\"\n"
    "\t>\n"
    "        The external texture format - overwrites \n"
    "        external format of image when set to a value not equal to \n"
    "        GL_NONE (which is the default).\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"scale\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"true\"\n"
    "        access=\"public\"\n"
    "\t>\n"
    "        Specifies whether the image should be scaled to the next power of two,\n"
    "        thus filling the whole texture coordinate range, or if it should be put\n"
    "        in the lower left corner, leaving the rest of the texture undefined.\n"
    "        This is mainly used for rapidly changing non power of two textures, to\n"
    "        get around the scaling overhead.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"frame\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "\t>\n"
    "        Select the frame of the image to be used. See OSG::Image about details\n"
    "        concerning multi-frame images.\n"
    "        \\hint For fast update use GL_LINEAR or GL_NEAREST filters, as mipmap\n"
    "        creation is slow right now \\endhint.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"minFilter\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_LINEAR_MIPMAP_LINEAR\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_NEAREST, GL_LINEAR, GL_NEAREST_MIPMAP_NEAREST, GL_NEAREST_MIPMAP_LINEAR, GL_LINEAR_MIPMAP_NEAREST, GL_LINEAR_MIPMAP_LINEAR\"\n"
    "\t>\n"
    "        The minimisation filter, default GL_LINEAR_MIPMAP_LINEAR.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"magFilter\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_LINEAR\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_NEAREST, GL_LINEAR\"\n"
    "\t>\n"
    "        The magnification filter, default GL_LINEAR.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"wrapS\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_REPEAT\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_CLAMP, GL_CLAMP_TO_EDGE, GL_REPEAT, GL_CLAMP_TO_BORDER, GL_MIRRORED_REPEAT\"\n"
    "\t>\n"
    "        Texture coordinate S wrapping, default GL_REPEAT.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"wrapT\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_REPEAT\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_CLAMP, GL_CLAMP_TO_EDGE, GL_REPEAT, GL_CLAMP_TO_BORDER, GL_MIRRORED_REPEAT\"                \n"
    "\t>\n"
    "        Texture coordinate T wrapping, default GL_REPEAT.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"wrapR\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_REPEAT\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_CLAMP, GL_CLAMP_TO_EDGE, GL_REPEAT, GL_CLAMP_TO_BORDER, GL_MIRRORED_REPEAT\"                \n"
    "\t>\n"
    "        Texture coordinate R wrapping, default GL_REPEAT.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"GLId\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "        The OpenGL texture id for this texture.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"priority\"\n"
    "        type=\"Real32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"1.f\"\n"
    "\t>\n"
    "        Priority of this texture, between 0 and 1, the default is 0.  (GL_TEXTURE_PRIORITY)\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyLeft\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Left coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMinX\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Minimum X coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMaxX\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Maximum X coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMinY\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Minimum Y coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMaxY\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Maximum Y coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMinZ\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Minimum Z coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMaxZ\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Maximum Z coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"anisotropy\"\n"
    "        type=\"Real32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1.0f\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Anisotropic filtering the default 1.0f means isotropic filtering.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"borderColor\"\n"
    "        type=\"Color4f\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0,0,0,0\"\n"
    "        access=\"public\"\n"
    "\t>\n"
    "\tTexture border color\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"compareMode\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_NONE\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_NONE, GL_COMPARE_R_TO_TEXTURE\"\n"
    "\t>\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"compareFunc\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_LEQUAL\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_LEQUAL, GL_GEQUAL, GL_LESS, GL_GREATER, GL_EQUAL, GL_NOTEQUAL, GL_ALWAYS, GL_NEVER\"\n"
    "\t>\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"depthMode\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_LUMINANCE\"\n"
    "        defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "        access=\"public\"\n"
    "        potential_values=\"GL_LUMINANCE, GL_INTENSITY, GL_ALPHA\"\n"
    "\t>\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"borderWidth\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "\t>\n"
    "\tTexture border width in pixels.\n"
    "    </Field>\n"
    "    <!-- DISABLED - was in 1.x, but does not interact well with TextureTransformChunk\n"
    "         <Field\n"
    "         name=\"NPOTMatrixScale\"\n"
    "         type=\"UInt32\"\n"
    "         cardinality=\"single\"\n"
    "         visibility=\"external\"\n"
    "         defaultValue=\"0\"\n"
    "         access=\"public\"\n"
    "         >\n"
    "         Use the texture matrix to scale the texture coordinates for NPOT images. Only used if neither rectangular nor NPOT textures are supported. If set to false, the image is scaled to the next power of two before being used as a texture. For convenience xFlip/ yFlip can also be set. Note that this will interfere with other TextureTransform and TexGen chunks. Do not use it if you need to use those chunks!\n"
    "         </Field>\n"
    "    -->\n"
    "    <Field\n"
    "        name=\"skipMipMapLevels\"\n"
    "        type=\"Real32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "\t>\n"
    "\tPercentage of mipmap levels to be skipped. Especially useful in combination with image formats that already hold all levels and GPUs with only low mem.\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "See \\ref PageSystemTextureObjChunk for a description.\n"
    "\n"
    "This chunk wraps glTexImage[123]D (OSG::TextureObjChunk::_sfImage,\n"
    "OSG::TextureObjChunk::_sfInternalFormat, OSG::TextureObjChunk::_sfExternalFormat),\n"
    "glTexParameter (OSG::TextureObjChunk::_sfMinFilter,\n"
    "OSG::TextureObjChunk::_sfMagFilter, OSG::TextureObjChunk::_sfWrapS,\n"
    "OSG::TextureObjChunk::_sfWrapT, OSG::TextureObjChunk::_sfWrapR), glTexEnv\n"
    "(OSG::TextureObjChunk::_sfEnvMode, OSG::TextureObjChunk::_sfEnvColor,\n"
    "OSG::TextureObjChunk::_sfPriority).\n"
    "\n"
    "The ARB combine extension is also supported,\n"
    "where available (OSG::TextureObjChunk::_sfEnvCombineRGB,\n"
    "OSG::TextureObjChunk::_sfEnvScaleRGB, OSG::TextureObjChunk::_sfEnvSource0RGB,\n"
    "OSG::TextureObjChunk::_sfEnvSource1RGB, OSG::TextureObjChunk::_sfEnvSource2RGB,\n"
    "OSG::TextureObjChunk::_sfEnvOperand0RGB, OSG::TextureObjChunk::_sfEnvOperand1RGB,\n"
    "OSG::TextureObjChunk::_sfEnvOperand2RGB,\n"
    "OSG::TextureObjChunk::_sfEnvCombineAlpha,   OSG::TextureObjChunk::_sfEnvScaleAlpha,\n"
    "OSG::TextureObjChunk::_sfEnvSource0Alpha, OSG::TextureObjChunk::_sfEnvSource1Alpha,\n"
    "OSG::TextureObjChunk::_sfEnvSource2Alpha, OSG::TextureObjChunk::_sfEnvOperand0Alpha,\n"
    "OSG::TextureObjChunk::_sfEnvOperand1Alpha,\n"
    "OSG::TextureObjChunk::_sfEnvOperand2Alpha).\n"
    "\n"
    "It is possible to enable the point\n"
    "sprite coordinate replacement  (OSG::TextureObjChunk::_sfPointSprite), see \\ref\n"
    "PageSystemPointChunk for details. The two parameters\n"
    "OSG::TextureObjChunk::_sfScale and OSG::TextureObjChunk::_sfFrame specify details\n"
    "about the texture.\n"
    "\n"
    "On hardware that supports it (i.e. NVidia boards) the texture shader\n"
    "extension(s) are also available.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextureObjChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextureObjChunkBase::getType(void) const
{
    return _type;
}

UInt32 TextureObjChunkBase::getContainerSize(void) const
{
    return sizeof(TextureObjChunk);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TextureObjChunk::_sfImage field.
const SFUnrecChildImagePtr *TextureObjChunkBase::getSFImage(void) const
{
    return &_sfImage;
}

SFUnrecChildImagePtr *TextureObjChunkBase::editSFImage          (void)
{
    editSField(ImageFieldMask);

    return &_sfImage;
}

//! Get the value of the TextureObjChunk::_sfImage field.
Image * TextureObjChunkBase::getImage(void) const
{
    return _sfImage.getValue();
}

//! Set the value of the TextureObjChunk::_sfImage field.
void TextureObjChunkBase::setImage(Image * const value)
{
    editSField(ImageFieldMask);

    _sfImage.setValue(value);
}


SFGLenum *TextureObjChunkBase::editSFInternalFormat(void)
{
    editSField(InternalFormatFieldMask);

    return &_sfInternalFormat;
}

const SFGLenum *TextureObjChunkBase::getSFInternalFormat(void) const
{
    return &_sfInternalFormat;
}


SFGLenum *TextureObjChunkBase::editSFExternalFormat(void)
{
    editSField(ExternalFormatFieldMask);

    return &_sfExternalFormat;
}

const SFGLenum *TextureObjChunkBase::getSFExternalFormat(void) const
{
    return &_sfExternalFormat;
}


SFBool *TextureObjChunkBase::editSFScale(void)
{
    editSField(ScaleFieldMask);

    return &_sfScale;
}

const SFBool *TextureObjChunkBase::getSFScale(void) const
{
    return &_sfScale;
}


SFUInt32 *TextureObjChunkBase::editSFFrame(void)
{
    editSField(FrameFieldMask);

    return &_sfFrame;
}

const SFUInt32 *TextureObjChunkBase::getSFFrame(void) const
{
    return &_sfFrame;
}


SFGLenum *TextureObjChunkBase::editSFMinFilter(void)
{
    editSField(MinFilterFieldMask);

    return &_sfMinFilter;
}

const SFGLenum *TextureObjChunkBase::getSFMinFilter(void) const
{
    return &_sfMinFilter;
}


SFGLenum *TextureObjChunkBase::editSFMagFilter(void)
{
    editSField(MagFilterFieldMask);

    return &_sfMagFilter;
}

const SFGLenum *TextureObjChunkBase::getSFMagFilter(void) const
{
    return &_sfMagFilter;
}


SFGLenum *TextureObjChunkBase::editSFWrapS(void)
{
    editSField(WrapSFieldMask);

    return &_sfWrapS;
}

const SFGLenum *TextureObjChunkBase::getSFWrapS(void) const
{
    return &_sfWrapS;
}


SFGLenum *TextureObjChunkBase::editSFWrapT(void)
{
    editSField(WrapTFieldMask);

    return &_sfWrapT;
}

const SFGLenum *TextureObjChunkBase::getSFWrapT(void) const
{
    return &_sfWrapT;
}


SFGLenum *TextureObjChunkBase::editSFWrapR(void)
{
    editSField(WrapRFieldMask);

    return &_sfWrapR;
}

const SFGLenum *TextureObjChunkBase::getSFWrapR(void) const
{
    return &_sfWrapR;
}


SFGLenum *TextureObjChunkBase::editSFGLId(void)
{
    editSField(GLIdFieldMask);

    return &_sfGLId;
}

const SFGLenum *TextureObjChunkBase::getSFGLId(void) const
{
    return &_sfGLId;
}


SFReal32 *TextureObjChunkBase::editSFPriority(void)
{
    editSField(PriorityFieldMask);

    return &_sfPriority;
}

const SFReal32 *TextureObjChunkBase::getSFPriority(void) const
{
    return &_sfPriority;
}


SFInt32 *TextureObjChunkBase::editSFDirtyLeft(void)
{
    editSField(DirtyLeftFieldMask);

    return &_sfDirtyLeft;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyLeft(void) const
{
    return &_sfDirtyLeft;
}


SFInt32 *TextureObjChunkBase::editSFDirtyMinX(void)
{
    editSField(DirtyMinXFieldMask);

    return &_sfDirtyMinX;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMinX(void) const
{
    return &_sfDirtyMinX;
}


SFInt32 *TextureObjChunkBase::editSFDirtyMaxX(void)
{
    editSField(DirtyMaxXFieldMask);

    return &_sfDirtyMaxX;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMaxX(void) const
{
    return &_sfDirtyMaxX;
}


SFInt32 *TextureObjChunkBase::editSFDirtyMinY(void)
{
    editSField(DirtyMinYFieldMask);

    return &_sfDirtyMinY;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMinY(void) const
{
    return &_sfDirtyMinY;
}


SFInt32 *TextureObjChunkBase::editSFDirtyMaxY(void)
{
    editSField(DirtyMaxYFieldMask);

    return &_sfDirtyMaxY;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMaxY(void) const
{
    return &_sfDirtyMaxY;
}


SFInt32 *TextureObjChunkBase::editSFDirtyMinZ(void)
{
    editSField(DirtyMinZFieldMask);

    return &_sfDirtyMinZ;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMinZ(void) const
{
    return &_sfDirtyMinZ;
}


SFInt32 *TextureObjChunkBase::editSFDirtyMaxZ(void)
{
    editSField(DirtyMaxZFieldMask);

    return &_sfDirtyMaxZ;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMaxZ(void) const
{
    return &_sfDirtyMaxZ;
}


SFReal32 *TextureObjChunkBase::editSFAnisotropy(void)
{
    editSField(AnisotropyFieldMask);

    return &_sfAnisotropy;
}

const SFReal32 *TextureObjChunkBase::getSFAnisotropy(void) const
{
    return &_sfAnisotropy;
}


SFColor4f *TextureObjChunkBase::editSFBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return &_sfBorderColor;
}

const SFColor4f *TextureObjChunkBase::getSFBorderColor(void) const
{
    return &_sfBorderColor;
}


SFGLenum *TextureObjChunkBase::editSFCompareMode(void)
{
    editSField(CompareModeFieldMask);

    return &_sfCompareMode;
}

const SFGLenum *TextureObjChunkBase::getSFCompareMode(void) const
{
    return &_sfCompareMode;
}


SFGLenum *TextureObjChunkBase::editSFCompareFunc(void)
{
    editSField(CompareFuncFieldMask);

    return &_sfCompareFunc;
}

const SFGLenum *TextureObjChunkBase::getSFCompareFunc(void) const
{
    return &_sfCompareFunc;
}


SFGLenum *TextureObjChunkBase::editSFDepthMode(void)
{
    editSField(DepthModeFieldMask);

    return &_sfDepthMode;
}

const SFGLenum *TextureObjChunkBase::getSFDepthMode(void) const
{
    return &_sfDepthMode;
}


SFUInt32 *TextureObjChunkBase::editSFBorderWidth(void)
{
    editSField(BorderWidthFieldMask);

    return &_sfBorderWidth;
}

const SFUInt32 *TextureObjChunkBase::getSFBorderWidth(void) const
{
    return &_sfBorderWidth;
}


SFReal32 *TextureObjChunkBase::editSFSkipMipMapLevels(void)
{
    editSField(SkipMipMapLevelsFieldMask);

    return &_sfSkipMipMapLevels;
}

const SFReal32 *TextureObjChunkBase::getSFSkipMipMapLevels(void) const
{
    return &_sfSkipMipMapLevels;
}






/*------------------------------ access -----------------------------------*/

SizeT TextureObjChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        returnValue += _sfImage.getBinSize();
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        returnValue += _sfInternalFormat.getBinSize();
    }
    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
    {
        returnValue += _sfExternalFormat.getBinSize();
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        returnValue += _sfScale.getBinSize();
    }
    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        returnValue += _sfFrame.getBinSize();
    }
    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        returnValue += _sfMinFilter.getBinSize();
    }
    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        returnValue += _sfMagFilter.getBinSize();
    }
    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        returnValue += _sfWrapS.getBinSize();
    }
    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        returnValue += _sfWrapT.getBinSize();
    }
    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        returnValue += _sfWrapR.getBinSize();
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }
    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        returnValue += _sfPriority.getBinSize();
    }
    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
    {
        returnValue += _sfDirtyLeft.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
    {
        returnValue += _sfDirtyMinX.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
    {
        returnValue += _sfDirtyMaxX.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
    {
        returnValue += _sfDirtyMinY.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
    {
        returnValue += _sfDirtyMaxY.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
    {
        returnValue += _sfDirtyMinZ.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
    {
        returnValue += _sfDirtyMaxZ.getBinSize();
    }
    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
    {
        returnValue += _sfAnisotropy.getBinSize();
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        returnValue += _sfBorderColor.getBinSize();
    }
    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
    {
        returnValue += _sfCompareMode.getBinSize();
    }
    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
    {
        returnValue += _sfCompareFunc.getBinSize();
    }
    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
    {
        returnValue += _sfDepthMode.getBinSize();
    }
    if(FieldBits::NoField != (BorderWidthFieldMask & whichField))
    {
        returnValue += _sfBorderWidth.getBinSize();
    }
    if(FieldBits::NoField != (SkipMipMapLevelsFieldMask & whichField))
    {
        returnValue += _sfSkipMipMapLevels.getBinSize();
    }

    return returnValue;
}

void TextureObjChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        _sfInternalFormat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
    {
        _sfExternalFormat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        _sfFrame.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        _sfMinFilter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        _sfMagFilter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        _sfWrapS.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        _sfWrapT.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        _sfWrapR.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        _sfPriority.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
    {
        _sfDirtyLeft.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
    {
        _sfDirtyMinX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
    {
        _sfDirtyMaxX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
    {
        _sfDirtyMinY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
    {
        _sfDirtyMaxY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
    {
        _sfDirtyMinZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
    {
        _sfDirtyMaxZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
    {
        _sfAnisotropy.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        _sfBorderColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
    {
        _sfCompareMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
    {
        _sfCompareFunc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
    {
        _sfDepthMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderWidthFieldMask & whichField))
    {
        _sfBorderWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SkipMipMapLevelsFieldMask & whichField))
    {
        _sfSkipMipMapLevels.copyToBin(pMem);
    }
}

void TextureObjChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        editSField(ImageFieldMask);
        _sfImage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        editSField(InternalFormatFieldMask);
        _sfInternalFormat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
    {
        editSField(ExternalFormatFieldMask);
        _sfExternalFormat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        editSField(ScaleFieldMask);
        _sfScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        editSField(FrameFieldMask);
        _sfFrame.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        editSField(MinFilterFieldMask);
        _sfMinFilter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        editSField(MagFilterFieldMask);
        _sfMagFilter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        editSField(WrapSFieldMask);
        _sfWrapS.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        editSField(WrapTFieldMask);
        _sfWrapT.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        editSField(WrapRFieldMask);
        _sfWrapR.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        editSField(GLIdFieldMask);
        _sfGLId.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        editSField(PriorityFieldMask);
        _sfPriority.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
    {
        editSField(DirtyLeftFieldMask);
        _sfDirtyLeft.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
    {
        editSField(DirtyMinXFieldMask);
        _sfDirtyMinX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
    {
        editSField(DirtyMaxXFieldMask);
        _sfDirtyMaxX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
    {
        editSField(DirtyMinYFieldMask);
        _sfDirtyMinY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
    {
        editSField(DirtyMaxYFieldMask);
        _sfDirtyMaxY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
    {
        editSField(DirtyMinZFieldMask);
        _sfDirtyMinZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
    {
        editSField(DirtyMaxZFieldMask);
        _sfDirtyMaxZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
    {
        editSField(AnisotropyFieldMask);
        _sfAnisotropy.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        editSField(BorderColorFieldMask);
        _sfBorderColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
    {
        editSField(CompareModeFieldMask);
        _sfCompareMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
    {
        editSField(CompareFuncFieldMask);
        _sfCompareFunc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
    {
        editSField(DepthModeFieldMask);
        _sfDepthMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderWidthFieldMask & whichField))
    {
        editSField(BorderWidthFieldMask);
        _sfBorderWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SkipMipMapLevelsFieldMask & whichField))
    {
        editSField(SkipMipMapLevelsFieldMask);
        _sfSkipMipMapLevels.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TextureObjChunkTransitPtr TextureObjChunkBase::createLocal(BitVector bFlags)
{
    TextureObjChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TextureObjChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TextureObjChunkTransitPtr TextureObjChunkBase::createDependent(BitVector bFlags)
{
    TextureObjChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TextureObjChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TextureObjChunkTransitPtr TextureObjChunkBase::create(void)
{
    TextureObjChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TextureObjChunk>(tmpPtr);
    }

    return fc;
}

TextureObjChunk *TextureObjChunkBase::createEmptyLocal(BitVector bFlags)
{
    TextureObjChunk *returnValue;

    newPtr<TextureObjChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TextureObjChunk *TextureObjChunkBase::createEmpty(void)
{
    TextureObjChunk *returnValue;

    newPtr<TextureObjChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TextureObjChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TextureObjChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureObjChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureObjChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TextureObjChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureObjChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureObjChunkBase::shallowCopy(void) const
{
    TextureObjChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TextureObjChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TextureObjChunkBase::TextureObjChunkBase(void) :
    Inherited(),
    _sfImage                  (this,
                          ImageFieldId,
                          Image::ParentsFieldId),
    _sfInternalFormat         (GLenum(GL_NONE)),
    _sfExternalFormat         (GLenum(GL_NONE)),
    _sfScale                  (bool(true)),
    _sfFrame                  (UInt32(0)),
    _sfMinFilter              (GLenum(GL_LINEAR_MIPMAP_LINEAR)),
    _sfMagFilter              (GLenum(GL_LINEAR)),
    _sfWrapS                  (GLenum(GL_REPEAT)),
    _sfWrapT                  (GLenum(GL_REPEAT)),
    _sfWrapR                  (GLenum(GL_REPEAT)),
    _sfGLId                   (GLenum(0)),
    _sfPriority               (Real32(1.f)),
    _sfDirtyLeft              (Int32(-1)),
    _sfDirtyMinX              (Int32(-1)),
    _sfDirtyMaxX              (Int32(-1)),
    _sfDirtyMinY              (Int32(-1)),
    _sfDirtyMaxY              (Int32(-1)),
    _sfDirtyMinZ              (Int32(-1)),
    _sfDirtyMaxZ              (Int32(-1)),
    _sfAnisotropy             (Real32(1.0f)),
    _sfBorderColor            (Color4f(0,0,0,0)),
    _sfCompareMode            (GLenum(GL_NONE)),
    _sfCompareFunc            (GLenum(GL_LEQUAL)),
    _sfDepthMode              (GLenum(GL_LUMINANCE)),
    _sfBorderWidth            (UInt32(0)),
    _sfSkipMipMapLevels       (Real32(0))
{
}

TextureObjChunkBase::TextureObjChunkBase(const TextureObjChunkBase &source) :
    Inherited(source),
    _sfImage                  (this,
                          ImageFieldId,
                          Image::ParentsFieldId),
    _sfInternalFormat         (source._sfInternalFormat         ),
    _sfExternalFormat         (source._sfExternalFormat         ),
    _sfScale                  (source._sfScale                  ),
    _sfFrame                  (source._sfFrame                  ),
    _sfMinFilter              (source._sfMinFilter              ),
    _sfMagFilter              (source._sfMagFilter              ),
    _sfWrapS                  (source._sfWrapS                  ),
    _sfWrapT                  (source._sfWrapT                  ),
    _sfWrapR                  (source._sfWrapR                  ),
    _sfGLId                   (source._sfGLId                   ),
    _sfPriority               (source._sfPriority               ),
    _sfDirtyLeft              (source._sfDirtyLeft              ),
    _sfDirtyMinX              (source._sfDirtyMinX              ),
    _sfDirtyMaxX              (source._sfDirtyMaxX              ),
    _sfDirtyMinY              (source._sfDirtyMinY              ),
    _sfDirtyMaxY              (source._sfDirtyMaxY              ),
    _sfDirtyMinZ              (source._sfDirtyMinZ              ),
    _sfDirtyMaxZ              (source._sfDirtyMaxZ              ),
    _sfAnisotropy             (source._sfAnisotropy             ),
    _sfBorderColor            (source._sfBorderColor            ),
    _sfCompareMode            (source._sfCompareMode            ),
    _sfCompareFunc            (source._sfCompareFunc            ),
    _sfDepthMode              (source._sfDepthMode              ),
    _sfBorderWidth            (source._sfBorderWidth            ),
    _sfSkipMipMapLevels       (source._sfSkipMipMapLevels       )
{
}


/*-------------------------- destructors ----------------------------------*/

TextureObjChunkBase::~TextureObjChunkBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool TextureObjChunkBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == ImageFieldId)
    {
        Image * pTypedChild =
            dynamic_cast<Image *>(pChild);

        if(pTypedChild != NULL)
        {
            if(_sfImage.getValue() == pTypedChild)
            {
                editSField(ImageFieldMask);

                _sfImage.setValue(NULL);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void TextureObjChunkBase::onCreate(const TextureObjChunk *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TextureObjChunk *pThis = static_cast<TextureObjChunk *>(this);

        pThis->setImage(source->getImage());
    }
}

GetFieldHandlePtr TextureObjChunkBase::getHandleImage           (void) const
{
    SFUnrecChildImagePtr::GetHandlePtr returnValue(
        new  SFUnrecChildImagePtr::GetHandle(
             &_sfImage,
             this->getType().getFieldDesc(ImageFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleImage          (void)
{
    SFUnrecChildImagePtr::EditHandlePtr returnValue(
        new  SFUnrecChildImagePtr::EditHandle(
             &_sfImage,
             this->getType().getFieldDesc(ImageFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TextureObjChunk::setImage,
                    static_cast<TextureObjChunk *>(this), ::boost::placeholders::_1));

    editSField(ImageFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleInternalFormat  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfInternalFormat,
             this->getType().getFieldDesc(InternalFormatFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleInternalFormat (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfInternalFormat,
             this->getType().getFieldDesc(InternalFormatFieldId),
             this));


    editSField(InternalFormatFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleExternalFormat  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfExternalFormat,
             this->getType().getFieldDesc(ExternalFormatFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleExternalFormat (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfExternalFormat,
             this->getType().getFieldDesc(ExternalFormatFieldId),
             this));


    editSField(ExternalFormatFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleScale           (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfScale,
             this->getType().getFieldDesc(ScaleFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleScale          (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfScale,
             this->getType().getFieldDesc(ScaleFieldId),
             this));


    editSField(ScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleFrame           (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfFrame,
             this->getType().getFieldDesc(FrameFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleFrame          (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfFrame,
             this->getType().getFieldDesc(FrameFieldId),
             this));


    editSField(FrameFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleMinFilter       (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfMinFilter,
             this->getType().getFieldDesc(MinFilterFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleMinFilter      (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfMinFilter,
             this->getType().getFieldDesc(MinFilterFieldId),
             this));


    editSField(MinFilterFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleMagFilter       (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfMagFilter,
             this->getType().getFieldDesc(MagFilterFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleMagFilter      (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfMagFilter,
             this->getType().getFieldDesc(MagFilterFieldId),
             this));


    editSField(MagFilterFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleWrapS           (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfWrapS,
             this->getType().getFieldDesc(WrapSFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleWrapS          (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfWrapS,
             this->getType().getFieldDesc(WrapSFieldId),
             this));


    editSField(WrapSFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleWrapT           (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfWrapT,
             this->getType().getFieldDesc(WrapTFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleWrapT          (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfWrapT,
             this->getType().getFieldDesc(WrapTFieldId),
             this));


    editSField(WrapTFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleWrapR           (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfWrapR,
             this->getType().getFieldDesc(WrapRFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleWrapR          (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfWrapR,
             this->getType().getFieldDesc(WrapRFieldId),
             this));


    editSField(WrapRFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleGLId            (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfGLId,
             this->getType().getFieldDesc(GLIdFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleGLId           (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfGLId,
             this->getType().getFieldDesc(GLIdFieldId),
             this));


    editSField(GLIdFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandlePriority        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfPriority,
             this->getType().getFieldDesc(PriorityFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandlePriority       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfPriority,
             this->getType().getFieldDesc(PriorityFieldId),
             this));


    editSField(PriorityFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleDirtyLeft       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyLeft,
             this->getType().getFieldDesc(DirtyLeftFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleDirtyLeft      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyLeft,
             this->getType().getFieldDesc(DirtyLeftFieldId),
             this));


    editSField(DirtyLeftFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleDirtyMinX       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMinX,
             this->getType().getFieldDesc(DirtyMinXFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleDirtyMinX      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMinX,
             this->getType().getFieldDesc(DirtyMinXFieldId),
             this));


    editSField(DirtyMinXFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleDirtyMaxX       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMaxX,
             this->getType().getFieldDesc(DirtyMaxXFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleDirtyMaxX      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMaxX,
             this->getType().getFieldDesc(DirtyMaxXFieldId),
             this));


    editSField(DirtyMaxXFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleDirtyMinY       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMinY,
             this->getType().getFieldDesc(DirtyMinYFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleDirtyMinY      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMinY,
             this->getType().getFieldDesc(DirtyMinYFieldId),
             this));


    editSField(DirtyMinYFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleDirtyMaxY       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMaxY,
             this->getType().getFieldDesc(DirtyMaxYFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleDirtyMaxY      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMaxY,
             this->getType().getFieldDesc(DirtyMaxYFieldId),
             this));


    editSField(DirtyMaxYFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleDirtyMinZ       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMinZ,
             this->getType().getFieldDesc(DirtyMinZFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleDirtyMinZ      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMinZ,
             this->getType().getFieldDesc(DirtyMinZFieldId),
             this));


    editSField(DirtyMinZFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleDirtyMaxZ       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMaxZ,
             this->getType().getFieldDesc(DirtyMaxZFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleDirtyMaxZ      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMaxZ,
             this->getType().getFieldDesc(DirtyMaxZFieldId),
             this));


    editSField(DirtyMaxZFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleAnisotropy      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAnisotropy,
             this->getType().getFieldDesc(AnisotropyFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleAnisotropy     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAnisotropy,
             this->getType().getFieldDesc(AnisotropyFieldId),
             this));


    editSField(AnisotropyFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleBorderColor     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBorderColor,
             this->getType().getFieldDesc(BorderColorFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleBorderColor    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBorderColor,
             this->getType().getFieldDesc(BorderColorFieldId),
             this));


    editSField(BorderColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleCompareMode     (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfCompareMode,
             this->getType().getFieldDesc(CompareModeFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleCompareMode    (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfCompareMode,
             this->getType().getFieldDesc(CompareModeFieldId),
             this));


    editSField(CompareModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleCompareFunc     (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfCompareFunc,
             this->getType().getFieldDesc(CompareFuncFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleCompareFunc    (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfCompareFunc,
             this->getType().getFieldDesc(CompareFuncFieldId),
             this));


    editSField(CompareFuncFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleDepthMode       (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfDepthMode,
             this->getType().getFieldDesc(DepthModeFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleDepthMode      (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfDepthMode,
             this->getType().getFieldDesc(DepthModeFieldId),
             this));


    editSField(DepthModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleBorderWidth     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfBorderWidth,
             this->getType().getFieldDesc(BorderWidthFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleBorderWidth    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfBorderWidth,
             this->getType().getFieldDesc(BorderWidthFieldId),
             this));


    editSField(BorderWidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureObjChunkBase::getHandleSkipMipMapLevels (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSkipMipMapLevels,
             this->getType().getFieldDesc(SkipMipMapLevelsFieldId),
             const_cast<TextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureObjChunkBase::editHandleSkipMipMapLevels(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSkipMipMapLevels,
             this->getType().getFieldDesc(SkipMipMapLevelsFieldId),
             this));


    editSField(SkipMipMapLevelsFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TextureObjChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextureObjChunk *pThis = static_cast<TextureObjChunk *>(this);

    pThis->execSync(static_cast<TextureObjChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TextureObjChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TextureObjChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextureObjChunk *>(pRefAspect),
                  dynamic_cast<const TextureObjChunk *>(this));

    return returnValue;
}
#endif

void TextureObjChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextureObjChunk *>(this)->setImage(NULL);


}


OSG_END_NAMESPACE
