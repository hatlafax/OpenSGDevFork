/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CubeTextureObjChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGImage.h"                   // PosZImage Class

#include "OSGCubeTextureObjChunkBase.h"
#include "OSGCubeTextureObjChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CubeTextureObjChunk
    See \ref PageSystemCubeTextureObjChunk for a description.

    The CubeTexture is defined by 6 separate texture images. As it is derived
    from  the standard texture chunk it already has an image, which is used for
    the negative Z direction. The other 5 images are stored in variables that
    are named according to the direction they represent
    (OSG::CubeTextureObjChunk::_sfPosZImage,
    OSG::CubeTextureObjChunk::_sfNegYImage,
    OSG::CubeTextureObjChunk::_sfPosYImage,
    OSG::CubeTextureObjChunk::_sfNegXImage,
    OSG::CubeTextureObjChunk::_sfPosXImage). 
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Image *         CubeTextureObjChunkBase::_sfPosZImage
    The image for the positive Z direction of the cube texture.
*/

/*! \var Image *         CubeTextureObjChunkBase::_sfPosXImage
    The image for the positive X direction of the cube texture.
*/

/*! \var Image *         CubeTextureObjChunkBase::_sfNegXImage
    The image for the negative X direction of the cube texture.
*/

/*! \var Image *         CubeTextureObjChunkBase::_sfPosYImage
    The image for the positive Y direction of the cube texture.
*/

/*! \var Image *         CubeTextureObjChunkBase::_sfNegYImage
    The image for the negative Y direction of the cube texture.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<CubeTextureObjChunk *, nsOSG>::_type(
    "CubeTextureObjChunkPtr", 
    "TextureObjChunkPtr", 
    CubeTextureObjChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(CubeTextureObjChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           CubeTextureObjChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           CubeTextureObjChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void CubeTextureObjChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecImagePtr::Description(
        SFUnrecImagePtr::getClassType(),
        "posZImage",
        "The image for the positive Z direction of the cube texture.\n",
        PosZImageFieldId, PosZImageFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CubeTextureObjChunk::editHandlePosZImage),
        static_cast<FieldGetMethodSig >(&CubeTextureObjChunk::getHandlePosZImage));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecImagePtr::Description(
        SFUnrecImagePtr::getClassType(),
        "posXImage",
        "The image for the positive X direction of the cube texture.\n",
        PosXImageFieldId, PosXImageFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CubeTextureObjChunk::editHandlePosXImage),
        static_cast<FieldGetMethodSig >(&CubeTextureObjChunk::getHandlePosXImage));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecImagePtr::Description(
        SFUnrecImagePtr::getClassType(),
        "negXImage",
        "The image for the negative X direction of the cube texture.\n",
        NegXImageFieldId, NegXImageFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CubeTextureObjChunk::editHandleNegXImage),
        static_cast<FieldGetMethodSig >(&CubeTextureObjChunk::getHandleNegXImage));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecImagePtr::Description(
        SFUnrecImagePtr::getClassType(),
        "posYImage",
        "The image for the positive Y direction of the cube texture.\n",
        PosYImageFieldId, PosYImageFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CubeTextureObjChunk::editHandlePosYImage),
        static_cast<FieldGetMethodSig >(&CubeTextureObjChunk::getHandlePosYImage));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecImagePtr::Description(
        SFUnrecImagePtr::getClassType(),
        "negYImage",
        "The image for the negative Y direction of the cube texture.\n",
        NegYImageFieldId, NegYImageFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CubeTextureObjChunk::editHandleNegYImage),
        static_cast<FieldGetMethodSig >(&CubeTextureObjChunk::getHandleNegYImage));

    oType.addInitialDesc(pDesc);
}


CubeTextureObjChunkBase::TypeObject CubeTextureObjChunkBase::_type(
    CubeTextureObjChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&CubeTextureObjChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&CubeTextureObjChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&CubeTextureObjChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&CubeTextureObjChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"CubeTextureObjChunk\"\n"
    "   parent=\"TextureObjChunk\"\n"
    "   library=\"System\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   docGroupBase=\"GrpSystemState\"\n"
    "   >\n"
    "  See \\ref PageSystemCubeTextureObjChunk for a description.\n"
    "\n"
    "  The CubeTexture is defined by 6 separate texture images. As it is derived\n"
    "  from  the standard texture chunk it already has an image, which is used for\n"
    "  the negative Z direction. The other 5 images are stored in variables that\n"
    "  are named according to the direction they represent\n"
    "  (OSG::CubeTextureObjChunk::_sfPosZImage,\n"
    "  OSG::CubeTextureObjChunk::_sfNegYImage,\n"
    "  OSG::CubeTextureObjChunk::_sfPosYImage,\n"
    "  OSG::CubeTextureObjChunk::_sfNegXImage,\n"
    "  OSG::CubeTextureObjChunk::_sfPosXImage). \n"
    "  <Field\n"
    "\t name=\"posZImage\"\n"
    "\t type=\"ImagePtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tThe image for the positive Z direction of the cube texture.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"posXImage\"\n"
    "\t type=\"ImagePtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tThe image for the positive X direction of the cube texture.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"negXImage\"\n"
    "\t type=\"ImagePtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tThe image for the negative X direction of the cube texture.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"posYImage\"\n"
    "\t type=\"ImagePtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tThe image for the positive Y direction of the cube texture.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"negYImage\"\n"
    "\t type=\"ImagePtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tThe image for the negative Y direction of the cube texture.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "See \\ref PageSystemCubeTextureObjChunk for a description.\n"
    "\n"
    "The CubeTexture is defined by 6 separate texture images. As it is derived\n"
    "from  the standard texture chunk it already has an image, which is used for\n"
    "the negative Z direction. The other 5 images are stored in variables that\n"
    "are named according to the direction they represent\n"
    "(OSG::CubeTextureObjChunk::_sfPosZImage,\n"
    "OSG::CubeTextureObjChunk::_sfNegYImage,\n"
    "OSG::CubeTextureObjChunk::_sfPosYImage,\n"
    "OSG::CubeTextureObjChunk::_sfNegXImage,\n"
    "OSG::CubeTextureObjChunk::_sfPosXImage). \n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CubeTextureObjChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &CubeTextureObjChunkBase::getType(void) const
{
    return _type;
}

UInt32 CubeTextureObjChunkBase::getContainerSize(void) const
{
    return sizeof(CubeTextureObjChunk);
}

/*------------------------- decorator get ------------------------------*/


//! Get the CubeTextureObjChunk::_sfPosZImage field.
const SFUnrecImagePtr *CubeTextureObjChunkBase::getSFPosZImage(void) const
{
    return &_sfPosZImage;
}

SFUnrecImagePtr     *CubeTextureObjChunkBase::editSFPosZImage      (void)
{
    editSField(PosZImageFieldMask);

    return &_sfPosZImage;
}

//! Get the value of the CubeTextureObjChunk::_sfPosZImage field.
Image * CubeTextureObjChunkBase::getPosZImage(void) const
{
    return _sfPosZImage.getValue();
}

//! Set the value of the CubeTextureObjChunk::_sfPosZImage field.
void CubeTextureObjChunkBase::setPosZImage(Image * const value)
{
    editSField(PosZImageFieldMask);

    _sfPosZImage.setValue(value);
}


//! Get the CubeTextureObjChunk::_sfPosXImage field.
const SFUnrecImagePtr *CubeTextureObjChunkBase::getSFPosXImage(void) const
{
    return &_sfPosXImage;
}

SFUnrecImagePtr     *CubeTextureObjChunkBase::editSFPosXImage      (void)
{
    editSField(PosXImageFieldMask);

    return &_sfPosXImage;
}

//! Get the value of the CubeTextureObjChunk::_sfPosXImage field.
Image * CubeTextureObjChunkBase::getPosXImage(void) const
{
    return _sfPosXImage.getValue();
}

//! Set the value of the CubeTextureObjChunk::_sfPosXImage field.
void CubeTextureObjChunkBase::setPosXImage(Image * const value)
{
    editSField(PosXImageFieldMask);

    _sfPosXImage.setValue(value);
}


//! Get the CubeTextureObjChunk::_sfNegXImage field.
const SFUnrecImagePtr *CubeTextureObjChunkBase::getSFNegXImage(void) const
{
    return &_sfNegXImage;
}

SFUnrecImagePtr     *CubeTextureObjChunkBase::editSFNegXImage      (void)
{
    editSField(NegXImageFieldMask);

    return &_sfNegXImage;
}

//! Get the value of the CubeTextureObjChunk::_sfNegXImage field.
Image * CubeTextureObjChunkBase::getNegXImage(void) const
{
    return _sfNegXImage.getValue();
}

//! Set the value of the CubeTextureObjChunk::_sfNegXImage field.
void CubeTextureObjChunkBase::setNegXImage(Image * const value)
{
    editSField(NegXImageFieldMask);

    _sfNegXImage.setValue(value);
}


//! Get the CubeTextureObjChunk::_sfPosYImage field.
const SFUnrecImagePtr *CubeTextureObjChunkBase::getSFPosYImage(void) const
{
    return &_sfPosYImage;
}

SFUnrecImagePtr     *CubeTextureObjChunkBase::editSFPosYImage      (void)
{
    editSField(PosYImageFieldMask);

    return &_sfPosYImage;
}

//! Get the value of the CubeTextureObjChunk::_sfPosYImage field.
Image * CubeTextureObjChunkBase::getPosYImage(void) const
{
    return _sfPosYImage.getValue();
}

//! Set the value of the CubeTextureObjChunk::_sfPosYImage field.
void CubeTextureObjChunkBase::setPosYImage(Image * const value)
{
    editSField(PosYImageFieldMask);

    _sfPosYImage.setValue(value);
}


//! Get the CubeTextureObjChunk::_sfNegYImage field.
const SFUnrecImagePtr *CubeTextureObjChunkBase::getSFNegYImage(void) const
{
    return &_sfNegYImage;
}

SFUnrecImagePtr     *CubeTextureObjChunkBase::editSFNegYImage      (void)
{
    editSField(NegYImageFieldMask);

    return &_sfNegYImage;
}

//! Get the value of the CubeTextureObjChunk::_sfNegYImage field.
Image * CubeTextureObjChunkBase::getNegYImage(void) const
{
    return _sfNegYImage.getValue();
}

//! Set the value of the CubeTextureObjChunk::_sfNegYImage field.
void CubeTextureObjChunkBase::setNegYImage(Image * const value)
{
    editSField(NegYImageFieldMask);

    _sfNegYImage.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT CubeTextureObjChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PosZImageFieldMask & whichField))
    {
        returnValue += _sfPosZImage.getBinSize();
    }
    if(FieldBits::NoField != (PosXImageFieldMask & whichField))
    {
        returnValue += _sfPosXImage.getBinSize();
    }
    if(FieldBits::NoField != (NegXImageFieldMask & whichField))
    {
        returnValue += _sfNegXImage.getBinSize();
    }
    if(FieldBits::NoField != (PosYImageFieldMask & whichField))
    {
        returnValue += _sfPosYImage.getBinSize();
    }
    if(FieldBits::NoField != (NegYImageFieldMask & whichField))
    {
        returnValue += _sfNegYImage.getBinSize();
    }

    return returnValue;
}

void CubeTextureObjChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PosZImageFieldMask & whichField))
    {
        _sfPosZImage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PosXImageFieldMask & whichField))
    {
        _sfPosXImage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NegXImageFieldMask & whichField))
    {
        _sfNegXImage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PosYImageFieldMask & whichField))
    {
        _sfPosYImage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NegYImageFieldMask & whichField))
    {
        _sfNegYImage.copyToBin(pMem);
    }
}

void CubeTextureObjChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PosZImageFieldMask & whichField))
    {
        editSField(PosZImageFieldMask);
        _sfPosZImage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PosXImageFieldMask & whichField))
    {
        editSField(PosXImageFieldMask);
        _sfPosXImage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NegXImageFieldMask & whichField))
    {
        editSField(NegXImageFieldMask);
        _sfNegXImage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PosYImageFieldMask & whichField))
    {
        editSField(PosYImageFieldMask);
        _sfPosYImage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NegYImageFieldMask & whichField))
    {
        editSField(NegYImageFieldMask);
        _sfNegYImage.copyFromBin(pMem);
    }
}

//! create a new instance of the class
CubeTextureObjChunkTransitPtr CubeTextureObjChunkBase::createLocal(BitVector bFlags)
{
    CubeTextureObjChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<CubeTextureObjChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
CubeTextureObjChunkTransitPtr CubeTextureObjChunkBase::createDependent(BitVector bFlags)
{
    CubeTextureObjChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<CubeTextureObjChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
CubeTextureObjChunkTransitPtr CubeTextureObjChunkBase::create(void)
{
    CubeTextureObjChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<CubeTextureObjChunk>(tmpPtr);
    }

    return fc;
}

CubeTextureObjChunk *CubeTextureObjChunkBase::createEmptyLocal(BitVector bFlags)
{
    CubeTextureObjChunk *returnValue;

    newPtr<CubeTextureObjChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
CubeTextureObjChunk *CubeTextureObjChunkBase::createEmpty(void)
{
    CubeTextureObjChunk *returnValue;

    newPtr<CubeTextureObjChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr CubeTextureObjChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    CubeTextureObjChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CubeTextureObjChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr CubeTextureObjChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    CubeTextureObjChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CubeTextureObjChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr CubeTextureObjChunkBase::shallowCopy(void) const
{
    CubeTextureObjChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const CubeTextureObjChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

CubeTextureObjChunkBase::CubeTextureObjChunkBase(void) :
    Inherited(),
    _sfPosZImage              (NULL),
    _sfPosXImage              (NULL),
    _sfNegXImage              (NULL),
    _sfPosYImage              (NULL),
    _sfNegYImage              (NULL)
{
}

CubeTextureObjChunkBase::CubeTextureObjChunkBase(const CubeTextureObjChunkBase &source) :
    Inherited(source),
    _sfPosZImage              (NULL),
    _sfPosXImage              (NULL),
    _sfNegXImage              (NULL),
    _sfPosYImage              (NULL),
    _sfNegYImage              (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

CubeTextureObjChunkBase::~CubeTextureObjChunkBase(void)
{
}

void CubeTextureObjChunkBase::onCreate(const CubeTextureObjChunk *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        CubeTextureObjChunk *pThis = static_cast<CubeTextureObjChunk *>(this);

        pThis->setPosZImage(source->getPosZImage());

        pThis->setPosXImage(source->getPosXImage());

        pThis->setNegXImage(source->getNegXImage());

        pThis->setPosYImage(source->getPosYImage());

        pThis->setNegYImage(source->getNegYImage());
    }
}

GetFieldHandlePtr CubeTextureObjChunkBase::getHandlePosZImage       (void) const
{
    SFUnrecImagePtr::GetHandlePtr returnValue(
        new  SFUnrecImagePtr::GetHandle(
             &_sfPosZImage,
             this->getType().getFieldDesc(PosZImageFieldId),
             const_cast<CubeTextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CubeTextureObjChunkBase::editHandlePosZImage      (void)
{
    SFUnrecImagePtr::EditHandlePtr returnValue(
        new  SFUnrecImagePtr::EditHandle(
             &_sfPosZImage,
             this->getType().getFieldDesc(PosZImageFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&CubeTextureObjChunk::setPosZImage,
                    static_cast<CubeTextureObjChunk *>(this), ::boost::placeholders::_1));

    editSField(PosZImageFieldMask);

    return returnValue;
}

GetFieldHandlePtr CubeTextureObjChunkBase::getHandlePosXImage       (void) const
{
    SFUnrecImagePtr::GetHandlePtr returnValue(
        new  SFUnrecImagePtr::GetHandle(
             &_sfPosXImage,
             this->getType().getFieldDesc(PosXImageFieldId),
             const_cast<CubeTextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CubeTextureObjChunkBase::editHandlePosXImage      (void)
{
    SFUnrecImagePtr::EditHandlePtr returnValue(
        new  SFUnrecImagePtr::EditHandle(
             &_sfPosXImage,
             this->getType().getFieldDesc(PosXImageFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&CubeTextureObjChunk::setPosXImage,
                    static_cast<CubeTextureObjChunk *>(this), ::boost::placeholders::_1));

    editSField(PosXImageFieldMask);

    return returnValue;
}

GetFieldHandlePtr CubeTextureObjChunkBase::getHandleNegXImage       (void) const
{
    SFUnrecImagePtr::GetHandlePtr returnValue(
        new  SFUnrecImagePtr::GetHandle(
             &_sfNegXImage,
             this->getType().getFieldDesc(NegXImageFieldId),
             const_cast<CubeTextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CubeTextureObjChunkBase::editHandleNegXImage      (void)
{
    SFUnrecImagePtr::EditHandlePtr returnValue(
        new  SFUnrecImagePtr::EditHandle(
             &_sfNegXImage,
             this->getType().getFieldDesc(NegXImageFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&CubeTextureObjChunk::setNegXImage,
                    static_cast<CubeTextureObjChunk *>(this), ::boost::placeholders::_1));

    editSField(NegXImageFieldMask);

    return returnValue;
}

GetFieldHandlePtr CubeTextureObjChunkBase::getHandlePosYImage       (void) const
{
    SFUnrecImagePtr::GetHandlePtr returnValue(
        new  SFUnrecImagePtr::GetHandle(
             &_sfPosYImage,
             this->getType().getFieldDesc(PosYImageFieldId),
             const_cast<CubeTextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CubeTextureObjChunkBase::editHandlePosYImage      (void)
{
    SFUnrecImagePtr::EditHandlePtr returnValue(
        new  SFUnrecImagePtr::EditHandle(
             &_sfPosYImage,
             this->getType().getFieldDesc(PosYImageFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&CubeTextureObjChunk::setPosYImage,
                    static_cast<CubeTextureObjChunk *>(this), ::boost::placeholders::_1));

    editSField(PosYImageFieldMask);

    return returnValue;
}

GetFieldHandlePtr CubeTextureObjChunkBase::getHandleNegYImage       (void) const
{
    SFUnrecImagePtr::GetHandlePtr returnValue(
        new  SFUnrecImagePtr::GetHandle(
             &_sfNegYImage,
             this->getType().getFieldDesc(NegYImageFieldId),
             const_cast<CubeTextureObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CubeTextureObjChunkBase::editHandleNegYImage      (void)
{
    SFUnrecImagePtr::EditHandlePtr returnValue(
        new  SFUnrecImagePtr::EditHandle(
             &_sfNegYImage,
             this->getType().getFieldDesc(NegYImageFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&CubeTextureObjChunk::setNegYImage,
                    static_cast<CubeTextureObjChunk *>(this), ::boost::placeholders::_1));

    editSField(NegYImageFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CubeTextureObjChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    CubeTextureObjChunk *pThis = static_cast<CubeTextureObjChunk *>(this);

    pThis->execSync(static_cast<CubeTextureObjChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *CubeTextureObjChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    CubeTextureObjChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const CubeTextureObjChunk *>(pRefAspect),
                  dynamic_cast<const CubeTextureObjChunk *>(this));

    return returnValue;
}
#endif

void CubeTextureObjChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<CubeTextureObjChunk *>(this)->setPosZImage(NULL);

    static_cast<CubeTextureObjChunk *>(this)->setPosXImage(NULL);

    static_cast<CubeTextureObjChunk *>(this)->setNegXImage(NULL);

    static_cast<CubeTextureObjChunk *>(this)->setPosYImage(NULL);

    static_cast<CubeTextureObjChunk *>(this)->setNegYImage(NULL);


}


OSG_END_NAMESPACE
