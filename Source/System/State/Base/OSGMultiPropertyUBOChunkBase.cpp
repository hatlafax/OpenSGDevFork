/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiPropertyUBOChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGMultiPropertyUBOChunkBase.h"
#include "OSGMultiPropertyUBOChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MultiPropertyUBOChunk
    See \ref PageSystemMultiPropertyUBOChunk for a description.

    The multi property chunk allows you to easily set up a uniform block array with a simple 
    plain struct layout in std140 buffer format.

    This chunk is basically a specialization of the UniformBufferObjStd140Chunk with a simpler 
    usage pattern but at the cost of handling only a subset of the structural possibilities 
    that the general chunk allows.

    It can for instance be perfectly used to define the geometry state. See the example 'multirangelight'
    in the simple example folder for an application of this chunk.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt8           MultiPropertyUBOChunkBase::_mfTypes
    Stores the type of a block entry. This can be any of the set {FLOAT_T, DOUBLE_T, INT_T, UINT_T, BOOL_T, VEC3_T, VEC4_T, MAT4_T}.
*/

/*! \var UInt32          MultiPropertyUBOChunkBase::_mfCardinality
    Stores the cardinality types, i.e. the consecutive block layout members.
*/

/*! \var UInt32          MultiPropertyUBOChunkBase::_mfCardinalities
    Stores the accumulated cardinalities for each type.
*/

/*! \var UInt32          MultiPropertyUBOChunkBase::_sfNumProperties
    Stores the number of properties added to the chunk.
*/

/*! \var Real32          MultiPropertyUBOChunkBase::_mfFloatValues
    The float values.
*/

/*! \var Real64          MultiPropertyUBOChunkBase::_mfDoubleValues
    The double values.
*/

/*! \var Int32           MultiPropertyUBOChunkBase::_mfIntValues
    The int values.
*/

/*! \var UInt32          MultiPropertyUBOChunkBase::_mfUIntValues
    The unsigned int values.
*/

/*! \var bool            MultiPropertyUBOChunkBase::_mfBoolValues
    The bool values.
*/

/*! \var Vec3f           MultiPropertyUBOChunkBase::_mfVec3Values
    The 3D float vectors.
*/

/*! \var Vec4f           MultiPropertyUBOChunkBase::_mfVec4Values
    The 4D float vectors.
*/

/*! \var Matrix          MultiPropertyUBOChunkBase::_mfMatrixValues
    The matrices.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<MultiPropertyUBOChunk *, nsOSG>::_type(
    "MultiPropertyUBOChunkPtr", 
    "UniformBufferObjStd140ChunkPtr", 
    MultiPropertyUBOChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(MultiPropertyUBOChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MultiPropertyUBOChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MultiPropertyUBOChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MultiPropertyUBOChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "types",
        "Stores the type of a block entry. This can be any of the set {FLOAT_T, DOUBLE_T, INT_T, UINT_T, BOOL_T, VEC3_T, VEC4_T, MAT4_T}.\n",
        TypesFieldId, TypesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleTypes),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleTypes));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "cardinality",
        "Stores the cardinality types, i.e. the consecutive block layout members.\n",
        CardinalityFieldId, CardinalityFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleCardinality),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleCardinality));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "cardinalities",
        "Stores the accumulated cardinalities for each type.\n",
        CardinalitiesFieldId, CardinalitiesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleCardinalities),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleCardinalities));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "numProperties",
        "Stores the number of properties added to the chunk.\n",
        NumPropertiesFieldId, NumPropertiesFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleNumProperties),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleNumProperties));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "floatValues",
        "The float values.\n",
        FloatValuesFieldId, FloatValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleFloatValues),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleFloatValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal64::Description(
        MFReal64::getClassType(),
        "doubleValues",
        "The double values.\n",
        DoubleValuesFieldId, DoubleValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleDoubleValues),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleDoubleValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFInt32::Description(
        MFInt32::getClassType(),
        "intValues",
        "The int values.\n",
        IntValuesFieldId, IntValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleIntValues),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleIntValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "uIntValues",
        "The unsigned int values.\n",
        UIntValuesFieldId, UIntValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleUIntValues),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleUIntValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFBool::Description(
        MFBool::getClassType(),
        "boolValues",
        "The bool values.\n",
        BoolValuesFieldId, BoolValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleBoolValues),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleBoolValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec3f::Description(
        MFVec3f::getClassType(),
        "vec3Values",
        "The 3D float vectors.\n",
        Vec3ValuesFieldId, Vec3ValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleVec3Values),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleVec3Values));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec4f::Description(
        MFVec4f::getClassType(),
        "vec4Values",
        "The 4D float vectors.\n",
        Vec4ValuesFieldId, Vec4ValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleVec4Values),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleVec4Values));

    oType.addInitialDesc(pDesc);

    pDesc = new MFMatrix::Description(
        MFMatrix::getClassType(),
        "matrixValues",
        "The matrices.\n",
        MatrixValuesFieldId, MatrixValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiPropertyUBOChunk::editHandleMatrixValues),
        static_cast<FieldGetMethodSig >(&MultiPropertyUBOChunk::getHandleMatrixValues));

    oType.addInitialDesc(pDesc);
}


MultiPropertyUBOChunkBase::TypeObject MultiPropertyUBOChunkBase::_type(
    MultiPropertyUBOChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&MultiPropertyUBOChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&MultiPropertyUBOChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&MultiPropertyUBOChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&MultiPropertyUBOChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"MultiPropertyUBOChunk\"\n"
    "    parent=\"UniformBufferObjStd140Chunk\"\n"
    "    library=\"System\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    docGroupBase=\"GrpSystemState\"\n"
    ">\n"
    "See \\ref PageSystemMultiPropertyUBOChunk for a description.\n"
    "\n"
    "The multi property chunk allows you to easily set up a uniform block array with a simple \n"
    "plain struct layout in std140 buffer format.\n"
    "\n"
    "This chunk is basically a specialization of the UniformBufferObjStd140Chunk with a simpler \n"
    "usage pattern but at the cost of handling only a subset of the structural possibilities \n"
    "that the general chunk allows.\n"
    "\n"
    "It can for instance be perfectly used to define the geometry state. See the example 'multirangelight'\n"
    "in the simple example folder for an application of this chunk.\n"
    "\n"
    "    <Field\n"
    "        name=\"types\"\n"
    "        type=\"UInt8\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        Stores the type of a block entry. This can be any of the set {FLOAT_T, DOUBLE_T, INT_T, UINT_T, BOOL_T, VEC3_T, VEC4_T, MAT4_T}.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"cardinality\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        Stores the cardinality types, i.e. the consecutive block layout members.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"cardinalities\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        Stores the accumulated cardinalities for each type.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"numProperties\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        Stores the number of properties added to the chunk.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"floatValues\"\n"
    "        type=\"Real32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        The float values.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"doubleValues\"\n"
    "        type=\"Real64\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        The double values.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"intValues\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        The int values.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"uIntValues\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        The unsigned int values.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"boolValues\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        The bool values.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"vec3Values\"\n"
    "        type=\"Vec3f\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        The 3D float vectors.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"vec4Values\"\n"
    "        type=\"Vec4f\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        The 4D float vectors.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"matrixValues\"\n"
    "        type=\"Matrix\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "        The matrices.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "See \\ref PageSystemMultiPropertyUBOChunk for a description.\n"
    "\n"
    "The multi property chunk allows you to easily set up a uniform block array with a simple \n"
    "plain struct layout in std140 buffer format.\n"
    "\n"
    "This chunk is basically a specialization of the UniformBufferObjStd140Chunk with a simpler \n"
    "usage pattern but at the cost of handling only a subset of the structural possibilities \n"
    "that the general chunk allows.\n"
    "\n"
    "It can for instance be perfectly used to define the geometry state. See the example 'multirangelight'\n"
    "in the simple example folder for an application of this chunk.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MultiPropertyUBOChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &MultiPropertyUBOChunkBase::getType(void) const
{
    return _type;
}

UInt32 MultiPropertyUBOChunkBase::getContainerSize(void) const
{
    return sizeof(MultiPropertyUBOChunk);
}

/*------------------------- decorator get ------------------------------*/


MFUInt8 *MultiPropertyUBOChunkBase::editMFTypes(void)
{
    editMField(TypesFieldMask, _mfTypes);

    return &_mfTypes;
}

const MFUInt8 *MultiPropertyUBOChunkBase::getMFTypes(void) const
{
    return &_mfTypes;
}


MFUInt32 *MultiPropertyUBOChunkBase::editMFCardinality(void)
{
    editMField(CardinalityFieldMask, _mfCardinality);

    return &_mfCardinality;
}

const MFUInt32 *MultiPropertyUBOChunkBase::getMFCardinality(void) const
{
    return &_mfCardinality;
}


MFUInt32 *MultiPropertyUBOChunkBase::editMFCardinalities(void)
{
    editMField(CardinalitiesFieldMask, _mfCardinalities);

    return &_mfCardinalities;
}

const MFUInt32 *MultiPropertyUBOChunkBase::getMFCardinalities(void) const
{
    return &_mfCardinalities;
}


SFUInt32 *MultiPropertyUBOChunkBase::editSFNumProperties(void)
{
    editSField(NumPropertiesFieldMask);

    return &_sfNumProperties;
}

const SFUInt32 *MultiPropertyUBOChunkBase::getSFNumProperties(void) const
{
    return &_sfNumProperties;
}


MFReal32 *MultiPropertyUBOChunkBase::editMFFloatValues(void)
{
    editMField(FloatValuesFieldMask, _mfFloatValues);

    return &_mfFloatValues;
}

const MFReal32 *MultiPropertyUBOChunkBase::getMFFloatValues(void) const
{
    return &_mfFloatValues;
}


MFReal64 *MultiPropertyUBOChunkBase::editMFDoubleValues(void)
{
    editMField(DoubleValuesFieldMask, _mfDoubleValues);

    return &_mfDoubleValues;
}

const MFReal64 *MultiPropertyUBOChunkBase::getMFDoubleValues(void) const
{
    return &_mfDoubleValues;
}


MFInt32 *MultiPropertyUBOChunkBase::editMFIntValues(void)
{
    editMField(IntValuesFieldMask, _mfIntValues);

    return &_mfIntValues;
}

const MFInt32 *MultiPropertyUBOChunkBase::getMFIntValues(void) const
{
    return &_mfIntValues;
}


MFUInt32 *MultiPropertyUBOChunkBase::editMFUIntValues(void)
{
    editMField(UIntValuesFieldMask, _mfUIntValues);

    return &_mfUIntValues;
}

const MFUInt32 *MultiPropertyUBOChunkBase::getMFUIntValues(void) const
{
    return &_mfUIntValues;
}


MFBool *MultiPropertyUBOChunkBase::editMFBoolValues(void)
{
    editMField(BoolValuesFieldMask, _mfBoolValues);

    return &_mfBoolValues;
}

const MFBool *MultiPropertyUBOChunkBase::getMFBoolValues(void) const
{
    return &_mfBoolValues;
}


MFVec3f *MultiPropertyUBOChunkBase::editMFVec3Values(void)
{
    editMField(Vec3ValuesFieldMask, _mfVec3Values);

    return &_mfVec3Values;
}

const MFVec3f *MultiPropertyUBOChunkBase::getMFVec3Values(void) const
{
    return &_mfVec3Values;
}


MFVec4f *MultiPropertyUBOChunkBase::editMFVec4Values(void)
{
    editMField(Vec4ValuesFieldMask, _mfVec4Values);

    return &_mfVec4Values;
}

const MFVec4f *MultiPropertyUBOChunkBase::getMFVec4Values(void) const
{
    return &_mfVec4Values;
}


MFMatrix *MultiPropertyUBOChunkBase::editMFMatrixValues(void)
{
    editMField(MatrixValuesFieldMask, _mfMatrixValues);

    return &_mfMatrixValues;
}

const MFMatrix *MultiPropertyUBOChunkBase::getMFMatrixValues(void) const
{
    return &_mfMatrixValues;
}






/*------------------------------ access -----------------------------------*/

SizeT MultiPropertyUBOChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
    {
        returnValue += _mfTypes.getBinSize();
    }
    if(FieldBits::NoField != (CardinalityFieldMask & whichField))
    {
        returnValue += _mfCardinality.getBinSize();
    }
    if(FieldBits::NoField != (CardinalitiesFieldMask & whichField))
    {
        returnValue += _mfCardinalities.getBinSize();
    }
    if(FieldBits::NoField != (NumPropertiesFieldMask & whichField))
    {
        returnValue += _sfNumProperties.getBinSize();
    }
    if(FieldBits::NoField != (FloatValuesFieldMask & whichField))
    {
        returnValue += _mfFloatValues.getBinSize();
    }
    if(FieldBits::NoField != (DoubleValuesFieldMask & whichField))
    {
        returnValue += _mfDoubleValues.getBinSize();
    }
    if(FieldBits::NoField != (IntValuesFieldMask & whichField))
    {
        returnValue += _mfIntValues.getBinSize();
    }
    if(FieldBits::NoField != (UIntValuesFieldMask & whichField))
    {
        returnValue += _mfUIntValues.getBinSize();
    }
    if(FieldBits::NoField != (BoolValuesFieldMask & whichField))
    {
        returnValue += _mfBoolValues.getBinSize();
    }
    if(FieldBits::NoField != (Vec3ValuesFieldMask & whichField))
    {
        returnValue += _mfVec3Values.getBinSize();
    }
    if(FieldBits::NoField != (Vec4ValuesFieldMask & whichField))
    {
        returnValue += _mfVec4Values.getBinSize();
    }
    if(FieldBits::NoField != (MatrixValuesFieldMask & whichField))
    {
        returnValue += _mfMatrixValues.getBinSize();
    }

    return returnValue;
}

void MultiPropertyUBOChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
    {
        _mfTypes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CardinalityFieldMask & whichField))
    {
        _mfCardinality.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CardinalitiesFieldMask & whichField))
    {
        _mfCardinalities.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NumPropertiesFieldMask & whichField))
    {
        _sfNumProperties.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FloatValuesFieldMask & whichField))
    {
        _mfFloatValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DoubleValuesFieldMask & whichField))
    {
        _mfDoubleValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IntValuesFieldMask & whichField))
    {
        _mfIntValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UIntValuesFieldMask & whichField))
    {
        _mfUIntValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BoolValuesFieldMask & whichField))
    {
        _mfBoolValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Vec3ValuesFieldMask & whichField))
    {
        _mfVec3Values.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Vec4ValuesFieldMask & whichField))
    {
        _mfVec4Values.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MatrixValuesFieldMask & whichField))
    {
        _mfMatrixValues.copyToBin(pMem);
    }
}

void MultiPropertyUBOChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
    {
        editMField(TypesFieldMask, _mfTypes);
        _mfTypes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CardinalityFieldMask & whichField))
    {
        editMField(CardinalityFieldMask, _mfCardinality);
        _mfCardinality.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CardinalitiesFieldMask & whichField))
    {
        editMField(CardinalitiesFieldMask, _mfCardinalities);
        _mfCardinalities.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NumPropertiesFieldMask & whichField))
    {
        editSField(NumPropertiesFieldMask);
        _sfNumProperties.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FloatValuesFieldMask & whichField))
    {
        editMField(FloatValuesFieldMask, _mfFloatValues);
        _mfFloatValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DoubleValuesFieldMask & whichField))
    {
        editMField(DoubleValuesFieldMask, _mfDoubleValues);
        _mfDoubleValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IntValuesFieldMask & whichField))
    {
        editMField(IntValuesFieldMask, _mfIntValues);
        _mfIntValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UIntValuesFieldMask & whichField))
    {
        editMField(UIntValuesFieldMask, _mfUIntValues);
        _mfUIntValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BoolValuesFieldMask & whichField))
    {
        editMField(BoolValuesFieldMask, _mfBoolValues);
        _mfBoolValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Vec3ValuesFieldMask & whichField))
    {
        editMField(Vec3ValuesFieldMask, _mfVec3Values);
        _mfVec3Values.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Vec4ValuesFieldMask & whichField))
    {
        editMField(Vec4ValuesFieldMask, _mfVec4Values);
        _mfVec4Values.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MatrixValuesFieldMask & whichField))
    {
        editMField(MatrixValuesFieldMask, _mfMatrixValues);
        _mfMatrixValues.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MultiPropertyUBOChunkTransitPtr MultiPropertyUBOChunkBase::createLocal(BitVector bFlags)
{
    MultiPropertyUBOChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MultiPropertyUBOChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MultiPropertyUBOChunkTransitPtr MultiPropertyUBOChunkBase::createDependent(BitVector bFlags)
{
    MultiPropertyUBOChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MultiPropertyUBOChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MultiPropertyUBOChunkTransitPtr MultiPropertyUBOChunkBase::create(void)
{
    MultiPropertyUBOChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MultiPropertyUBOChunk>(tmpPtr);
    }

    return fc;
}

MultiPropertyUBOChunk *MultiPropertyUBOChunkBase::createEmptyLocal(BitVector bFlags)
{
    MultiPropertyUBOChunk *returnValue;

    newPtr<MultiPropertyUBOChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MultiPropertyUBOChunk *MultiPropertyUBOChunkBase::createEmpty(void)
{
    MultiPropertyUBOChunk *returnValue;

    newPtr<MultiPropertyUBOChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MultiPropertyUBOChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MultiPropertyUBOChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MultiPropertyUBOChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MultiPropertyUBOChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MultiPropertyUBOChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MultiPropertyUBOChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MultiPropertyUBOChunkBase::shallowCopy(void) const
{
    MultiPropertyUBOChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MultiPropertyUBOChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

MultiPropertyUBOChunkBase::MultiPropertyUBOChunkBase(void) :
    Inherited(),
    _mfTypes                  (),
    _mfCardinality            (),
    _mfCardinalities          (),
    _sfNumProperties          (),
    _mfFloatValues            (),
    _mfDoubleValues           (),
    _mfIntValues              (),
    _mfUIntValues             (),
    _mfBoolValues             (),
    _mfVec3Values             (),
    _mfVec4Values             (),
    _mfMatrixValues           ()
{
}

MultiPropertyUBOChunkBase::MultiPropertyUBOChunkBase(const MultiPropertyUBOChunkBase &source) :
    Inherited(source),
    _mfTypes                  (source._mfTypes                  ),
    _mfCardinality            (source._mfCardinality            ),
    _mfCardinalities          (source._mfCardinalities          ),
    _sfNumProperties          (source._sfNumProperties          ),
    _mfFloatValues            (source._mfFloatValues            ),
    _mfDoubleValues           (source._mfDoubleValues           ),
    _mfIntValues              (source._mfIntValues              ),
    _mfUIntValues             (source._mfUIntValues             ),
    _mfBoolValues             (source._mfBoolValues             ),
    _mfVec3Values             (source._mfVec3Values             ),
    _mfVec4Values             (source._mfVec4Values             ),
    _mfMatrixValues           (source._mfMatrixValues           )
{
}


/*-------------------------- destructors ----------------------------------*/

MultiPropertyUBOChunkBase::~MultiPropertyUBOChunkBase(void)
{
}


GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleTypes           (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfTypes,
             this->getType().getFieldDesc(TypesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleTypes          (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfTypes,
             this->getType().getFieldDesc(TypesFieldId),
             this));


    editMField(TypesFieldMask, _mfTypes);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleCardinality     (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfCardinality,
             this->getType().getFieldDesc(CardinalityFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleCardinality    (void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfCardinality,
             this->getType().getFieldDesc(CardinalityFieldId),
             this));


    editMField(CardinalityFieldMask, _mfCardinality);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleCardinalities   (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfCardinalities,
             this->getType().getFieldDesc(CardinalitiesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleCardinalities  (void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfCardinalities,
             this->getType().getFieldDesc(CardinalitiesFieldId),
             this));


    editMField(CardinalitiesFieldMask, _mfCardinalities);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleNumProperties   (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfNumProperties,
             this->getType().getFieldDesc(NumPropertiesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleNumProperties  (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfNumProperties,
             this->getType().getFieldDesc(NumPropertiesFieldId),
             this));


    editSField(NumPropertiesFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleFloatValues     (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfFloatValues,
             this->getType().getFieldDesc(FloatValuesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleFloatValues    (void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfFloatValues,
             this->getType().getFieldDesc(FloatValuesFieldId),
             this));


    editMField(FloatValuesFieldMask, _mfFloatValues);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleDoubleValues    (void) const
{
    MFReal64::GetHandlePtr returnValue(
        new  MFReal64::GetHandle(
             &_mfDoubleValues,
             this->getType().getFieldDesc(DoubleValuesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleDoubleValues   (void)
{
    MFReal64::EditHandlePtr returnValue(
        new  MFReal64::EditHandle(
             &_mfDoubleValues,
             this->getType().getFieldDesc(DoubleValuesFieldId),
             this));


    editMField(DoubleValuesFieldMask, _mfDoubleValues);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleIntValues       (void) const
{
    MFInt32::GetHandlePtr returnValue(
        new  MFInt32::GetHandle(
             &_mfIntValues,
             this->getType().getFieldDesc(IntValuesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleIntValues      (void)
{
    MFInt32::EditHandlePtr returnValue(
        new  MFInt32::EditHandle(
             &_mfIntValues,
             this->getType().getFieldDesc(IntValuesFieldId),
             this));


    editMField(IntValuesFieldMask, _mfIntValues);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleUIntValues      (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfUIntValues,
             this->getType().getFieldDesc(UIntValuesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleUIntValues     (void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfUIntValues,
             this->getType().getFieldDesc(UIntValuesFieldId),
             this));


    editMField(UIntValuesFieldMask, _mfUIntValues);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleBoolValues      (void) const
{
    MFBool::GetHandlePtr returnValue(
        new  MFBool::GetHandle(
             &_mfBoolValues,
             this->getType().getFieldDesc(BoolValuesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleBoolValues     (void)
{
    MFBool::EditHandlePtr returnValue(
        new  MFBool::EditHandle(
             &_mfBoolValues,
             this->getType().getFieldDesc(BoolValuesFieldId),
             this));


    editMField(BoolValuesFieldMask, _mfBoolValues);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleVec3Values      (void) const
{
    MFVec3f::GetHandlePtr returnValue(
        new  MFVec3f::GetHandle(
             &_mfVec3Values,
             this->getType().getFieldDesc(Vec3ValuesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleVec3Values     (void)
{
    MFVec3f::EditHandlePtr returnValue(
        new  MFVec3f::EditHandle(
             &_mfVec3Values,
             this->getType().getFieldDesc(Vec3ValuesFieldId),
             this));


    editMField(Vec3ValuesFieldMask, _mfVec3Values);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleVec4Values      (void) const
{
    MFVec4f::GetHandlePtr returnValue(
        new  MFVec4f::GetHandle(
             &_mfVec4Values,
             this->getType().getFieldDesc(Vec4ValuesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleVec4Values     (void)
{
    MFVec4f::EditHandlePtr returnValue(
        new  MFVec4f::EditHandle(
             &_mfVec4Values,
             this->getType().getFieldDesc(Vec4ValuesFieldId),
             this));


    editMField(Vec4ValuesFieldMask, _mfVec4Values);

    return returnValue;
}

GetFieldHandlePtr MultiPropertyUBOChunkBase::getHandleMatrixValues    (void) const
{
    MFMatrix::GetHandlePtr returnValue(
        new  MFMatrix::GetHandle(
             &_mfMatrixValues,
             this->getType().getFieldDesc(MatrixValuesFieldId),
             const_cast<MultiPropertyUBOChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiPropertyUBOChunkBase::editHandleMatrixValues   (void)
{
    MFMatrix::EditHandlePtr returnValue(
        new  MFMatrix::EditHandle(
             &_mfMatrixValues,
             this->getType().getFieldDesc(MatrixValuesFieldId),
             this));


    editMField(MatrixValuesFieldMask, _mfMatrixValues);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void MultiPropertyUBOChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MultiPropertyUBOChunk *pThis = static_cast<MultiPropertyUBOChunk *>(this);

    pThis->execSync(static_cast<MultiPropertyUBOChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MultiPropertyUBOChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MultiPropertyUBOChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MultiPropertyUBOChunk *>(pRefAspect),
                  dynamic_cast<const MultiPropertyUBOChunk *>(this));

    return returnValue;
}
#endif

void MultiPropertyUBOChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfTypes.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfCardinality.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfCardinalities.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfFloatValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfDoubleValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfIntValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfUIntValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfBoolValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVec3Values.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVec4Values.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfMatrixValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
