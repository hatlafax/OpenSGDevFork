/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderStorageBufferObjChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGShaderStorageBufferObjChunkBase.h"
#include "OSGShaderStorageBufferObjChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShaderStorageBufferObjChunk
    See \ref PageSystemShaderStorageBufferObjChunk for a description.

    This chunk wraps the OpenGL shader storage buffer object extension (ARB_shader_storage_buffer_object). 
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var GLenum          ShaderStorageBufferObjChunkBase::_sfGLId
    The OpenGL object id for this shader storage buffer object.
*/

/*! \var GLenum          ShaderStorageBufferObjChunkBase::_sfUsage
    Specifies the expected usage pattern of the data store. The symbolic constant must be 
    GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, 
    GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, 
    GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
*/

/*! \var std::string     ShaderStorageBufferObjChunkBase::_sfBlockName
    The name of the shader storage block.
*/

/*! \var UInt8           ShaderStorageBufferObjChunkBase::_mfFundamentalTypes
    Stores the fundamental type of  a block entry. This can be any of the set {NONE_T, FLOAT_T, DOUBLE_T, INT_T, UINT_T, BOOL_T}.
*/

/*! \var UInt8           ShaderStorageBufferObjChunkBase::_mfMainTypes
    Stores the main type of  a block entry. This can be any of the set {SIMPLE_T, VEC2_T, VEC3_T, VEC4_T, MAT2_T, MAT3_T, MAT4_T, 
    MAT2X3_T, MAT2X4_T, MAT3X4_T, MAT3X2_T, MAT4X2_T, MAT4X3_T, STRUCT_BEGIN_T, STRUCT_END_T}.
*/

/*! \var UInt32          ShaderStorageBufferObjChunkBase::_mfCardinality
    Stores the cardinality of array structure elements.
*/

/*! \var UInt32          ShaderStorageBufferObjChunkBase::_mfIndex
    Stores the index pointer into the value containers.
*/

/*! \var std::string     ShaderStorageBufferObjChunkBase::_mfNames
    Stores the index pointer into the value containers.
*/

/*! \var StringToUInt32Map ShaderStorageBufferObjChunkBase::_sfNameToIndex
    Stores the mapping from names into the index container.
*/

/*! \var Real32          ShaderStorageBufferObjChunkBase::_mfFloatValues
    The float values.
*/

/*! \var Real64          ShaderStorageBufferObjChunkBase::_mfDoubleValues
    The double values.
*/

/*! \var Int32           ShaderStorageBufferObjChunkBase::_mfIntValues
    The int values.
*/

/*! \var UInt32          ShaderStorageBufferObjChunkBase::_mfUIntValues
    The unsigned int values.
*/

/*! \var UInt8           ShaderStorageBufferObjChunkBase::_mfBoolValues
    The bool values.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ShaderStorageBufferObjChunk *, nsOSG>::_type(
    "ShaderStorageBufferObjChunkPtr", 
    "ShaderStorageBufferObjBaseChunkPtr", 
    ShaderStorageBufferObjChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ShaderStorageBufferObjChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ShaderStorageBufferObjChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ShaderStorageBufferObjChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ShaderStorageBufferObjChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "GLId",
        "The OpenGL object id for this shader storage buffer object.\n",
        GLIdFieldId, GLIdFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleGLId),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleGLId));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "usage",
        "Specifies the expected usage pattern of the data store. The symbolic constant must be \n"
        "GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, \n"
        "GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, \n"
        "GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.\n",
        UsageFieldId, UsageFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleUsage),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleUsage));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "blockName",
        "The name of the shader storage block.\n",
        BlockNameFieldId, BlockNameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleBlockName),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleBlockName));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "fundamentalTypes",
        "Stores the fundamental type of  a block entry. This can be any of the set {NONE_T, FLOAT_T, DOUBLE_T, INT_T, UINT_T, BOOL_T}.\n",
        FundamentalTypesFieldId, FundamentalTypesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleFundamentalTypes),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleFundamentalTypes));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "mainTypes",
        "Stores the main type of  a block entry. This can be any of the set {SIMPLE_T, VEC2_T, VEC3_T, VEC4_T, MAT2_T, MAT3_T, MAT4_T, \n"
        "MAT2X3_T, MAT2X4_T, MAT3X4_T, MAT3X2_T, MAT4X2_T, MAT4X3_T, STRUCT_BEGIN_T, STRUCT_END_T}.\n",
        MainTypesFieldId, MainTypesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleMainTypes),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleMainTypes));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "cardinality",
        "Stores the cardinality of array structure elements.\n",
        CardinalityFieldId, CardinalityFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleCardinality),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleCardinality));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "index",
        "Stores the index pointer into the value containers.\n",
        IndexFieldId, IndexFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleIndex),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleIndex));

    oType.addInitialDesc(pDesc);

    pDesc = new MFString::Description(
        MFString::getClassType(),
        "names",
        "Stores the index pointer into the value containers.\n",
        NamesFieldId, NamesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleNames),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleNames));

    oType.addInitialDesc(pDesc);

    pDesc = new SFStringToUInt32Map::Description(
        SFStringToUInt32Map::getClassType(),
        "nameToIndex",
        "Stores the mapping from names into the index container.\n",
        NameToIndexFieldId, NameToIndexFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleNameToIndex),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleNameToIndex));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "floatValues",
        "The float values.\n",
        FloatValuesFieldId, FloatValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleFloatValues),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleFloatValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal64::Description(
        MFReal64::getClassType(),
        "doubleValues",
        "The double values.\n",
        DoubleValuesFieldId, DoubleValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleDoubleValues),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleDoubleValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFInt32::Description(
        MFInt32::getClassType(),
        "intValues",
        "The int values.\n",
        IntValuesFieldId, IntValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleIntValues),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleIntValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "uIntValues",
        "The unsigned int values.\n",
        UIntValuesFieldId, UIntValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleUIntValues),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleUIntValues));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "boolValues",
        "The bool values.\n",
        BoolValuesFieldId, BoolValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShaderStorageBufferObjChunk::editHandleBoolValues),
        static_cast<FieldGetMethodSig >(&ShaderStorageBufferObjChunk::getHandleBoolValues));

    oType.addInitialDesc(pDesc);
}


ShaderStorageBufferObjChunkBase::TypeObject ShaderStorageBufferObjChunkBase::_type(
    ShaderStorageBufferObjChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ShaderStorageBufferObjChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ShaderStorageBufferObjChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&ShaderStorageBufferObjChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ShaderStorageBufferObjChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"ShaderStorageBufferObjChunk\"\n"
    "    parent=\"ShaderStorageBufferObjBaseChunk\"\n"
    "    library=\"System\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    docGroupBase=\"GrpSystemState\"\n"
    "    >\n"
    "    See \\ref PageSystemShaderStorageBufferObjChunk for a description.\n"
    "\n"
    "    This chunk wraps the OpenGL shader storage buffer object extension (ARB_shader_storage_buffer_object). \n"
    "\n"
    "    <Field\n"
    "        name=\"GLId\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "            The OpenGL object id for this shader storage buffer object.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"usage\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"GL_STATIC_DRAW\"\n"
    "        potential_values=\"GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, GL_DYNAMIC_COPY\"\n"
    "\t>\n"
    "                Specifies the expected usage pattern of the data store. The symbolic constant must be \n"
    "                 GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, \n"
    "                 GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, \n"
    "                 GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"blockName\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "\t>\n"
    "                The name of the shader storage block.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"fundamentalTypes\"\n"
    "        type=\"UInt8\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                Stores the fundamental type of  a block entry. This can be any of the set {NONE_T, FLOAT_T, DOUBLE_T, INT_T, UINT_T, BOOL_T}.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"mainTypes\"\n"
    "        type=\"UInt8\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                Stores the main type of  a block entry. This can be any of the set {SIMPLE_T, VEC2_T, VEC3_T, VEC4_T, MAT2_T, MAT3_T, MAT4_T, \n"
    "                MAT2X3_T, MAT2X4_T, MAT3X4_T, MAT3X2_T, MAT4X2_T, MAT4X3_T, STRUCT_BEGIN_T, STRUCT_END_T}.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"cardinality\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                Stores the cardinality of array structure elements.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"index\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                Stores the index pointer into the value containers.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"names\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                Stores the index pointer into the value containers.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"nameToIndex\"\n"
    "        type=\"StringToUInt32Map\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                Stores the mapping from names into the index container.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"floatValues\"\n"
    "        type=\"Real32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                The float values.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"doubleValues\"\n"
    "        type=\"Real64\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                The double values.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"intValues\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                The int values.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"uIntValues\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                The unsigned int values.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"boolValues\"\n"
    "        type=\"UInt8\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"protected\"\n"
    "\t>\n"
    "                The bool values.\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "See \\ref PageSystemShaderStorageBufferObjChunk for a description.\n"
    "\n"
    "This chunk wraps the OpenGL shader storage buffer object extension (ARB_shader_storage_buffer_object). \n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShaderStorageBufferObjChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShaderStorageBufferObjChunkBase::getType(void) const
{
    return _type;
}

UInt32 ShaderStorageBufferObjChunkBase::getContainerSize(void) const
{
    return sizeof(ShaderStorageBufferObjChunk);
}

/*------------------------- decorator get ------------------------------*/


SFGLenum *ShaderStorageBufferObjChunkBase::editSFGLId(void)
{
    editSField(GLIdFieldMask);

    return &_sfGLId;
}

const SFGLenum *ShaderStorageBufferObjChunkBase::getSFGLId(void) const
{
    return &_sfGLId;
}


SFGLenum *ShaderStorageBufferObjChunkBase::editSFUsage(void)
{
    editSField(UsageFieldMask);

    return &_sfUsage;
}

const SFGLenum *ShaderStorageBufferObjChunkBase::getSFUsage(void) const
{
    return &_sfUsage;
}


SFString *ShaderStorageBufferObjChunkBase::editSFBlockName(void)
{
    editSField(BlockNameFieldMask);

    return &_sfBlockName;
}

const SFString *ShaderStorageBufferObjChunkBase::getSFBlockName(void) const
{
    return &_sfBlockName;
}


MFUInt8 *ShaderStorageBufferObjChunkBase::editMFFundamentalTypes(void)
{
    editMField(FundamentalTypesFieldMask, _mfFundamentalTypes);

    return &_mfFundamentalTypes;
}

const MFUInt8 *ShaderStorageBufferObjChunkBase::getMFFundamentalTypes(void) const
{
    return &_mfFundamentalTypes;
}


MFUInt8 *ShaderStorageBufferObjChunkBase::editMFMainTypes(void)
{
    editMField(MainTypesFieldMask, _mfMainTypes);

    return &_mfMainTypes;
}

const MFUInt8 *ShaderStorageBufferObjChunkBase::getMFMainTypes(void) const
{
    return &_mfMainTypes;
}


MFUInt32 *ShaderStorageBufferObjChunkBase::editMFCardinality(void)
{
    editMField(CardinalityFieldMask, _mfCardinality);

    return &_mfCardinality;
}

const MFUInt32 *ShaderStorageBufferObjChunkBase::getMFCardinality(void) const
{
    return &_mfCardinality;
}


MFUInt32 *ShaderStorageBufferObjChunkBase::editMFIndex(void)
{
    editMField(IndexFieldMask, _mfIndex);

    return &_mfIndex;
}

const MFUInt32 *ShaderStorageBufferObjChunkBase::getMFIndex(void) const
{
    return &_mfIndex;
}


MFString *ShaderStorageBufferObjChunkBase::editMFNames(void)
{
    editMField(NamesFieldMask, _mfNames);

    return &_mfNames;
}

const MFString *ShaderStorageBufferObjChunkBase::getMFNames(void) const
{
    return &_mfNames;
}


SFStringToUInt32Map *ShaderStorageBufferObjChunkBase::editSFNameToIndex(void)
{
    editSField(NameToIndexFieldMask);

    return &_sfNameToIndex;
}

const SFStringToUInt32Map *ShaderStorageBufferObjChunkBase::getSFNameToIndex(void) const
{
    return &_sfNameToIndex;
}


MFReal32 *ShaderStorageBufferObjChunkBase::editMFFloatValues(void)
{
    editMField(FloatValuesFieldMask, _mfFloatValues);

    return &_mfFloatValues;
}

const MFReal32 *ShaderStorageBufferObjChunkBase::getMFFloatValues(void) const
{
    return &_mfFloatValues;
}


MFReal64 *ShaderStorageBufferObjChunkBase::editMFDoubleValues(void)
{
    editMField(DoubleValuesFieldMask, _mfDoubleValues);

    return &_mfDoubleValues;
}

const MFReal64 *ShaderStorageBufferObjChunkBase::getMFDoubleValues(void) const
{
    return &_mfDoubleValues;
}


MFInt32 *ShaderStorageBufferObjChunkBase::editMFIntValues(void)
{
    editMField(IntValuesFieldMask, _mfIntValues);

    return &_mfIntValues;
}

const MFInt32 *ShaderStorageBufferObjChunkBase::getMFIntValues(void) const
{
    return &_mfIntValues;
}


MFUInt32 *ShaderStorageBufferObjChunkBase::editMFUIntValues(void)
{
    editMField(UIntValuesFieldMask, _mfUIntValues);

    return &_mfUIntValues;
}

const MFUInt32 *ShaderStorageBufferObjChunkBase::getMFUIntValues(void) const
{
    return &_mfUIntValues;
}


MFUInt8 *ShaderStorageBufferObjChunkBase::editMFBoolValues(void)
{
    editMField(BoolValuesFieldMask, _mfBoolValues);

    return &_mfBoolValues;
}

const MFUInt8 *ShaderStorageBufferObjChunkBase::getMFBoolValues(void) const
{
    return &_mfBoolValues;
}






/*------------------------------ access -----------------------------------*/

SizeT ShaderStorageBufferObjChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }
    if(FieldBits::NoField != (UsageFieldMask & whichField))
    {
        returnValue += _sfUsage.getBinSize();
    }
    if(FieldBits::NoField != (BlockNameFieldMask & whichField))
    {
        returnValue += _sfBlockName.getBinSize();
    }
    if(FieldBits::NoField != (FundamentalTypesFieldMask & whichField))
    {
        returnValue += _mfFundamentalTypes.getBinSize();
    }
    if(FieldBits::NoField != (MainTypesFieldMask & whichField))
    {
        returnValue += _mfMainTypes.getBinSize();
    }
    if(FieldBits::NoField != (CardinalityFieldMask & whichField))
    {
        returnValue += _mfCardinality.getBinSize();
    }
    if(FieldBits::NoField != (IndexFieldMask & whichField))
    {
        returnValue += _mfIndex.getBinSize();
    }
    if(FieldBits::NoField != (NamesFieldMask & whichField))
    {
        returnValue += _mfNames.getBinSize();
    }
    if(FieldBits::NoField != (NameToIndexFieldMask & whichField))
    {
        returnValue += _sfNameToIndex.getBinSize();
    }
    if(FieldBits::NoField != (FloatValuesFieldMask & whichField))
    {
        returnValue += _mfFloatValues.getBinSize();
    }
    if(FieldBits::NoField != (DoubleValuesFieldMask & whichField))
    {
        returnValue += _mfDoubleValues.getBinSize();
    }
    if(FieldBits::NoField != (IntValuesFieldMask & whichField))
    {
        returnValue += _mfIntValues.getBinSize();
    }
    if(FieldBits::NoField != (UIntValuesFieldMask & whichField))
    {
        returnValue += _mfUIntValues.getBinSize();
    }
    if(FieldBits::NoField != (BoolValuesFieldMask & whichField))
    {
        returnValue += _mfBoolValues.getBinSize();
    }

    return returnValue;
}

void ShaderStorageBufferObjChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UsageFieldMask & whichField))
    {
        _sfUsage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlockNameFieldMask & whichField))
    {
        _sfBlockName.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FundamentalTypesFieldMask & whichField))
    {
        _mfFundamentalTypes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MainTypesFieldMask & whichField))
    {
        _mfMainTypes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CardinalityFieldMask & whichField))
    {
        _mfCardinality.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IndexFieldMask & whichField))
    {
        _mfIndex.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NamesFieldMask & whichField))
    {
        _mfNames.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NameToIndexFieldMask & whichField))
    {
        _sfNameToIndex.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FloatValuesFieldMask & whichField))
    {
        _mfFloatValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DoubleValuesFieldMask & whichField))
    {
        _mfDoubleValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IntValuesFieldMask & whichField))
    {
        _mfIntValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UIntValuesFieldMask & whichField))
    {
        _mfUIntValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BoolValuesFieldMask & whichField))
    {
        _mfBoolValues.copyToBin(pMem);
    }
}

void ShaderStorageBufferObjChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        editSField(GLIdFieldMask);
        _sfGLId.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UsageFieldMask & whichField))
    {
        editSField(UsageFieldMask);
        _sfUsage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlockNameFieldMask & whichField))
    {
        editSField(BlockNameFieldMask);
        _sfBlockName.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FundamentalTypesFieldMask & whichField))
    {
        editMField(FundamentalTypesFieldMask, _mfFundamentalTypes);
        _mfFundamentalTypes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MainTypesFieldMask & whichField))
    {
        editMField(MainTypesFieldMask, _mfMainTypes);
        _mfMainTypes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CardinalityFieldMask & whichField))
    {
        editMField(CardinalityFieldMask, _mfCardinality);
        _mfCardinality.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IndexFieldMask & whichField))
    {
        editMField(IndexFieldMask, _mfIndex);
        _mfIndex.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NamesFieldMask & whichField))
    {
        editMField(NamesFieldMask, _mfNames);
        _mfNames.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NameToIndexFieldMask & whichField))
    {
        editSField(NameToIndexFieldMask);
        _sfNameToIndex.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FloatValuesFieldMask & whichField))
    {
        editMField(FloatValuesFieldMask, _mfFloatValues);
        _mfFloatValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DoubleValuesFieldMask & whichField))
    {
        editMField(DoubleValuesFieldMask, _mfDoubleValues);
        _mfDoubleValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IntValuesFieldMask & whichField))
    {
        editMField(IntValuesFieldMask, _mfIntValues);
        _mfIntValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UIntValuesFieldMask & whichField))
    {
        editMField(UIntValuesFieldMask, _mfUIntValues);
        _mfUIntValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BoolValuesFieldMask & whichField))
    {
        editMField(BoolValuesFieldMask, _mfBoolValues);
        _mfBoolValues.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ShaderStorageBufferObjChunkTransitPtr ShaderStorageBufferObjChunkBase::createLocal(BitVector bFlags)
{
    ShaderStorageBufferObjChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ShaderStorageBufferObjChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ShaderStorageBufferObjChunkTransitPtr ShaderStorageBufferObjChunkBase::createDependent(BitVector bFlags)
{
    ShaderStorageBufferObjChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ShaderStorageBufferObjChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ShaderStorageBufferObjChunkTransitPtr ShaderStorageBufferObjChunkBase::create(void)
{
    ShaderStorageBufferObjChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ShaderStorageBufferObjChunk>(tmpPtr);
    }

    return fc;
}

ShaderStorageBufferObjChunk *ShaderStorageBufferObjChunkBase::createEmptyLocal(BitVector bFlags)
{
    ShaderStorageBufferObjChunk *returnValue;

    newPtr<ShaderStorageBufferObjChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ShaderStorageBufferObjChunk *ShaderStorageBufferObjChunkBase::createEmpty(void)
{
    ShaderStorageBufferObjChunk *returnValue;

    newPtr<ShaderStorageBufferObjChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ShaderStorageBufferObjChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ShaderStorageBufferObjChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderStorageBufferObjChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderStorageBufferObjChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ShaderStorageBufferObjChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ShaderStorageBufferObjChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ShaderStorageBufferObjChunkBase::shallowCopy(void) const
{
    ShaderStorageBufferObjChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ShaderStorageBufferObjChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ShaderStorageBufferObjChunkBase::ShaderStorageBufferObjChunkBase(void) :
    Inherited(),
    _sfGLId                   (GLenum(0)),
    _sfUsage                  (GLenum(GL_STATIC_DRAW)),
    _sfBlockName              (),
    _mfFundamentalTypes       (),
    _mfMainTypes              (),
    _mfCardinality            (),
    _mfIndex                  (),
    _mfNames                  (),
    _sfNameToIndex            (),
    _mfFloatValues            (),
    _mfDoubleValues           (),
    _mfIntValues              (),
    _mfUIntValues             (),
    _mfBoolValues             ()
{
}

ShaderStorageBufferObjChunkBase::ShaderStorageBufferObjChunkBase(const ShaderStorageBufferObjChunkBase &source) :
    Inherited(source),
    _sfGLId                   (source._sfGLId                   ),
    _sfUsage                  (source._sfUsage                  ),
    _sfBlockName              (source._sfBlockName              ),
    _mfFundamentalTypes       (source._mfFundamentalTypes       ),
    _mfMainTypes              (source._mfMainTypes              ),
    _mfCardinality            (source._mfCardinality            ),
    _mfIndex                  (source._mfIndex                  ),
    _mfNames                  (source._mfNames                  ),
    _sfNameToIndex            (source._sfNameToIndex            ),
    _mfFloatValues            (source._mfFloatValues            ),
    _mfDoubleValues           (source._mfDoubleValues           ),
    _mfIntValues              (source._mfIntValues              ),
    _mfUIntValues             (source._mfUIntValues             ),
    _mfBoolValues             (source._mfBoolValues             )
{
}


/*-------------------------- destructors ----------------------------------*/

ShaderStorageBufferObjChunkBase::~ShaderStorageBufferObjChunkBase(void)
{
}


GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleGLId            (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfGLId,
             this->getType().getFieldDesc(GLIdFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleGLId           (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfGLId,
             this->getType().getFieldDesc(GLIdFieldId),
             this));


    editSField(GLIdFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleUsage           (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfUsage,
             this->getType().getFieldDesc(UsageFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleUsage          (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfUsage,
             this->getType().getFieldDesc(UsageFieldId),
             this));


    editSField(UsageFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleBlockName       (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfBlockName,
             this->getType().getFieldDesc(BlockNameFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleBlockName      (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfBlockName,
             this->getType().getFieldDesc(BlockNameFieldId),
             this));


    editSField(BlockNameFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleFundamentalTypes (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfFundamentalTypes,
             this->getType().getFieldDesc(FundamentalTypesFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleFundamentalTypes(void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfFundamentalTypes,
             this->getType().getFieldDesc(FundamentalTypesFieldId),
             this));


    editMField(FundamentalTypesFieldMask, _mfFundamentalTypes);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleMainTypes       (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfMainTypes,
             this->getType().getFieldDesc(MainTypesFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleMainTypes      (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfMainTypes,
             this->getType().getFieldDesc(MainTypesFieldId),
             this));


    editMField(MainTypesFieldMask, _mfMainTypes);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleCardinality     (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfCardinality,
             this->getType().getFieldDesc(CardinalityFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleCardinality    (void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfCardinality,
             this->getType().getFieldDesc(CardinalityFieldId),
             this));


    editMField(CardinalityFieldMask, _mfCardinality);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleIndex           (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfIndex,
             this->getType().getFieldDesc(IndexFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleIndex          (void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfIndex,
             this->getType().getFieldDesc(IndexFieldId),
             this));


    editMField(IndexFieldMask, _mfIndex);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleNames           (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfNames,
             this->getType().getFieldDesc(NamesFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleNames          (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfNames,
             this->getType().getFieldDesc(NamesFieldId),
             this));


    editMField(NamesFieldMask, _mfNames);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleNameToIndex     (void) const
{
    SFStringToUInt32Map::GetHandlePtr returnValue(
        new  SFStringToUInt32Map::GetHandle(
             &_sfNameToIndex,
             this->getType().getFieldDesc(NameToIndexFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleNameToIndex    (void)
{
    SFStringToUInt32Map::EditHandlePtr returnValue(
        new  SFStringToUInt32Map::EditHandle(
             &_sfNameToIndex,
             this->getType().getFieldDesc(NameToIndexFieldId),
             this));


    editSField(NameToIndexFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleFloatValues     (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfFloatValues,
             this->getType().getFieldDesc(FloatValuesFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleFloatValues    (void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfFloatValues,
             this->getType().getFieldDesc(FloatValuesFieldId),
             this));


    editMField(FloatValuesFieldMask, _mfFloatValues);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleDoubleValues    (void) const
{
    MFReal64::GetHandlePtr returnValue(
        new  MFReal64::GetHandle(
             &_mfDoubleValues,
             this->getType().getFieldDesc(DoubleValuesFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleDoubleValues   (void)
{
    MFReal64::EditHandlePtr returnValue(
        new  MFReal64::EditHandle(
             &_mfDoubleValues,
             this->getType().getFieldDesc(DoubleValuesFieldId),
             this));


    editMField(DoubleValuesFieldMask, _mfDoubleValues);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleIntValues       (void) const
{
    MFInt32::GetHandlePtr returnValue(
        new  MFInt32::GetHandle(
             &_mfIntValues,
             this->getType().getFieldDesc(IntValuesFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleIntValues      (void)
{
    MFInt32::EditHandlePtr returnValue(
        new  MFInt32::EditHandle(
             &_mfIntValues,
             this->getType().getFieldDesc(IntValuesFieldId),
             this));


    editMField(IntValuesFieldMask, _mfIntValues);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleUIntValues      (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfUIntValues,
             this->getType().getFieldDesc(UIntValuesFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleUIntValues     (void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfUIntValues,
             this->getType().getFieldDesc(UIntValuesFieldId),
             this));


    editMField(UIntValuesFieldMask, _mfUIntValues);

    return returnValue;
}

GetFieldHandlePtr ShaderStorageBufferObjChunkBase::getHandleBoolValues      (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfBoolValues,
             this->getType().getFieldDesc(BoolValuesFieldId),
             const_cast<ShaderStorageBufferObjChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShaderStorageBufferObjChunkBase::editHandleBoolValues     (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfBoolValues,
             this->getType().getFieldDesc(BoolValuesFieldId),
             this));


    editMField(BoolValuesFieldMask, _mfBoolValues);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ShaderStorageBufferObjChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShaderStorageBufferObjChunk *pThis = static_cast<ShaderStorageBufferObjChunk *>(this);

    pThis->execSync(static_cast<ShaderStorageBufferObjChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ShaderStorageBufferObjChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ShaderStorageBufferObjChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ShaderStorageBufferObjChunk *>(pRefAspect),
                  dynamic_cast<const ShaderStorageBufferObjChunk *>(this));

    return returnValue;
}
#endif

void ShaderStorageBufferObjChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfFundamentalTypes.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfMainTypes.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfCardinality.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfIndex.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfNames.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfFloatValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfDoubleValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfIntValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfUIntValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfBoolValues.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
