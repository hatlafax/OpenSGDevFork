/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RegisterCombinersChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGRegisterCombinersChunkBase.h"
#include "OSGRegisterCombinersChunk.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::RegisterCombinersChunk
    See \ref PageSystemRegisterCombinersChunk for a description.

    Try to avoid using this chunk, as it is very non-portable. Using a shader 
    instead is recommend, and much easier to do.

    This chunk wraps nVidia's register combiners. The
    OSG::RegisterCombinersChunk::setCombinerRGB and
    OSG::RegisterCombinersChunk::setCombinerAlpha convenience functions
    should be used,
    which set up all the parameters for a single combiner's RGB or alpha part.
    OSG::RegisterCombinersChunk::setFinalCombiner sets all parameters for the
    final combiner. The constants are set by
    OSG::RegisterCombinersChunk::setConstantColors(Color4f &color0, Color4f
    &color1) for the gloabl constants and 
    OSG::RegisterCombinersChunk::setConstantColors(UInt16 which,  
    Color4f &color0,
    Color4f &color1) for the per-combiner constants (if supported). To reset a
    combiner one or all of the combiners use
    OSG::RegisterCombinersChunk::clearCombiners or 
    OSG::RegisterCombinersChunk::clearCombiner. 

    Don't use the direct field access to set the register combiner's parameter
    unlesss you really have to, as the internal representation is a bit
    non-intuitive.

    \ext To reduce the number of fields there isn't a field for every parameter,
    instead they are kept in blocks of three in the fields. Please refer to the
    source code for details.
    \endext
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Color4f         RegisterCombinersChunkBase::_sfColor0
    
*/

/*! \var Color4f         RegisterCombinersChunkBase::_sfColor1
    
*/

/*! \var bool            RegisterCombinersChunkBase::_sfColorSumClamp
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableArgb
    input,mapping,component Usage triples for variable A, RGB part
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableBrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableCrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableDrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableAalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableBalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableCalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableDalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputABrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputCDrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputSumrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfScalergb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfBiasrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputABalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputCDalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputSumalpha
    
*/

/*! \var UInt8           RegisterCombinersChunkBase::_mfDotABrgb
    
*/

/*! \var UInt8           RegisterCombinersChunkBase::_mfDotCDrgb
    
*/

/*! \var UInt8           RegisterCombinersChunkBase::_mfMuxSumrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfScalealpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfBiasalpha
    
*/

/*! \var UInt8           RegisterCombinersChunkBase::_mfMuxSumalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableE
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableF
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableG
    
*/

/*! \var Color4f         RegisterCombinersChunkBase::_mfCombinerColor0
    
*/

/*! \var Color4f         RegisterCombinersChunkBase::_mfCombinerColor1
    
*/

/*! \var UInt8           RegisterCombinersChunkBase::_sfPerStageConstants
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<RegisterCombinersChunk *, nsOSG>::_type(
    "RegisterCombinersChunkPtr", 
    "StateChunkPtr", 
    RegisterCombinersChunk::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(RegisterCombinersChunk *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           RegisterCombinersChunk *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           RegisterCombinersChunk *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void RegisterCombinersChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "color0",
        "",
        Color0FieldId, Color0FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleColor0),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleColor0));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "color1",
        "",
        Color1FieldId, Color1FieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleColor1),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleColor1));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "colorSumClamp",
        "",
        ColorSumClampFieldId, ColorSumClampFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleColorSumClamp),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleColorSumClamp));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableArgb",
        "input,mapping,component Usage triples for variable A, RGB part\n",
        VariableArgbFieldId, VariableArgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableArgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableArgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableBrgb",
        "",
        VariableBrgbFieldId, VariableBrgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableBrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableBrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableCrgb",
        "",
        VariableCrgbFieldId, VariableCrgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableCrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableCrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableDrgb",
        "",
        VariableDrgbFieldId, VariableDrgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableDrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableDrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableAalpha",
        "",
        VariableAalphaFieldId, VariableAalphaFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableAalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableAalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableBalpha",
        "",
        VariableBalphaFieldId, VariableBalphaFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableBalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableBalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableCalpha",
        "",
        VariableCalphaFieldId, VariableCalphaFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableCalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableCalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableDalpha",
        "",
        VariableDalphaFieldId, VariableDalphaFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableDalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableDalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputABrgb",
        "",
        OutputABrgbFieldId, OutputABrgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleOutputABrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleOutputABrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputCDrgb",
        "",
        OutputCDrgbFieldId, OutputCDrgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleOutputCDrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleOutputCDrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputSumrgb",
        "",
        OutputSumrgbFieldId, OutputSumrgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleOutputSumrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleOutputSumrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "scalergb",
        "",
        ScalergbFieldId, ScalergbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleScalergb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleScalergb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "biasrgb",
        "",
        BiasrgbFieldId, BiasrgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleBiasrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleBiasrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputABalpha",
        "",
        OutputABalphaFieldId, OutputABalphaFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleOutputABalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleOutputABalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputCDalpha",
        "",
        OutputCDalphaFieldId, OutputCDalphaFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleOutputCDalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleOutputCDalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputSumalpha",
        "",
        OutputSumalphaFieldId, OutputSumalphaFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleOutputSumalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleOutputSumalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "dotABrgb",
        "",
        DotABrgbFieldId, DotABrgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleDotABrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleDotABrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "dotCDrgb",
        "",
        DotCDrgbFieldId, DotCDrgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleDotCDrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleDotCDrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "muxSumrgb",
        "",
        MuxSumrgbFieldId, MuxSumrgbFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleMuxSumrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleMuxSumrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "scalealpha",
        "",
        ScalealphaFieldId, ScalealphaFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleScalealpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleScalealpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "biasalpha",
        "",
        BiasalphaFieldId, BiasalphaFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleBiasalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleBiasalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "muxSumalpha",
        "",
        MuxSumalphaFieldId, MuxSumalphaFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleMuxSumalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleMuxSumalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableE",
        "",
        VariableEFieldId, VariableEFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableE),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableE));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableF",
        "",
        VariableFFieldId, VariableFFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableF),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableF));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableG",
        "",
        VariableGFieldId, VariableGFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleVariableG),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleVariableG));

    oType.addInitialDesc(pDesc);

    pDesc = new MFColor4f::Description(
        MFColor4f::getClassType(),
        "combinerColor0",
        "",
        CombinerColor0FieldId, CombinerColor0FieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleCombinerColor0),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleCombinerColor0));

    oType.addInitialDesc(pDesc);

    pDesc = new MFColor4f::Description(
        MFColor4f::getClassType(),
        "combinerColor1",
        "",
        CombinerColor1FieldId, CombinerColor1FieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandleCombinerColor1),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandleCombinerColor1));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "perStageConstants",
        "",
        PerStageConstantsFieldId, PerStageConstantsFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunk::editHandlePerStageConstants),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunk::getHandlePerStageConstants));

    oType.addInitialDesc(pDesc);
}


RegisterCombinersChunkBase::TypeObject RegisterCombinersChunkBase::_type(
    RegisterCombinersChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&RegisterCombinersChunkBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&RegisterCombinersChunk::initMethod),
    reinterpret_cast<ExitContainerF>(&RegisterCombinersChunk::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&RegisterCombinersChunk::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"RegisterCombinersChunk\"\n"
    "   parent=\"StateChunk\"\n"
    "   library=\"State\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   docGroupBase=\"GrpStateNVidia\"\n"
    "   ><![CDATA[\n"
    "See \\ref PageSystemRegisterCombinersChunk for a description.\n"
    "\n"
    "Try to avoid using this chunk, as it is very non-portable. Using a shader \n"
    "instead is recommend, and much easier to do.\n"
    "\n"
    "This chunk wraps nVidia's register combiners. The\n"
    "OSG::RegisterCombinersChunk::setCombinerRGB and\n"
    "OSG::RegisterCombinersChunk::setCombinerAlpha convenience functions\n"
    "should be used,\n"
    "which set up all the parameters for a single combiner's RGB or alpha part.\n"
    "OSG::RegisterCombinersChunk::setFinalCombiner sets all parameters for the\n"
    "final combiner. The constants are set by\n"
    "OSG::RegisterCombinersChunk::setConstantColors(Color4f &color0, Color4f\n"
    "&color1) for the gloabl constants and \n"
    "OSG::RegisterCombinersChunk::setConstantColors(UInt16 which,  \n"
    "Color4f &color0,\n"
    "Color4f &color1) for the per-combiner constants (if supported). To reset a\n"
    "combiner one or all of the combiners use\n"
    "OSG::RegisterCombinersChunk::clearCombiners or \n"
    "OSG::RegisterCombinersChunk::clearCombiner. \n"
    "\n"
    "Don't use the direct field access to set the register combiner's parameter\n"
    "unlesss you really have to, as the internal representation is a bit\n"
    "non-intuitive.\n"
    "\n"
    "\\ext To reduce the number of fields there isn't a field for every parameter,\n"
    "instead they are kept in blocks of three in the fields. Please refer to the\n"
    "source code for details.\n"
    "\\endext]]>\n"
    "  <Field\n"
    "\t name=\"color0\"\n"
    "\t type=\"Color4f\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"color1\"\n"
    "\t type=\"Color4f\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"colorSumClamp\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableArgb\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tinput,mapping,component Usage triples for variable A, RGB part\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableBrgb\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableCrgb\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableDrgb\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableAalpha\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableBalpha\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableCalpha\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableDalpha\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"outputABrgb\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"outputCDrgb\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"outputSumrgb\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"scalergb\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"biasrgb\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"outputABalpha\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"outputCDalpha\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"outputSumalpha\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"dotABrgb\"\n"
    "\t type=\"UInt8\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"dotCDrgb\"\n"
    "\t type=\"UInt8\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"muxSumrgb\"\n"
    "\t type=\"UInt8\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"scalealpha\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"biasalpha\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"muxSumalpha\"\n"
    "\t type=\"UInt8\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableE\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableF\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"variableG\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"combinerColor0\"\n"
    "\t type=\"Color4f\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"combinerColor1\"\n"
    "\t type=\"Color4f\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"perStageConstants\"\n"
    "\t type=\"UInt8\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "See \\ref PageSystemRegisterCombinersChunk for a description.\n"
    "\n"
    "Try to avoid using this chunk, as it is very non-portable. Using a shader \n"
    "instead is recommend, and much easier to do.\n"
    "\n"
    "This chunk wraps nVidia's register combiners. The\n"
    "OSG::RegisterCombinersChunk::setCombinerRGB and\n"
    "OSG::RegisterCombinersChunk::setCombinerAlpha convenience functions\n"
    "should be used,\n"
    "which set up all the parameters for a single combiner's RGB or alpha part.\n"
    "OSG::RegisterCombinersChunk::setFinalCombiner sets all parameters for the\n"
    "final combiner. The constants are set by\n"
    "OSG::RegisterCombinersChunk::setConstantColors(Color4f &color0, Color4f\n"
    "&color1) for the gloabl constants and \n"
    "OSG::RegisterCombinersChunk::setConstantColors(UInt16 which,  \n"
    "Color4f &color0,\n"
    "Color4f &color1) for the per-combiner constants (if supported). To reset a\n"
    "combiner one or all of the combiners use\n"
    "OSG::RegisterCombinersChunk::clearCombiners or \n"
    "OSG::RegisterCombinersChunk::clearCombiner. \n"
    "\n"
    "Don't use the direct field access to set the register combiner's parameter\n"
    "unlesss you really have to, as the internal representation is a bit\n"
    "non-intuitive.\n"
    "\n"
    "\\ext To reduce the number of fields there isn't a field for every parameter,\n"
    "instead they are kept in blocks of three in the fields. Please refer to the\n"
    "source code for details.\n"
    "\\endext\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &RegisterCombinersChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &RegisterCombinersChunkBase::getType(void) const
{
    return _type;
}

UInt32 RegisterCombinersChunkBase::getContainerSize(void) const
{
    return sizeof(RegisterCombinersChunk);
}

/*------------------------- decorator get ------------------------------*/


SFColor4f *RegisterCombinersChunkBase::editSFColor0(void)
{
    editSField(Color0FieldMask);

    return &_sfColor0;
}

const SFColor4f *RegisterCombinersChunkBase::getSFColor0(void) const
{
    return &_sfColor0;
}


SFColor4f *RegisterCombinersChunkBase::editSFColor1(void)
{
    editSField(Color1FieldMask);

    return &_sfColor1;
}

const SFColor4f *RegisterCombinersChunkBase::getSFColor1(void) const
{
    return &_sfColor1;
}


SFBool *RegisterCombinersChunkBase::editSFColorSumClamp(void)
{
    editSField(ColorSumClampFieldMask);

    return &_sfColorSumClamp;
}

const SFBool *RegisterCombinersChunkBase::getSFColorSumClamp(void) const
{
    return &_sfColorSumClamp;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableArgb(void)
{
    editMField(VariableArgbFieldMask, _mfVariableArgb);

    return &_mfVariableArgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableArgb(void) const
{
    return &_mfVariableArgb;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableBrgb(void)
{
    editMField(VariableBrgbFieldMask, _mfVariableBrgb);

    return &_mfVariableBrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableBrgb(void) const
{
    return &_mfVariableBrgb;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableCrgb(void)
{
    editMField(VariableCrgbFieldMask, _mfVariableCrgb);

    return &_mfVariableCrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableCrgb(void) const
{
    return &_mfVariableCrgb;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableDrgb(void)
{
    editMField(VariableDrgbFieldMask, _mfVariableDrgb);

    return &_mfVariableDrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableDrgb(void) const
{
    return &_mfVariableDrgb;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableAalpha(void)
{
    editMField(VariableAalphaFieldMask, _mfVariableAalpha);

    return &_mfVariableAalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableAalpha(void) const
{
    return &_mfVariableAalpha;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableBalpha(void)
{
    editMField(VariableBalphaFieldMask, _mfVariableBalpha);

    return &_mfVariableBalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableBalpha(void) const
{
    return &_mfVariableBalpha;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableCalpha(void)
{
    editMField(VariableCalphaFieldMask, _mfVariableCalpha);

    return &_mfVariableCalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableCalpha(void) const
{
    return &_mfVariableCalpha;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableDalpha(void)
{
    editMField(VariableDalphaFieldMask, _mfVariableDalpha);

    return &_mfVariableDalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableDalpha(void) const
{
    return &_mfVariableDalpha;
}


MFGLenum *RegisterCombinersChunkBase::editMFOutputABrgb(void)
{
    editMField(OutputABrgbFieldMask, _mfOutputABrgb);

    return &_mfOutputABrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputABrgb(void) const
{
    return &_mfOutputABrgb;
}


MFGLenum *RegisterCombinersChunkBase::editMFOutputCDrgb(void)
{
    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

    return &_mfOutputCDrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputCDrgb(void) const
{
    return &_mfOutputCDrgb;
}


MFGLenum *RegisterCombinersChunkBase::editMFOutputSumrgb(void)
{
    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

    return &_mfOutputSumrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputSumrgb(void) const
{
    return &_mfOutputSumrgb;
}


MFGLenum *RegisterCombinersChunkBase::editMFScalergb(void)
{
    editMField(ScalergbFieldMask, _mfScalergb);

    return &_mfScalergb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFScalergb(void) const
{
    return &_mfScalergb;
}


MFGLenum *RegisterCombinersChunkBase::editMFBiasrgb(void)
{
    editMField(BiasrgbFieldMask, _mfBiasrgb);

    return &_mfBiasrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFBiasrgb(void) const
{
    return &_mfBiasrgb;
}


MFGLenum *RegisterCombinersChunkBase::editMFOutputABalpha(void)
{
    editMField(OutputABalphaFieldMask, _mfOutputABalpha);

    return &_mfOutputABalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputABalpha(void) const
{
    return &_mfOutputABalpha;
}


MFGLenum *RegisterCombinersChunkBase::editMFOutputCDalpha(void)
{
    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

    return &_mfOutputCDalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputCDalpha(void) const
{
    return &_mfOutputCDalpha;
}


MFGLenum *RegisterCombinersChunkBase::editMFOutputSumalpha(void)
{
    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

    return &_mfOutputSumalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputSumalpha(void) const
{
    return &_mfOutputSumalpha;
}


MFUInt8 *RegisterCombinersChunkBase::editMFDotABrgb(void)
{
    editMField(DotABrgbFieldMask, _mfDotABrgb);

    return &_mfDotABrgb;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFDotABrgb(void) const
{
    return &_mfDotABrgb;
}


MFUInt8 *RegisterCombinersChunkBase::editMFDotCDrgb(void)
{
    editMField(DotCDrgbFieldMask, _mfDotCDrgb);

    return &_mfDotCDrgb;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFDotCDrgb(void) const
{
    return &_mfDotCDrgb;
}


MFUInt8 *RegisterCombinersChunkBase::editMFMuxSumrgb(void)
{
    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

    return &_mfMuxSumrgb;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFMuxSumrgb(void) const
{
    return &_mfMuxSumrgb;
}


MFGLenum *RegisterCombinersChunkBase::editMFScalealpha(void)
{
    editMField(ScalealphaFieldMask, _mfScalealpha);

    return &_mfScalealpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFScalealpha(void) const
{
    return &_mfScalealpha;
}


MFGLenum *RegisterCombinersChunkBase::editMFBiasalpha(void)
{
    editMField(BiasalphaFieldMask, _mfBiasalpha);

    return &_mfBiasalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFBiasalpha(void) const
{
    return &_mfBiasalpha;
}


MFUInt8 *RegisterCombinersChunkBase::editMFMuxSumalpha(void)
{
    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

    return &_mfMuxSumalpha;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFMuxSumalpha(void) const
{
    return &_mfMuxSumalpha;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableE(void)
{
    editMField(VariableEFieldMask, _mfVariableE);

    return &_mfVariableE;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableE(void) const
{
    return &_mfVariableE;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableF(void)
{
    editMField(VariableFFieldMask, _mfVariableF);

    return &_mfVariableF;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableF(void) const
{
    return &_mfVariableF;
}


MFGLenum *RegisterCombinersChunkBase::editMFVariableG(void)
{
    editMField(VariableGFieldMask, _mfVariableG);

    return &_mfVariableG;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableG(void) const
{
    return &_mfVariableG;
}


MFColor4f *RegisterCombinersChunkBase::editMFCombinerColor0(void)
{
    editMField(CombinerColor0FieldMask, _mfCombinerColor0);

    return &_mfCombinerColor0;
}

const MFColor4f *RegisterCombinersChunkBase::getMFCombinerColor0(void) const
{
    return &_mfCombinerColor0;
}


MFColor4f *RegisterCombinersChunkBase::editMFCombinerColor1(void)
{
    editMField(CombinerColor1FieldMask, _mfCombinerColor1);

    return &_mfCombinerColor1;
}

const MFColor4f *RegisterCombinersChunkBase::getMFCombinerColor1(void) const
{
    return &_mfCombinerColor1;
}


SFUInt8 *RegisterCombinersChunkBase::editSFPerStageConstants(void)
{
    editSField(PerStageConstantsFieldMask);

    return &_sfPerStageConstants;
}

const SFUInt8 *RegisterCombinersChunkBase::getSFPerStageConstants(void) const
{
    return &_sfPerStageConstants;
}






/*------------------------------ access -----------------------------------*/

SizeT RegisterCombinersChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
    {
        returnValue += _sfColor0.getBinSize();
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        returnValue += _sfColor1.getBinSize();
    }
    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
    {
        returnValue += _sfColorSumClamp.getBinSize();
    }
    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
    {
        returnValue += _mfVariableArgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
    {
        returnValue += _mfVariableBrgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
    {
        returnValue += _mfVariableCrgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
    {
        returnValue += _mfVariableDrgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
    {
        returnValue += _mfVariableAalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
    {
        returnValue += _mfVariableBalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
    {
        returnValue += _mfVariableCalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
    {
        returnValue += _mfVariableDalpha.getBinSize();
    }
    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
    {
        returnValue += _mfOutputABrgb.getBinSize();
    }
    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
    {
        returnValue += _mfOutputCDrgb.getBinSize();
    }
    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
    {
        returnValue += _mfOutputSumrgb.getBinSize();
    }
    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
    {
        returnValue += _mfScalergb.getBinSize();
    }
    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
    {
        returnValue += _mfBiasrgb.getBinSize();
    }
    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
    {
        returnValue += _mfOutputABalpha.getBinSize();
    }
    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
    {
        returnValue += _mfOutputCDalpha.getBinSize();
    }
    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
    {
        returnValue += _mfOutputSumalpha.getBinSize();
    }
    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
    {
        returnValue += _mfDotABrgb.getBinSize();
    }
    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
    {
        returnValue += _mfDotCDrgb.getBinSize();
    }
    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
    {
        returnValue += _mfMuxSumrgb.getBinSize();
    }
    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
    {
        returnValue += _mfScalealpha.getBinSize();
    }
    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
    {
        returnValue += _mfBiasalpha.getBinSize();
    }
    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
    {
        returnValue += _mfMuxSumalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableEFieldMask & whichField))
    {
        returnValue += _mfVariableE.getBinSize();
    }
    if(FieldBits::NoField != (VariableFFieldMask & whichField))
    {
        returnValue += _mfVariableF.getBinSize();
    }
    if(FieldBits::NoField != (VariableGFieldMask & whichField))
    {
        returnValue += _mfVariableG.getBinSize();
    }
    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
    {
        returnValue += _mfCombinerColor0.getBinSize();
    }
    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
    {
        returnValue += _mfCombinerColor1.getBinSize();
    }
    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
    {
        returnValue += _sfPerStageConstants.getBinSize();
    }

    return returnValue;
}

void RegisterCombinersChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
    {
        _sfColor0.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        _sfColor1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
    {
        _sfColorSumClamp.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
    {
        _mfVariableArgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
    {
        _mfVariableBrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
    {
        _mfVariableCrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
    {
        _mfVariableDrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
    {
        _mfVariableAalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
    {
        _mfVariableBalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
    {
        _mfVariableCalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
    {
        _mfVariableDalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
    {
        _mfOutputABrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
    {
        _mfOutputCDrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
    {
        _mfOutputSumrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
    {
        _mfScalergb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
    {
        _mfBiasrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
    {
        _mfOutputABalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
    {
        _mfOutputCDalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
    {
        _mfOutputSumalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
    {
        _mfDotABrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
    {
        _mfDotCDrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
    {
        _mfMuxSumrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
    {
        _mfScalealpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
    {
        _mfBiasalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
    {
        _mfMuxSumalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableEFieldMask & whichField))
    {
        _mfVariableE.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableFFieldMask & whichField))
    {
        _mfVariableF.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableGFieldMask & whichField))
    {
        _mfVariableG.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
    {
        _mfCombinerColor0.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
    {
        _mfCombinerColor1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
    {
        _sfPerStageConstants.copyToBin(pMem);
    }
}

void RegisterCombinersChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
    {
        editSField(Color0FieldMask);
        _sfColor0.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        editSField(Color1FieldMask);
        _sfColor1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
    {
        editSField(ColorSumClampFieldMask);
        _sfColorSumClamp.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
    {
        editMField(VariableArgbFieldMask, _mfVariableArgb);
        _mfVariableArgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
    {
        editMField(VariableBrgbFieldMask, _mfVariableBrgb);
        _mfVariableBrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
    {
        editMField(VariableCrgbFieldMask, _mfVariableCrgb);
        _mfVariableCrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
    {
        editMField(VariableDrgbFieldMask, _mfVariableDrgb);
        _mfVariableDrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
    {
        editMField(VariableAalphaFieldMask, _mfVariableAalpha);
        _mfVariableAalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
    {
        editMField(VariableBalphaFieldMask, _mfVariableBalpha);
        _mfVariableBalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
    {
        editMField(VariableCalphaFieldMask, _mfVariableCalpha);
        _mfVariableCalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
    {
        editMField(VariableDalphaFieldMask, _mfVariableDalpha);
        _mfVariableDalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
    {
        editMField(OutputABrgbFieldMask, _mfOutputABrgb);
        _mfOutputABrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
    {
        editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);
        _mfOutputCDrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
    {
        editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);
        _mfOutputSumrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
    {
        editMField(ScalergbFieldMask, _mfScalergb);
        _mfScalergb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
    {
        editMField(BiasrgbFieldMask, _mfBiasrgb);
        _mfBiasrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
    {
        editMField(OutputABalphaFieldMask, _mfOutputABalpha);
        _mfOutputABalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
    {
        editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);
        _mfOutputCDalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
    {
        editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);
        _mfOutputSumalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
    {
        editMField(DotABrgbFieldMask, _mfDotABrgb);
        _mfDotABrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
    {
        editMField(DotCDrgbFieldMask, _mfDotCDrgb);
        _mfDotCDrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
    {
        editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);
        _mfMuxSumrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
    {
        editMField(ScalealphaFieldMask, _mfScalealpha);
        _mfScalealpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
    {
        editMField(BiasalphaFieldMask, _mfBiasalpha);
        _mfBiasalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
    {
        editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);
        _mfMuxSumalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableEFieldMask & whichField))
    {
        editMField(VariableEFieldMask, _mfVariableE);
        _mfVariableE.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableFFieldMask & whichField))
    {
        editMField(VariableFFieldMask, _mfVariableF);
        _mfVariableF.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableGFieldMask & whichField))
    {
        editMField(VariableGFieldMask, _mfVariableG);
        _mfVariableG.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
    {
        editMField(CombinerColor0FieldMask, _mfCombinerColor0);
        _mfCombinerColor0.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
    {
        editMField(CombinerColor1FieldMask, _mfCombinerColor1);
        _mfCombinerColor1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
    {
        editSField(PerStageConstantsFieldMask);
        _sfPerStageConstants.copyFromBin(pMem);
    }
}

//! create a new instance of the class
RegisterCombinersChunkTransitPtr RegisterCombinersChunkBase::createLocal(BitVector bFlags)
{
    RegisterCombinersChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<RegisterCombinersChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
RegisterCombinersChunkTransitPtr RegisterCombinersChunkBase::createDependent(BitVector bFlags)
{
    RegisterCombinersChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<RegisterCombinersChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
RegisterCombinersChunkTransitPtr RegisterCombinersChunkBase::create(void)
{
    RegisterCombinersChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<RegisterCombinersChunk>(tmpPtr);
    }

    return fc;
}

RegisterCombinersChunk *RegisterCombinersChunkBase::createEmptyLocal(BitVector bFlags)
{
    RegisterCombinersChunk *returnValue;

    newPtr<RegisterCombinersChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
RegisterCombinersChunk *RegisterCombinersChunkBase::createEmpty(void)
{
    RegisterCombinersChunk *returnValue;

    newPtr<RegisterCombinersChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr RegisterCombinersChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    RegisterCombinersChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const RegisterCombinersChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr RegisterCombinersChunkBase::shallowCopyDependent(
    BitVector bFlags) const
{
    RegisterCombinersChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const RegisterCombinersChunk *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr RegisterCombinersChunkBase::shallowCopy(void) const
{
    RegisterCombinersChunk *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const RegisterCombinersChunk *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

RegisterCombinersChunkBase::RegisterCombinersChunkBase(void) :
    Inherited(),
    _sfColor0                 (),
    _sfColor1                 (),
    _sfColorSumClamp          (bool(false)),
    _mfVariableArgb           (),
    _mfVariableBrgb           (),
    _mfVariableCrgb           (),
    _mfVariableDrgb           (),
    _mfVariableAalpha         (),
    _mfVariableBalpha         (),
    _mfVariableCalpha         (),
    _mfVariableDalpha         (),
    _mfOutputABrgb            (),
    _mfOutputCDrgb            (),
    _mfOutputSumrgb           (),
    _mfScalergb               (),
    _mfBiasrgb                (),
    _mfOutputABalpha          (),
    _mfOutputCDalpha          (),
    _mfOutputSumalpha         (),
    _mfDotABrgb               (),
    _mfDotCDrgb               (),
    _mfMuxSumrgb              (),
    _mfScalealpha             (),
    _mfBiasalpha              (),
    _mfMuxSumalpha            (),
    _mfVariableE              (),
    _mfVariableF              (),
    _mfVariableG              (),
    _mfCombinerColor0         (),
    _mfCombinerColor1         (),
    _sfPerStageConstants      ()
{
}

RegisterCombinersChunkBase::RegisterCombinersChunkBase(const RegisterCombinersChunkBase &source) :
    Inherited(source),
    _sfColor0                 (source._sfColor0                 ),
    _sfColor1                 (source._sfColor1                 ),
    _sfColorSumClamp          (source._sfColorSumClamp          ),
    _mfVariableArgb           (source._mfVariableArgb           ),
    _mfVariableBrgb           (source._mfVariableBrgb           ),
    _mfVariableCrgb           (source._mfVariableCrgb           ),
    _mfVariableDrgb           (source._mfVariableDrgb           ),
    _mfVariableAalpha         (source._mfVariableAalpha         ),
    _mfVariableBalpha         (source._mfVariableBalpha         ),
    _mfVariableCalpha         (source._mfVariableCalpha         ),
    _mfVariableDalpha         (source._mfVariableDalpha         ),
    _mfOutputABrgb            (source._mfOutputABrgb            ),
    _mfOutputCDrgb            (source._mfOutputCDrgb            ),
    _mfOutputSumrgb           (source._mfOutputSumrgb           ),
    _mfScalergb               (source._mfScalergb               ),
    _mfBiasrgb                (source._mfBiasrgb                ),
    _mfOutputABalpha          (source._mfOutputABalpha          ),
    _mfOutputCDalpha          (source._mfOutputCDalpha          ),
    _mfOutputSumalpha         (source._mfOutputSumalpha         ),
    _mfDotABrgb               (source._mfDotABrgb               ),
    _mfDotCDrgb               (source._mfDotCDrgb               ),
    _mfMuxSumrgb              (source._mfMuxSumrgb              ),
    _mfScalealpha             (source._mfScalealpha             ),
    _mfBiasalpha              (source._mfBiasalpha              ),
    _mfMuxSumalpha            (source._mfMuxSumalpha            ),
    _mfVariableE              (source._mfVariableE              ),
    _mfVariableF              (source._mfVariableF              ),
    _mfVariableG              (source._mfVariableG              ),
    _mfCombinerColor0         (source._mfCombinerColor0         ),
    _mfCombinerColor1         (source._mfCombinerColor1         ),
    _sfPerStageConstants      (source._sfPerStageConstants      )
{
}


/*-------------------------- destructors ----------------------------------*/

RegisterCombinersChunkBase::~RegisterCombinersChunkBase(void)
{
}


GetFieldHandlePtr RegisterCombinersChunkBase::getHandleColor0          (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor0,
             this->getType().getFieldDesc(Color0FieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleColor0         (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor0,
             this->getType().getFieldDesc(Color0FieldId),
             this));


    editSField(Color0FieldMask);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleColor1          (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor1,
             this->getType().getFieldDesc(Color1FieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleColor1         (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor1,
             this->getType().getFieldDesc(Color1FieldId),
             this));


    editSField(Color1FieldMask);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleColorSumClamp   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfColorSumClamp,
             this->getType().getFieldDesc(ColorSumClampFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleColorSumClamp  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfColorSumClamp,
             this->getType().getFieldDesc(ColorSumClampFieldId),
             this));


    editSField(ColorSumClampFieldMask);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableArgb    (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableArgb,
             this->getType().getFieldDesc(VariableArgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableArgb   (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableArgb,
             this->getType().getFieldDesc(VariableArgbFieldId),
             this));


    editMField(VariableArgbFieldMask, _mfVariableArgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableBrgb    (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableBrgb,
             this->getType().getFieldDesc(VariableBrgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableBrgb   (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableBrgb,
             this->getType().getFieldDesc(VariableBrgbFieldId),
             this));


    editMField(VariableBrgbFieldMask, _mfVariableBrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableCrgb    (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableCrgb,
             this->getType().getFieldDesc(VariableCrgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableCrgb   (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableCrgb,
             this->getType().getFieldDesc(VariableCrgbFieldId),
             this));


    editMField(VariableCrgbFieldMask, _mfVariableCrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableDrgb    (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableDrgb,
             this->getType().getFieldDesc(VariableDrgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableDrgb   (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableDrgb,
             this->getType().getFieldDesc(VariableDrgbFieldId),
             this));


    editMField(VariableDrgbFieldMask, _mfVariableDrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableAalpha  (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableAalpha,
             this->getType().getFieldDesc(VariableAalphaFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableAalpha (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableAalpha,
             this->getType().getFieldDesc(VariableAalphaFieldId),
             this));


    editMField(VariableAalphaFieldMask, _mfVariableAalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableBalpha  (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableBalpha,
             this->getType().getFieldDesc(VariableBalphaFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableBalpha (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableBalpha,
             this->getType().getFieldDesc(VariableBalphaFieldId),
             this));


    editMField(VariableBalphaFieldMask, _mfVariableBalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableCalpha  (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableCalpha,
             this->getType().getFieldDesc(VariableCalphaFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableCalpha (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableCalpha,
             this->getType().getFieldDesc(VariableCalphaFieldId),
             this));


    editMField(VariableCalphaFieldMask, _mfVariableCalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableDalpha  (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableDalpha,
             this->getType().getFieldDesc(VariableDalphaFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableDalpha (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableDalpha,
             this->getType().getFieldDesc(VariableDalphaFieldId),
             this));


    editMField(VariableDalphaFieldMask, _mfVariableDalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputABrgb     (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputABrgb,
             this->getType().getFieldDesc(OutputABrgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputABrgb    (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputABrgb,
             this->getType().getFieldDesc(OutputABrgbFieldId),
             this));


    editMField(OutputABrgbFieldMask, _mfOutputABrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputCDrgb     (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputCDrgb,
             this->getType().getFieldDesc(OutputCDrgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputCDrgb    (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputCDrgb,
             this->getType().getFieldDesc(OutputCDrgbFieldId),
             this));


    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputSumrgb    (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputSumrgb,
             this->getType().getFieldDesc(OutputSumrgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputSumrgb   (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputSumrgb,
             this->getType().getFieldDesc(OutputSumrgbFieldId),
             this));


    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleScalergb        (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfScalergb,
             this->getType().getFieldDesc(ScalergbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleScalergb       (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfScalergb,
             this->getType().getFieldDesc(ScalergbFieldId),
             this));


    editMField(ScalergbFieldMask, _mfScalergb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleBiasrgb         (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfBiasrgb,
             this->getType().getFieldDesc(BiasrgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleBiasrgb        (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfBiasrgb,
             this->getType().getFieldDesc(BiasrgbFieldId),
             this));


    editMField(BiasrgbFieldMask, _mfBiasrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputABalpha   (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputABalpha,
             this->getType().getFieldDesc(OutputABalphaFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputABalpha  (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputABalpha,
             this->getType().getFieldDesc(OutputABalphaFieldId),
             this));


    editMField(OutputABalphaFieldMask, _mfOutputABalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputCDalpha   (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputCDalpha,
             this->getType().getFieldDesc(OutputCDalphaFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputCDalpha  (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputCDalpha,
             this->getType().getFieldDesc(OutputCDalphaFieldId),
             this));


    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputSumalpha  (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputSumalpha,
             this->getType().getFieldDesc(OutputSumalphaFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputSumalpha (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputSumalpha,
             this->getType().getFieldDesc(OutputSumalphaFieldId),
             this));


    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleDotABrgb        (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfDotABrgb,
             this->getType().getFieldDesc(DotABrgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleDotABrgb       (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfDotABrgb,
             this->getType().getFieldDesc(DotABrgbFieldId),
             this));


    editMField(DotABrgbFieldMask, _mfDotABrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleDotCDrgb        (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfDotCDrgb,
             this->getType().getFieldDesc(DotCDrgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleDotCDrgb       (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfDotCDrgb,
             this->getType().getFieldDesc(DotCDrgbFieldId),
             this));


    editMField(DotCDrgbFieldMask, _mfDotCDrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleMuxSumrgb       (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfMuxSumrgb,
             this->getType().getFieldDesc(MuxSumrgbFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleMuxSumrgb      (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfMuxSumrgb,
             this->getType().getFieldDesc(MuxSumrgbFieldId),
             this));


    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleScalealpha      (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfScalealpha,
             this->getType().getFieldDesc(ScalealphaFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleScalealpha     (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfScalealpha,
             this->getType().getFieldDesc(ScalealphaFieldId),
             this));


    editMField(ScalealphaFieldMask, _mfScalealpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleBiasalpha       (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfBiasalpha,
             this->getType().getFieldDesc(BiasalphaFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleBiasalpha      (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfBiasalpha,
             this->getType().getFieldDesc(BiasalphaFieldId),
             this));


    editMField(BiasalphaFieldMask, _mfBiasalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleMuxSumalpha     (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfMuxSumalpha,
             this->getType().getFieldDesc(MuxSumalphaFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleMuxSumalpha    (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfMuxSumalpha,
             this->getType().getFieldDesc(MuxSumalphaFieldId),
             this));


    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableE       (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableE,
             this->getType().getFieldDesc(VariableEFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableE      (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableE,
             this->getType().getFieldDesc(VariableEFieldId),
             this));


    editMField(VariableEFieldMask, _mfVariableE);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableF       (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableF,
             this->getType().getFieldDesc(VariableFFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableF      (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableF,
             this->getType().getFieldDesc(VariableFFieldId),
             this));


    editMField(VariableFFieldMask, _mfVariableF);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableG       (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableG,
             this->getType().getFieldDesc(VariableGFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableG      (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableG,
             this->getType().getFieldDesc(VariableGFieldId),
             this));


    editMField(VariableGFieldMask, _mfVariableG);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleCombinerColor0  (void) const
{
    MFColor4f::GetHandlePtr returnValue(
        new  MFColor4f::GetHandle(
             &_mfCombinerColor0,
             this->getType().getFieldDesc(CombinerColor0FieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleCombinerColor0 (void)
{
    MFColor4f::EditHandlePtr returnValue(
        new  MFColor4f::EditHandle(
             &_mfCombinerColor0,
             this->getType().getFieldDesc(CombinerColor0FieldId),
             this));


    editMField(CombinerColor0FieldMask, _mfCombinerColor0);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleCombinerColor1  (void) const
{
    MFColor4f::GetHandlePtr returnValue(
        new  MFColor4f::GetHandle(
             &_mfCombinerColor1,
             this->getType().getFieldDesc(CombinerColor1FieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleCombinerColor1 (void)
{
    MFColor4f::EditHandlePtr returnValue(
        new  MFColor4f::EditHandle(
             &_mfCombinerColor1,
             this->getType().getFieldDesc(CombinerColor1FieldId),
             this));


    editMField(CombinerColor1FieldMask, _mfCombinerColor1);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandlePerStageConstants (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfPerStageConstants,
             this->getType().getFieldDesc(PerStageConstantsFieldId),
             const_cast<RegisterCombinersChunkBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandlePerStageConstants(void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfPerStageConstants,
             this->getType().getFieldDesc(PerStageConstantsFieldId),
             this));


    editSField(PerStageConstantsFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void RegisterCombinersChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    RegisterCombinersChunk *pThis = static_cast<RegisterCombinersChunk *>(this);

    pThis->execSync(static_cast<RegisterCombinersChunk *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *RegisterCombinersChunkBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    RegisterCombinersChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const RegisterCombinersChunk *>(pRefAspect),
                  dynamic_cast<const RegisterCombinersChunk *>(this));

    return returnValue;
}
#endif

void RegisterCombinersChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableArgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableBrgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableCrgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableDrgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableAalpha.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableBalpha.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableCalpha.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableDalpha.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputABrgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputCDrgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputSumrgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfScalergb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfBiasrgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputABalpha.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputCDalpha.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputSumalpha.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfDotABrgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfDotCDrgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfMuxSumrgb.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfScalealpha.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfBiasalpha.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfMuxSumalpha.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableE.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableF.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableG.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfCombinerColor0.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfCombinerColor1.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
