/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ImageForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGImage.h"                   // Images Class

#include "OSGImageForegroundBase.h"
#include "OSGImageForeground.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ImageForeground
    The ImageForeground is used to draw images on top of the viewport.  See \ref
    PageSystemWindowForegroundImage for a description.

    The images are stored in the _mfImages Field, the corresponding positions in
    the _mfPositions Field.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Image *         ImageForegroundBase::_mfImages
    The images to display.
*/

/*! \var Pnt2f           ImageForegroundBase::_mfPositions
    The positions of the images.
*/

/*! \var Pnt2f           ImageForegroundBase::_mfScales
    The positions of the images.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ImageForeground *, nsOSG>::_type(
    "ImageForegroundPtr", 
    "ForegroundPtr", 
    ImageForeground::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ImageForeground *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ImageForeground *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ImageForeground *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ImageForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecImagePtr::Description(
        MFUnrecImagePtr::getClassType(),
        "images",
        "The images to display.\n",
        ImagesFieldId, ImagesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageForeground::editHandleImages),
        static_cast<FieldGetMethodSig >(&ImageForeground::getHandleImages));

    oType.addInitialDesc(pDesc);

    pDesc = new MFPnt2f::Description(
        MFPnt2f::getClassType(),
        "positions",
        "The positions of the images.\n",
        PositionsFieldId, PositionsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageForeground::editHandlePositions),
        static_cast<FieldGetMethodSig >(&ImageForeground::getHandlePositions));

    oType.addInitialDesc(pDesc);

    pDesc = new MFPnt2f::Description(
        MFPnt2f::getClassType(),
        "scales",
        "The positions of the images.\n",
        ScalesFieldId, ScalesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ImageForeground::editHandleScales),
        static_cast<FieldGetMethodSig >(&ImageForeground::getHandleScales));

    oType.addInitialDesc(pDesc);
}


ImageForegroundBase::TypeObject ImageForegroundBase::_type(
    ImageForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ImageForegroundBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ImageForeground::initMethod),
    reinterpret_cast<ExitContainerF>(&ImageForeground::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ImageForeground::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"ImageForeground\"\n"
    "   parent=\"Foreground\"\n"
    "   library=\"Window\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   docGroupBase=\"GrpWindowForeground\"\n"
    "   >\n"
    "  The ImageForeground is used to draw images on top of the viewport.  See \\ref\n"
    "  PageSystemWindowForegroundImage for a description.\n"
    "\n"
    "  The images are stored in the _mfImages Field, the corresponding positions in\n"
    "  the _mfPositions Field.\n"
    "  <Field\n"
    "\t name=\"images\"\n"
    "\t type=\"ImagePtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tThe images to display.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"positions\"\n"
    "\t type=\"Pnt2f\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tThe positions of the images.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"scales\"\n"
    "\t type=\"Pnt2f\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tThe positions of the images.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "The ImageForeground is used to draw images on top of the viewport.  See \\ref\n"
    "PageSystemWindowForegroundImage for a description.\n"
    "\n"
    "The images are stored in the _mfImages Field, the corresponding positions in\n"
    "the _mfPositions Field.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ImageForegroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &ImageForegroundBase::getType(void) const
{
    return _type;
}

UInt32 ImageForegroundBase::getContainerSize(void) const
{
    return sizeof(ImageForeground);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ImageForeground::_mfImages field.
const MFUnrecImagePtr *ImageForegroundBase::getMFImages(void) const
{
    return &_mfImages;
}

MFUnrecImagePtr     *ImageForegroundBase::editMFImages         (void)
{
    editMField(ImagesFieldMask, _mfImages);

    return &_mfImages;
}
Image * ImageForegroundBase::getImages(const UInt32 index) const
{
    return _mfImages[index];
}

MFPnt2f *ImageForegroundBase::editMFPositions(void)
{
    editMField(PositionsFieldMask, _mfPositions);

    return &_mfPositions;
}

const MFPnt2f *ImageForegroundBase::getMFPositions(void) const
{
    return &_mfPositions;
}


MFPnt2f *ImageForegroundBase::editMFScales(void)
{
    editMField(ScalesFieldMask, _mfScales);

    return &_mfScales;
}

const MFPnt2f *ImageForegroundBase::getMFScales(void) const
{
    return &_mfScales;
}




void ImageForegroundBase::pushToImages(Image * const value)
{
    editMField(ImagesFieldMask, _mfImages);

    _mfImages.push_back(value);
}

void ImageForegroundBase::assignImages   (const MFUnrecImagePtr   &value)
{
    MFUnrecImagePtr  ::const_iterator elemIt  =
        value.begin();
    MFUnrecImagePtr  ::const_iterator elemEnd =
        value.end  ();

    static_cast<ImageForeground *>(this)->clearImages();

    while(elemIt != elemEnd)
    {
        this->pushToImages(*elemIt);

        ++elemIt;
    }
}

void ImageForegroundBase::removeFromImages(UInt32 uiIndex)
{
    if(uiIndex < _mfImages.size())
    {
        editMField(ImagesFieldMask, _mfImages);

        _mfImages.erase(uiIndex);
    }
}

void ImageForegroundBase::removeObjFromImages(Image * const value)
{
    Int32 iElemIdx = _mfImages.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ImagesFieldMask, _mfImages);

        _mfImages.erase(iElemIdx);
    }
}
void ImageForegroundBase::clearImages(void)
{
    editMField(ImagesFieldMask, _mfImages);


    _mfImages.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT ImageForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ImagesFieldMask & whichField))
    {
        returnValue += _mfImages.getBinSize();
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        returnValue += _mfPositions.getBinSize();
    }
    if(FieldBits::NoField != (ScalesFieldMask & whichField))
    {
        returnValue += _mfScales.getBinSize();
    }

    return returnValue;
}

void ImageForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ImagesFieldMask & whichField))
    {
        _mfImages.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _mfPositions.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScalesFieldMask & whichField))
    {
        _mfScales.copyToBin(pMem);
    }
}

void ImageForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ImagesFieldMask & whichField))
    {
        editMField(ImagesFieldMask, _mfImages);
        _mfImages.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        editMField(PositionsFieldMask, _mfPositions);
        _mfPositions.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScalesFieldMask & whichField))
    {
        editMField(ScalesFieldMask, _mfScales);
        _mfScales.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ImageForegroundTransitPtr ImageForegroundBase::createLocal(BitVector bFlags)
{
    ImageForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ImageForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ImageForegroundTransitPtr ImageForegroundBase::createDependent(BitVector bFlags)
{
    ImageForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ImageForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ImageForegroundTransitPtr ImageForegroundBase::create(void)
{
    ImageForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ImageForeground>(tmpPtr);
    }

    return fc;
}

ImageForeground *ImageForegroundBase::createEmptyLocal(BitVector bFlags)
{
    ImageForeground *returnValue;

    newPtr<ImageForeground>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ImageForeground *ImageForegroundBase::createEmpty(void)
{
    ImageForeground *returnValue;

    newPtr<ImageForeground>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ImageForegroundBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ImageForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ImageForeground *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ImageForegroundBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ImageForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ImageForeground *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ImageForegroundBase::shallowCopy(void) const
{
    ImageForeground *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ImageForeground *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ImageForegroundBase::ImageForegroundBase(void) :
    Inherited(),
    _mfImages                 (),
    _mfPositions              (),
    _mfScales                 ()
{
}

ImageForegroundBase::ImageForegroundBase(const ImageForegroundBase &source) :
    Inherited(source),
    _mfImages                 (),
    _mfPositions              (source._mfPositions              ),
    _mfScales                 (source._mfScales                 )
{
}


/*-------------------------- destructors ----------------------------------*/

ImageForegroundBase::~ImageForegroundBase(void)
{
}

void ImageForegroundBase::onCreate(const ImageForeground *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ImageForeground *pThis = static_cast<ImageForeground *>(this);

        MFUnrecImagePtr::const_iterator ImagesIt  =
            source->_mfImages.begin();
        MFUnrecImagePtr::const_iterator ImagesEnd =
            source->_mfImages.end  ();

        while(ImagesIt != ImagesEnd)
        {
            pThis->pushToImages(*ImagesIt);

            ++ImagesIt;
        }
    }
}

GetFieldHandlePtr ImageForegroundBase::getHandleImages          (void) const
{
    MFUnrecImagePtr::GetHandlePtr returnValue(
        new  MFUnrecImagePtr::GetHandle(
             &_mfImages,
             this->getType().getFieldDesc(ImagesFieldId),
             const_cast<ImageForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageForegroundBase::editHandleImages         (void)
{
    MFUnrecImagePtr::EditHandlePtr returnValue(
        new  MFUnrecImagePtr::EditHandle(
             &_mfImages,
             this->getType().getFieldDesc(ImagesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&ImageForeground::pushToImages,
                    static_cast<ImageForeground *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&ImageForeground::removeFromImages,
                    static_cast<ImageForeground *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&ImageForeground::removeObjFromImages,
                    static_cast<ImageForeground *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&ImageForeground::clearImages,
                    static_cast<ImageForeground *>(this)));

    editMField(ImagesFieldMask, _mfImages);

    return returnValue;
}

GetFieldHandlePtr ImageForegroundBase::getHandlePositions       (void) const
{
    MFPnt2f::GetHandlePtr returnValue(
        new  MFPnt2f::GetHandle(
             &_mfPositions,
             this->getType().getFieldDesc(PositionsFieldId),
             const_cast<ImageForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageForegroundBase::editHandlePositions      (void)
{
    MFPnt2f::EditHandlePtr returnValue(
        new  MFPnt2f::EditHandle(
             &_mfPositions,
             this->getType().getFieldDesc(PositionsFieldId),
             this));


    editMField(PositionsFieldMask, _mfPositions);

    return returnValue;
}

GetFieldHandlePtr ImageForegroundBase::getHandleScales          (void) const
{
    MFPnt2f::GetHandlePtr returnValue(
        new  MFPnt2f::GetHandle(
             &_mfScales,
             this->getType().getFieldDesc(ScalesFieldId),
             const_cast<ImageForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ImageForegroundBase::editHandleScales         (void)
{
    MFPnt2f::EditHandlePtr returnValue(
        new  MFPnt2f::EditHandle(
             &_mfScales,
             this->getType().getFieldDesc(ScalesFieldId),
             this));


    editMField(ScalesFieldMask, _mfScales);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ImageForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ImageForeground *pThis = static_cast<ImageForeground *>(this);

    pThis->execSync(static_cast<ImageForeground *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ImageForegroundBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ImageForeground *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ImageForeground *>(pRefAspect),
                  dynamic_cast<const ImageForeground *>(this));

    return returnValue;
}
#endif

void ImageForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ImageForeground *>(this)->clearImages();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfPositions.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfScales.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
