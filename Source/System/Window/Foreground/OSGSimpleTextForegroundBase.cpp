/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleTextForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGSimpleTextForegroundBase.h"
#include "OSGSimpleTextForeground.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SimpleTextForeground
    OSG::SimpleTextForeground displays a simple list of text
    lines. They are displayed using a compiled-in font that can use an arbitrary
    color and that can be arbitrarily resized, with the size per line given in
    pixel.

    The size and color used for all lines in _sfSize and _sfColor.

    The color of the text can be overriden by using a special tag in the text 
    of the lines.  \{\color=FF0000FF SomeText} will draw the SomeText with a
    red color. 
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var std::string     SimpleTextForegroundBase::_mfLines
    The lines of text.
*/

/*! \var Real32          SimpleTextForegroundBase::_sfSize
    Height of a single line, in  pixel.
*/

/*! \var Color4f         SimpleTextForegroundBase::_sfColor
    Color of the text.
*/

/*! \var Color4f         SimpleTextForegroundBase::_sfShadowColor
    Color of the shadow.
*/

/*! \var Color4f         SimpleTextForegroundBase::_sfBgColor
    Color of the background.
*/

/*! \var std::string     SimpleTextForegroundBase::_sfFamily
    The font family to be used, e.g. "SANS", default if unset.
*/

/*! \var Vec2f           SimpleTextForegroundBase::_sfShadowOffset
    Offset of the shadow, in pixels.
*/

/*! \var UInt8           SimpleTextForegroundBase::_sfHorizontalAlign
    Simple form of layout management, defaults to SimpleTextForeground::Left.
*/

/*! \var UInt8           SimpleTextForegroundBase::_sfVerticalAlign
    Simple form of layout management, defaults to SimpleTextForeground::Top.
*/

/*! \var Color4f         SimpleTextForegroundBase::_sfBorderColor
    Color of the border.
*/

/*! \var Vec2f           SimpleTextForegroundBase::_sfBorderOffset
    Offset of the border in pixels.
*/

/*! \var Vec2f           SimpleTextForegroundBase::_sfTextMargin
    Text margin in pixels.
*/

/*! \var bool            SimpleTextForegroundBase::_sfTile
    Should this foreground be tilable
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<SimpleTextForeground *, nsOSG>::_type(
    "SimpleTextForegroundPtr", 
    "ForegroundPtr", 
    SimpleTextForeground::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(SimpleTextForeground *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SimpleTextForeground *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SimpleTextForeground *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SimpleTextForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFString::Description(
        MFString::getClassType(),
        "Lines",
        "The lines of text.\n",
        LinesFieldId, LinesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleLines),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleLines));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Size",
        "Height of a single line, in  pixel.\n",
        SizeFieldId, SizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleSize),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "Color",
        "Color of the text.\n",
        ColorFieldId, ColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleColor),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "ShadowColor",
        "Color of the shadow.\n",
        ShadowColorFieldId, ShadowColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleShadowColor),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleShadowColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "BgColor",
        "Color of the background.\n",
        BgColorFieldId, BgColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleBgColor),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleBgColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "Family",
        "The font family to be used, e.g. \"SANS\", default if unset.\n",
        FamilyFieldId, FamilyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleFamily),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleFamily));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "ShadowOffset",
        "Offset of the shadow, in pixels.\n",
        ShadowOffsetFieldId, ShadowOffsetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleShadowOffset),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleShadowOffset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "HorizontalAlign",
        "Simple form of layout management, defaults to SimpleTextForeground::Left.\n",
        HorizontalAlignFieldId, HorizontalAlignFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleHorizontalAlign),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleHorizontalAlign));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "VerticalAlign",
        "Simple form of layout management, defaults to SimpleTextForeground::Top.\n",
        VerticalAlignFieldId, VerticalAlignFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleVerticalAlign),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleVerticalAlign));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "BorderColor",
        "Color of the border.\n",
        BorderColorFieldId, BorderColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleBorderColor),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleBorderColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "BorderOffset",
        "Offset of the border in pixels.\n",
        BorderOffsetFieldId, BorderOffsetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleBorderOffset),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleBorderOffset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "TextMargin",
        "Text margin in pixels.\n",
        TextMarginFieldId, TextMarginFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleTextMargin),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleTextMargin));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "Tile",
        "Should this foreground be tilable\n",
        TileFieldId, TileFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleTextForeground::editHandleTile),
        static_cast<FieldGetMethodSig >(&SimpleTextForeground::getHandleTile));

    oType.addInitialDesc(pDesc);
}


SimpleTextForegroundBase::TypeObject SimpleTextForegroundBase::_type(
    SimpleTextForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&SimpleTextForegroundBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&SimpleTextForeground::initMethod),
    reinterpret_cast<ExitContainerF>(&SimpleTextForeground::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&SimpleTextForeground::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"SimpleTextForeground\"\n"
    "    parent=\"Foreground\"\n"
    "    library=\"Window\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    docGroupBase=\"GrpUtil\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)\"\n"
    "    >\n"
    "    OSG::SimpleTextForeground displays a simple list of text\n"
    "    lines. They are displayed using a compiled-in font that can use an arbitrary\n"
    "    color and that can be arbitrarily resized, with the size per line given in\n"
    "    pixel.\n"
    "\n"
    "    The size and color used for all lines in _sfSize and _sfColor.\n"
    "\n"
    "    The color of the text can be overriden by using a special tag in the text \n"
    "    of the lines.  \\{\\color=FF0000FF SomeText} will draw the SomeText with a\n"
    "    red color. \n"
    "    <Field\n"
    "        name=\"Lines\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The lines of text.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Size\"\n"
    "        type=\"Real32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"16\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Height of a single line, in  pixel.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Color\"\n"
    "        type=\"Color4f\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1,1,1,1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Color of the text.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ShadowColor\"\n"
    "        type=\"Color4f\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0,0,0,1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Color of the shadow.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"BgColor\"\n"
    "        type=\"Color4f\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0,0,0,0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Color of the background.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Family\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The font family to be used, e.g. \"SANS\", default if unset.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ShadowOffset\"\n"
    "        type=\"Vec2f\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1,-1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Offset of the shadow, in pixels.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"HorizontalAlign\"\n"
    "        type=\"UInt8\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"SimpleTextForeground::Left\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Simple form of layout management, defaults to SimpleTextForeground::Left.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"VerticalAlign\"\n"
    "        type=\"UInt8\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"SimpleTextForeground::Top\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Simple form of layout management, defaults to SimpleTextForeground::Top.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"BorderColor\"\n"
    "        type=\"Color4f\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0,0,0,0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Color of the border.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"BorderOffset\"\n"
    "        type=\"Vec2f\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"4,4\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Offset of the border in pixels.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"TextMargin\"\n"
    "        type=\"Vec2f\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0,0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Text margin in pixels.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"Tile\"\n"
    "        type=\"bool\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        Should this foreground be tilable\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "OSG::SimpleTextForeground displays a simple list of text\n"
    "lines. They are displayed using a compiled-in font that can use an arbitrary\n"
    "color and that can be arbitrarily resized, with the size per line given in\n"
    "pixel.\n"
    "\n"
    "The size and color used for all lines in _sfSize and _sfColor.\n"
    "\n"
    "The color of the text can be overriden by using a special tag in the text \n"
    "of the lines.  \\{\\color=FF0000FF SomeText} will draw the SomeText with a\n"
    "red color. \n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SimpleTextForegroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &SimpleTextForegroundBase::getType(void) const
{
    return _type;
}

UInt32 SimpleTextForegroundBase::getContainerSize(void) const
{
    return sizeof(SimpleTextForeground);
}

/*------------------------- decorator get ------------------------------*/


MFString *SimpleTextForegroundBase::editMFLines(void)
{
    editMField(LinesFieldMask, _mfLines);

    return &_mfLines;
}

const MFString *SimpleTextForegroundBase::getMFLines(void) const
{
    return &_mfLines;
}


SFReal32 *SimpleTextForegroundBase::editSFSize(void)
{
    editSField(SizeFieldMask);

    return &_sfSize;
}

const SFReal32 *SimpleTextForegroundBase::getSFSize(void) const
{
    return &_sfSize;
}


SFColor4f *SimpleTextForegroundBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *SimpleTextForegroundBase::getSFColor(void) const
{
    return &_sfColor;
}


SFColor4f *SimpleTextForegroundBase::editSFShadowColor(void)
{
    editSField(ShadowColorFieldMask);

    return &_sfShadowColor;
}

const SFColor4f *SimpleTextForegroundBase::getSFShadowColor(void) const
{
    return &_sfShadowColor;
}


SFColor4f *SimpleTextForegroundBase::editSFBgColor(void)
{
    editSField(BgColorFieldMask);

    return &_sfBgColor;
}

const SFColor4f *SimpleTextForegroundBase::getSFBgColor(void) const
{
    return &_sfBgColor;
}


SFString *SimpleTextForegroundBase::editSFFamily(void)
{
    editSField(FamilyFieldMask);

    return &_sfFamily;
}

const SFString *SimpleTextForegroundBase::getSFFamily(void) const
{
    return &_sfFamily;
}


SFVec2f *SimpleTextForegroundBase::editSFShadowOffset(void)
{
    editSField(ShadowOffsetFieldMask);

    return &_sfShadowOffset;
}

const SFVec2f *SimpleTextForegroundBase::getSFShadowOffset(void) const
{
    return &_sfShadowOffset;
}


SFUInt8 *SimpleTextForegroundBase::editSFHorizontalAlign(void)
{
    editSField(HorizontalAlignFieldMask);

    return &_sfHorizontalAlign;
}

const SFUInt8 *SimpleTextForegroundBase::getSFHorizontalAlign(void) const
{
    return &_sfHorizontalAlign;
}


SFUInt8 *SimpleTextForegroundBase::editSFVerticalAlign(void)
{
    editSField(VerticalAlignFieldMask);

    return &_sfVerticalAlign;
}

const SFUInt8 *SimpleTextForegroundBase::getSFVerticalAlign(void) const
{
    return &_sfVerticalAlign;
}


SFColor4f *SimpleTextForegroundBase::editSFBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return &_sfBorderColor;
}

const SFColor4f *SimpleTextForegroundBase::getSFBorderColor(void) const
{
    return &_sfBorderColor;
}


SFVec2f *SimpleTextForegroundBase::editSFBorderOffset(void)
{
    editSField(BorderOffsetFieldMask);

    return &_sfBorderOffset;
}

const SFVec2f *SimpleTextForegroundBase::getSFBorderOffset(void) const
{
    return &_sfBorderOffset;
}


SFVec2f *SimpleTextForegroundBase::editSFTextMargin(void)
{
    editSField(TextMarginFieldMask);

    return &_sfTextMargin;
}

const SFVec2f *SimpleTextForegroundBase::getSFTextMargin(void) const
{
    return &_sfTextMargin;
}


SFBool *SimpleTextForegroundBase::editSFTile(void)
{
    editSField(TileFieldMask);

    return &_sfTile;
}

const SFBool *SimpleTextForegroundBase::getSFTile(void) const
{
    return &_sfTile;
}






/*------------------------------ access -----------------------------------*/

SizeT SimpleTextForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LinesFieldMask & whichField))
    {
        returnValue += _mfLines.getBinSize();
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }
    if(FieldBits::NoField != (ShadowColorFieldMask & whichField))
    {
        returnValue += _sfShadowColor.getBinSize();
    }
    if(FieldBits::NoField != (BgColorFieldMask & whichField))
    {
        returnValue += _sfBgColor.getBinSize();
    }
    if(FieldBits::NoField != (FamilyFieldMask & whichField))
    {
        returnValue += _sfFamily.getBinSize();
    }
    if(FieldBits::NoField != (ShadowOffsetFieldMask & whichField))
    {
        returnValue += _sfShadowOffset.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalAlignFieldMask & whichField))
    {
        returnValue += _sfHorizontalAlign.getBinSize();
    }
    if(FieldBits::NoField != (VerticalAlignFieldMask & whichField))
    {
        returnValue += _sfVerticalAlign.getBinSize();
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        returnValue += _sfBorderColor.getBinSize();
    }
    if(FieldBits::NoField != (BorderOffsetFieldMask & whichField))
    {
        returnValue += _sfBorderOffset.getBinSize();
    }
    if(FieldBits::NoField != (TextMarginFieldMask & whichField))
    {
        returnValue += _sfTextMargin.getBinSize();
    }
    if(FieldBits::NoField != (TileFieldMask & whichField))
    {
        returnValue += _sfTile.getBinSize();
    }

    return returnValue;
}

void SimpleTextForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LinesFieldMask & whichField))
    {
        _mfLines.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShadowColorFieldMask & whichField))
    {
        _sfShadowColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BgColorFieldMask & whichField))
    {
        _sfBgColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FamilyFieldMask & whichField))
    {
        _sfFamily.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShadowOffsetFieldMask & whichField))
    {
        _sfShadowOffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalAlignFieldMask & whichField))
    {
        _sfHorizontalAlign.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalAlignFieldMask & whichField))
    {
        _sfVerticalAlign.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        _sfBorderColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderOffsetFieldMask & whichField))
    {
        _sfBorderOffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TextMarginFieldMask & whichField))
    {
        _sfTextMargin.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TileFieldMask & whichField))
    {
        _sfTile.copyToBin(pMem);
    }
}

void SimpleTextForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LinesFieldMask & whichField))
    {
        editMField(LinesFieldMask, _mfLines);
        _mfLines.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        editSField(SizeFieldMask);
        _sfSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        editSField(ColorFieldMask);
        _sfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShadowColorFieldMask & whichField))
    {
        editSField(ShadowColorFieldMask);
        _sfShadowColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BgColorFieldMask & whichField))
    {
        editSField(BgColorFieldMask);
        _sfBgColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FamilyFieldMask & whichField))
    {
        editSField(FamilyFieldMask);
        _sfFamily.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShadowOffsetFieldMask & whichField))
    {
        editSField(ShadowOffsetFieldMask);
        _sfShadowOffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalAlignFieldMask & whichField))
    {
        editSField(HorizontalAlignFieldMask);
        _sfHorizontalAlign.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalAlignFieldMask & whichField))
    {
        editSField(VerticalAlignFieldMask);
        _sfVerticalAlign.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        editSField(BorderColorFieldMask);
        _sfBorderColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderOffsetFieldMask & whichField))
    {
        editSField(BorderOffsetFieldMask);
        _sfBorderOffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TextMarginFieldMask & whichField))
    {
        editSField(TextMarginFieldMask);
        _sfTextMargin.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TileFieldMask & whichField))
    {
        editSField(TileFieldMask);
        _sfTile.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SimpleTextForegroundTransitPtr SimpleTextForegroundBase::createLocal(BitVector bFlags)
{
    SimpleTextForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SimpleTextForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SimpleTextForegroundTransitPtr SimpleTextForegroundBase::createDependent(BitVector bFlags)
{
    SimpleTextForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SimpleTextForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SimpleTextForegroundTransitPtr SimpleTextForegroundBase::create(void)
{
    SimpleTextForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SimpleTextForeground>(tmpPtr);
    }

    return fc;
}

SimpleTextForeground *SimpleTextForegroundBase::createEmptyLocal(BitVector bFlags)
{
    SimpleTextForeground *returnValue;

    newPtr<SimpleTextForeground>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SimpleTextForeground *SimpleTextForegroundBase::createEmpty(void)
{
    SimpleTextForeground *returnValue;

    newPtr<SimpleTextForeground>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SimpleTextForegroundBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SimpleTextForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SimpleTextForeground *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SimpleTextForegroundBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SimpleTextForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SimpleTextForeground *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SimpleTextForegroundBase::shallowCopy(void) const
{
    SimpleTextForeground *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SimpleTextForeground *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SimpleTextForegroundBase::SimpleTextForegroundBase(void) :
    Inherited(),
    _mfLines                  (),
    _sfSize                   (Real32(16)),
    _sfColor                  (Color4f(1,1,1,1)),
    _sfShadowColor            (Color4f(0,0,0,1)),
    _sfBgColor                (Color4f(0,0,0,0)),
    _sfFamily                 (),
    _sfShadowOffset           (Vec2f(1,-1)),
    _sfHorizontalAlign        (UInt8(SimpleTextForeground::Left)),
    _sfVerticalAlign          (UInt8(SimpleTextForeground::Top)),
    _sfBorderColor            (Color4f(0,0,0,0)),
    _sfBorderOffset           (Vec2f(4,4)),
    _sfTextMargin             (Vec2f(0,0)),
    _sfTile                   (bool(false))
{
}

SimpleTextForegroundBase::SimpleTextForegroundBase(const SimpleTextForegroundBase &source) :
    Inherited(source),
    _mfLines                  (source._mfLines                  ),
    _sfSize                   (source._sfSize                   ),
    _sfColor                  (source._sfColor                  ),
    _sfShadowColor            (source._sfShadowColor            ),
    _sfBgColor                (source._sfBgColor                ),
    _sfFamily                 (source._sfFamily                 ),
    _sfShadowOffset           (source._sfShadowOffset           ),
    _sfHorizontalAlign        (source._sfHorizontalAlign        ),
    _sfVerticalAlign          (source._sfVerticalAlign          ),
    _sfBorderColor            (source._sfBorderColor            ),
    _sfBorderOffset           (source._sfBorderOffset           ),
    _sfTextMargin             (source._sfTextMargin             ),
    _sfTile                   (source._sfTile                   )
{
}


/*-------------------------- destructors ----------------------------------*/

SimpleTextForegroundBase::~SimpleTextForegroundBase(void)
{
}


GetFieldHandlePtr SimpleTextForegroundBase::getHandleLines           (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfLines,
             this->getType().getFieldDesc(LinesFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleLines          (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfLines,
             this->getType().getFieldDesc(LinesFieldId),
             this));


    editMField(LinesFieldMask, _mfLines);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleSize            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleSize           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             this));


    editSField(SizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleColor           (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleColor          (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor,
             this->getType().getFieldDesc(ColorFieldId),
             this));


    editSField(ColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleShadowColor     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfShadowColor,
             this->getType().getFieldDesc(ShadowColorFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleShadowColor    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfShadowColor,
             this->getType().getFieldDesc(ShadowColorFieldId),
             this));


    editSField(ShadowColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleBgColor         (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBgColor,
             this->getType().getFieldDesc(BgColorFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleBgColor        (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBgColor,
             this->getType().getFieldDesc(BgColorFieldId),
             this));


    editSField(BgColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleFamily          (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfFamily,
             this->getType().getFieldDesc(FamilyFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleFamily         (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfFamily,
             this->getType().getFieldDesc(FamilyFieldId),
             this));


    editSField(FamilyFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleShadowOffset    (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfShadowOffset,
             this->getType().getFieldDesc(ShadowOffsetFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleShadowOffset   (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfShadowOffset,
             this->getType().getFieldDesc(ShadowOffsetFieldId),
             this));


    editSField(ShadowOffsetFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleHorizontalAlign (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfHorizontalAlign,
             this->getType().getFieldDesc(HorizontalAlignFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleHorizontalAlign(void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfHorizontalAlign,
             this->getType().getFieldDesc(HorizontalAlignFieldId),
             this));


    editSField(HorizontalAlignFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleVerticalAlign   (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfVerticalAlign,
             this->getType().getFieldDesc(VerticalAlignFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleVerticalAlign  (void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfVerticalAlign,
             this->getType().getFieldDesc(VerticalAlignFieldId),
             this));


    editSField(VerticalAlignFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleBorderColor     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBorderColor,
             this->getType().getFieldDesc(BorderColorFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleBorderColor    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBorderColor,
             this->getType().getFieldDesc(BorderColorFieldId),
             this));


    editSField(BorderColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleBorderOffset    (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfBorderOffset,
             this->getType().getFieldDesc(BorderOffsetFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleBorderOffset   (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfBorderOffset,
             this->getType().getFieldDesc(BorderOffsetFieldId),
             this));


    editSField(BorderOffsetFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleTextMargin      (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfTextMargin,
             this->getType().getFieldDesc(TextMarginFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleTextMargin     (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfTextMargin,
             this->getType().getFieldDesc(TextMarginFieldId),
             this));


    editSField(TextMarginFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleTextForegroundBase::getHandleTile            (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfTile,
             this->getType().getFieldDesc(TileFieldId),
             const_cast<SimpleTextForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleTextForegroundBase::editHandleTile           (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfTile,
             this->getType().getFieldDesc(TileFieldId),
             this));


    editSField(TileFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SimpleTextForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SimpleTextForeground *pThis = static_cast<SimpleTextForeground *>(this);

    pThis->execSync(static_cast<SimpleTextForeground *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SimpleTextForegroundBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SimpleTextForeground *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SimpleTextForeground *>(pRefAspect),
                  dynamic_cast<const SimpleTextForeground *>(this));

    return returnValue;
}
#endif

void SimpleTextForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfLines.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
