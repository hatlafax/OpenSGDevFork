/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureGrabForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGTextureObjChunk.h"         // Texture Class

#include "OSGTextureGrabForegroundBase.h"
#include "OSGTextureGrabForeground.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextureGrabForeground
    The GrabForeground is used for grabbing a rendered viewport into a Texture.
    See \ref PageSystemWindowForegroundGrabTexture for a description.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TextureObjChunk * TextureGrabForegroundBase::_sfTexture
    The texture to grab into.
*/

/*! \var bool            TextureGrabForegroundBase::_sfAutoResize
    Automatically resize the texture when the viewport size changes.
*/

/*! \var GLenum          TextureGrabForegroundBase::_sfBindTarget
    Enum to use for glBindTexture, if GL_NONE chosen from texture
    dimensionality. 
*/

/*! \var GLenum          TextureGrabForegroundBase::_sfCopyTarget
    Enum to use for glCopyTexture, if GL_NONE chosen from texture
    dimensionality. 
    Mainly useful to grab into the different parts of a CubeTexture.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<TextureGrabForeground *, nsOSG>::_type(
    "TextureGrabForegroundPtr", 
    "ForegroundPtr", 
    TextureGrabForeground::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(TextureGrabForeground *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TextureGrabForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "texture",
        "The texture to grab into.\n",
        TextureFieldId, TextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureGrabForeground::editHandleTexture),
        static_cast<FieldGetMethodSig >(&TextureGrabForeground::getHandleTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "autoResize",
        "Automatically resize the texture when the viewport size changes.\n",
        AutoResizeFieldId, AutoResizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureGrabForeground::editHandleAutoResize),
        static_cast<FieldGetMethodSig >(&TextureGrabForeground::getHandleAutoResize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "bindTarget",
        "Enum to use for glBindTexture, if GL_NONE chosen from texture\n"
        "dimensionality. \n",
        BindTargetFieldId, BindTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureGrabForeground::editHandleBindTarget),
        static_cast<FieldGetMethodSig >(&TextureGrabForeground::getHandleBindTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "copyTarget",
        "Enum to use for glCopyTexture, if GL_NONE chosen from texture\n"
        "dimensionality. \n"
        "Mainly useful to grab into the different parts of a CubeTexture.\n",
        CopyTargetFieldId, CopyTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TextureGrabForeground::editHandleCopyTarget),
        static_cast<FieldGetMethodSig >(&TextureGrabForeground::getHandleCopyTarget));

    oType.addInitialDesc(pDesc);
}


TextureGrabForegroundBase::TypeObject TextureGrabForegroundBase::_type(
    TextureGrabForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&TextureGrabForegroundBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&TextureGrabForeground::initMethod),
    reinterpret_cast<ExitContainerF>(&TextureGrabForeground::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&TextureGrabForeground::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"TextureGrabForeground\"\n"
    "   parent=\"Foreground\"\n"
    "   library=\"Window\"\n"
    "   pointerfieldtypes=\"none\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   docGroupBase=\"GrpWindowForeground\"\n"
    "   >\n"
    "  The GrabForeground is used for grabbing a rendered viewport into a Texture.\n"
    "  See \\ref PageSystemWindowForegroundGrabTexture for a description.\n"
    "  <Field\n"
    "\t name=\"texture\"\n"
    "\t type=\"TextureObjChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tThe texture to grab into.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"autoResize\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "    Automatically resize the texture when the viewport size changes.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"bindTarget\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"GL_NONE\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "    Enum to use for glBindTexture, if GL_NONE chosen from texture\n"
    "\tdimensionality. \n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"copyTarget\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"GL_NONE\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "    Enum to use for glCopyTexture, if GL_NONE chosen from texture\n"
    "\tdimensionality. \n"
    "    Mainly useful to grab into the different parts of a CubeTexture.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "The GrabForeground is used for grabbing a rendered viewport into a Texture.\n"
    "See \\ref PageSystemWindowForegroundGrabTexture for a description.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextureGrabForegroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextureGrabForegroundBase::getType(void) const
{
    return _type;
}

UInt32 TextureGrabForegroundBase::getContainerSize(void) const
{
    return sizeof(TextureGrabForeground);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TextureGrabForeground::_sfTexture field.
const SFUnrecTextureObjChunkPtr *TextureGrabForegroundBase::getSFTexture(void) const
{
    return &_sfTexture;
}

SFUnrecTextureObjChunkPtr *TextureGrabForegroundBase::editSFTexture        (void)
{
    editSField(TextureFieldMask);

    return &_sfTexture;
}

//! Get the value of the TextureGrabForeground::_sfTexture field.
TextureObjChunk * TextureGrabForegroundBase::getTexture(void) const
{
    return _sfTexture.getValue();
}

//! Set the value of the TextureGrabForeground::_sfTexture field.
void TextureGrabForegroundBase::setTexture(TextureObjChunk * const value)
{
    editSField(TextureFieldMask);

    _sfTexture.setValue(value);
}


SFBool *TextureGrabForegroundBase::editSFAutoResize(void)
{
    editSField(AutoResizeFieldMask);

    return &_sfAutoResize;
}

const SFBool *TextureGrabForegroundBase::getSFAutoResize(void) const
{
    return &_sfAutoResize;
}


SFGLenum *TextureGrabForegroundBase::editSFBindTarget(void)
{
    editSField(BindTargetFieldMask);

    return &_sfBindTarget;
}

const SFGLenum *TextureGrabForegroundBase::getSFBindTarget(void) const
{
    return &_sfBindTarget;
}


SFGLenum *TextureGrabForegroundBase::editSFCopyTarget(void)
{
    editSField(CopyTargetFieldMask);

    return &_sfCopyTarget;
}

const SFGLenum *TextureGrabForegroundBase::getSFCopyTarget(void) const
{
    return &_sfCopyTarget;
}






/*------------------------------ access -----------------------------------*/

SizeT TextureGrabForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        returnValue += _sfTexture.getBinSize();
    }
    if(FieldBits::NoField != (AutoResizeFieldMask & whichField))
    {
        returnValue += _sfAutoResize.getBinSize();
    }
    if(FieldBits::NoField != (BindTargetFieldMask & whichField))
    {
        returnValue += _sfBindTarget.getBinSize();
    }
    if(FieldBits::NoField != (CopyTargetFieldMask & whichField))
    {
        returnValue += _sfCopyTarget.getBinSize();
    }

    return returnValue;
}

void TextureGrabForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        _sfTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoResizeFieldMask & whichField))
    {
        _sfAutoResize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BindTargetFieldMask & whichField))
    {
        _sfBindTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CopyTargetFieldMask & whichField))
    {
        _sfCopyTarget.copyToBin(pMem);
    }
}

void TextureGrabForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (TextureFieldMask & whichField))
    {
        editSField(TextureFieldMask);
        _sfTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoResizeFieldMask & whichField))
    {
        editSField(AutoResizeFieldMask);
        _sfAutoResize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BindTargetFieldMask & whichField))
    {
        editSField(BindTargetFieldMask);
        _sfBindTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CopyTargetFieldMask & whichField))
    {
        editSField(CopyTargetFieldMask);
        _sfCopyTarget.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TextureGrabForegroundTransitPtr TextureGrabForegroundBase::createLocal(BitVector bFlags)
{
    TextureGrabForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TextureGrabForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TextureGrabForegroundTransitPtr TextureGrabForegroundBase::createDependent(BitVector bFlags)
{
    TextureGrabForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TextureGrabForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TextureGrabForegroundTransitPtr TextureGrabForegroundBase::create(void)
{
    TextureGrabForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TextureGrabForeground>(tmpPtr);
    }

    return fc;
}

TextureGrabForeground *TextureGrabForegroundBase::createEmptyLocal(BitVector bFlags)
{
    TextureGrabForeground *returnValue;

    newPtr<TextureGrabForeground>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TextureGrabForeground *TextureGrabForegroundBase::createEmpty(void)
{
    TextureGrabForeground *returnValue;

    newPtr<TextureGrabForeground>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TextureGrabForegroundBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TextureGrabForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureGrabForeground *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureGrabForegroundBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TextureGrabForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureGrabForeground *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureGrabForegroundBase::shallowCopy(void) const
{
    TextureGrabForeground *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TextureGrabForeground *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TextureGrabForegroundBase::TextureGrabForegroundBase(void) :
    Inherited(),
    _sfTexture                (NULL),
    _sfAutoResize             (bool(true)),
    _sfBindTarget             (GLenum(GL_NONE)),
    _sfCopyTarget             (GLenum(GL_NONE))
{
}

TextureGrabForegroundBase::TextureGrabForegroundBase(const TextureGrabForegroundBase &source) :
    Inherited(source),
    _sfTexture                (NULL),
    _sfAutoResize             (source._sfAutoResize             ),
    _sfBindTarget             (source._sfBindTarget             ),
    _sfCopyTarget             (source._sfCopyTarget             )
{
}


/*-------------------------- destructors ----------------------------------*/

TextureGrabForegroundBase::~TextureGrabForegroundBase(void)
{
}

void TextureGrabForegroundBase::onCreate(const TextureGrabForeground *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TextureGrabForeground *pThis = static_cast<TextureGrabForeground *>(this);

        pThis->setTexture(source->getTexture());
    }
}

GetFieldHandlePtr TextureGrabForegroundBase::getHandleTexture         (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfTexture,
             this->getType().getFieldDesc(TextureFieldId),
             const_cast<TextureGrabForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureGrabForegroundBase::editHandleTexture        (void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfTexture,
             this->getType().getFieldDesc(TextureFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&TextureGrabForeground::setTexture,
                    static_cast<TextureGrabForeground *>(this), ::boost::placeholders::_1));

    editSField(TextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureGrabForegroundBase::getHandleAutoResize      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAutoResize,
             this->getType().getFieldDesc(AutoResizeFieldId),
             const_cast<TextureGrabForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureGrabForegroundBase::editHandleAutoResize     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAutoResize,
             this->getType().getFieldDesc(AutoResizeFieldId),
             this));


    editSField(AutoResizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureGrabForegroundBase::getHandleBindTarget      (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfBindTarget,
             this->getType().getFieldDesc(BindTargetFieldId),
             const_cast<TextureGrabForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureGrabForegroundBase::editHandleBindTarget     (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfBindTarget,
             this->getType().getFieldDesc(BindTargetFieldId),
             this));


    editSField(BindTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureGrabForegroundBase::getHandleCopyTarget      (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfCopyTarget,
             this->getType().getFieldDesc(CopyTargetFieldId),
             const_cast<TextureGrabForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TextureGrabForegroundBase::editHandleCopyTarget     (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfCopyTarget,
             this->getType().getFieldDesc(CopyTargetFieldId),
             this));


    editSField(CopyTargetFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TextureGrabForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TextureGrabForeground *pThis = static_cast<TextureGrabForeground *>(this);

    pThis->execSync(static_cast<TextureGrabForeground *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TextureGrabForegroundBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TextureGrabForeground *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextureGrabForeground *>(pRefAspect),
                  dynamic_cast<const TextureGrabForeground *>(this));

    return returnValue;
}
#endif

void TextureGrabForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextureGrabForeground *>(this)->setTexture(NULL);


}


OSG_END_NAMESPACE
