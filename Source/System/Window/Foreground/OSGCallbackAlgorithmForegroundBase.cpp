/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CallbackAlgorithmForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGCallbackAlgorithm.h"       // CallbackAlgorithm Class

#include "OSGCallbackAlgorithmForegroundBase.h"
#include "OSGCallbackAlgorithmForeground.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CallbackAlgorithmForeground
    The CallbackAlgorithmForeground provides a callback for rendering arbitrary stuff.

    This foreground was created in order to conveniently use the AntTweakBar GUI
    library together with OpenSG. The example tonemapping uses the forground for this purpose.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var CallbackAlgorithm * CallbackAlgorithmForegroundBase::_sfCallbackAlgorithm
    A CallbackAlgorithm object that is executed on drawing of the forground.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<CallbackAlgorithmForeground *, nsOSG>::_type(
    "CallbackAlgorithmForegroundPtr", 
    "ForegroundPtr", 
    CallbackAlgorithmForeground::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(CallbackAlgorithmForeground *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           CallbackAlgorithmForeground *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           CallbackAlgorithmForeground *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void CallbackAlgorithmForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecCallbackAlgorithmPtr::Description(
        SFUnrecCallbackAlgorithmPtr::getClassType(),
        "callbackAlgorithm",
        "A CallbackAlgorithm object that is executed on drawing of the forground.\n",
        CallbackAlgorithmFieldId, CallbackAlgorithmFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CallbackAlgorithmForeground::editHandleCallbackAlgorithm),
        static_cast<FieldGetMethodSig >(&CallbackAlgorithmForeground::getHandleCallbackAlgorithm));

    oType.addInitialDesc(pDesc);
}


CallbackAlgorithmForegroundBase::TypeObject CallbackAlgorithmForegroundBase::_type(
    CallbackAlgorithmForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&CallbackAlgorithmForegroundBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&CallbackAlgorithmForeground::initMethod),
    reinterpret_cast<ExitContainerF>(&CallbackAlgorithmForeground::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&CallbackAlgorithmForeground::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"CallbackAlgorithmForeground\"\n"
    "   parent=\"Foreground\"\n"
    "   library=\"Window\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   docGroupBase=\"GrpWindowForeground\"\n"
    "   >\n"
    "  The CallbackAlgorithmForeground provides a callback for rendering arbitrary stuff.\n"
    "\n"
    "  This foreground was created in order to conveniently use the AntTweakBar GUI\n"
    "  library together with OpenSG. The example tonemapping uses the forground for this purpose.\n"
    "  <Field\n"
    "\t name=\"callbackAlgorithm\"\n"
    "\t type=\"CallbackAlgorithm\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "         category=\"pointer\"\n"
    "\t >\n"
    "\tA CallbackAlgorithm object that is executed on drawing of the forground.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "The CallbackAlgorithmForeground provides a callback for rendering arbitrary stuff.\n"
    "\n"
    "This foreground was created in order to conveniently use the AntTweakBar GUI\n"
    "library together with OpenSG. The example tonemapping uses the forground for this purpose.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CallbackAlgorithmForegroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &CallbackAlgorithmForegroundBase::getType(void) const
{
    return _type;
}

UInt32 CallbackAlgorithmForegroundBase::getContainerSize(void) const
{
    return sizeof(CallbackAlgorithmForeground);
}

/*------------------------- decorator get ------------------------------*/


//! Get the CallbackAlgorithmForeground::_sfCallbackAlgorithm field.
const SFUnrecCallbackAlgorithmPtr *CallbackAlgorithmForegroundBase::getSFCallbackAlgorithm(void) const
{
    return &_sfCallbackAlgorithm;
}

SFUnrecCallbackAlgorithmPtr *CallbackAlgorithmForegroundBase::editSFCallbackAlgorithm(void)
{
    editSField(CallbackAlgorithmFieldMask);

    return &_sfCallbackAlgorithm;
}

//! Get the value of the CallbackAlgorithmForeground::_sfCallbackAlgorithm field.
CallbackAlgorithm * CallbackAlgorithmForegroundBase::getCallbackAlgorithm(void) const
{
    return _sfCallbackAlgorithm.getValue();
}

//! Set the value of the CallbackAlgorithmForeground::_sfCallbackAlgorithm field.
void CallbackAlgorithmForegroundBase::setCallbackAlgorithm(CallbackAlgorithm * const value)
{
    editSField(CallbackAlgorithmFieldMask);

    _sfCallbackAlgorithm.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT CallbackAlgorithmForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (CallbackAlgorithmFieldMask & whichField))
    {
        returnValue += _sfCallbackAlgorithm.getBinSize();
    }

    return returnValue;
}

void CallbackAlgorithmForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (CallbackAlgorithmFieldMask & whichField))
    {
        _sfCallbackAlgorithm.copyToBin(pMem);
    }
}

void CallbackAlgorithmForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (CallbackAlgorithmFieldMask & whichField))
    {
        editSField(CallbackAlgorithmFieldMask);
        _sfCallbackAlgorithm.copyFromBin(pMem);
    }
}

//! create a new instance of the class
CallbackAlgorithmForegroundTransitPtr CallbackAlgorithmForegroundBase::createLocal(BitVector bFlags)
{
    CallbackAlgorithmForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<CallbackAlgorithmForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
CallbackAlgorithmForegroundTransitPtr CallbackAlgorithmForegroundBase::createDependent(BitVector bFlags)
{
    CallbackAlgorithmForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<CallbackAlgorithmForeground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
CallbackAlgorithmForegroundTransitPtr CallbackAlgorithmForegroundBase::create(void)
{
    CallbackAlgorithmForegroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<CallbackAlgorithmForeground>(tmpPtr);
    }

    return fc;
}

CallbackAlgorithmForeground *CallbackAlgorithmForegroundBase::createEmptyLocal(BitVector bFlags)
{
    CallbackAlgorithmForeground *returnValue;

    newPtr<CallbackAlgorithmForeground>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
CallbackAlgorithmForeground *CallbackAlgorithmForegroundBase::createEmpty(void)
{
    CallbackAlgorithmForeground *returnValue;

    newPtr<CallbackAlgorithmForeground>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr CallbackAlgorithmForegroundBase::shallowCopyLocal(
    BitVector bFlags) const
{
    CallbackAlgorithmForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CallbackAlgorithmForeground *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr CallbackAlgorithmForegroundBase::shallowCopyDependent(
    BitVector bFlags) const
{
    CallbackAlgorithmForeground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CallbackAlgorithmForeground *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr CallbackAlgorithmForegroundBase::shallowCopy(void) const
{
    CallbackAlgorithmForeground *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const CallbackAlgorithmForeground *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

CallbackAlgorithmForegroundBase::CallbackAlgorithmForegroundBase(void) :
    Inherited(),
    _sfCallbackAlgorithm      (NULL)
{
}

CallbackAlgorithmForegroundBase::CallbackAlgorithmForegroundBase(const CallbackAlgorithmForegroundBase &source) :
    Inherited(source),
    _sfCallbackAlgorithm      (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

CallbackAlgorithmForegroundBase::~CallbackAlgorithmForegroundBase(void)
{
}

void CallbackAlgorithmForegroundBase::onCreate(const CallbackAlgorithmForeground *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        CallbackAlgorithmForeground *pThis = static_cast<CallbackAlgorithmForeground *>(this);

        pThis->setCallbackAlgorithm(source->getCallbackAlgorithm());
    }
}

GetFieldHandlePtr CallbackAlgorithmForegroundBase::getHandleCallbackAlgorithm (void) const
{
    SFUnrecCallbackAlgorithmPtr::GetHandlePtr returnValue(
        new  SFUnrecCallbackAlgorithmPtr::GetHandle(
             &_sfCallbackAlgorithm,
             this->getType().getFieldDesc(CallbackAlgorithmFieldId),
             const_cast<CallbackAlgorithmForegroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CallbackAlgorithmForegroundBase::editHandleCallbackAlgorithm(void)
{
    SFUnrecCallbackAlgorithmPtr::EditHandlePtr returnValue(
        new  SFUnrecCallbackAlgorithmPtr::EditHandle(
             &_sfCallbackAlgorithm,
             this->getType().getFieldDesc(CallbackAlgorithmFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&CallbackAlgorithmForeground::setCallbackAlgorithm,
                    static_cast<CallbackAlgorithmForeground *>(this), ::boost::placeholders::_1));

    editSField(CallbackAlgorithmFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CallbackAlgorithmForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    CallbackAlgorithmForeground *pThis = static_cast<CallbackAlgorithmForeground *>(this);

    pThis->execSync(static_cast<CallbackAlgorithmForeground *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *CallbackAlgorithmForegroundBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    CallbackAlgorithmForeground *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const CallbackAlgorithmForeground *>(pRefAspect),
                  dynamic_cast<const CallbackAlgorithmForeground *>(this));

    return returnValue;
}
#endif

void CallbackAlgorithmForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<CallbackAlgorithmForeground *>(this)->setCallbackAlgorithm(NULL);


}


OSG_END_NAMESPACE
