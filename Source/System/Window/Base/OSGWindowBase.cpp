/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Window!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGViewport.h"                // Port Class
#include "OSGRenderOptions.h"           // RenderOptions Class
#include "OSGDrawTask.h"                // DrawTasks Class

#include "OSGWindowBase.h"
#include "OSGWindow.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Window
    Window is the base class for all window management classes.  See \ref
    PageSystemWindowWindow for a description.

    \ext

    To create a new Window the methods that have to be overridden are 
    init(void), activate(void), deactivate(void) and swap(void).

    \endext
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt16          WindowBase::_sfWidth
    
*/

/*! \var UInt16          WindowBase::_sfHeight
    
*/

/*! \var Viewport *      WindowBase::_mfPort
    
*/

/*! \var UInt32          WindowBase::_sfGlObjectEventCounter
    Counter for GL object events. Needed for multi-aspect updates.
    Is used in glObjectLastRefresh and glObjectLastReinitialize.
*/

/*! \var UInt32          WindowBase::_mfGlObjectLastRefresh
    Indicates the last refresh for the GL object.
*/

/*! \var UInt32          WindowBase::_mfGlObjectLastReinitialize
    Indicates the last reinit for the GL object.
*/

/*! \var Int32           WindowBase::_sfDrawerId
    DrawerId to select window dependent elements (e.g. Distortion filter).
    For cluster window this values equals the clusterId (shl chunk)
*/

/*! \var Int32           WindowBase::_sfRequestMajor
    
*/

/*! \var Int32           WindowBase::_sfRequestMinor
    
*/

/*! \var Int32           WindowBase::_sfContextFlags
    
*/

/*! \var RenderOptions * WindowBase::_sfRenderOptions
    
*/

/*! \var bool            WindowBase::_sfIgnoreAllExtensions
    
*/

/*! \var UInt32          WindowBase::_sfDrawMode
    
*/

/*! \var std::string     WindowBase::_sfRendererInfo
    
*/

/*! \var DrawTask *      WindowBase::_mfDrawTasks
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<Window *, nsOSG>::_type(
    "WindowPtr", 
    "HardwareContextPtr", 
    Window::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(Window *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           Window *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           Window *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void WindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(),
        "width",
        "",
        WidthFieldId, WidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Window::editHandleWidth),
        static_cast<FieldGetMethodSig >(&Window::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(),
        "height",
        "",
        HeightFieldId, HeightFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Window::editHandleHeight),
        static_cast<FieldGetMethodSig >(&Window::getHandleHeight));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildViewportPtr::Description(
        MFUnrecChildViewportPtr::getClassType(),
        "port",
        "",
        PortFieldId, PortFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FNullCheckAccess),
        static_cast<FieldEditMethodSig>(&Window::editHandlePort),
        static_cast<FieldGetMethodSig >(&Window::getHandlePort));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "glObjectEventCounter",
        "Counter for GL object events. Needed for multi-aspect updates.\n"
        "Is used in glObjectLastRefresh and glObjectLastReinitialize.\n",
        GlObjectEventCounterFieldId, GlObjectEventCounterFieldMask,
        true,
        (Field::FClusterLocal | Field::FThreadLocal),
        static_cast<FieldEditMethodSig>(&Window::editHandleGlObjectEventCounter),
        static_cast<FieldGetMethodSig >(&Window::getHandleGlObjectEventCounter));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "glObjectLastRefresh",
        "Indicates the last refresh for the GL object.\n",
        GlObjectLastRefreshFieldId, GlObjectLastRefreshFieldMask,
        true,
        (Field::FClusterLocal | Field::FThreadLocal),
        static_cast<FieldEditMethodSig>(&Window::editHandleGlObjectLastRefresh),
        static_cast<FieldGetMethodSig >(&Window::getHandleGlObjectLastRefresh));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "glObjectLastReinitialize",
        "Indicates the last reinit for the GL object.\n",
        GlObjectLastReinitializeFieldId, GlObjectLastReinitializeFieldMask,
        true,
        (Field::FClusterLocal | Field::FThreadLocal),
        static_cast<FieldEditMethodSig>(&Window::editHandleGlObjectLastReinitialize),
        static_cast<FieldGetMethodSig >(&Window::getHandleGlObjectLastReinitialize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "drawerId",
        "DrawerId to select window dependent elements (e.g. Distortion filter).\n"
        "For cluster window this values equals the clusterId (shl chunk)\n",
        DrawerIdFieldId, DrawerIdFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&Window::editHandleDrawerId),
        static_cast<FieldGetMethodSig >(&Window::getHandleDrawerId));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "requestMajor",
        "",
        RequestMajorFieldId, RequestMajorFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Window::editHandleRequestMajor),
        static_cast<FieldGetMethodSig >(&Window::getHandleRequestMajor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "requestMinor",
        "",
        RequestMinorFieldId, RequestMinorFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Window::editHandleRequestMinor),
        static_cast<FieldGetMethodSig >(&Window::getHandleRequestMinor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "contextFlags",
        "",
        ContextFlagsFieldId, ContextFlagsFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Window::editHandleContextFlags),
        static_cast<FieldGetMethodSig >(&Window::getHandleContextFlags));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecRenderOptionsPtr::Description(
        SFUnrecRenderOptionsPtr::getClassType(),
        "renderOptions",
        "",
        RenderOptionsFieldId, RenderOptionsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Window::editHandleRenderOptions),
        static_cast<FieldGetMethodSig >(&Window::getHandleRenderOptions));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "ignoreAllExtensions",
        "",
        IgnoreAllExtensionsFieldId, IgnoreAllExtensionsFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Window::editHandleIgnoreAllExtensions),
        static_cast<FieldGetMethodSig >(&Window::getHandleIgnoreAllExtensions));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "drawMode",
        "",
        DrawModeFieldId, DrawModeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Window::editHandleDrawMode),
        static_cast<FieldGetMethodSig >(&Window::getHandleDrawMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "rendererInfo",
        "",
        RendererInfoFieldId, RendererInfoFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&Window::editHandleRendererInfo),
        static_cast<FieldGetMethodSig >(&Window::getHandleRendererInfo));

    oType.addInitialDesc(pDesc);

    pDesc = new MFDrawTask::Description(
        MFDrawTask::getClassType(),
        "drawTasks",
        "",
        DrawTasksFieldId, DrawTasksFieldMask,
        true,
        (Field::FCustomAccess | Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&Window::editHandleDrawTasks),
        static_cast<FieldGetMethodSig >(&Window::getHandleDrawTasks));

    oType.addInitialDesc(pDesc);
}


WindowBase::TypeObject WindowBase::_type(
    WindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    reinterpret_cast<InitContainerF>(&Window::initMethod),
    reinterpret_cast<ExitContainerF>(&Window::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&Window::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"Window\"\n"
    "    parent=\"HardwareContext\"\n"
    "    library=\"System\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    docGroupBase=\"GrpSystemWindow\"\n"
    "    >\n"
    "\n"
    "    Window is the base class for all window management classes.  See \\ref\n"
    "    PageSystemWindowWindow for a description.\n"
    "\n"
    "    \\ext\n"
    "\n"
    "    To create a new Window the methods that have to be overridden are \n"
    "    init(void), activate(void), deactivate(void) and swap(void).\n"
    "\n"
    "    \\endext\n"
    "    <Field\n"
    "        name=\"width\"\n"
    "        type=\"UInt16\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"height\"\n"
    "        type=\"UInt16\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"port\"\n"
    "        type=\"Viewport\"\n"
    "        cardinality=\"multi\"\n"
    "        category=\"childpointer\"\n"
    "        childParentType=\"FieldContainer\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        pushToFieldAs=\"addPort\"\n"
    "        insertIntoMFieldAs=\"insertPort\"\n"
    "        replaceInMFieldIndexAs=\"replacePort\"\n"
    "        replaceInMFieldObjectAs=\"replacePortByObj\"\n"
    "        removeFromMFieldIndexAs=\"subPort\"\n"
    "        removeFromMFieldObjectAs=\"subPortByObj\"\n"
    "        clearFieldAs=\"clearPorts\"        \n"
    "        ptrFieldAccess = \"nullCheck\"\n"
    "        linkParentField=\"Parent\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"glObjectEventCounter\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"1\"\n"
    "        access=\"protected\"\n"
    "        fieldFlags=\"FClusterLocal, FThreadLocal\"\n"
    "    >\n"
    "    Counter for GL object events. Needed for multi-aspect updates.\n"
    "        Is used in glObjectLastRefresh and glObjectLastReinitialize.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"glObjectLastRefresh\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"protected\"\n"
    "        fieldFlags=\"FClusterLocal, FThreadLocal\"\n"
    "    >\n"
    "    Indicates the last refresh for the GL object.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"glObjectLastReinitialize\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"protected\"\n"
    "        fieldFlags=\"FClusterLocal, FThreadLocal\"\n"
    "    >\n"
    "    Indicates the last reinit for the GL object.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"drawerId\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "        defaultValue=\"-1\"\n"
    "    >\n"
    "        DrawerId to select window dependent elements (e.g. Distortion filter).\n"
    "        For cluster window this values equals the clusterId (shl chunk)\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"requestMajor\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        fieldFlags=\"\"\n"
    "        defaultValue=\"-1\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"requestMinor\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        fieldFlags=\"\"\n"
    "        defaultValue=\"0\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"contextFlags\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        fieldFlags=\"\"\n"
    "        defaultValue=\"0\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"renderOptions\"\n"
    "        type=\"RenderOptionsPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"NULL\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"ignoreAllExtensions\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"false\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"drawMode\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"(Window::SequentialPartitionDraw | Window::StdDrawer | Window::ActiveContext)\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"rendererInfo\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        defaultValue='\"unknown\"'\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"drawTasks\"\n"
    "        type=\"DrawTask\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"protected\"\n"
    "        category=\"custompointer\"\n"
    "        ptrFieldAccess=\"custom\"\n"
    "        fieldHeader=\"OSGDrawTask.h\"\n"
    "        typeHeader=\"OSGDrawTask.h\"\n"
    "        fieldFlags=\"FCustomAccess, FClusterLocal\"\n"
    "        >\n"
    "    </Field>\n"
    "    \n"
    "</FieldContainer>\n",
    "Window is the base class for all window management classes.  See \\ref\n"
    "PageSystemWindowWindow for a description.\n"
    "\n"
    "\\ext\n"
    "\n"
    "To create a new Window the methods that have to be overridden are \n"
    "init(void), activate(void), deactivate(void) and swap(void).\n"
    "\n"
    "\\endext\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &WindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &WindowBase::getType(void) const
{
    return _type;
}

UInt32 WindowBase::getContainerSize(void) const
{
    return sizeof(Window);
}

/*------------------------- decorator get ------------------------------*/


SFUInt16 *WindowBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFUInt16 *WindowBase::getSFWidth(void) const
{
    return &_sfWidth;
}


SFUInt16 *WindowBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFUInt16 *WindowBase::getSFHeight(void) const
{
    return &_sfHeight;
}


//! Get the Window::_mfPort field.
const MFUnrecChildViewportPtr *WindowBase::getMFPort(void) const
{
    return &_mfPort;
}
Viewport * WindowBase::getPort(const UInt32 index) const
{
    return _mfPort[index];
}

SFUInt32 *WindowBase::editSFGlObjectEventCounter(void)
{
    editSField(GlObjectEventCounterFieldMask);

    return &_sfGlObjectEventCounter;
}

const SFUInt32 *WindowBase::getSFGlObjectEventCounter(void) const
{
    return &_sfGlObjectEventCounter;
}


MFUInt32 *WindowBase::editMFGlObjectLastRefresh(void)
{
    editMField(GlObjectLastRefreshFieldMask, _mfGlObjectLastRefresh);

    return &_mfGlObjectLastRefresh;
}

const MFUInt32 *WindowBase::getMFGlObjectLastRefresh(void) const
{
    return &_mfGlObjectLastRefresh;
}


MFUInt32 *WindowBase::editMFGlObjectLastReinitialize(void)
{
    editMField(GlObjectLastReinitializeFieldMask, _mfGlObjectLastReinitialize);

    return &_mfGlObjectLastReinitialize;
}

const MFUInt32 *WindowBase::getMFGlObjectLastReinitialize(void) const
{
    return &_mfGlObjectLastReinitialize;
}


SFInt32 *WindowBase::editSFDrawerId(void)
{
    editSField(DrawerIdFieldMask);

    return &_sfDrawerId;
}

const SFInt32 *WindowBase::getSFDrawerId(void) const
{
    return &_sfDrawerId;
}


SFInt32 *WindowBase::editSFRequestMajor(void)
{
    editSField(RequestMajorFieldMask);

    return &_sfRequestMajor;
}

const SFInt32 *WindowBase::getSFRequestMajor(void) const
{
    return &_sfRequestMajor;
}


SFInt32 *WindowBase::editSFRequestMinor(void)
{
    editSField(RequestMinorFieldMask);

    return &_sfRequestMinor;
}

const SFInt32 *WindowBase::getSFRequestMinor(void) const
{
    return &_sfRequestMinor;
}


SFInt32 *WindowBase::editSFContextFlags(void)
{
    editSField(ContextFlagsFieldMask);

    return &_sfContextFlags;
}

const SFInt32 *WindowBase::getSFContextFlags(void) const
{
    return &_sfContextFlags;
}


//! Get the Window::_sfRenderOptions field.
const SFUnrecRenderOptionsPtr *WindowBase::getSFRenderOptions(void) const
{
    return &_sfRenderOptions;
}

SFUnrecRenderOptionsPtr *WindowBase::editSFRenderOptions  (void)
{
    editSField(RenderOptionsFieldMask);

    return &_sfRenderOptions;
}

//! Get the value of the Window::_sfRenderOptions field.
RenderOptions * WindowBase::getRenderOptions(void) const
{
    return _sfRenderOptions.getValue();
}

//! Set the value of the Window::_sfRenderOptions field.
void WindowBase::setRenderOptions(RenderOptions * const value)
{
    editSField(RenderOptionsFieldMask);

    _sfRenderOptions.setValue(value);
}


SFBool *WindowBase::editSFIgnoreAllExtensions(void)
{
    editSField(IgnoreAllExtensionsFieldMask);

    return &_sfIgnoreAllExtensions;
}

const SFBool *WindowBase::getSFIgnoreAllExtensions(void) const
{
    return &_sfIgnoreAllExtensions;
}


SFUInt32 *WindowBase::editSFDrawMode(void)
{
    editSField(DrawModeFieldMask);

    return &_sfDrawMode;
}

const SFUInt32 *WindowBase::getSFDrawMode(void) const
{
    return &_sfDrawMode;
}


SFString *WindowBase::editSFRendererInfo(void)
{
    editSField(RendererInfoFieldMask);

    return &_sfRendererInfo;
}

const SFString *WindowBase::getSFRendererInfo(void) const
{
    return &_sfRendererInfo;
}


//! Get the Window::_mfDrawTasks field.
const MFDrawTask *WindowBase::getMFDrawTasks(void) const
{
    return &_mfDrawTasks;
}
DrawTask * WindowBase::getDrawTasks(const UInt32 index) const
{
    return _mfDrawTasks[index];
}



void WindowBase::addPort(Viewport * const value)
{
    if(value == NULL)
        return;

    editMField(PortFieldMask, _mfPort);

    _mfPort.push_back(value);
}

void WindowBase::assignPort     (const MFUnrecChildViewportPtr &value)
{
    MFUnrecChildViewportPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChildViewportPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Window *>(this)->clearPorts();

    while(elemIt != elemEnd)
    {
        this->addPort(*elemIt);

        ++elemIt;
    }
}

void WindowBase::insertPort(UInt32               uiIndex,
                                                   Viewport * const value   )
{
    if(value == NULL)
        return;

    editMField(PortFieldMask, _mfPort);

    MFUnrecChildViewportPtr::iterator fieldIt = _mfPort.begin_nc();

    fieldIt += uiIndex;

    _mfPort.insert(fieldIt, value);
}

void WindowBase::replacePort(UInt32               uiIndex,
                                                       Viewport * const value   )
{
    if(value == NULL)
        return;

    if(uiIndex >= _mfPort.size())
        return;

    editMField(PortFieldMask, _mfPort);

    _mfPort.replace(uiIndex, value);
}

void WindowBase::replacePortByObj(Viewport * const pOldElem,
                                                        Viewport * const pNewElem)
{
    if(pNewElem == NULL)
        return;

    Int32  elemIdx = _mfPort.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(PortFieldMask, _mfPort);

        _mfPort.replace(elemIdx, pNewElem);
    }
}

void WindowBase::subPort(UInt32 uiIndex)
{
    if(uiIndex < _mfPort.size())
    {
        editMField(PortFieldMask, _mfPort);

        _mfPort.erase(uiIndex);
    }
}

void WindowBase::subPortByObj(Viewport * const value)
{
    Int32 iElemIdx = _mfPort.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(PortFieldMask, _mfPort);

        _mfPort.erase(iElemIdx);
    }
}
void WindowBase::clearPorts(void)
{
    editMField(PortFieldMask, _mfPort);


    _mfPort.clear();
}




/*------------------------------ access -----------------------------------*/

SizeT WindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }
    if(FieldBits::NoField != (PortFieldMask & whichField))
    {
        returnValue += _mfPort.getBinSize();
    }
    if(FieldBits::NoField != (GlObjectEventCounterFieldMask & whichField))
    {
        returnValue += _sfGlObjectEventCounter.getBinSize();
    }
    if(FieldBits::NoField != (GlObjectLastRefreshFieldMask & whichField))
    {
        returnValue += _mfGlObjectLastRefresh.getBinSize();
    }
    if(FieldBits::NoField != (GlObjectLastReinitializeFieldMask & whichField))
    {
        returnValue += _mfGlObjectLastReinitialize.getBinSize();
    }
    if(FieldBits::NoField != (DrawerIdFieldMask & whichField))
    {
        returnValue += _sfDrawerId.getBinSize();
    }
    if(FieldBits::NoField != (RequestMajorFieldMask & whichField))
    {
        returnValue += _sfRequestMajor.getBinSize();
    }
    if(FieldBits::NoField != (RequestMinorFieldMask & whichField))
    {
        returnValue += _sfRequestMinor.getBinSize();
    }
    if(FieldBits::NoField != (ContextFlagsFieldMask & whichField))
    {
        returnValue += _sfContextFlags.getBinSize();
    }
    if(FieldBits::NoField != (RenderOptionsFieldMask & whichField))
    {
        returnValue += _sfRenderOptions.getBinSize();
    }
    if(FieldBits::NoField != (IgnoreAllExtensionsFieldMask & whichField))
    {
        returnValue += _sfIgnoreAllExtensions.getBinSize();
    }
    if(FieldBits::NoField != (DrawModeFieldMask & whichField))
    {
        returnValue += _sfDrawMode.getBinSize();
    }
    if(FieldBits::NoField != (RendererInfoFieldMask & whichField))
    {
        returnValue += _sfRendererInfo.getBinSize();
    }
    if(FieldBits::NoField != (DrawTasksFieldMask & whichField))
    {
        returnValue += _mfDrawTasks.getBinSize();
    }

    return returnValue;
}

void WindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PortFieldMask & whichField))
    {
        _mfPort.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectEventCounterFieldMask & whichField))
    {
        _sfGlObjectEventCounter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectLastRefreshFieldMask & whichField))
    {
        _mfGlObjectLastRefresh.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectLastReinitializeFieldMask & whichField))
    {
        _mfGlObjectLastReinitialize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DrawerIdFieldMask & whichField))
    {
        _sfDrawerId.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RequestMajorFieldMask & whichField))
    {
        _sfRequestMajor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RequestMinorFieldMask & whichField))
    {
        _sfRequestMinor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ContextFlagsFieldMask & whichField))
    {
        _sfContextFlags.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RenderOptionsFieldMask & whichField))
    {
        _sfRenderOptions.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IgnoreAllExtensionsFieldMask & whichField))
    {
        _sfIgnoreAllExtensions.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DrawModeFieldMask & whichField))
    {
        _sfDrawMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RendererInfoFieldMask & whichField))
    {
        _sfRendererInfo.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DrawTasksFieldMask & whichField))
    {
        _mfDrawTasks.copyToBin(pMem);
    }
}

void WindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        editSField(WidthFieldMask);
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        editSField(HeightFieldMask);
        _sfHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PortFieldMask & whichField))
    {
        editMField(PortFieldMask, _mfPort);
        _mfPort.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectEventCounterFieldMask & whichField))
    {
        editSField(GlObjectEventCounterFieldMask);
        _sfGlObjectEventCounter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectLastRefreshFieldMask & whichField))
    {
        editMField(GlObjectLastRefreshFieldMask, _mfGlObjectLastRefresh);
        _mfGlObjectLastRefresh.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectLastReinitializeFieldMask & whichField))
    {
        editMField(GlObjectLastReinitializeFieldMask, _mfGlObjectLastReinitialize);
        _mfGlObjectLastReinitialize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DrawerIdFieldMask & whichField))
    {
        editSField(DrawerIdFieldMask);
        _sfDrawerId.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RequestMajorFieldMask & whichField))
    {
        editSField(RequestMajorFieldMask);
        _sfRequestMajor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RequestMinorFieldMask & whichField))
    {
        editSField(RequestMinorFieldMask);
        _sfRequestMinor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ContextFlagsFieldMask & whichField))
    {
        editSField(ContextFlagsFieldMask);
        _sfContextFlags.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RenderOptionsFieldMask & whichField))
    {
        editSField(RenderOptionsFieldMask);
        _sfRenderOptions.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IgnoreAllExtensionsFieldMask & whichField))
    {
        editSField(IgnoreAllExtensionsFieldMask);
        _sfIgnoreAllExtensions.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DrawModeFieldMask & whichField))
    {
        editSField(DrawModeFieldMask);
        _sfDrawMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RendererInfoFieldMask & whichField))
    {
        editSField(RendererInfoFieldMask);
        _sfRendererInfo.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DrawTasksFieldMask & whichField))
    {
        editMField(DrawTasksFieldMask, _mfDrawTasks);
        _mfDrawTasks.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

WindowBase::WindowBase(void) :
    Inherited(),
    _sfWidth                  (),
    _sfHeight                 (),
    _mfPort                   (this,
                          PortFieldId,
                          Viewport::ParentFieldId),
    _sfGlObjectEventCounter   (UInt32(1)),
    _mfGlObjectLastRefresh    (),
    _mfGlObjectLastReinitialize(),
    _sfDrawerId               (Int32(-1)),
    _sfRequestMajor           (Int32(-1)),
    _sfRequestMinor           (Int32(0)),
    _sfContextFlags           (Int32(0)),
    _sfRenderOptions          (NULL),
    _sfIgnoreAllExtensions    (bool(false)),
    _sfDrawMode               (UInt32((Window::SequentialPartitionDraw | Window::StdDrawer | Window::ActiveContext))),
    _sfRendererInfo           (std::string("unknown")),
    _mfDrawTasks              ()
{
}

WindowBase::WindowBase(const WindowBase &source) :
    Inherited(source),
    _sfWidth                  (source._sfWidth                  ),
    _sfHeight                 (source._sfHeight                 ),
    _mfPort                   (this,
                          PortFieldId,
                          Viewport::ParentFieldId),
    _sfGlObjectEventCounter   (source._sfGlObjectEventCounter   ),
    _mfGlObjectLastRefresh    (source._mfGlObjectLastRefresh    ),
    _mfGlObjectLastReinitialize(source._mfGlObjectLastReinitialize),
    _sfDrawerId               (source._sfDrawerId               ),
    _sfRequestMajor           (source._sfRequestMajor           ),
    _sfRequestMinor           (source._sfRequestMinor           ),
    _sfContextFlags           (source._sfContextFlags           ),
    _sfRenderOptions          (NULL),
    _sfIgnoreAllExtensions    (source._sfIgnoreAllExtensions    ),
    _sfDrawMode               (source._sfDrawMode               ),
    _sfRendererInfo           (source._sfRendererInfo           ),
    _mfDrawTasks              ()
{
}


/*-------------------------- destructors ----------------------------------*/

WindowBase::~WindowBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool WindowBase::unlinkChild(
    FieldContainer * const pChild,
    UInt16           const childFieldId)
{
    if(childFieldId == PortFieldId)
    {
        Viewport * pTypedChild =
            dynamic_cast<Viewport *>(pChild);

        if(pTypedChild != NULL)
        {
            Int32 iChildIdx = _mfPort.findIndex(pTypedChild);

            if(iChildIdx != -1)
            {
                editMField(PortFieldMask, _mfPort);

                _mfPort.erase(iChildIdx);

                return true;
            }

            SWARNING << "Parent (["        << this
                     << "] id ["           << this->getId()
                     << "] type ["         << this->getType().getCName()
                     << "] childFieldId [" << childFieldId
                     << "]) - Child (["    << pChild
                     << "] id ["           << pChild->getId()
                     << "] type ["         << pChild->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }


    return Inherited::unlinkChild(pChild, childFieldId);
}

void WindowBase::onCreate(const Window *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Window *pThis = static_cast<Window *>(this);

        MFUnrecChildViewportPtr::const_iterator PortIt  =
            source->_mfPort.begin();
        MFUnrecChildViewportPtr::const_iterator PortEnd =
            source->_mfPort.end  ();

        while(PortIt != PortEnd)
        {
            pThis->addPort(*PortIt);

            ++PortIt;
        }

        pThis->setRenderOptions(source->getRenderOptions());

        MFDrawTask::const_iterator DrawTasksIt  =
            source->_mfDrawTasks.begin();
        MFDrawTask::const_iterator DrawTasksEnd =
            source->_mfDrawTasks.end  ();

        while(DrawTasksIt != DrawTasksEnd)
        {
            pThis->pushToDrawTasks(*DrawTasksIt);

            ++DrawTasksIt;
        }
    }
}

GetFieldHandlePtr WindowBase::getHandleWidth           (void) const
{
    SFUInt16::GetHandlePtr returnValue(
        new  SFUInt16::GetHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleWidth          (void)
{
    SFUInt16::EditHandlePtr returnValue(
        new  SFUInt16::EditHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             this));


    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleHeight          (void) const
{
    SFUInt16::GetHandlePtr returnValue(
        new  SFUInt16::GetHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleHeight         (void)
{
    SFUInt16::EditHandlePtr returnValue(
        new  SFUInt16::EditHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             this));


    editSField(HeightFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandlePort            (void) const
{
    MFUnrecChildViewportPtr::GetHandlePtr returnValue(
        new  MFUnrecChildViewportPtr::GetHandle(
             &_mfPort,
             this->getType().getFieldDesc(PortFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandlePort           (void)
{
    MFUnrecChildViewportPtr::EditHandlePtr returnValue(
        new  MFUnrecChildViewportPtr::EditHandle(
             &_mfPort,
             this->getType().getFieldDesc(PortFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&Window::addPort,
                    static_cast<Window *>(this), ::boost::placeholders::_1));
    returnValue->setInsertMethod(
        boost::bind(&Window::insertPort,
                    static_cast<Window *>(this), ::boost::placeholders::_1, ::boost::placeholders::_2));
    returnValue->setReplaceMethod(
        boost::bind(&Window::replacePort,
                    static_cast<Window *>(this), ::boost::placeholders::_1, ::boost::placeholders::_2));
    returnValue->setReplaceObjMethod(
        boost::bind(&Window::replacePortByObj,
                    static_cast<Window *>(this), ::boost::placeholders::_1, ::boost::placeholders::_2));
    returnValue->setRemoveMethod(
        boost::bind(&Window::subPort,
                    static_cast<Window *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&Window::subPortByObj,
                    static_cast<Window *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&Window::clearPorts,
                    static_cast<Window *>(this)));

    editMField(PortFieldMask, _mfPort);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleGlObjectEventCounter (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfGlObjectEventCounter,
             this->getType().getFieldDesc(GlObjectEventCounterFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleGlObjectEventCounter(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfGlObjectEventCounter,
             this->getType().getFieldDesc(GlObjectEventCounterFieldId),
             this));


    editSField(GlObjectEventCounterFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleGlObjectLastRefresh (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfGlObjectLastRefresh,
             this->getType().getFieldDesc(GlObjectLastRefreshFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleGlObjectLastRefresh(void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfGlObjectLastRefresh,
             this->getType().getFieldDesc(GlObjectLastRefreshFieldId),
             this));


    editMField(GlObjectLastRefreshFieldMask, _mfGlObjectLastRefresh);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleGlObjectLastReinitialize (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfGlObjectLastReinitialize,
             this->getType().getFieldDesc(GlObjectLastReinitializeFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleGlObjectLastReinitialize(void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfGlObjectLastReinitialize,
             this->getType().getFieldDesc(GlObjectLastReinitializeFieldId),
             this));


    editMField(GlObjectLastReinitializeFieldMask, _mfGlObjectLastReinitialize);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleDrawerId        (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDrawerId,
             this->getType().getFieldDesc(DrawerIdFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleDrawerId       (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDrawerId,
             this->getType().getFieldDesc(DrawerIdFieldId),
             this));


    editSField(DrawerIdFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleRequestMajor    (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfRequestMajor,
             this->getType().getFieldDesc(RequestMajorFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleRequestMajor   (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfRequestMajor,
             this->getType().getFieldDesc(RequestMajorFieldId),
             this));


    editSField(RequestMajorFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleRequestMinor    (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfRequestMinor,
             this->getType().getFieldDesc(RequestMinorFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleRequestMinor   (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfRequestMinor,
             this->getType().getFieldDesc(RequestMinorFieldId),
             this));


    editSField(RequestMinorFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleContextFlags    (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfContextFlags,
             this->getType().getFieldDesc(ContextFlagsFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleContextFlags   (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfContextFlags,
             this->getType().getFieldDesc(ContextFlagsFieldId),
             this));


    editSField(ContextFlagsFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleRenderOptions   (void) const
{
    SFUnrecRenderOptionsPtr::GetHandlePtr returnValue(
        new  SFUnrecRenderOptionsPtr::GetHandle(
             &_sfRenderOptions,
             this->getType().getFieldDesc(RenderOptionsFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleRenderOptions  (void)
{
    SFUnrecRenderOptionsPtr::EditHandlePtr returnValue(
        new  SFUnrecRenderOptionsPtr::EditHandle(
             &_sfRenderOptions,
             this->getType().getFieldDesc(RenderOptionsFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&Window::setRenderOptions,
                    static_cast<Window *>(this), ::boost::placeholders::_1));

    editSField(RenderOptionsFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleIgnoreAllExtensions (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfIgnoreAllExtensions,
             this->getType().getFieldDesc(IgnoreAllExtensionsFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleIgnoreAllExtensions(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfIgnoreAllExtensions,
             this->getType().getFieldDesc(IgnoreAllExtensionsFieldId),
             this));


    editSField(IgnoreAllExtensionsFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleDrawMode        (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfDrawMode,
             this->getType().getFieldDesc(DrawModeFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleDrawMode       (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfDrawMode,
             this->getType().getFieldDesc(DrawModeFieldId),
             this));


    editSField(DrawModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleRendererInfo    (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfRendererInfo,
             this->getType().getFieldDesc(RendererInfoFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleRendererInfo   (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfRendererInfo,
             this->getType().getFieldDesc(RendererInfoFieldId),
             this));


    editSField(RendererInfoFieldMask);

    return returnValue;
}

GetFieldHandlePtr WindowBase::getHandleDrawTasks       (void) const
{
    MFDrawTask::GetHandlePtr returnValue(
        new  MFDrawTask::GetHandle(
             &_mfDrawTasks,
             this->getType().getFieldDesc(DrawTasksFieldId),
             const_cast<WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WindowBase::editHandleDrawTasks      (void)
{
    MFDrawTask::EditHandlePtr returnValue(
        new  MFDrawTask::EditHandle(
             &_mfDrawTasks,
             this->getType().getFieldDesc(DrawTasksFieldId),
             this));


    editMField(DrawTasksFieldMask, _mfDrawTasks);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void WindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Window *pThis = static_cast<Window *>(this);

    pThis->execSync(static_cast<Window *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void WindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Window *>(this)->clearPorts();

    static_cast<Window *>(this)->setRenderOptions(NULL);

    static_cast<Window *>(this)->clearDrawTasks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfGlObjectLastRefresh.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfGlObjectLastReinitialize.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
