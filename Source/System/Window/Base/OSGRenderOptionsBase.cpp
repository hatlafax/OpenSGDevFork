/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RenderOptions!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"


#include "OSGGL.h"                        // PolygonMode default header


#include "OSGRenderOptionsBase.h"
#include "OSGRenderOptions.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::RenderOptions
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var MaterialMapKey  RenderOptionsBase::_sfRenderProperties
    
*/

/*! \var bool            RenderOptionsBase::_sfUseGLFinish
    
*/

/*! \var bool            RenderOptionsBase::_sfStatistic
    
*/

/*! \var GLenum          RenderOptionsBase::_sfPolygonMode
    
*/

/*! \var bool            RenderOptionsBase::_sfTwoSidedLighting
    
*/

/*! \var bool            RenderOptionsBase::_sfSpecTexLighting
    
*/

/*! \var bool            RenderOptionsBase::_sfSortTrans
    
*/

/*! \var bool            RenderOptionsBase::_sfZWriteTrans
    
*/

/*! \var bool            RenderOptionsBase::_sfLocalLights
    
*/

/*! \var bool            RenderOptionsBase::_sfCorrectTwoSidedLighting
    
*/

/*! \var bool            RenderOptionsBase::_sfOcclusionCulling
    
*/

/*! \var Int32           RenderOptionsBase::_sfOcclusionCullingMode
    OcclusionStopAndWait (1) or OcclusionMultiFrame (2)
*/

/*! \var UInt32          RenderOptionsBase::_sfOcclusionCullingPixels
    culls objects with this number of visible pixels default is zero.
*/

/*! \var bool            RenderOptionsBase::_sfAntialiasing
    
*/

/*! \var Real32          RenderOptionsBase::_sfAntialiasingDistance
    
*/

/*! \var Real32          RenderOptionsBase::_sfAntialiasingScale
    
*/

/*! \var UInt32          RenderOptionsBase::_sfAntialiasingTrigger
    
*/

/*! \var bool            RenderOptionsBase::_sfFrustumCulling
    
*/

/*! \var bool            RenderOptionsBase::_sfBackfaceCulling
    
*/

/*! \var bool            RenderOptionsBase::_sfSmallFeatureCulling
    
*/

/*! \var Real32          RenderOptionsBase::_sfSmallFeaturePixels
    
*/

/*! \var UInt32          RenderOptionsBase::_sfSmallFeatureThreshold
    
*/

/*! \var bool            RenderOptionsBase::_sfFirstFrame
    
*/

/*! \var bool            RenderOptionsBase::_sfDepthOnlyPass
    
*/

/*! \var Color4f         RenderOptionsBase::_sfLightModelAmbient
    
*/

/*! \var Color4f         RenderOptionsBase::_sfFogColor
    
*/

/*! \var Vec2f           RenderOptionsBase::_sfFogRange
    
*/

/*! \var Real32          RenderOptionsBase::_sfFogDensity
    
*/

/*! \var Int32           RenderOptionsBase::_sfFogMode
    
*/

/*! \var UInt32          RenderOptionsBase::_sfMultiSample
    number of multi-sample-buffer used for FSAA
*/

/*! \var UInt32          RenderOptionsBase::_sfMultiSampleFilterMode
    defindes the filter-method for multi-sample buffer, must be GL_FALSE/0 (off), GL_DONT_CARE, GL_FASTEST or GL_NICEST
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<RenderOptions *, nsOSG>::_type(
    "RenderOptionsPtr", 
    "AttachmentPtr", 
    RenderOptions::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(RenderOptions *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           RenderOptions *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           RenderOptions *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void RenderOptionsBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFMaterialMapKey::Description(
        SFMaterialMapKey::getClassType(),
        "renderProperties",
        "",
        RenderPropertiesFieldId, RenderPropertiesFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleRenderProperties),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleRenderProperties));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "useGLFinish",
        "",
        UseGLFinishFieldId, UseGLFinishFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleUseGLFinish),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleUseGLFinish));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "statistic",
        "",
        StatisticFieldId, StatisticFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleStatistic),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleStatistic));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "polygonMode",
        "",
        PolygonModeFieldId, PolygonModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandlePolygonMode),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandlePolygonMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "twoSidedLighting",
        "",
        TwoSidedLightingFieldId, TwoSidedLightingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleTwoSidedLighting),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleTwoSidedLighting));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "specTexLighting",
        "",
        SpecTexLightingFieldId, SpecTexLightingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleSpecTexLighting),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleSpecTexLighting));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "sortTrans",
        "",
        SortTransFieldId, SortTransFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleSortTrans),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleSortTrans));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "zWriteTrans",
        "",
        ZWriteTransFieldId, ZWriteTransFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleZWriteTrans),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleZWriteTrans));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "localLights",
        "",
        LocalLightsFieldId, LocalLightsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleLocalLights),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleLocalLights));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "correctTwoSidedLighting",
        "",
        CorrectTwoSidedLightingFieldId, CorrectTwoSidedLightingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleCorrectTwoSidedLighting),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleCorrectTwoSidedLighting));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "occlusionCulling",
        "",
        OcclusionCullingFieldId, OcclusionCullingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleOcclusionCulling),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleOcclusionCulling));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "occlusionCullingMode",
        "OcclusionStopAndWait (1) or OcclusionMultiFrame (2)\n",
        OcclusionCullingModeFieldId, OcclusionCullingModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleOcclusionCullingMode),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleOcclusionCullingMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "occlusionCullingPixels",
        "culls objects with this number of visible pixels default is zero.\n",
        OcclusionCullingPixelsFieldId, OcclusionCullingPixelsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleOcclusionCullingPixels),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleOcclusionCullingPixels));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "antialiasing",
        "",
        AntialiasingFieldId, AntialiasingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleAntialiasing),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleAntialiasing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "antialiasingDistance",
        "",
        AntialiasingDistanceFieldId, AntialiasingDistanceFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleAntialiasingDistance),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleAntialiasingDistance));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "antialiasingScale",
        "",
        AntialiasingScaleFieldId, AntialiasingScaleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleAntialiasingScale),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleAntialiasingScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "antialiasingTrigger",
        "",
        AntialiasingTriggerFieldId, AntialiasingTriggerFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleAntialiasingTrigger),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleAntialiasingTrigger));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "frustumCulling",
        "",
        FrustumCullingFieldId, FrustumCullingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleFrustumCulling),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleFrustumCulling));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "backfaceCulling",
        "",
        BackfaceCullingFieldId, BackfaceCullingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleBackfaceCulling),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleBackfaceCulling));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "smallFeatureCulling",
        "",
        SmallFeatureCullingFieldId, SmallFeatureCullingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleSmallFeatureCulling),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleSmallFeatureCulling));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "smallFeaturePixels",
        "",
        SmallFeaturePixelsFieldId, SmallFeaturePixelsFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleSmallFeaturePixels),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleSmallFeaturePixels));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "smallFeatureThreshold",
        "",
        SmallFeatureThresholdFieldId, SmallFeatureThresholdFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleSmallFeatureThreshold),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleSmallFeatureThreshold));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "firstFrame",
        "",
        FirstFrameFieldId, FirstFrameFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleFirstFrame),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleFirstFrame));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "depthOnlyPass",
        "",
        DepthOnlyPassFieldId, DepthOnlyPassFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleDepthOnlyPass),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleDepthOnlyPass));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "lightModelAmbient",
        "",
        LightModelAmbientFieldId, LightModelAmbientFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleLightModelAmbient),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleLightModelAmbient));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "fogColor",
        "",
        FogColorFieldId, FogColorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleFogColor),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleFogColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "fogRange",
        "",
        FogRangeFieldId, FogRangeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleFogRange),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleFogRange));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "fogDensity",
        "",
        FogDensityFieldId, FogDensityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleFogDensity),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleFogDensity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "fogMode",
        "",
        FogModeFieldId, FogModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleFogMode),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleFogMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "multiSample",
        "number of multi-sample-buffer used for FSAA\n",
        MultiSampleFieldId, MultiSampleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleMultiSample),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleMultiSample));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "multiSampleFilterMode",
        "defindes the filter-method for multi-sample buffer, must be GL_FALSE/0 (off), GL_DONT_CARE, GL_FASTEST or GL_NICEST\n",
        MultiSampleFilterModeFieldId, MultiSampleFilterModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RenderOptions::editHandleMultiSampleFilterMode),
        static_cast<FieldGetMethodSig >(&RenderOptions::getHandleMultiSampleFilterMode));

    oType.addInitialDesc(pDesc);
}


RenderOptionsBase::TypeObject RenderOptionsBase::_type(
    RenderOptionsBase::getClassname(),
    Inherited::getClassname(),
    "RenderOptions",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&RenderOptionsBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&RenderOptions::initMethod),
    reinterpret_cast<ExitContainerF>(&RenderOptions::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&RenderOptions::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"RenderOptions\"\n"
    "   parent=\"Attachment\"\n"
    "   library=\"System\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   docGroupBase=\"GrpSystemWindow\"\n"
    "   >\n"
    "\n"
    "  <Field\n"
    "\t name=\"renderProperties\"\n"
    "\t type=\"MaterialMapKey\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0x0000\"\n"
    "\t access=\"public\"\n"
    "     fieldHeader=\"OSGMaterialMapFields.h\"\n"
    "     typeHeader=\"OSGMaterialMapFields.h\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"useGLFinish\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  \n"
    "  <Field\n"
    "\t name=\"statistic\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"polygonMode\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"GL_FILL\"\n"
    "\t defaultHeader=\"&quot;OSGGL.h&quot;\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"twoSidedLighting\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"specTexLighting\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"sortTrans\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"zWriteTrans\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"localLights\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"correctTwoSidedLighting\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"occlusionCulling\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"occlusionCullingMode\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tOcclusionStopAndWait (1) or OcclusionMultiFrame (2)\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"occlusionCullingPixels\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tculls objects with this number of visible pixels default is zero.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"antialiasing\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"antialiasingDistance\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0.2\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"antialiasingScale\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"2.0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"antialiasingTrigger\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"frustumCulling\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"backfaceCulling\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"smallFeatureCulling\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"smallFeaturePixels\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"smallFeatureThreshold\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"firstFrame\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"depthOnlyPass\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"lightModelAmbient\"\n"
    "\t type=\"Color4f\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0.2f,0.2f,0.2f,1.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"fogColor\"\n"
    "\t type=\"Color4f\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0,0,0,0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"fogRange\"\n"
    "\t type=\"Vec2f\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0,1\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"fogDensity\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"fogMode\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"multiSample\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tnumber of multi-sample-buffer used for FSAA\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"multiSampleFilterMode\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tdefindes the filter-method for multi-sample buffer, must be GL_FALSE/0 (off), GL_DONT_CARE, GL_FASTEST or GL_NICEST\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &RenderOptionsBase::getType(void)
{
    return _type;
}

const FieldContainerType &RenderOptionsBase::getType(void) const
{
    return _type;
}

UInt32 RenderOptionsBase::getContainerSize(void) const
{
    return sizeof(RenderOptions);
}

/*------------------------- decorator get ------------------------------*/


SFMaterialMapKey *RenderOptionsBase::editSFRenderProperties(void)
{
    editSField(RenderPropertiesFieldMask);

    return &_sfRenderProperties;
}

const SFMaterialMapKey *RenderOptionsBase::getSFRenderProperties(void) const
{
    return &_sfRenderProperties;
}


SFBool *RenderOptionsBase::editSFUseGLFinish(void)
{
    editSField(UseGLFinishFieldMask);

    return &_sfUseGLFinish;
}

const SFBool *RenderOptionsBase::getSFUseGLFinish(void) const
{
    return &_sfUseGLFinish;
}


SFBool *RenderOptionsBase::editSFStatistic(void)
{
    editSField(StatisticFieldMask);

    return &_sfStatistic;
}

const SFBool *RenderOptionsBase::getSFStatistic(void) const
{
    return &_sfStatistic;
}


SFGLenum *RenderOptionsBase::editSFPolygonMode(void)
{
    editSField(PolygonModeFieldMask);

    return &_sfPolygonMode;
}

const SFGLenum *RenderOptionsBase::getSFPolygonMode(void) const
{
    return &_sfPolygonMode;
}


SFBool *RenderOptionsBase::editSFTwoSidedLighting(void)
{
    editSField(TwoSidedLightingFieldMask);

    return &_sfTwoSidedLighting;
}

const SFBool *RenderOptionsBase::getSFTwoSidedLighting(void) const
{
    return &_sfTwoSidedLighting;
}


SFBool *RenderOptionsBase::editSFSpecTexLighting(void)
{
    editSField(SpecTexLightingFieldMask);

    return &_sfSpecTexLighting;
}

const SFBool *RenderOptionsBase::getSFSpecTexLighting(void) const
{
    return &_sfSpecTexLighting;
}


SFBool *RenderOptionsBase::editSFSortTrans(void)
{
    editSField(SortTransFieldMask);

    return &_sfSortTrans;
}

const SFBool *RenderOptionsBase::getSFSortTrans(void) const
{
    return &_sfSortTrans;
}


SFBool *RenderOptionsBase::editSFZWriteTrans(void)
{
    editSField(ZWriteTransFieldMask);

    return &_sfZWriteTrans;
}

const SFBool *RenderOptionsBase::getSFZWriteTrans(void) const
{
    return &_sfZWriteTrans;
}


SFBool *RenderOptionsBase::editSFLocalLights(void)
{
    editSField(LocalLightsFieldMask);

    return &_sfLocalLights;
}

const SFBool *RenderOptionsBase::getSFLocalLights(void) const
{
    return &_sfLocalLights;
}


SFBool *RenderOptionsBase::editSFCorrectTwoSidedLighting(void)
{
    editSField(CorrectTwoSidedLightingFieldMask);

    return &_sfCorrectTwoSidedLighting;
}

const SFBool *RenderOptionsBase::getSFCorrectTwoSidedLighting(void) const
{
    return &_sfCorrectTwoSidedLighting;
}


SFBool *RenderOptionsBase::editSFOcclusionCulling(void)
{
    editSField(OcclusionCullingFieldMask);

    return &_sfOcclusionCulling;
}

const SFBool *RenderOptionsBase::getSFOcclusionCulling(void) const
{
    return &_sfOcclusionCulling;
}


SFInt32 *RenderOptionsBase::editSFOcclusionCullingMode(void)
{
    editSField(OcclusionCullingModeFieldMask);

    return &_sfOcclusionCullingMode;
}

const SFInt32 *RenderOptionsBase::getSFOcclusionCullingMode(void) const
{
    return &_sfOcclusionCullingMode;
}


SFUInt32 *RenderOptionsBase::editSFOcclusionCullingPixels(void)
{
    editSField(OcclusionCullingPixelsFieldMask);

    return &_sfOcclusionCullingPixels;
}

const SFUInt32 *RenderOptionsBase::getSFOcclusionCullingPixels(void) const
{
    return &_sfOcclusionCullingPixels;
}


SFBool *RenderOptionsBase::editSFAntialiasing(void)
{
    editSField(AntialiasingFieldMask);

    return &_sfAntialiasing;
}

const SFBool *RenderOptionsBase::getSFAntialiasing(void) const
{
    return &_sfAntialiasing;
}


SFReal32 *RenderOptionsBase::editSFAntialiasingDistance(void)
{
    editSField(AntialiasingDistanceFieldMask);

    return &_sfAntialiasingDistance;
}

const SFReal32 *RenderOptionsBase::getSFAntialiasingDistance(void) const
{
    return &_sfAntialiasingDistance;
}


SFReal32 *RenderOptionsBase::editSFAntialiasingScale(void)
{
    editSField(AntialiasingScaleFieldMask);

    return &_sfAntialiasingScale;
}

const SFReal32 *RenderOptionsBase::getSFAntialiasingScale(void) const
{
    return &_sfAntialiasingScale;
}


SFUInt32 *RenderOptionsBase::editSFAntialiasingTrigger(void)
{
    editSField(AntialiasingTriggerFieldMask);

    return &_sfAntialiasingTrigger;
}

const SFUInt32 *RenderOptionsBase::getSFAntialiasingTrigger(void) const
{
    return &_sfAntialiasingTrigger;
}


SFBool *RenderOptionsBase::editSFFrustumCulling(void)
{
    editSField(FrustumCullingFieldMask);

    return &_sfFrustumCulling;
}

const SFBool *RenderOptionsBase::getSFFrustumCulling(void) const
{
    return &_sfFrustumCulling;
}


SFBool *RenderOptionsBase::editSFBackfaceCulling(void)
{
    editSField(BackfaceCullingFieldMask);

    return &_sfBackfaceCulling;
}

const SFBool *RenderOptionsBase::getSFBackfaceCulling(void) const
{
    return &_sfBackfaceCulling;
}


SFBool *RenderOptionsBase::editSFSmallFeatureCulling(void)
{
    editSField(SmallFeatureCullingFieldMask);

    return &_sfSmallFeatureCulling;
}

const SFBool *RenderOptionsBase::getSFSmallFeatureCulling(void) const
{
    return &_sfSmallFeatureCulling;
}


SFReal32 *RenderOptionsBase::editSFSmallFeaturePixels(void)
{
    editSField(SmallFeaturePixelsFieldMask);

    return &_sfSmallFeaturePixels;
}

const SFReal32 *RenderOptionsBase::getSFSmallFeaturePixels(void) const
{
    return &_sfSmallFeaturePixels;
}


SFUInt32 *RenderOptionsBase::editSFSmallFeatureThreshold(void)
{
    editSField(SmallFeatureThresholdFieldMask);

    return &_sfSmallFeatureThreshold;
}

const SFUInt32 *RenderOptionsBase::getSFSmallFeatureThreshold(void) const
{
    return &_sfSmallFeatureThreshold;
}


SFBool *RenderOptionsBase::editSFFirstFrame(void)
{
    editSField(FirstFrameFieldMask);

    return &_sfFirstFrame;
}

const SFBool *RenderOptionsBase::getSFFirstFrame(void) const
{
    return &_sfFirstFrame;
}


SFBool *RenderOptionsBase::editSFDepthOnlyPass(void)
{
    editSField(DepthOnlyPassFieldMask);

    return &_sfDepthOnlyPass;
}

const SFBool *RenderOptionsBase::getSFDepthOnlyPass(void) const
{
    return &_sfDepthOnlyPass;
}


SFColor4f *RenderOptionsBase::editSFLightModelAmbient(void)
{
    editSField(LightModelAmbientFieldMask);

    return &_sfLightModelAmbient;
}

const SFColor4f *RenderOptionsBase::getSFLightModelAmbient(void) const
{
    return &_sfLightModelAmbient;
}


SFColor4f *RenderOptionsBase::editSFFogColor(void)
{
    editSField(FogColorFieldMask);

    return &_sfFogColor;
}

const SFColor4f *RenderOptionsBase::getSFFogColor(void) const
{
    return &_sfFogColor;
}


SFVec2f *RenderOptionsBase::editSFFogRange(void)
{
    editSField(FogRangeFieldMask);

    return &_sfFogRange;
}

const SFVec2f *RenderOptionsBase::getSFFogRange(void) const
{
    return &_sfFogRange;
}


SFReal32 *RenderOptionsBase::editSFFogDensity(void)
{
    editSField(FogDensityFieldMask);

    return &_sfFogDensity;
}

const SFReal32 *RenderOptionsBase::getSFFogDensity(void) const
{
    return &_sfFogDensity;
}


SFInt32 *RenderOptionsBase::editSFFogMode(void)
{
    editSField(FogModeFieldMask);

    return &_sfFogMode;
}

const SFInt32 *RenderOptionsBase::getSFFogMode(void) const
{
    return &_sfFogMode;
}


SFUInt32 *RenderOptionsBase::editSFMultiSample(void)
{
    editSField(MultiSampleFieldMask);

    return &_sfMultiSample;
}

const SFUInt32 *RenderOptionsBase::getSFMultiSample(void) const
{
    return &_sfMultiSample;
}


SFUInt32 *RenderOptionsBase::editSFMultiSampleFilterMode(void)
{
    editSField(MultiSampleFilterModeFieldMask);

    return &_sfMultiSampleFilterMode;
}

const SFUInt32 *RenderOptionsBase::getSFMultiSampleFilterMode(void) const
{
    return &_sfMultiSampleFilterMode;
}






/*------------------------------ access -----------------------------------*/

SizeT RenderOptionsBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RenderPropertiesFieldMask & whichField))
    {
        returnValue += _sfRenderProperties.getBinSize();
    }
    if(FieldBits::NoField != (UseGLFinishFieldMask & whichField))
    {
        returnValue += _sfUseGLFinish.getBinSize();
    }
    if(FieldBits::NoField != (StatisticFieldMask & whichField))
    {
        returnValue += _sfStatistic.getBinSize();
    }
    if(FieldBits::NoField != (PolygonModeFieldMask & whichField))
    {
        returnValue += _sfPolygonMode.getBinSize();
    }
    if(FieldBits::NoField != (TwoSidedLightingFieldMask & whichField))
    {
        returnValue += _sfTwoSidedLighting.getBinSize();
    }
    if(FieldBits::NoField != (SpecTexLightingFieldMask & whichField))
    {
        returnValue += _sfSpecTexLighting.getBinSize();
    }
    if(FieldBits::NoField != (SortTransFieldMask & whichField))
    {
        returnValue += _sfSortTrans.getBinSize();
    }
    if(FieldBits::NoField != (ZWriteTransFieldMask & whichField))
    {
        returnValue += _sfZWriteTrans.getBinSize();
    }
    if(FieldBits::NoField != (LocalLightsFieldMask & whichField))
    {
        returnValue += _sfLocalLights.getBinSize();
    }
    if(FieldBits::NoField != (CorrectTwoSidedLightingFieldMask & whichField))
    {
        returnValue += _sfCorrectTwoSidedLighting.getBinSize();
    }
    if(FieldBits::NoField != (OcclusionCullingFieldMask & whichField))
    {
        returnValue += _sfOcclusionCulling.getBinSize();
    }
    if(FieldBits::NoField != (OcclusionCullingModeFieldMask & whichField))
    {
        returnValue += _sfOcclusionCullingMode.getBinSize();
    }
    if(FieldBits::NoField != (OcclusionCullingPixelsFieldMask & whichField))
    {
        returnValue += _sfOcclusionCullingPixels.getBinSize();
    }
    if(FieldBits::NoField != (AntialiasingFieldMask & whichField))
    {
        returnValue += _sfAntialiasing.getBinSize();
    }
    if(FieldBits::NoField != (AntialiasingDistanceFieldMask & whichField))
    {
        returnValue += _sfAntialiasingDistance.getBinSize();
    }
    if(FieldBits::NoField != (AntialiasingScaleFieldMask & whichField))
    {
        returnValue += _sfAntialiasingScale.getBinSize();
    }
    if(FieldBits::NoField != (AntialiasingTriggerFieldMask & whichField))
    {
        returnValue += _sfAntialiasingTrigger.getBinSize();
    }
    if(FieldBits::NoField != (FrustumCullingFieldMask & whichField))
    {
        returnValue += _sfFrustumCulling.getBinSize();
    }
    if(FieldBits::NoField != (BackfaceCullingFieldMask & whichField))
    {
        returnValue += _sfBackfaceCulling.getBinSize();
    }
    if(FieldBits::NoField != (SmallFeatureCullingFieldMask & whichField))
    {
        returnValue += _sfSmallFeatureCulling.getBinSize();
    }
    if(FieldBits::NoField != (SmallFeaturePixelsFieldMask & whichField))
    {
        returnValue += _sfSmallFeaturePixels.getBinSize();
    }
    if(FieldBits::NoField != (SmallFeatureThresholdFieldMask & whichField))
    {
        returnValue += _sfSmallFeatureThreshold.getBinSize();
    }
    if(FieldBits::NoField != (FirstFrameFieldMask & whichField))
    {
        returnValue += _sfFirstFrame.getBinSize();
    }
    if(FieldBits::NoField != (DepthOnlyPassFieldMask & whichField))
    {
        returnValue += _sfDepthOnlyPass.getBinSize();
    }
    if(FieldBits::NoField != (LightModelAmbientFieldMask & whichField))
    {
        returnValue += _sfLightModelAmbient.getBinSize();
    }
    if(FieldBits::NoField != (FogColorFieldMask & whichField))
    {
        returnValue += _sfFogColor.getBinSize();
    }
    if(FieldBits::NoField != (FogRangeFieldMask & whichField))
    {
        returnValue += _sfFogRange.getBinSize();
    }
    if(FieldBits::NoField != (FogDensityFieldMask & whichField))
    {
        returnValue += _sfFogDensity.getBinSize();
    }
    if(FieldBits::NoField != (FogModeFieldMask & whichField))
    {
        returnValue += _sfFogMode.getBinSize();
    }
    if(FieldBits::NoField != (MultiSampleFieldMask & whichField))
    {
        returnValue += _sfMultiSample.getBinSize();
    }
    if(FieldBits::NoField != (MultiSampleFilterModeFieldMask & whichField))
    {
        returnValue += _sfMultiSampleFilterMode.getBinSize();
    }

    return returnValue;
}

void RenderOptionsBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RenderPropertiesFieldMask & whichField))
    {
        _sfRenderProperties.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseGLFinishFieldMask & whichField))
    {
        _sfUseGLFinish.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StatisticFieldMask & whichField))
    {
        _sfStatistic.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PolygonModeFieldMask & whichField))
    {
        _sfPolygonMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TwoSidedLightingFieldMask & whichField))
    {
        _sfTwoSidedLighting.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SpecTexLightingFieldMask & whichField))
    {
        _sfSpecTexLighting.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SortTransFieldMask & whichField))
    {
        _sfSortTrans.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ZWriteTransFieldMask & whichField))
    {
        _sfZWriteTrans.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LocalLightsFieldMask & whichField))
    {
        _sfLocalLights.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CorrectTwoSidedLightingFieldMask & whichField))
    {
        _sfCorrectTwoSidedLighting.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingFieldMask & whichField))
    {
        _sfOcclusionCulling.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingModeFieldMask & whichField))
    {
        _sfOcclusionCullingMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingPixelsFieldMask & whichField))
    {
        _sfOcclusionCullingPixels.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingFieldMask & whichField))
    {
        _sfAntialiasing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingDistanceFieldMask & whichField))
    {
        _sfAntialiasingDistance.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingScaleFieldMask & whichField))
    {
        _sfAntialiasingScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingTriggerFieldMask & whichField))
    {
        _sfAntialiasingTrigger.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrustumCullingFieldMask & whichField))
    {
        _sfFrustumCulling.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackfaceCullingFieldMask & whichField))
    {
        _sfBackfaceCulling.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeatureCullingFieldMask & whichField))
    {
        _sfSmallFeatureCulling.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeaturePixelsFieldMask & whichField))
    {
        _sfSmallFeaturePixels.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeatureThresholdFieldMask & whichField))
    {
        _sfSmallFeatureThreshold.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FirstFrameFieldMask & whichField))
    {
        _sfFirstFrame.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DepthOnlyPassFieldMask & whichField))
    {
        _sfDepthOnlyPass.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightModelAmbientFieldMask & whichField))
    {
        _sfLightModelAmbient.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FogColorFieldMask & whichField))
    {
        _sfFogColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FogRangeFieldMask & whichField))
    {
        _sfFogRange.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FogDensityFieldMask & whichField))
    {
        _sfFogDensity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FogModeFieldMask & whichField))
    {
        _sfFogMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MultiSampleFieldMask & whichField))
    {
        _sfMultiSample.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MultiSampleFilterModeFieldMask & whichField))
    {
        _sfMultiSampleFilterMode.copyToBin(pMem);
    }
}

void RenderOptionsBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RenderPropertiesFieldMask & whichField))
    {
        editSField(RenderPropertiesFieldMask);
        _sfRenderProperties.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseGLFinishFieldMask & whichField))
    {
        editSField(UseGLFinishFieldMask);
        _sfUseGLFinish.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StatisticFieldMask & whichField))
    {
        editSField(StatisticFieldMask);
        _sfStatistic.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PolygonModeFieldMask & whichField))
    {
        editSField(PolygonModeFieldMask);
        _sfPolygonMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TwoSidedLightingFieldMask & whichField))
    {
        editSField(TwoSidedLightingFieldMask);
        _sfTwoSidedLighting.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SpecTexLightingFieldMask & whichField))
    {
        editSField(SpecTexLightingFieldMask);
        _sfSpecTexLighting.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SortTransFieldMask & whichField))
    {
        editSField(SortTransFieldMask);
        _sfSortTrans.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ZWriteTransFieldMask & whichField))
    {
        editSField(ZWriteTransFieldMask);
        _sfZWriteTrans.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LocalLightsFieldMask & whichField))
    {
        editSField(LocalLightsFieldMask);
        _sfLocalLights.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CorrectTwoSidedLightingFieldMask & whichField))
    {
        editSField(CorrectTwoSidedLightingFieldMask);
        _sfCorrectTwoSidedLighting.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingFieldMask & whichField))
    {
        editSField(OcclusionCullingFieldMask);
        _sfOcclusionCulling.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingModeFieldMask & whichField))
    {
        editSField(OcclusionCullingModeFieldMask);
        _sfOcclusionCullingMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingPixelsFieldMask & whichField))
    {
        editSField(OcclusionCullingPixelsFieldMask);
        _sfOcclusionCullingPixels.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingFieldMask & whichField))
    {
        editSField(AntialiasingFieldMask);
        _sfAntialiasing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingDistanceFieldMask & whichField))
    {
        editSField(AntialiasingDistanceFieldMask);
        _sfAntialiasingDistance.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingScaleFieldMask & whichField))
    {
        editSField(AntialiasingScaleFieldMask);
        _sfAntialiasingScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingTriggerFieldMask & whichField))
    {
        editSField(AntialiasingTriggerFieldMask);
        _sfAntialiasingTrigger.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrustumCullingFieldMask & whichField))
    {
        editSField(FrustumCullingFieldMask);
        _sfFrustumCulling.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackfaceCullingFieldMask & whichField))
    {
        editSField(BackfaceCullingFieldMask);
        _sfBackfaceCulling.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeatureCullingFieldMask & whichField))
    {
        editSField(SmallFeatureCullingFieldMask);
        _sfSmallFeatureCulling.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeaturePixelsFieldMask & whichField))
    {
        editSField(SmallFeaturePixelsFieldMask);
        _sfSmallFeaturePixels.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeatureThresholdFieldMask & whichField))
    {
        editSField(SmallFeatureThresholdFieldMask);
        _sfSmallFeatureThreshold.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FirstFrameFieldMask & whichField))
    {
        editSField(FirstFrameFieldMask);
        _sfFirstFrame.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DepthOnlyPassFieldMask & whichField))
    {
        editSField(DepthOnlyPassFieldMask);
        _sfDepthOnlyPass.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightModelAmbientFieldMask & whichField))
    {
        editSField(LightModelAmbientFieldMask);
        _sfLightModelAmbient.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FogColorFieldMask & whichField))
    {
        editSField(FogColorFieldMask);
        _sfFogColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FogRangeFieldMask & whichField))
    {
        editSField(FogRangeFieldMask);
        _sfFogRange.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FogDensityFieldMask & whichField))
    {
        editSField(FogDensityFieldMask);
        _sfFogDensity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FogModeFieldMask & whichField))
    {
        editSField(FogModeFieldMask);
        _sfFogMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MultiSampleFieldMask & whichField))
    {
        editSField(MultiSampleFieldMask);
        _sfMultiSample.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MultiSampleFilterModeFieldMask & whichField))
    {
        editSField(MultiSampleFilterModeFieldMask);
        _sfMultiSampleFilterMode.copyFromBin(pMem);
    }
}

//! create a new instance of the class
RenderOptionsTransitPtr RenderOptionsBase::createLocal(BitVector bFlags)
{
    RenderOptionsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<RenderOptions>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
RenderOptionsTransitPtr RenderOptionsBase::createDependent(BitVector bFlags)
{
    RenderOptionsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<RenderOptions>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
RenderOptionsTransitPtr RenderOptionsBase::create(void)
{
    RenderOptionsTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<RenderOptions>(tmpPtr);
    }

    return fc;
}

RenderOptions *RenderOptionsBase::createEmptyLocal(BitVector bFlags)
{
    RenderOptions *returnValue;

    newPtr<RenderOptions>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
RenderOptions *RenderOptionsBase::createEmpty(void)
{
    RenderOptions *returnValue;

    newPtr<RenderOptions>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr RenderOptionsBase::shallowCopyLocal(
    BitVector bFlags) const
{
    RenderOptions *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const RenderOptions *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr RenderOptionsBase::shallowCopyDependent(
    BitVector bFlags) const
{
    RenderOptions *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const RenderOptions *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr RenderOptionsBase::shallowCopy(void) const
{
    RenderOptions *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const RenderOptions *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

RenderOptionsBase::RenderOptionsBase(void) :
    Inherited(),
    _sfRenderProperties       (MaterialMapKey(0x0000)),
    _sfUseGLFinish            (bool(false)),
    _sfStatistic              (bool(false)),
    _sfPolygonMode            (GLenum(GL_FILL)),
    _sfTwoSidedLighting       (bool(false)),
    _sfSpecTexLighting        (bool(false)),
    _sfSortTrans              (bool(true)),
    _sfZWriteTrans            (bool(true)),
    _sfLocalLights            (bool(true)),
    _sfCorrectTwoSidedLighting(bool(true)),
    _sfOcclusionCulling       (bool(false)),
    _sfOcclusionCullingMode   (Int32(1)),
    _sfOcclusionCullingPixels (UInt32(0)),
    _sfAntialiasing           (bool(false)),
    _sfAntialiasingDistance   (Real32(0.2)),
    _sfAntialiasingScale      (Real32(2.0)),
    _sfAntialiasingTrigger    (UInt32(0)),
    _sfFrustumCulling         (bool(false)),
    _sfBackfaceCulling        (bool(false)),
    _sfSmallFeatureCulling    (),
    _sfSmallFeaturePixels     (),
    _sfSmallFeatureThreshold  (),
    _sfFirstFrame             (bool(true)),
    _sfDepthOnlyPass          (bool(false)),
    _sfLightModelAmbient      (Color4f(0.2f,0.2f,0.2f,1.0f)),
    _sfFogColor               (Color4f(0,0,0,0)),
    _sfFogRange               (Vec2f(0,1)),
    _sfFogDensity             (Real32(1)),
    _sfFogMode                (Int32(0)),
    _sfMultiSample            (UInt32(1)),
    _sfMultiSampleFilterMode  (UInt32(0))
{
}

RenderOptionsBase::RenderOptionsBase(const RenderOptionsBase &source) :
    Inherited(source),
    _sfRenderProperties       (source._sfRenderProperties       ),
    _sfUseGLFinish            (source._sfUseGLFinish            ),
    _sfStatistic              (source._sfStatistic              ),
    _sfPolygonMode            (source._sfPolygonMode            ),
    _sfTwoSidedLighting       (source._sfTwoSidedLighting       ),
    _sfSpecTexLighting        (source._sfSpecTexLighting        ),
    _sfSortTrans              (source._sfSortTrans              ),
    _sfZWriteTrans            (source._sfZWriteTrans            ),
    _sfLocalLights            (source._sfLocalLights            ),
    _sfCorrectTwoSidedLighting(source._sfCorrectTwoSidedLighting),
    _sfOcclusionCulling       (source._sfOcclusionCulling       ),
    _sfOcclusionCullingMode   (source._sfOcclusionCullingMode   ),
    _sfOcclusionCullingPixels (source._sfOcclusionCullingPixels ),
    _sfAntialiasing           (source._sfAntialiasing           ),
    _sfAntialiasingDistance   (source._sfAntialiasingDistance   ),
    _sfAntialiasingScale      (source._sfAntialiasingScale      ),
    _sfAntialiasingTrigger    (source._sfAntialiasingTrigger    ),
    _sfFrustumCulling         (source._sfFrustumCulling         ),
    _sfBackfaceCulling        (source._sfBackfaceCulling        ),
    _sfSmallFeatureCulling    (source._sfSmallFeatureCulling    ),
    _sfSmallFeaturePixels     (source._sfSmallFeaturePixels     ),
    _sfSmallFeatureThreshold  (source._sfSmallFeatureThreshold  ),
    _sfFirstFrame             (source._sfFirstFrame             ),
    _sfDepthOnlyPass          (source._sfDepthOnlyPass          ),
    _sfLightModelAmbient      (source._sfLightModelAmbient      ),
    _sfFogColor               (source._sfFogColor               ),
    _sfFogRange               (source._sfFogRange               ),
    _sfFogDensity             (source._sfFogDensity             ),
    _sfFogMode                (source._sfFogMode                ),
    _sfMultiSample            (source._sfMultiSample            ),
    _sfMultiSampleFilterMode  (source._sfMultiSampleFilterMode  )
{
}


/*-------------------------- destructors ----------------------------------*/

RenderOptionsBase::~RenderOptionsBase(void)
{
}


GetFieldHandlePtr RenderOptionsBase::getHandleRenderProperties (void) const
{
    SFMaterialMapKey::GetHandlePtr returnValue(
        new  SFMaterialMapKey::GetHandle(
             &_sfRenderProperties,
             this->getType().getFieldDesc(RenderPropertiesFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleRenderProperties(void)
{
    SFMaterialMapKey::EditHandlePtr returnValue(
        new  SFMaterialMapKey::EditHandle(
             &_sfRenderProperties,
             this->getType().getFieldDesc(RenderPropertiesFieldId),
             this));


    editSField(RenderPropertiesFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleUseGLFinish     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseGLFinish,
             this->getType().getFieldDesc(UseGLFinishFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleUseGLFinish    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseGLFinish,
             this->getType().getFieldDesc(UseGLFinishFieldId),
             this));


    editSField(UseGLFinishFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleStatistic       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfStatistic,
             this->getType().getFieldDesc(StatisticFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleStatistic      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfStatistic,
             this->getType().getFieldDesc(StatisticFieldId),
             this));


    editSField(StatisticFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandlePolygonMode     (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfPolygonMode,
             this->getType().getFieldDesc(PolygonModeFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandlePolygonMode    (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfPolygonMode,
             this->getType().getFieldDesc(PolygonModeFieldId),
             this));


    editSField(PolygonModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleTwoSidedLighting (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfTwoSidedLighting,
             this->getType().getFieldDesc(TwoSidedLightingFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleTwoSidedLighting(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfTwoSidedLighting,
             this->getType().getFieldDesc(TwoSidedLightingFieldId),
             this));


    editSField(TwoSidedLightingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleSpecTexLighting (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfSpecTexLighting,
             this->getType().getFieldDesc(SpecTexLightingFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleSpecTexLighting(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfSpecTexLighting,
             this->getType().getFieldDesc(SpecTexLightingFieldId),
             this));


    editSField(SpecTexLightingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleSortTrans       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfSortTrans,
             this->getType().getFieldDesc(SortTransFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleSortTrans      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfSortTrans,
             this->getType().getFieldDesc(SortTransFieldId),
             this));


    editSField(SortTransFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleZWriteTrans     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfZWriteTrans,
             this->getType().getFieldDesc(ZWriteTransFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleZWriteTrans    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfZWriteTrans,
             this->getType().getFieldDesc(ZWriteTransFieldId),
             this));


    editSField(ZWriteTransFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleLocalLights     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfLocalLights,
             this->getType().getFieldDesc(LocalLightsFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleLocalLights    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfLocalLights,
             this->getType().getFieldDesc(LocalLightsFieldId),
             this));


    editSField(LocalLightsFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleCorrectTwoSidedLighting (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfCorrectTwoSidedLighting,
             this->getType().getFieldDesc(CorrectTwoSidedLightingFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleCorrectTwoSidedLighting(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfCorrectTwoSidedLighting,
             this->getType().getFieldDesc(CorrectTwoSidedLightingFieldId),
             this));


    editSField(CorrectTwoSidedLightingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleOcclusionCulling (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfOcclusionCulling,
             this->getType().getFieldDesc(OcclusionCullingFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleOcclusionCulling(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfOcclusionCulling,
             this->getType().getFieldDesc(OcclusionCullingFieldId),
             this));


    editSField(OcclusionCullingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleOcclusionCullingMode (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfOcclusionCullingMode,
             this->getType().getFieldDesc(OcclusionCullingModeFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleOcclusionCullingMode(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfOcclusionCullingMode,
             this->getType().getFieldDesc(OcclusionCullingModeFieldId),
             this));


    editSField(OcclusionCullingModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleOcclusionCullingPixels (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfOcclusionCullingPixels,
             this->getType().getFieldDesc(OcclusionCullingPixelsFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleOcclusionCullingPixels(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfOcclusionCullingPixels,
             this->getType().getFieldDesc(OcclusionCullingPixelsFieldId),
             this));


    editSField(OcclusionCullingPixelsFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleAntialiasing    (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAntialiasing,
             this->getType().getFieldDesc(AntialiasingFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleAntialiasing   (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAntialiasing,
             this->getType().getFieldDesc(AntialiasingFieldId),
             this));


    editSField(AntialiasingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleAntialiasingDistance (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAntialiasingDistance,
             this->getType().getFieldDesc(AntialiasingDistanceFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleAntialiasingDistance(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAntialiasingDistance,
             this->getType().getFieldDesc(AntialiasingDistanceFieldId),
             this));


    editSField(AntialiasingDistanceFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleAntialiasingScale (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAntialiasingScale,
             this->getType().getFieldDesc(AntialiasingScaleFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleAntialiasingScale(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAntialiasingScale,
             this->getType().getFieldDesc(AntialiasingScaleFieldId),
             this));


    editSField(AntialiasingScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleAntialiasingTrigger (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfAntialiasingTrigger,
             this->getType().getFieldDesc(AntialiasingTriggerFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleAntialiasingTrigger(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfAntialiasingTrigger,
             this->getType().getFieldDesc(AntialiasingTriggerFieldId),
             this));


    editSField(AntialiasingTriggerFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleFrustumCulling  (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfFrustumCulling,
             this->getType().getFieldDesc(FrustumCullingFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleFrustumCulling (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfFrustumCulling,
             this->getType().getFieldDesc(FrustumCullingFieldId),
             this));


    editSField(FrustumCullingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleBackfaceCulling (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfBackfaceCulling,
             this->getType().getFieldDesc(BackfaceCullingFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleBackfaceCulling(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfBackfaceCulling,
             this->getType().getFieldDesc(BackfaceCullingFieldId),
             this));


    editSField(BackfaceCullingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleSmallFeatureCulling (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfSmallFeatureCulling,
             this->getType().getFieldDesc(SmallFeatureCullingFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleSmallFeatureCulling(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfSmallFeatureCulling,
             this->getType().getFieldDesc(SmallFeatureCullingFieldId),
             this));


    editSField(SmallFeatureCullingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleSmallFeaturePixels (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSmallFeaturePixels,
             this->getType().getFieldDesc(SmallFeaturePixelsFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleSmallFeaturePixels(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSmallFeaturePixels,
             this->getType().getFieldDesc(SmallFeaturePixelsFieldId),
             this));


    editSField(SmallFeaturePixelsFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleSmallFeatureThreshold (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSmallFeatureThreshold,
             this->getType().getFieldDesc(SmallFeatureThresholdFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleSmallFeatureThreshold(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSmallFeatureThreshold,
             this->getType().getFieldDesc(SmallFeatureThresholdFieldId),
             this));


    editSField(SmallFeatureThresholdFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleFirstFrame      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfFirstFrame,
             this->getType().getFieldDesc(FirstFrameFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleFirstFrame     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfFirstFrame,
             this->getType().getFieldDesc(FirstFrameFieldId),
             this));


    editSField(FirstFrameFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleDepthOnlyPass   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDepthOnlyPass,
             this->getType().getFieldDesc(DepthOnlyPassFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleDepthOnlyPass  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDepthOnlyPass,
             this->getType().getFieldDesc(DepthOnlyPassFieldId),
             this));


    editSField(DepthOnlyPassFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleLightModelAmbient (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfLightModelAmbient,
             this->getType().getFieldDesc(LightModelAmbientFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleLightModelAmbient(void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfLightModelAmbient,
             this->getType().getFieldDesc(LightModelAmbientFieldId),
             this));


    editSField(LightModelAmbientFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleFogColor        (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfFogColor,
             this->getType().getFieldDesc(FogColorFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleFogColor       (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfFogColor,
             this->getType().getFieldDesc(FogColorFieldId),
             this));


    editSField(FogColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleFogRange        (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfFogRange,
             this->getType().getFieldDesc(FogRangeFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleFogRange       (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfFogRange,
             this->getType().getFieldDesc(FogRangeFieldId),
             this));


    editSField(FogRangeFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleFogDensity      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfFogDensity,
             this->getType().getFieldDesc(FogDensityFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleFogDensity     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfFogDensity,
             this->getType().getFieldDesc(FogDensityFieldId),
             this));


    editSField(FogDensityFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleFogMode         (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfFogMode,
             this->getType().getFieldDesc(FogModeFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleFogMode        (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfFogMode,
             this->getType().getFieldDesc(FogModeFieldId),
             this));


    editSField(FogModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleMultiSample     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfMultiSample,
             this->getType().getFieldDesc(MultiSampleFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleMultiSample    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfMultiSample,
             this->getType().getFieldDesc(MultiSampleFieldId),
             this));


    editSField(MultiSampleFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleMultiSampleFilterMode (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfMultiSampleFilterMode,
             this->getType().getFieldDesc(MultiSampleFilterModeFieldId),
             const_cast<RenderOptionsBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleMultiSampleFilterMode(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfMultiSampleFilterMode,
             this->getType().getFieldDesc(MultiSampleFilterModeFieldId),
             this));


    editSField(MultiSampleFilterModeFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void RenderOptionsBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    RenderOptions *pThis = static_cast<RenderOptions *>(this);

    pThis->execSync(static_cast<RenderOptions *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *RenderOptionsBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    RenderOptions *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const RenderOptions *>(pRefAspect),
                  dynamic_cast<const RenderOptions *>(this));

    return returnValue;
}
#endif

void RenderOptionsBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
