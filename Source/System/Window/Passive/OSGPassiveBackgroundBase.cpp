/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PassiveBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGFrameBufferObject.h"       // Mediator Class

#include "OSGPassiveBackgroundBase.h"
#include "OSGPassiveBackground.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::PassiveBackground
    A background that does nothing within the clear call, thus it also has no
    Fields at all. It is mainly used to stack viewports on top of each other,
    i.e. it makes it possible to have two viewports on top of each other to
    generate a single combined image. See \ref
    PageSystemWindowBackgroundPassive 
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            PassiveBackgroundBase::_sfClearFrameBufferObject
    If used inside an FBO blit from the framebuffer
*/

/*! \var RenderFunctorCallback PassiveBackgroundBase::_sfClearCallback
    Inherited the parent target if none is set  
*/

/*! \var bool            PassiveBackgroundBase::_sfUseMediator
    If used inside an FBO blit from the framebuffer
*/

/*! \var bool            PassiveBackgroundBase::_sfAutoResize
    Automatically resize the mediator fbo on clearing if necessary.
*/

/*! \var FrameBufferObject * PassiveBackgroundBase::_sfMediator
    The FramebufferObject to mediate the blitting from the framebuffer to an FBO.
    This is important, because no robust way exists for blitting between framebuffer
    and FBO that are both multisampling. However, the blitting between non multisampling
    and multisampling framebuffer and FBO is well defined in any combination.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<PassiveBackground *, nsOSG>::_type(
    "PassiveBackgroundPtr", 
    "BackgroundPtr", 
    PassiveBackground::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(PassiveBackground *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           PassiveBackground *,
                           nsOSG)


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void PassiveBackgroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "clearFrameBufferObject",
        "If used inside an FBO blit from the framebuffer\n",
        ClearFrameBufferObjectFieldId, ClearFrameBufferObjectFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PassiveBackground::editHandleClearFrameBufferObject),
        static_cast<FieldGetMethodSig >(&PassiveBackground::getHandleClearFrameBufferObject));

    oType.addInitialDesc(pDesc);

    pDesc = new SFRenderFunctorCallback::Description(
        SFRenderFunctorCallback::getClassType(),
        "clearCallback",
        "Inherited the parent target if none is set  \n",
        ClearCallbackFieldId, ClearCallbackFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&PassiveBackground::invalidEditField),
        static_cast     <FieldGetMethodSig >(&PassiveBackground::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "useMediator",
        "If used inside an FBO blit from the framebuffer\n",
        UseMediatorFieldId, UseMediatorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PassiveBackground::editHandleUseMediator),
        static_cast<FieldGetMethodSig >(&PassiveBackground::getHandleUseMediator));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "autoResize",
        "Automatically resize the mediator fbo on clearing if necessary.\n",
        AutoResizeFieldId, AutoResizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PassiveBackground::editHandleAutoResize),
        static_cast<FieldGetMethodSig >(&PassiveBackground::getHandleAutoResize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "mediator",
        "The FramebufferObject to mediate the blitting from the framebuffer to an FBO.\n"
        "This is important, because no robust way exists for blitting between framebuffer\n"
        "and FBO that are both multisampling. However, the blitting between non multisampling\n"
        "and multisampling framebuffer and FBO is well defined in any combination.\n",
        MediatorFieldId, MediatorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&PassiveBackground::editHandleMediator),
        static_cast<FieldGetMethodSig >(&PassiveBackground::getHandleMediator));

    oType.addInitialDesc(pDesc);
}


PassiveBackgroundBase::TypeObject PassiveBackgroundBase::_type(
    PassiveBackgroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&PassiveBackgroundBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&PassiveBackground::initMethod),
    reinterpret_cast<ExitContainerF>(&PassiveBackground::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&PassiveBackground::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"PassiveBackground\"\n"
    "   parent=\"Background\"\n"
    "   library=\"Window\"\n"
    "   structure=\"concrete\"\n"
    "   pointerfieldtypes=\"single\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   docGroupBase=\"GrpWindowPassive\"\n"
    "   >\n"
    "  A background that does nothing within the clear call, thus it also has no\n"
    "  Fields at all. It is mainly used to stack viewports on top of each other,\n"
    "  i.e. it makes it possible to have two viewports on top of each other to\n"
    "  generate a single combined image. See \\ref\n"
    "  PageSystemWindowBackgroundPassive \n"
    "\n"
    "  <Field\n"
    "     name=\"clearFrameBufferObject\"\n"
    "     type=\"bool\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"false\"\n"
    "     access=\"public\"\n"
    "    >\n"
    "    If used inside an FBO blit from the framebuffer\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"clearCallback\"\n"
    "     type=\"RenderFunctorCallback\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"none\"\n"
    "     >\n"
    "    Inherited the parent target if none is set  \n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "     name=\"useMediator\"\n"
    "     type=\"bool\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"false\"\n"
    "     access=\"public\"\n"
    "    >\n"
    "    If used inside an FBO blit from the framebuffer\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"autoResize\"\n"
    "     type=\"bool\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"false\"\n"
    "     access=\"public\"\n"
    "    >\n"
    "    Automatically resize the mediator fbo on clearing if necessary.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t  name=\"mediator\"\n"
    "\t  type=\"FrameBufferObjectPtr\"\n"
    "\t  cardinality=\"single\"\n"
    "\t  visibility=\"external\"\n"
    "          defaultValue=\"NULL\"\n"
    "\t  access=\"public\"\n"
    "\t  >\n"
    "    The FramebufferObject to mediate the blitting from the framebuffer to an FBO.\n"
    "    This is important, because no robust way exists for blitting between framebuffer\n"
    "    and FBO that are both multisampling. However, the blitting between non multisampling\n"
    "    and multisampling framebuffer and FBO is well defined in any combination.\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "A background that does nothing within the clear call, thus it also has no\n"
    "Fields at all. It is mainly used to stack viewports on top of each other,\n"
    "i.e. it makes it possible to have two viewports on top of each other to\n"
    "generate a single combined image. See \\ref\n"
    "PageSystemWindowBackgroundPassive \n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PassiveBackgroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &PassiveBackgroundBase::getType(void) const
{
    return _type;
}

UInt32 PassiveBackgroundBase::getContainerSize(void) const
{
    return sizeof(PassiveBackground);
}

/*------------------------- decorator get ------------------------------*/


SFBool *PassiveBackgroundBase::editSFClearFrameBufferObject(void)
{
    editSField(ClearFrameBufferObjectFieldMask);

    return &_sfClearFrameBufferObject;
}

const SFBool *PassiveBackgroundBase::getSFClearFrameBufferObject(void) const
{
    return &_sfClearFrameBufferObject;
}



SFBool *PassiveBackgroundBase::editSFUseMediator(void)
{
    editSField(UseMediatorFieldMask);

    return &_sfUseMediator;
}

const SFBool *PassiveBackgroundBase::getSFUseMediator(void) const
{
    return &_sfUseMediator;
}


SFBool *PassiveBackgroundBase::editSFAutoResize(void)
{
    editSField(AutoResizeFieldMask);

    return &_sfAutoResize;
}

const SFBool *PassiveBackgroundBase::getSFAutoResize(void) const
{
    return &_sfAutoResize;
}


//! Get the PassiveBackground::_sfMediator field.
const SFUnrecFrameBufferObjectPtr *PassiveBackgroundBase::getSFMediator(void) const
{
    return &_sfMediator;
}

SFUnrecFrameBufferObjectPtr *PassiveBackgroundBase::editSFMediator       (void)
{
    editSField(MediatorFieldMask);

    return &_sfMediator;
}

//! Get the value of the PassiveBackground::_sfMediator field.
FrameBufferObject * PassiveBackgroundBase::getMediator(void) const
{
    return _sfMediator.getValue();
}

//! Set the value of the PassiveBackground::_sfMediator field.
void PassiveBackgroundBase::setMediator(FrameBufferObject * const value)
{
    editSField(MediatorFieldMask);

    _sfMediator.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT PassiveBackgroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ClearFrameBufferObjectFieldMask & whichField))
    {
        returnValue += _sfClearFrameBufferObject.getBinSize();
    }
    if(FieldBits::NoField != (ClearCallbackFieldMask & whichField))
    {
        returnValue += _sfClearCallback.getBinSize();
    }
    if(FieldBits::NoField != (UseMediatorFieldMask & whichField))
    {
        returnValue += _sfUseMediator.getBinSize();
    }
    if(FieldBits::NoField != (AutoResizeFieldMask & whichField))
    {
        returnValue += _sfAutoResize.getBinSize();
    }
    if(FieldBits::NoField != (MediatorFieldMask & whichField))
    {
        returnValue += _sfMediator.getBinSize();
    }

    return returnValue;
}

void PassiveBackgroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ClearFrameBufferObjectFieldMask & whichField))
    {
        _sfClearFrameBufferObject.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClearCallbackFieldMask & whichField))
    {
        _sfClearCallback.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseMediatorFieldMask & whichField))
    {
        _sfUseMediator.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoResizeFieldMask & whichField))
    {
        _sfAutoResize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MediatorFieldMask & whichField))
    {
        _sfMediator.copyToBin(pMem);
    }
}

void PassiveBackgroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ClearFrameBufferObjectFieldMask & whichField))
    {
        editSField(ClearFrameBufferObjectFieldMask);
        _sfClearFrameBufferObject.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClearCallbackFieldMask & whichField))
    {
        editSField(ClearCallbackFieldMask);
        _sfClearCallback.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseMediatorFieldMask & whichField))
    {
        editSField(UseMediatorFieldMask);
        _sfUseMediator.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoResizeFieldMask & whichField))
    {
        editSField(AutoResizeFieldMask);
        _sfAutoResize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MediatorFieldMask & whichField))
    {
        editSField(MediatorFieldMask);
        _sfMediator.copyFromBin(pMem);
    }
}

//! create a new instance of the class
PassiveBackgroundTransitPtr PassiveBackgroundBase::createLocal(BitVector bFlags)
{
    PassiveBackgroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<PassiveBackground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
PassiveBackgroundTransitPtr PassiveBackgroundBase::createDependent(BitVector bFlags)
{
    PassiveBackgroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<PassiveBackground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
PassiveBackgroundTransitPtr PassiveBackgroundBase::create(void)
{
    PassiveBackgroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<PassiveBackground>(tmpPtr);
    }

    return fc;
}

PassiveBackground *PassiveBackgroundBase::createEmptyLocal(BitVector bFlags)
{
    PassiveBackground *returnValue;

    newPtr<PassiveBackground>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
PassiveBackground *PassiveBackgroundBase::createEmpty(void)
{
    PassiveBackground *returnValue;

    newPtr<PassiveBackground>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr PassiveBackgroundBase::shallowCopyLocal(
    BitVector bFlags) const
{
    PassiveBackground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PassiveBackground *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr PassiveBackgroundBase::shallowCopyDependent(
    BitVector bFlags) const
{
    PassiveBackground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const PassiveBackground *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr PassiveBackgroundBase::shallowCopy(void) const
{
    PassiveBackground *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const PassiveBackground *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

PassiveBackgroundBase::PassiveBackgroundBase(void) :
    Inherited(),
    _sfClearFrameBufferObject (bool(false)),
    _sfClearCallback          (),
    _sfUseMediator            (bool(false)),
    _sfAutoResize             (bool(false)),
    _sfMediator               (NULL)
{
}

PassiveBackgroundBase::PassiveBackgroundBase(const PassiveBackgroundBase &source) :
    Inherited(source),
    _sfClearFrameBufferObject (source._sfClearFrameBufferObject ),
    _sfClearCallback          (source._sfClearCallback          ),
    _sfUseMediator            (source._sfUseMediator            ),
    _sfAutoResize             (source._sfAutoResize             ),
    _sfMediator               (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

PassiveBackgroundBase::~PassiveBackgroundBase(void)
{
}

void PassiveBackgroundBase::onCreate(const PassiveBackground *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        PassiveBackground *pThis = static_cast<PassiveBackground *>(this);

        pThis->setMediator(source->getMediator());
    }
}

GetFieldHandlePtr PassiveBackgroundBase::getHandleClearFrameBufferObject (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfClearFrameBufferObject,
             this->getType().getFieldDesc(ClearFrameBufferObjectFieldId),
             const_cast<PassiveBackgroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PassiveBackgroundBase::editHandleClearFrameBufferObject(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfClearFrameBufferObject,
             this->getType().getFieldDesc(ClearFrameBufferObjectFieldId),
             this));


    editSField(ClearFrameBufferObjectFieldMask);

    return returnValue;
}

GetFieldHandlePtr PassiveBackgroundBase::getHandleClearCallback   (void) const
{
    SFRenderFunctorCallback::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr PassiveBackgroundBase::editHandleClearCallback  (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr PassiveBackgroundBase::getHandleUseMediator     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUseMediator,
             this->getType().getFieldDesc(UseMediatorFieldId),
             const_cast<PassiveBackgroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PassiveBackgroundBase::editHandleUseMediator    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUseMediator,
             this->getType().getFieldDesc(UseMediatorFieldId),
             this));


    editSField(UseMediatorFieldMask);

    return returnValue;
}

GetFieldHandlePtr PassiveBackgroundBase::getHandleAutoResize      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAutoResize,
             this->getType().getFieldDesc(AutoResizeFieldId),
             const_cast<PassiveBackgroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PassiveBackgroundBase::editHandleAutoResize     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAutoResize,
             this->getType().getFieldDesc(AutoResizeFieldId),
             this));


    editSField(AutoResizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr PassiveBackgroundBase::getHandleMediator        (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfMediator,
             this->getType().getFieldDesc(MediatorFieldId),
             const_cast<PassiveBackgroundBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr PassiveBackgroundBase::editHandleMediator       (void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfMediator,
             this->getType().getFieldDesc(MediatorFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&PassiveBackground::setMediator,
                    static_cast<PassiveBackground *>(this), ::boost::placeholders::_1));

    editSField(MediatorFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void PassiveBackgroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    PassiveBackground *pThis = static_cast<PassiveBackground *>(this);

    pThis->execSync(static_cast<PassiveBackground *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *PassiveBackgroundBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    PassiveBackground *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const PassiveBackground *>(pRefAspect),
                  dynamic_cast<const PassiveBackground *>(this));

    return returnValue;
}
#endif

void PassiveBackgroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<PassiveBackground *>(this)->setMediator(NULL);


}


OSG_END_NAMESPACE
