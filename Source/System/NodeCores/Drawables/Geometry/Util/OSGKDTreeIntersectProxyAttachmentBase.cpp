/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class KDTreeIntersectProxyAttachment!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGGeometry.h"                // Geometry Class

#include "OSGKDTreeIntersectProxyAttachmentBase.h"
#include "OSGKDTreeIntersectProxyAttachment.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::KDTreeIntersectProxyAttachment
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Geometry *      KDTreeIntersectProxyAttachmentBase::_sfGeometry
    Geometry proxied by this attachment.
*/

/*! \var Int32           KDTreeIntersectProxyAttachmentBase::_sfMaxDepth
    Maximal depth of IntersectKDTree, auto determined if negative.
*/

/*! \var IntersectKDTreeNode KDTreeIntersectProxyAttachmentBase::_mfTreeNodes
    Stores the nodes of the IntersectKDTree.
*/

/*! \var UInt32          KDTreeIntersectProxyAttachmentBase::_mfTriIndices
    Stores triangle indices referenced from leaf nodes of the IntersectKDTree.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<KDTreeIntersectProxyAttachment *, nsOSG>::_type(
    "KDTreeIntersectProxyAttachmentPtr", 
    "IntersectProxyAttachmentPtr", 
    KDTreeIntersectProxyAttachment::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(KDTreeIntersectProxyAttachment *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           KDTreeIntersectProxyAttachment *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           KDTreeIntersectProxyAttachment *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void KDTreeIntersectProxyAttachmentBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecGeometryPtr::Description(
        SFUnrecGeometryPtr::getClassType(),
        "geometry",
        "Geometry proxied by this attachment.\n",
        GeometryFieldId, GeometryFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&KDTreeIntersectProxyAttachment::editHandleGeometry),
        static_cast<FieldGetMethodSig >(&KDTreeIntersectProxyAttachment::getHandleGeometry));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "maxDepth",
        "Maximal depth of IntersectKDTree, auto determined if negative.\n",
        MaxDepthFieldId, MaxDepthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&KDTreeIntersectProxyAttachment::editHandleMaxDepth),
        static_cast<FieldGetMethodSig >(&KDTreeIntersectProxyAttachment::getHandleMaxDepth));

    oType.addInitialDesc(pDesc);

    pDesc = new MFIntersectKDTreeNode::Description(
        MFIntersectKDTreeNode::getClassType(),
        "treeNodes",
        "Stores the nodes of the IntersectKDTree.\n",
        TreeNodesFieldId, TreeNodesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&KDTreeIntersectProxyAttachment::editHandleTreeNodes),
        static_cast<FieldGetMethodSig >(&KDTreeIntersectProxyAttachment::getHandleTreeNodes));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "triIndices",
        "Stores triangle indices referenced from leaf nodes of the IntersectKDTree.\n",
        TriIndicesFieldId, TriIndicesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&KDTreeIntersectProxyAttachment::editHandleTriIndices),
        static_cast<FieldGetMethodSig >(&KDTreeIntersectProxyAttachment::getHandleTriIndices));

    oType.addInitialDesc(pDesc);
}


KDTreeIntersectProxyAttachmentBase::TypeObject KDTreeIntersectProxyAttachmentBase::_type(
    KDTreeIntersectProxyAttachmentBase::getClassname(),
    Inherited::getClassname(),
    "IntersectProxyAttachment",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&KDTreeIntersectProxyAttachmentBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&KDTreeIntersectProxyAttachment::initMethod),
    reinterpret_cast<ExitContainerF>(&KDTreeIntersectProxyAttachment::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&KDTreeIntersectProxyAttachment::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"KDTreeIntersectProxyAttachment\"\n"
    "   parent=\"IntersectProxyAttachment\"\n"
    "   group=\"IntersectProxyAttachment\"\n"
    "   library=\"Drawable\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   docGroupBase=\"GrpDrawablesGeometry\"\n"
    "   >\n"
    "  <Field\n"
    "      name=\"geometry\"\n"
    "      type=\"Geometry\"\n"
    "      category=\"pointer\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "    Geometry proxied by this attachment.\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"maxDepth\"\n"
    "      type=\"Int32\"\n"
    "      category=\"data\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      defaultValue=\"-1\"\n"
    "      >\n"
    "    Maximal depth of IntersectKDTree, auto determined if negative.\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"treeNodes\"\n"
    "      type=\"IntersectKDTreeNode\"\n"
    "      category=\"data\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"protected\"\n"
    "      >\n"
    "    Stores the nodes of the IntersectKDTree.\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"triIndices\"\n"
    "      type=\"UInt32\"\n"
    "      category=\"data\"\n"
    "      cardinality=\"multi\"\n"
    "      visibility=\"external\"\n"
    "      access=\"protected\"\n"
    "      >\n"
    "    Stores triangle indices referenced from leaf nodes of the IntersectKDTree.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &KDTreeIntersectProxyAttachmentBase::getType(void)
{
    return _type;
}

const FieldContainerType &KDTreeIntersectProxyAttachmentBase::getType(void) const
{
    return _type;
}

UInt32 KDTreeIntersectProxyAttachmentBase::getContainerSize(void) const
{
    return sizeof(KDTreeIntersectProxyAttachment);
}

/*------------------------- decorator get ------------------------------*/


//! Get the KDTreeIntersectProxyAttachment::_sfGeometry field.
const SFUnrecGeometryPtr *KDTreeIntersectProxyAttachmentBase::getSFGeometry(void) const
{
    return &_sfGeometry;
}

SFUnrecGeometryPtr  *KDTreeIntersectProxyAttachmentBase::editSFGeometry       (void)
{
    editSField(GeometryFieldMask);

    return &_sfGeometry;
}

//! Get the value of the KDTreeIntersectProxyAttachment::_sfGeometry field.
Geometry * KDTreeIntersectProxyAttachmentBase::getGeometry(void) const
{
    return _sfGeometry.getValue();
}

//! Set the value of the KDTreeIntersectProxyAttachment::_sfGeometry field.
void KDTreeIntersectProxyAttachmentBase::setGeometry(Geometry * const value)
{
    editSField(GeometryFieldMask);

    _sfGeometry.setValue(value);
}


SFInt32 *KDTreeIntersectProxyAttachmentBase::editSFMaxDepth(void)
{
    editSField(MaxDepthFieldMask);

    return &_sfMaxDepth;
}

const SFInt32 *KDTreeIntersectProxyAttachmentBase::getSFMaxDepth(void) const
{
    return &_sfMaxDepth;
}


MFIntersectKDTreeNode *KDTreeIntersectProxyAttachmentBase::editMFTreeNodes(void)
{
    editMField(TreeNodesFieldMask, _mfTreeNodes);

    return &_mfTreeNodes;
}

const MFIntersectKDTreeNode *KDTreeIntersectProxyAttachmentBase::getMFTreeNodes(void) const
{
    return &_mfTreeNodes;
}


MFUInt32 *KDTreeIntersectProxyAttachmentBase::editMFTriIndices(void)
{
    editMField(TriIndicesFieldMask, _mfTriIndices);

    return &_mfTriIndices;
}

const MFUInt32 *KDTreeIntersectProxyAttachmentBase::getMFTriIndices(void) const
{
    return &_mfTriIndices;
}






/*------------------------------ access -----------------------------------*/

SizeT KDTreeIntersectProxyAttachmentBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (GeometryFieldMask & whichField))
    {
        returnValue += _sfGeometry.getBinSize();
    }
    if(FieldBits::NoField != (MaxDepthFieldMask & whichField))
    {
        returnValue += _sfMaxDepth.getBinSize();
    }
    if(FieldBits::NoField != (TreeNodesFieldMask & whichField))
    {
        returnValue += _mfTreeNodes.getBinSize();
    }
    if(FieldBits::NoField != (TriIndicesFieldMask & whichField))
    {
        returnValue += _mfTriIndices.getBinSize();
    }

    return returnValue;
}

void KDTreeIntersectProxyAttachmentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (GeometryFieldMask & whichField))
    {
        _sfGeometry.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MaxDepthFieldMask & whichField))
    {
        _sfMaxDepth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TreeNodesFieldMask & whichField))
    {
        _mfTreeNodes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TriIndicesFieldMask & whichField))
    {
        _mfTriIndices.copyToBin(pMem);
    }
}

void KDTreeIntersectProxyAttachmentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (GeometryFieldMask & whichField))
    {
        editSField(GeometryFieldMask);
        _sfGeometry.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MaxDepthFieldMask & whichField))
    {
        editSField(MaxDepthFieldMask);
        _sfMaxDepth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TreeNodesFieldMask & whichField))
    {
        editMField(TreeNodesFieldMask, _mfTreeNodes);
        _mfTreeNodes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TriIndicesFieldMask & whichField))
    {
        editMField(TriIndicesFieldMask, _mfTriIndices);
        _mfTriIndices.copyFromBin(pMem);
    }
}

//! create a new instance of the class
KDTreeIntersectProxyAttachmentTransitPtr KDTreeIntersectProxyAttachmentBase::createLocal(BitVector bFlags)
{
    KDTreeIntersectProxyAttachmentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<KDTreeIntersectProxyAttachment>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
KDTreeIntersectProxyAttachmentTransitPtr KDTreeIntersectProxyAttachmentBase::createDependent(BitVector bFlags)
{
    KDTreeIntersectProxyAttachmentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<KDTreeIntersectProxyAttachment>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
KDTreeIntersectProxyAttachmentTransitPtr KDTreeIntersectProxyAttachmentBase::create(void)
{
    KDTreeIntersectProxyAttachmentTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<KDTreeIntersectProxyAttachment>(tmpPtr);
    }

    return fc;
}

KDTreeIntersectProxyAttachment *KDTreeIntersectProxyAttachmentBase::createEmptyLocal(BitVector bFlags)
{
    KDTreeIntersectProxyAttachment *returnValue;

    newPtr<KDTreeIntersectProxyAttachment>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
KDTreeIntersectProxyAttachment *KDTreeIntersectProxyAttachmentBase::createEmpty(void)
{
    KDTreeIntersectProxyAttachment *returnValue;

    newPtr<KDTreeIntersectProxyAttachment>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr KDTreeIntersectProxyAttachmentBase::shallowCopyLocal(
    BitVector bFlags) const
{
    KDTreeIntersectProxyAttachment *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const KDTreeIntersectProxyAttachment *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr KDTreeIntersectProxyAttachmentBase::shallowCopyDependent(
    BitVector bFlags) const
{
    KDTreeIntersectProxyAttachment *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const KDTreeIntersectProxyAttachment *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr KDTreeIntersectProxyAttachmentBase::shallowCopy(void) const
{
    KDTreeIntersectProxyAttachment *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const KDTreeIntersectProxyAttachment *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

KDTreeIntersectProxyAttachmentBase::KDTreeIntersectProxyAttachmentBase(void) :
    Inherited(),
    _sfGeometry               (NULL),
    _sfMaxDepth               (Int32(-1)),
    _mfTreeNodes              (),
    _mfTriIndices             ()
{
}

KDTreeIntersectProxyAttachmentBase::KDTreeIntersectProxyAttachmentBase(const KDTreeIntersectProxyAttachmentBase &source) :
    Inherited(source),
    _sfGeometry               (NULL),
    _sfMaxDepth               (source._sfMaxDepth               ),
    _mfTreeNodes              (source._mfTreeNodes              ),
    _mfTriIndices             (source._mfTriIndices             )
{
}


/*-------------------------- destructors ----------------------------------*/

KDTreeIntersectProxyAttachmentBase::~KDTreeIntersectProxyAttachmentBase(void)
{
}

void KDTreeIntersectProxyAttachmentBase::onCreate(const KDTreeIntersectProxyAttachment *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        KDTreeIntersectProxyAttachment *pThis = static_cast<KDTreeIntersectProxyAttachment *>(this);

        pThis->setGeometry(source->getGeometry());
    }
}

GetFieldHandlePtr KDTreeIntersectProxyAttachmentBase::getHandleGeometry        (void) const
{
    SFUnrecGeometryPtr::GetHandlePtr returnValue(
        new  SFUnrecGeometryPtr::GetHandle(
             &_sfGeometry,
             this->getType().getFieldDesc(GeometryFieldId),
             const_cast<KDTreeIntersectProxyAttachmentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr KDTreeIntersectProxyAttachmentBase::editHandleGeometry       (void)
{
    SFUnrecGeometryPtr::EditHandlePtr returnValue(
        new  SFUnrecGeometryPtr::EditHandle(
             &_sfGeometry,
             this->getType().getFieldDesc(GeometryFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&KDTreeIntersectProxyAttachment::setGeometry,
                    static_cast<KDTreeIntersectProxyAttachment *>(this), ::boost::placeholders::_1));

    editSField(GeometryFieldMask);

    return returnValue;
}

GetFieldHandlePtr KDTreeIntersectProxyAttachmentBase::getHandleMaxDepth        (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfMaxDepth,
             this->getType().getFieldDesc(MaxDepthFieldId),
             const_cast<KDTreeIntersectProxyAttachmentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr KDTreeIntersectProxyAttachmentBase::editHandleMaxDepth       (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfMaxDepth,
             this->getType().getFieldDesc(MaxDepthFieldId),
             this));


    editSField(MaxDepthFieldMask);

    return returnValue;
}

GetFieldHandlePtr KDTreeIntersectProxyAttachmentBase::getHandleTreeNodes       (void) const
{
    MFIntersectKDTreeNode::GetHandlePtr returnValue(
        new  MFIntersectKDTreeNode::GetHandle(
             &_mfTreeNodes,
             this->getType().getFieldDesc(TreeNodesFieldId),
             const_cast<KDTreeIntersectProxyAttachmentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr KDTreeIntersectProxyAttachmentBase::editHandleTreeNodes      (void)
{
    MFIntersectKDTreeNode::EditHandlePtr returnValue(
        new  MFIntersectKDTreeNode::EditHandle(
             &_mfTreeNodes,
             this->getType().getFieldDesc(TreeNodesFieldId),
             this));


    editMField(TreeNodesFieldMask, _mfTreeNodes);

    return returnValue;
}

GetFieldHandlePtr KDTreeIntersectProxyAttachmentBase::getHandleTriIndices      (void) const
{
    MFUInt32::GetHandlePtr returnValue(
        new  MFUInt32::GetHandle(
             &_mfTriIndices,
             this->getType().getFieldDesc(TriIndicesFieldId),
             const_cast<KDTreeIntersectProxyAttachmentBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr KDTreeIntersectProxyAttachmentBase::editHandleTriIndices     (void)
{
    MFUInt32::EditHandlePtr returnValue(
        new  MFUInt32::EditHandle(
             &_mfTriIndices,
             this->getType().getFieldDesc(TriIndicesFieldId),
             this));


    editMField(TriIndicesFieldMask, _mfTriIndices);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void KDTreeIntersectProxyAttachmentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    KDTreeIntersectProxyAttachment *pThis = static_cast<KDTreeIntersectProxyAttachment *>(this);

    pThis->execSync(static_cast<KDTreeIntersectProxyAttachment *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *KDTreeIntersectProxyAttachmentBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    KDTreeIntersectProxyAttachment *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const KDTreeIntersectProxyAttachment *>(pRefAspect),
                  dynamic_cast<const KDTreeIntersectProxyAttachment *>(this));

    return returnValue;
}
#endif

void KDTreeIntersectProxyAttachmentBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<KDTreeIntersectProxyAttachment *>(this)->setGeometry(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfTreeNodes.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfTriIndices.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
