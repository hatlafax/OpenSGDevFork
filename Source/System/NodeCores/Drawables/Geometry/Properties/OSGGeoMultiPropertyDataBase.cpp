/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeoMultiPropertyData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGGeoMultiPropertyDataBase.h"
#include "OSGGeoMultiPropertyData.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GeoMultiPropertyData
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt8           GeoMultiPropertyDataBase::_mfIData
    The data for the multi-properties.
*/

/*! \var UInt32          GeoMultiPropertyDataBase::_sfGLId
    The internal GL object id for the VBO, if used.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<GeoMultiPropertyData *, nsOSG>::_type(
    "GeoMultiPropertyDataPtr", 
    "StateChunkPtr", 
    GeoMultiPropertyData::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(GeoMultiPropertyData *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           GeoMultiPropertyData *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           GeoMultiPropertyData *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GeoMultiPropertyDataBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "iData",
        "The data for the multi-properties.\n",
        IDataFieldId, IDataFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GeoMultiPropertyData::editHandleIData),
        static_cast<FieldGetMethodSig >(&GeoMultiPropertyData::getHandleIData));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "GLId",
        "The internal GL object id for the VBO, if used.\n",
        GLIdFieldId, GLIdFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&GeoMultiPropertyData::editHandleGLId),
        static_cast<FieldGetMethodSig >(&GeoMultiPropertyData::getHandleGLId));

    oType.addInitialDesc(pDesc);
}


GeoMultiPropertyDataBase::TypeObject GeoMultiPropertyDataBase::_type(
    GeoMultiPropertyDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&GeoMultiPropertyDataBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&GeoMultiPropertyData::initMethod),
    reinterpret_cast<ExitContainerF>(&GeoMultiPropertyData::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&GeoMultiPropertyData::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"GeoMultiPropertyData\"\n"
    "    parent=\"StateChunk\"\n"
    "    library=\"Drawable\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    docGroupBase=\"GrpDrawablesGeometry\"\n"
    "    >\n"
    "    <Field\n"
    "        name=\"iData\"\n"
    "        type=\"UInt8\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "\tThe data for the multi-properties.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"GLId\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "        >\n"
    "\tThe internal GL object id for the VBO, if used.\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeoMultiPropertyDataBase::getType(void)
{
    return _type;
}

const FieldContainerType &GeoMultiPropertyDataBase::getType(void) const
{
    return _type;
}

UInt32 GeoMultiPropertyDataBase::getContainerSize(void) const
{
    return sizeof(GeoMultiPropertyData);
}

/*------------------------- decorator get ------------------------------*/


MFUInt8 *GeoMultiPropertyDataBase::editMFIData(void)
{
    editMField(IDataFieldMask, _mfIData);

    return &_mfIData;
}

const MFUInt8 *GeoMultiPropertyDataBase::getMFIData(void) const
{
    return &_mfIData;
}


SFUInt32 *GeoMultiPropertyDataBase::editSFGLId(void)
{
    editSField(GLIdFieldMask);

    return &_sfGLId;
}

const SFUInt32 *GeoMultiPropertyDataBase::getSFGLId(void) const
{
    return &_sfGLId;
}






/*------------------------------ access -----------------------------------*/

SizeT GeoMultiPropertyDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (IDataFieldMask & whichField))
    {
        returnValue += _mfIData.getBinSize();
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }

    return returnValue;
}

void GeoMultiPropertyDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (IDataFieldMask & whichField))
    {
        _mfIData.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }
}

void GeoMultiPropertyDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (IDataFieldMask & whichField))
    {
        editMField(IDataFieldMask, _mfIData);
        _mfIData.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        editSField(GLIdFieldMask);
        _sfGLId.copyFromBin(pMem);
    }
}

//! create a new instance of the class
GeoMultiPropertyDataTransitPtr GeoMultiPropertyDataBase::createLocal(BitVector bFlags)
{
    GeoMultiPropertyDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<GeoMultiPropertyData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
GeoMultiPropertyDataTransitPtr GeoMultiPropertyDataBase::createDependent(BitVector bFlags)
{
    GeoMultiPropertyDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<GeoMultiPropertyData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
GeoMultiPropertyDataTransitPtr GeoMultiPropertyDataBase::create(void)
{
    GeoMultiPropertyDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<GeoMultiPropertyData>(tmpPtr);
    }

    return fc;
}

GeoMultiPropertyData *GeoMultiPropertyDataBase::createEmptyLocal(BitVector bFlags)
{
    GeoMultiPropertyData *returnValue;

    newPtr<GeoMultiPropertyData>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
GeoMultiPropertyData *GeoMultiPropertyDataBase::createEmpty(void)
{
    GeoMultiPropertyData *returnValue;

    newPtr<GeoMultiPropertyData>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr GeoMultiPropertyDataBase::shallowCopyLocal(
    BitVector bFlags) const
{
    GeoMultiPropertyData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GeoMultiPropertyData *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr GeoMultiPropertyDataBase::shallowCopyDependent(
    BitVector bFlags) const
{
    GeoMultiPropertyData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GeoMultiPropertyData *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr GeoMultiPropertyDataBase::shallowCopy(void) const
{
    GeoMultiPropertyData *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const GeoMultiPropertyData *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

GeoMultiPropertyDataBase::GeoMultiPropertyDataBase(void) :
    Inherited(),
    _mfIData                  (),
    _sfGLId                   (UInt32(0))
{
}

GeoMultiPropertyDataBase::GeoMultiPropertyDataBase(const GeoMultiPropertyDataBase &source) :
    Inherited(source),
    _mfIData                  (source._mfIData                  ),
    _sfGLId                   (source._sfGLId                   )
{
}


/*-------------------------- destructors ----------------------------------*/

GeoMultiPropertyDataBase::~GeoMultiPropertyDataBase(void)
{
}


GetFieldHandlePtr GeoMultiPropertyDataBase::getHandleIData           (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfIData,
             this->getType().getFieldDesc(IDataFieldId),
             const_cast<GeoMultiPropertyDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeoMultiPropertyDataBase::editHandleIData          (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfIData,
             this->getType().getFieldDesc(IDataFieldId),
             this));


    editMField(IDataFieldMask, _mfIData);

    return returnValue;
}

GetFieldHandlePtr GeoMultiPropertyDataBase::getHandleGLId            (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfGLId,
             this->getType().getFieldDesc(GLIdFieldId),
             const_cast<GeoMultiPropertyDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeoMultiPropertyDataBase::editHandleGLId           (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfGLId,
             this->getType().getFieldDesc(GLIdFieldId),
             this));


    editSField(GLIdFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void GeoMultiPropertyDataBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    GeoMultiPropertyData *pThis = static_cast<GeoMultiPropertyData *>(this);

    pThis->execSync(static_cast<GeoMultiPropertyData *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *GeoMultiPropertyDataBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    GeoMultiPropertyData *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GeoMultiPropertyData *>(pRefAspect),
                  dynamic_cast<const GeoMultiPropertyData *>(this));

    return returnValue;
}
#endif

void GeoMultiPropertyDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfIData.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
