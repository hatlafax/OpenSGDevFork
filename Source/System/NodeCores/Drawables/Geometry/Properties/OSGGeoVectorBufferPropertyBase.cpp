/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeoVectorBufferProperty!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGGeoVectorBufferPropertyBase.h"
#include "OSGGeoVectorBufferProperty.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GeoVectorBufferProperty
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          GeoVectorBufferPropertyBase::_sfStride
    
*/

/*! \var UInt32          GeoVectorBufferPropertyBase::_sfFormat
    
*/

/*! \var UInt32          GeoVectorBufferPropertyBase::_sfFormatSize
    
*/

/*! \var UInt32          GeoVectorBufferPropertyBase::_sfDimension
    
*/

/*! \var UInt32          GeoVectorBufferPropertyBase::_sfVectorType
    
*/

/*! \var UInt32          GeoVectorBufferPropertyBase::_sfSize
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<GeoVectorBufferProperty *, nsOSG>::_type(
    "GeoVectorBufferPropertyPtr", 
    "GeoVectorPropertyPtr", 
    GeoVectorBufferProperty::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(GeoVectorBufferProperty *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           GeoVectorBufferProperty *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           GeoVectorBufferProperty *,
                           nsOSG)

DataType &FieldTraits< GeoVectorBufferProperty *, nsOSG + 1 >::getType(void)
{
    return FieldTraits<GeoVectorBufferProperty *, nsOSG>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      GeoVectorBufferProperty *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      GeoVectorBufferProperty *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GeoVectorBufferPropertyBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "stride",
        "",
        StrideFieldId, StrideFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GeoVectorBufferProperty::editHandleStride),
        static_cast<FieldGetMethodSig >(&GeoVectorBufferProperty::getHandleStride));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "format",
        "",
        FormatFieldId, FormatFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GeoVectorBufferProperty::editHandleFormat),
        static_cast<FieldGetMethodSig >(&GeoVectorBufferProperty::getHandleFormat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "formatSize",
        "",
        FormatSizeFieldId, FormatSizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GeoVectorBufferProperty::editHandleFormatSize),
        static_cast<FieldGetMethodSig >(&GeoVectorBufferProperty::getHandleFormatSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "dimension",
        "",
        DimensionFieldId, DimensionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GeoVectorBufferProperty::editHandleDimension),
        static_cast<FieldGetMethodSig >(&GeoVectorBufferProperty::getHandleDimension));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "vectorType",
        "",
        VectorTypeFieldId, VectorTypeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GeoVectorBufferProperty::editHandleVectorType),
        static_cast<FieldGetMethodSig >(&GeoVectorBufferProperty::getHandleVectorType));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "size",
        "",
        SizeFieldId, SizeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GeoVectorBufferProperty::editHandleSize),
        static_cast<FieldGetMethodSig >(&GeoVectorBufferProperty::getHandleSize));

    oType.addInitialDesc(pDesc);
}


GeoVectorBufferPropertyBase::TypeObject GeoVectorBufferPropertyBase::_type(
    GeoVectorBufferPropertyBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&GeoVectorBufferPropertyBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&GeoVectorBufferProperty::initMethod),
    reinterpret_cast<ExitContainerF>(&GeoVectorBufferProperty::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&GeoVectorBufferProperty::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"GeoVectorBufferProperty\"\n"
    "   parent=\"GeoVectorProperty\"\n"
    "   library=\"Drawable\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   childFields=\"both\"\n"
    "   docGroupBase=\"GrpDrawablesGeometry\"\n"
    "   >\n"
    "  <Field\n"
    "     name=\"stride\"\n"
    "     type=\"UInt32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"0\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"format\"\n"
    "     type=\"UInt32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"GL_FLOAT\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"formatSize\"\n"
    "     type=\"UInt32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"4\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"dimension\"\n"
    "     type=\"UInt32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"3\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"vectorType\"\n"
    "     type=\"UInt32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"GeoProperty::VectorTypeVector\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"size\"\n"
    "     type=\"UInt32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"0\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeoVectorBufferPropertyBase::getType(void)
{
    return _type;
}

const FieldContainerType &GeoVectorBufferPropertyBase::getType(void) const
{
    return _type;
}

UInt32 GeoVectorBufferPropertyBase::getContainerSize(void) const
{
    return sizeof(GeoVectorBufferProperty);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *GeoVectorBufferPropertyBase::editSFStride(void)
{
    editSField(StrideFieldMask);

    return &_sfStride;
}

const SFUInt32 *GeoVectorBufferPropertyBase::getSFStride(void) const
{
    return &_sfStride;
}


SFUInt32 *GeoVectorBufferPropertyBase::editSFFormat(void)
{
    editSField(FormatFieldMask);

    return &_sfFormat;
}

const SFUInt32 *GeoVectorBufferPropertyBase::getSFFormat(void) const
{
    return &_sfFormat;
}


SFUInt32 *GeoVectorBufferPropertyBase::editSFFormatSize(void)
{
    editSField(FormatSizeFieldMask);

    return &_sfFormatSize;
}

const SFUInt32 *GeoVectorBufferPropertyBase::getSFFormatSize(void) const
{
    return &_sfFormatSize;
}


SFUInt32 *GeoVectorBufferPropertyBase::editSFDimension(void)
{
    editSField(DimensionFieldMask);

    return &_sfDimension;
}

const SFUInt32 *GeoVectorBufferPropertyBase::getSFDimension(void) const
{
    return &_sfDimension;
}


SFUInt32 *GeoVectorBufferPropertyBase::editSFVectorType(void)
{
    editSField(VectorTypeFieldMask);

    return &_sfVectorType;
}

const SFUInt32 *GeoVectorBufferPropertyBase::getSFVectorType(void) const
{
    return &_sfVectorType;
}


SFUInt32 *GeoVectorBufferPropertyBase::editSFSize(void)
{
    editSField(SizeFieldMask);

    return &_sfSize;
}

const SFUInt32 *GeoVectorBufferPropertyBase::getSFSize(void) const
{
    return &_sfSize;
}






/*------------------------------ access -----------------------------------*/

SizeT GeoVectorBufferPropertyBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (StrideFieldMask & whichField))
    {
        returnValue += _sfStride.getBinSize();
    }
    if(FieldBits::NoField != (FormatFieldMask & whichField))
    {
        returnValue += _sfFormat.getBinSize();
    }
    if(FieldBits::NoField != (FormatSizeFieldMask & whichField))
    {
        returnValue += _sfFormatSize.getBinSize();
    }
    if(FieldBits::NoField != (DimensionFieldMask & whichField))
    {
        returnValue += _sfDimension.getBinSize();
    }
    if(FieldBits::NoField != (VectorTypeFieldMask & whichField))
    {
        returnValue += _sfVectorType.getBinSize();
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }

    return returnValue;
}

void GeoVectorBufferPropertyBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (StrideFieldMask & whichField))
    {
        _sfStride.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FormatFieldMask & whichField))
    {
        _sfFormat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FormatSizeFieldMask & whichField))
    {
        _sfFormatSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DimensionFieldMask & whichField))
    {
        _sfDimension.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VectorTypeFieldMask & whichField))
    {
        _sfVectorType.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }
}

void GeoVectorBufferPropertyBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (StrideFieldMask & whichField))
    {
        editSField(StrideFieldMask);
        _sfStride.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FormatFieldMask & whichField))
    {
        editSField(FormatFieldMask);
        _sfFormat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FormatSizeFieldMask & whichField))
    {
        editSField(FormatSizeFieldMask);
        _sfFormatSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DimensionFieldMask & whichField))
    {
        editSField(DimensionFieldMask);
        _sfDimension.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VectorTypeFieldMask & whichField))
    {
        editSField(VectorTypeFieldMask);
        _sfVectorType.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        editSField(SizeFieldMask);
        _sfSize.copyFromBin(pMem);
    }
}

//! create a new instance of the class
GeoVectorBufferPropertyTransitPtr GeoVectorBufferPropertyBase::createLocal(BitVector bFlags)
{
    GeoVectorBufferPropertyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<GeoVectorBufferProperty>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
GeoVectorBufferPropertyTransitPtr GeoVectorBufferPropertyBase::createDependent(BitVector bFlags)
{
    GeoVectorBufferPropertyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<GeoVectorBufferProperty>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
GeoVectorBufferPropertyTransitPtr GeoVectorBufferPropertyBase::create(void)
{
    GeoVectorBufferPropertyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<GeoVectorBufferProperty>(tmpPtr);
    }

    return fc;
}

GeoVectorBufferProperty *GeoVectorBufferPropertyBase::createEmptyLocal(BitVector bFlags)
{
    GeoVectorBufferProperty *returnValue;

    newPtr<GeoVectorBufferProperty>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
GeoVectorBufferProperty *GeoVectorBufferPropertyBase::createEmpty(void)
{
    GeoVectorBufferProperty *returnValue;

    newPtr<GeoVectorBufferProperty>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr GeoVectorBufferPropertyBase::shallowCopyLocal(
    BitVector bFlags) const
{
    GeoVectorBufferProperty *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GeoVectorBufferProperty *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr GeoVectorBufferPropertyBase::shallowCopyDependent(
    BitVector bFlags) const
{
    GeoVectorBufferProperty *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GeoVectorBufferProperty *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr GeoVectorBufferPropertyBase::shallowCopy(void) const
{
    GeoVectorBufferProperty *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const GeoVectorBufferProperty *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

GeoVectorBufferPropertyBase::GeoVectorBufferPropertyBase(void) :
    Inherited(),
    _sfStride                 (UInt32(0)),
    _sfFormat                 (UInt32(GL_FLOAT)),
    _sfFormatSize             (UInt32(4)),
    _sfDimension              (UInt32(3)),
    _sfVectorType             (UInt32(GeoProperty::VectorTypeVector)),
    _sfSize                   (UInt32(0))
{
}

GeoVectorBufferPropertyBase::GeoVectorBufferPropertyBase(const GeoVectorBufferPropertyBase &source) :
    Inherited(source),
    _sfStride                 (source._sfStride                 ),
    _sfFormat                 (source._sfFormat                 ),
    _sfFormatSize             (source._sfFormatSize             ),
    _sfDimension              (source._sfDimension              ),
    _sfVectorType             (source._sfVectorType             ),
    _sfSize                   (source._sfSize                   )
{
}


/*-------------------------- destructors ----------------------------------*/

GeoVectorBufferPropertyBase::~GeoVectorBufferPropertyBase(void)
{
}


GetFieldHandlePtr GeoVectorBufferPropertyBase::getHandleStride          (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfStride,
             this->getType().getFieldDesc(StrideFieldId),
             const_cast<GeoVectorBufferPropertyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeoVectorBufferPropertyBase::editHandleStride         (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfStride,
             this->getType().getFieldDesc(StrideFieldId),
             this));


    editSField(StrideFieldMask);

    return returnValue;
}

GetFieldHandlePtr GeoVectorBufferPropertyBase::getHandleFormat          (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfFormat,
             this->getType().getFieldDesc(FormatFieldId),
             const_cast<GeoVectorBufferPropertyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeoVectorBufferPropertyBase::editHandleFormat         (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfFormat,
             this->getType().getFieldDesc(FormatFieldId),
             this));


    editSField(FormatFieldMask);

    return returnValue;
}

GetFieldHandlePtr GeoVectorBufferPropertyBase::getHandleFormatSize      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfFormatSize,
             this->getType().getFieldDesc(FormatSizeFieldId),
             const_cast<GeoVectorBufferPropertyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeoVectorBufferPropertyBase::editHandleFormatSize     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfFormatSize,
             this->getType().getFieldDesc(FormatSizeFieldId),
             this));


    editSField(FormatSizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr GeoVectorBufferPropertyBase::getHandleDimension       (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfDimension,
             this->getType().getFieldDesc(DimensionFieldId),
             const_cast<GeoVectorBufferPropertyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeoVectorBufferPropertyBase::editHandleDimension      (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfDimension,
             this->getType().getFieldDesc(DimensionFieldId),
             this));


    editSField(DimensionFieldMask);

    return returnValue;
}

GetFieldHandlePtr GeoVectorBufferPropertyBase::getHandleVectorType      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfVectorType,
             this->getType().getFieldDesc(VectorTypeFieldId),
             const_cast<GeoVectorBufferPropertyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeoVectorBufferPropertyBase::editHandleVectorType     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfVectorType,
             this->getType().getFieldDesc(VectorTypeFieldId),
             this));


    editSField(VectorTypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr GeoVectorBufferPropertyBase::getHandleSize            (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             const_cast<GeoVectorBufferPropertyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeoVectorBufferPropertyBase::editHandleSize           (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId),
             this));


    editSField(SizeFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void GeoVectorBufferPropertyBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    GeoVectorBufferProperty *pThis = static_cast<GeoVectorBufferProperty *>(this);

    pThis->execSync(static_cast<GeoVectorBufferProperty *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *GeoVectorBufferPropertyBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    GeoVectorBufferProperty *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GeoVectorBufferProperty *>(pRefAspect),
                  dynamic_cast<const GeoVectorBufferProperty *>(this));

    return returnValue;
}
#endif

void GeoVectorBufferPropertyBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
