/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeoIntegralBufferRefProperty!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGGeoIntegralBufferRefPropertyBase.h"
#include "OSGGeoIntegralBufferRefProperty.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GeoIntegralBufferRefProperty
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          GeoIntegralBufferRefPropertyBase::_sfOsgGLId
    The OpenSG GL object id for this geo property buffer object. If osgGLId is set, the GL object id
    is determined by OpenSG. If osgGLId equals 0, the GLId is used directly as the GL object id.
    An API getOglGLId()/setOglGLId() is provided to get/set the inherited GLId. This brings the
    interface more in line to the TextureObjRefChunk and the ShaderStorageBufferRefObjChunk
    classes.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<GeoIntegralBufferRefProperty *, nsOSG>::_type(
    "GeoIntegralBufferRefPropertyPtr", 
    "GeoIntegralBufferPropertyPtr", 
    GeoIntegralBufferRefProperty::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(GeoIntegralBufferRefProperty *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           GeoIntegralBufferRefProperty *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           GeoIntegralBufferRefProperty *,
                           nsOSG)

DataType &FieldTraits< GeoIntegralBufferRefProperty *, nsOSG + 1 >::getType(void)
{
    return FieldTraits<GeoIntegralBufferRefProperty *, nsOSG>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      GeoIntegralBufferRefProperty *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      GeoIntegralBufferRefProperty *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GeoIntegralBufferRefPropertyBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "osgGLId",
        "The OpenSG GL object id for this geo property buffer object. If osgGLId is set, the GL object id\n"
        "is determined by OpenSG. If osgGLId equals 0, the GLId is used directly as the GL object id.\n"
        "An API getOglGLId()/setOglGLId() is provided to get/set the inherited GLId. This brings the\n"
        "interface more in line to the TextureObjRefChunk and the ShaderStorageBufferRefObjChunk\n"
        "classes.\n",
        OsgGLIdFieldId, OsgGLIdFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&GeoIntegralBufferRefProperty::editHandleOsgGLId),
        static_cast<FieldGetMethodSig >(&GeoIntegralBufferRefProperty::getHandleOsgGLId));

    oType.addInitialDesc(pDesc);
}


GeoIntegralBufferRefPropertyBase::TypeObject GeoIntegralBufferRefPropertyBase::_type(
    GeoIntegralBufferRefPropertyBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&GeoIntegralBufferRefPropertyBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&GeoIntegralBufferRefProperty::initMethod),
    reinterpret_cast<ExitContainerF>(&GeoIntegralBufferRefProperty::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&GeoIntegralBufferRefProperty::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"GeoIntegralBufferRefProperty\"\n"
    "   parent=\"GeoIntegralBufferProperty\"\n"
    "   library=\"Drawable\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   childFields=\"both\"\n"
    "   docGroupBase=\"GrpDrawablesGeometry\"\n"
    "   >\n"
    "\n"
    "    <Field\n"
    "        name=\"osgGLId\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "            The OpenSG GL object id for this geo property buffer object. If osgGLId is set, the GL object id\n"
    "            is determined by OpenSG. If osgGLId equals 0, the GLId is used directly as the GL object id.\n"
    "            An API getOglGLId()/setOglGLId() is provided to get/set the inherited GLId. This brings the\n"
    "            interface more in line to the TextureObjRefChunk and the ShaderStorageBufferRefObjChunk\n"
    "            classes.\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeoIntegralBufferRefPropertyBase::getType(void)
{
    return _type;
}

const FieldContainerType &GeoIntegralBufferRefPropertyBase::getType(void) const
{
    return _type;
}

UInt32 GeoIntegralBufferRefPropertyBase::getContainerSize(void) const
{
    return sizeof(GeoIntegralBufferRefProperty);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *GeoIntegralBufferRefPropertyBase::editSFOsgGLId(void)
{
    editSField(OsgGLIdFieldMask);

    return &_sfOsgGLId;
}

const SFUInt32 *GeoIntegralBufferRefPropertyBase::getSFOsgGLId(void) const
{
    return &_sfOsgGLId;
}






/*------------------------------ access -----------------------------------*/

SizeT GeoIntegralBufferRefPropertyBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (OsgGLIdFieldMask & whichField))
    {
        returnValue += _sfOsgGLId.getBinSize();
    }

    return returnValue;
}

void GeoIntegralBufferRefPropertyBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (OsgGLIdFieldMask & whichField))
    {
        _sfOsgGLId.copyToBin(pMem);
    }
}

void GeoIntegralBufferRefPropertyBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (OsgGLIdFieldMask & whichField))
    {
        editSField(OsgGLIdFieldMask);
        _sfOsgGLId.copyFromBin(pMem);
    }
}

//! create a new instance of the class
GeoIntegralBufferRefPropertyTransitPtr GeoIntegralBufferRefPropertyBase::createLocal(BitVector bFlags)
{
    GeoIntegralBufferRefPropertyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<GeoIntegralBufferRefProperty>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
GeoIntegralBufferRefPropertyTransitPtr GeoIntegralBufferRefPropertyBase::createDependent(BitVector bFlags)
{
    GeoIntegralBufferRefPropertyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<GeoIntegralBufferRefProperty>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
GeoIntegralBufferRefPropertyTransitPtr GeoIntegralBufferRefPropertyBase::create(void)
{
    GeoIntegralBufferRefPropertyTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<GeoIntegralBufferRefProperty>(tmpPtr);
    }

    return fc;
}

GeoIntegralBufferRefProperty *GeoIntegralBufferRefPropertyBase::createEmptyLocal(BitVector bFlags)
{
    GeoIntegralBufferRefProperty *returnValue;

    newPtr<GeoIntegralBufferRefProperty>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
GeoIntegralBufferRefProperty *GeoIntegralBufferRefPropertyBase::createEmpty(void)
{
    GeoIntegralBufferRefProperty *returnValue;

    newPtr<GeoIntegralBufferRefProperty>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr GeoIntegralBufferRefPropertyBase::shallowCopyLocal(
    BitVector bFlags) const
{
    GeoIntegralBufferRefProperty *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GeoIntegralBufferRefProperty *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr GeoIntegralBufferRefPropertyBase::shallowCopyDependent(
    BitVector bFlags) const
{
    GeoIntegralBufferRefProperty *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const GeoIntegralBufferRefProperty *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr GeoIntegralBufferRefPropertyBase::shallowCopy(void) const
{
    GeoIntegralBufferRefProperty *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const GeoIntegralBufferRefProperty *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

GeoIntegralBufferRefPropertyBase::GeoIntegralBufferRefPropertyBase(void) :
    Inherited(),
    _sfOsgGLId                (UInt32(0))
{
}

GeoIntegralBufferRefPropertyBase::GeoIntegralBufferRefPropertyBase(const GeoIntegralBufferRefPropertyBase &source) :
    Inherited(source),
    _sfOsgGLId                (source._sfOsgGLId                )
{
}


/*-------------------------- destructors ----------------------------------*/

GeoIntegralBufferRefPropertyBase::~GeoIntegralBufferRefPropertyBase(void)
{
}


GetFieldHandlePtr GeoIntegralBufferRefPropertyBase::getHandleOsgGLId         (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfOsgGLId,
             this->getType().getFieldDesc(OsgGLIdFieldId),
             const_cast<GeoIntegralBufferRefPropertyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeoIntegralBufferRefPropertyBase::editHandleOsgGLId        (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfOsgGLId,
             this->getType().getFieldDesc(OsgGLIdFieldId),
             this));


    editSField(OsgGLIdFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void GeoIntegralBufferRefPropertyBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    GeoIntegralBufferRefProperty *pThis = static_cast<GeoIntegralBufferRefProperty *>(this);

    pThis->execSync(static_cast<GeoIntegralBufferRefProperty *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *GeoIntegralBufferRefPropertyBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    GeoIntegralBufferRefProperty *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GeoIntegralBufferRefProperty *>(pRefAspect),
                  dynamic_cast<const GeoIntegralBufferRefProperty *>(this));

    return returnValue;
}
#endif

void GeoIntegralBufferRefPropertyBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
