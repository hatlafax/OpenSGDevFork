/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeoVectorProperty!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGGeoVectorPropertyBase.h"
#include "OSGGeoVectorProperty.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GeoVectorProperty
    Abstract base class for all vector-valued GeoProperties.
    Provides a uniform interface for accessing all vector data in geometry using
    automatic conversion methods.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          GeoVectorPropertyBase::_sfDivisor
    sets the vertex attrib divisor for instanced rendering
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<GeoVectorProperty *, nsOSG>::_type(
    "GeoVectorPropertyPtr", 
    "GeoPropertyPtr", 
    GeoVectorProperty::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(GeoVectorProperty *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           GeoVectorProperty *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           GeoVectorProperty *,
                           nsOSG)

DataType &FieldTraits< GeoVectorProperty *, nsOSG + 1 >::getType(void)
{
    return FieldTraits<GeoVectorProperty *, nsOSG>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      GeoVectorProperty *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      GeoVectorProperty *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void GeoVectorPropertyBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "divisor",
        "sets the vertex attrib divisor for instanced rendering\n",
        DivisorFieldId, DivisorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&GeoVectorProperty::editHandleDivisor),
        static_cast<FieldGetMethodSig >(&GeoVectorProperty::getHandleDivisor));

    oType.addInitialDesc(pDesc);
}


GeoVectorPropertyBase::TypeObject GeoVectorPropertyBase::_type(
    GeoVectorPropertyBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    reinterpret_cast<InitContainerF>(&GeoVectorProperty::initMethod),
    reinterpret_cast<ExitContainerF>(&GeoVectorProperty::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&GeoVectorProperty::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"GeoVectorProperty\"\n"
    "    parent=\"GeoProperty\"\n"
    "    library=\"System\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    childFields=\"both\"\n"
    "    docGroupBase=\"GrpDrawablesGeometry\"\n"
    "    >\n"
    "  Abstract base class for all vector-valued GeoProperties.\n"
    "  Provides a uniform interface for accessing all vector data in geometry using\n"
    "  automatic conversion methods.\n"
    "  <Field\n"
    "      name=\"divisor\"\n"
    "      type=\"UInt32\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      defaultValue=\"0\"\n"
    "      access=\"public\"\n"
    "      >\n"
    "    sets the vertex attrib divisor for instanced rendering\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "Abstract base class for all vector-valued GeoProperties.\n"
    "Provides a uniform interface for accessing all vector data in geometry using\n"
    "automatic conversion methods.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeoVectorPropertyBase::getType(void)
{
    return _type;
}

const FieldContainerType &GeoVectorPropertyBase::getType(void) const
{
    return _type;
}

UInt32 GeoVectorPropertyBase::getContainerSize(void) const
{
    return sizeof(GeoVectorProperty);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *GeoVectorPropertyBase::editSFDivisor(void)
{
    editSField(DivisorFieldMask);

    return &_sfDivisor;
}

const SFUInt32 *GeoVectorPropertyBase::getSFDivisor(void) const
{
    return &_sfDivisor;
}






/*------------------------------ access -----------------------------------*/

SizeT GeoVectorPropertyBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DivisorFieldMask & whichField))
    {
        returnValue += _sfDivisor.getBinSize();
    }

    return returnValue;
}

void GeoVectorPropertyBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DivisorFieldMask & whichField))
    {
        _sfDivisor.copyToBin(pMem);
    }
}

void GeoVectorPropertyBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DivisorFieldMask & whichField))
    {
        editSField(DivisorFieldMask);
        _sfDivisor.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

GeoVectorPropertyBase::GeoVectorPropertyBase(void) :
    Inherited(),
    _sfDivisor                (UInt32(0))
{
}

GeoVectorPropertyBase::GeoVectorPropertyBase(const GeoVectorPropertyBase &source) :
    Inherited(source),
    _sfDivisor                (source._sfDivisor                )
{
}


/*-------------------------- destructors ----------------------------------*/

GeoVectorPropertyBase::~GeoVectorPropertyBase(void)
{
}


GetFieldHandlePtr GeoVectorPropertyBase::getHandleDivisor         (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfDivisor,
             this->getType().getFieldDesc(DivisorFieldId),
             const_cast<GeoVectorPropertyBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr GeoVectorPropertyBase::editHandleDivisor        (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfDivisor,
             this->getType().getFieldDesc(DivisorFieldId),
             this));


    editSField(DivisorFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void GeoVectorPropertyBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    GeoVectorProperty *pThis = static_cast<GeoVectorProperty *>(this);

    pThis->execSync(static_cast<GeoVectorProperty *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void GeoVectorPropertyBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
