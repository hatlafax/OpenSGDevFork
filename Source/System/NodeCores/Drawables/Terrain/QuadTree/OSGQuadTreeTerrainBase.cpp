/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class QuadTreeTerrain!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGImage.h"                   // HeightData Class
#include "OSGGeoVectorProperty.h"       // HeightVertices Class

#include "OSGQuadTreeTerrainBase.h"
#include "OSGQuadTreeTerrain.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::QuadTreeTerrain
    Terrain node core.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Image *         QuadTreeTerrainBase::_sfHeightData
    Terrain height as image, must be of size 2^n+1 x 2^n+1.
*/

/*! \var Real32          QuadTreeTerrainBase::_sfHeightScale
    Scale factor for terrain height.
*/

/*! \var Real32          QuadTreeTerrainBase::_mfHeightError
    Error values.
*/

/*! \var Real32          QuadTreeTerrainBase::_mfHeightQuad
    Vertex indices used in current tesselation (encoding terrain quadtree).
*/

/*! \var Int32           QuadTreeTerrainBase::_sfWidth
    Width and height of dataset.
*/

/*! \var Int32           QuadTreeTerrainBase::_sfLevel
    Levels of terrain quadtree.
*/

/*! \var Real32          QuadTreeTerrainBase::_sfDetail
    Detail of terrain tesselation.
*/

/*! \var Int32           QuadTreeTerrainBase::_sfBorderDetail
    Detail for borders (0: determined by height data, positive: borders at
    level borderDetail). 
*/

/*! \var Real32          QuadTreeTerrainBase::_sfVertexSpacing
    Spacing to horizontal and vertical neighbour vertices.
*/

/*! \var GeoVectorProperty * QuadTreeTerrainBase::_sfHeightVertices
    Precomputed terrain vertices.
*/

/*! \var bool            QuadTreeTerrainBase::_sfGeoMorphing
    
*/

/*! \var Pnt3f           QuadTreeTerrainBase::_sfBoundMin
    Min vertex of AABB.
*/

/*! \var Pnt3f           QuadTreeTerrainBase::_sfBoundMax
    Max vertex of AABB.
*/

/*! \var Pnt3f           QuadTreeTerrainBase::_sfEyePoint
    Eye point of this frame.
*/

/*! \var Real32          QuadTreeTerrainBase::_sfEyeHeight
    Height of eye point above terrain.
*/

/*! \var bool            QuadTreeTerrainBase::_sfEyePointValid
    Eye point set externally, otherwise it is computed internally.
*/

/*! \var Real32          QuadTreeTerrainBase::_sfOriginX
    X-component of terrain lower left point.
*/

/*! \var Real32          QuadTreeTerrainBase::_sfOriginY
    Y-component of terrain lower left point.
*/

/*! \var Real32          QuadTreeTerrainBase::_sfOriginTexX
    Texture X-component of terrain lower left point.
*/

/*! \var Real32          QuadTreeTerrainBase::_sfOriginTexY
    Texture Y-component of terrain lower left point.
*/

/*! \var Real32          QuadTreeTerrainBase::_sfTexSpacing
    Spacing of texture coordinates for horizontal (and vertical) neighbour
    vertices. 
*/

/*! \var Real32          QuadTreeTerrainBase::_sfTexYSpacing
    Spacing of texture coordinates for vertical neighbour vertices.
*/

/*! \var bool            QuadTreeTerrainBase::_sfUpdateTerrain
    Update terrain in next frame.
*/

/*! \var bool            QuadTreeTerrainBase::_sfPerPixelLighting
    Do per-pixel lighting with normalmap; otherwise generate per-vertex normals.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<QuadTreeTerrain *, nsOSG>::_type(
    "QuadTreeTerrainPtr", 
    "GeometryPtr", 
    QuadTreeTerrain::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(QuadTreeTerrain *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           QuadTreeTerrain *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           QuadTreeTerrain *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void QuadTreeTerrainBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecImagePtr::Description(
        SFUnrecImagePtr::getClassType(),
        "heightData",
        "Terrain height as image, must be of size 2^n+1 x 2^n+1.\n",
        HeightDataFieldId, HeightDataFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleHeightData),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleHeightData));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "heightScale",
        "Scale factor for terrain height.\n",
        HeightScaleFieldId, HeightScaleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleHeightScale),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleHeightScale));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "heightError",
        "Error values.\n",
        HeightErrorFieldId, HeightErrorFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleHeightError),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleHeightError));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "heightQuad",
        "Vertex indices used in current tesselation (encoding terrain quadtree).\n",
        HeightQuadFieldId, HeightQuadFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleHeightQuad),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleHeightQuad));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "width",
        "Width and height of dataset.\n",
        WidthFieldId, WidthFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleWidth),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "level",
        "Levels of terrain quadtree.\n",
        LevelFieldId, LevelFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleLevel),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleLevel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "detail",
        "Detail of terrain tesselation.\n",
        DetailFieldId, DetailFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleDetail),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleDetail));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "borderDetail",
        "Detail for borders (0: determined by height data, positive: borders at\n"
        "level borderDetail). \n",
        BorderDetailFieldId, BorderDetailFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleBorderDetail),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleBorderDetail));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "vertexSpacing",
        "Spacing to horizontal and vertical neighbour vertices.\n",
        VertexSpacingFieldId, VertexSpacingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleVertexSpacing),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleVertexSpacing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecGeoVectorPropertyPtr::Description(
        SFUnrecGeoVectorPropertyPtr::getClassType(),
        "heightVertices",
        "Precomputed terrain vertices.\n",
        HeightVerticesFieldId, HeightVerticesFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleHeightVertices),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleHeightVertices));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "geoMorphing",
        "",
        GeoMorphingFieldId, GeoMorphingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleGeoMorphing),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleGeoMorphing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "boundMin",
        "Min vertex of AABB.\n",
        BoundMinFieldId, BoundMinFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleBoundMin),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleBoundMin));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "boundMax",
        "Max vertex of AABB.\n",
        BoundMaxFieldId, BoundMaxFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleBoundMax),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleBoundMax));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(),
        "eyePoint",
        "Eye point of this frame.\n",
        EyePointFieldId, EyePointFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleEyePoint),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleEyePoint));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "eyeHeight",
        "Height of eye point above terrain.\n",
        EyeHeightFieldId, EyeHeightFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleEyeHeight),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleEyeHeight));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "eyePointValid",
        "Eye point set externally, otherwise it is computed internally.\n",
        EyePointValidFieldId, EyePointValidFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleEyePointValid),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleEyePointValid));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "originX",
        "X-component of terrain lower left point.\n",
        OriginXFieldId, OriginXFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleOriginX),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleOriginX));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "originY",
        "Y-component of terrain lower left point.\n",
        OriginYFieldId, OriginYFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleOriginY),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleOriginY));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "originTexX",
        "Texture X-component of terrain lower left point.\n",
        OriginTexXFieldId, OriginTexXFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleOriginTexX),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleOriginTexX));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "originTexY",
        "Texture Y-component of terrain lower left point.\n",
        OriginTexYFieldId, OriginTexYFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleOriginTexY),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleOriginTexY));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "texSpacing",
        "Spacing of texture coordinates for horizontal (and vertical) neighbour\n"
        "vertices. \n",
        TexSpacingFieldId, TexSpacingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleTexSpacing),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleTexSpacing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "texYSpacing",
        "Spacing of texture coordinates for vertical neighbour vertices.\n",
        TexYSpacingFieldId, TexYSpacingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleTexYSpacing),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleTexYSpacing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "updateTerrain",
        "Update terrain in next frame.\n",
        UpdateTerrainFieldId, UpdateTerrainFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandleUpdateTerrain),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandleUpdateTerrain));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "perPixelLighting",
        "Do per-pixel lighting with normalmap; otherwise generate per-vertex normals.\n",
        PerPixelLightingFieldId, PerPixelLightingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QuadTreeTerrain::editHandlePerPixelLighting),
        static_cast<FieldGetMethodSig >(&QuadTreeTerrain::getHandlePerPixelLighting));

    oType.addInitialDesc(pDesc);
}


QuadTreeTerrainBase::TypeObject QuadTreeTerrainBase::_type(
    QuadTreeTerrainBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&QuadTreeTerrainBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&QuadTreeTerrain::initMethod),
    reinterpret_cast<ExitContainerF>(&QuadTreeTerrain::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&QuadTreeTerrain::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"QuadTreeTerrain\"\n"
    "   parent=\"Geometry\"\n"
    "   library=\"Drawable\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   docGroupBase=\"GrpDrawablesTerrain\"\n"
    "   >\n"
    "  Terrain node core.\n"
    "  <Field\n"
    "\t name=\"heightData\"\n"
    "\t type=\"ImagePtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tTerrain height as image, must be of size 2^n+1 x 2^n+1.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"heightScale\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tScale factor for terrain height.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"heightError\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"internal\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tError values.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"heightQuad\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"internal\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tVertex indices used in current tesselation (encoding terrain quadtree).\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"width\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"protected\"\n"
    "\t >\n"
    "\tWidth and height of dataset.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"level\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"1\"\n"
    "\t access=\"protected\"\n"
    "\t >\n"
    "\tLevels of terrain quadtree.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"detail\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"22.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tDetail of terrain tesselation.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"borderDetail\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tDetail for borders (0: determined by height data, positive: borders at\n"
    "\tlevel borderDetail). \n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"vertexSpacing\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0.1f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tSpacing to horizontal and vertical neighbour vertices.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"heightVertices\"\n"
    "\t type=\"GeoVectorPropertyPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t access=\"protected\"\n"
    "\t >\n"
    "\tPrecomputed terrain vertices.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"geoMorphing\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"boundMin\"\n"
    "\t type=\"Pnt3f\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t access=\"protected\"\n"
    "\t >\n"
    "\tMin vertex of AABB.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"boundMax\"\n"
    "\t type=\"Pnt3f\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t access=\"protected\"\n"
    "\t >\n"
    "\tMax vertex of AABB.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"eyePoint\"\n"
    "\t type=\"Pnt3f\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tEye point of this frame.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"eyeHeight\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"0.0f\"\n"
    "\t access=\"protected\"\n"
    "\t >\n"
    "\tHeight of eye point above terrain.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"eyePointValid\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tEye point set externally, otherwise it is computed internally.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"originX\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tX-component of terrain lower left point.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"originY\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tY-component of terrain lower left point.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"originTexX\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tTexture X-component of terrain lower left point.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"originTexY\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tTexture Y-component of terrain lower left point.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"texSpacing\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tSpacing of texture coordinates for horizontal (and vertical) neighbour\n"
    "\tvertices. \n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"texYSpacing\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tSpacing of texture coordinates for vertical neighbour vertices.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"updateTerrain\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tUpdate terrain in next frame.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"perPixelLighting\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tDo per-pixel lighting with normalmap; otherwise generate per-vertex normals.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "Terrain node core.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &QuadTreeTerrainBase::getType(void)
{
    return _type;
}

const FieldContainerType &QuadTreeTerrainBase::getType(void) const
{
    return _type;
}

UInt32 QuadTreeTerrainBase::getContainerSize(void) const
{
    return sizeof(QuadTreeTerrain);
}

/*------------------------- decorator get ------------------------------*/


//! Get the QuadTreeTerrain::_sfHeightData field.
const SFUnrecImagePtr *QuadTreeTerrainBase::getSFHeightData(void) const
{
    return &_sfHeightData;
}

SFUnrecImagePtr     *QuadTreeTerrainBase::editSFHeightData     (void)
{
    editSField(HeightDataFieldMask);

    return &_sfHeightData;
}

//! Get the value of the QuadTreeTerrain::_sfHeightData field.
Image * QuadTreeTerrainBase::getHeightData(void) const
{
    return _sfHeightData.getValue();
}

//! Set the value of the QuadTreeTerrain::_sfHeightData field.
void QuadTreeTerrainBase::setHeightData(Image * const value)
{
    editSField(HeightDataFieldMask);

    _sfHeightData.setValue(value);
}


SFReal32 *QuadTreeTerrainBase::editSFHeightScale(void)
{
    editSField(HeightScaleFieldMask);

    return &_sfHeightScale;
}

const SFReal32 *QuadTreeTerrainBase::getSFHeightScale(void) const
{
    return &_sfHeightScale;
}


MFReal32 *QuadTreeTerrainBase::editMFHeightError(void)
{
    editMField(HeightErrorFieldMask, _mfHeightError);

    return &_mfHeightError;
}

const MFReal32 *QuadTreeTerrainBase::getMFHeightError(void) const
{
    return &_mfHeightError;
}


MFReal32 *QuadTreeTerrainBase::editMFHeightQuad(void)
{
    editMField(HeightQuadFieldMask, _mfHeightQuad);

    return &_mfHeightQuad;
}

const MFReal32 *QuadTreeTerrainBase::getMFHeightQuad(void) const
{
    return &_mfHeightQuad;
}


SFInt32 *QuadTreeTerrainBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFInt32 *QuadTreeTerrainBase::getSFWidth(void) const
{
    return &_sfWidth;
}


SFInt32 *QuadTreeTerrainBase::editSFLevel(void)
{
    editSField(LevelFieldMask);

    return &_sfLevel;
}

const SFInt32 *QuadTreeTerrainBase::getSFLevel(void) const
{
    return &_sfLevel;
}


SFReal32 *QuadTreeTerrainBase::editSFDetail(void)
{
    editSField(DetailFieldMask);

    return &_sfDetail;
}

const SFReal32 *QuadTreeTerrainBase::getSFDetail(void) const
{
    return &_sfDetail;
}


SFInt32 *QuadTreeTerrainBase::editSFBorderDetail(void)
{
    editSField(BorderDetailFieldMask);

    return &_sfBorderDetail;
}

const SFInt32 *QuadTreeTerrainBase::getSFBorderDetail(void) const
{
    return &_sfBorderDetail;
}


SFReal32 *QuadTreeTerrainBase::editSFVertexSpacing(void)
{
    editSField(VertexSpacingFieldMask);

    return &_sfVertexSpacing;
}

const SFReal32 *QuadTreeTerrainBase::getSFVertexSpacing(void) const
{
    return &_sfVertexSpacing;
}


//! Get the QuadTreeTerrain::_sfHeightVertices field.
const SFUnrecGeoVectorPropertyPtr *QuadTreeTerrainBase::getSFHeightVertices(void) const
{
    return &_sfHeightVertices;
}

SFUnrecGeoVectorPropertyPtr *QuadTreeTerrainBase::editSFHeightVertices (void)
{
    editSField(HeightVerticesFieldMask);

    return &_sfHeightVertices;
}

//! Get the value of the QuadTreeTerrain::_sfHeightVertices field.
GeoVectorProperty * QuadTreeTerrainBase::getHeightVertices(void) const
{
    return _sfHeightVertices.getValue();
}

//! Set the value of the QuadTreeTerrain::_sfHeightVertices field.
void QuadTreeTerrainBase::setHeightVertices(GeoVectorProperty * const value)
{
    editSField(HeightVerticesFieldMask);

    _sfHeightVertices.setValue(value);
}


SFBool *QuadTreeTerrainBase::editSFGeoMorphing(void)
{
    editSField(GeoMorphingFieldMask);

    return &_sfGeoMorphing;
}

const SFBool *QuadTreeTerrainBase::getSFGeoMorphing(void) const
{
    return &_sfGeoMorphing;
}


SFPnt3f *QuadTreeTerrainBase::editSFBoundMin(void)
{
    editSField(BoundMinFieldMask);

    return &_sfBoundMin;
}

const SFPnt3f *QuadTreeTerrainBase::getSFBoundMin(void) const
{
    return &_sfBoundMin;
}


SFPnt3f *QuadTreeTerrainBase::editSFBoundMax(void)
{
    editSField(BoundMaxFieldMask);

    return &_sfBoundMax;
}

const SFPnt3f *QuadTreeTerrainBase::getSFBoundMax(void) const
{
    return &_sfBoundMax;
}


SFPnt3f *QuadTreeTerrainBase::editSFEyePoint(void)
{
    editSField(EyePointFieldMask);

    return &_sfEyePoint;
}

const SFPnt3f *QuadTreeTerrainBase::getSFEyePoint(void) const
{
    return &_sfEyePoint;
}


SFReal32 *QuadTreeTerrainBase::editSFEyeHeight(void)
{
    editSField(EyeHeightFieldMask);

    return &_sfEyeHeight;
}

const SFReal32 *QuadTreeTerrainBase::getSFEyeHeight(void) const
{
    return &_sfEyeHeight;
}


SFBool *QuadTreeTerrainBase::editSFEyePointValid(void)
{
    editSField(EyePointValidFieldMask);

    return &_sfEyePointValid;
}

const SFBool *QuadTreeTerrainBase::getSFEyePointValid(void) const
{
    return &_sfEyePointValid;
}


SFReal32 *QuadTreeTerrainBase::editSFOriginX(void)
{
    editSField(OriginXFieldMask);

    return &_sfOriginX;
}

const SFReal32 *QuadTreeTerrainBase::getSFOriginX(void) const
{
    return &_sfOriginX;
}


SFReal32 *QuadTreeTerrainBase::editSFOriginY(void)
{
    editSField(OriginYFieldMask);

    return &_sfOriginY;
}

const SFReal32 *QuadTreeTerrainBase::getSFOriginY(void) const
{
    return &_sfOriginY;
}


SFReal32 *QuadTreeTerrainBase::editSFOriginTexX(void)
{
    editSField(OriginTexXFieldMask);

    return &_sfOriginTexX;
}

const SFReal32 *QuadTreeTerrainBase::getSFOriginTexX(void) const
{
    return &_sfOriginTexX;
}


SFReal32 *QuadTreeTerrainBase::editSFOriginTexY(void)
{
    editSField(OriginTexYFieldMask);

    return &_sfOriginTexY;
}

const SFReal32 *QuadTreeTerrainBase::getSFOriginTexY(void) const
{
    return &_sfOriginTexY;
}


SFReal32 *QuadTreeTerrainBase::editSFTexSpacing(void)
{
    editSField(TexSpacingFieldMask);

    return &_sfTexSpacing;
}

const SFReal32 *QuadTreeTerrainBase::getSFTexSpacing(void) const
{
    return &_sfTexSpacing;
}


SFReal32 *QuadTreeTerrainBase::editSFTexYSpacing(void)
{
    editSField(TexYSpacingFieldMask);

    return &_sfTexYSpacing;
}

const SFReal32 *QuadTreeTerrainBase::getSFTexYSpacing(void) const
{
    return &_sfTexYSpacing;
}


SFBool *QuadTreeTerrainBase::editSFUpdateTerrain(void)
{
    editSField(UpdateTerrainFieldMask);

    return &_sfUpdateTerrain;
}

const SFBool *QuadTreeTerrainBase::getSFUpdateTerrain(void) const
{
    return &_sfUpdateTerrain;
}


SFBool *QuadTreeTerrainBase::editSFPerPixelLighting(void)
{
    editSField(PerPixelLightingFieldMask);

    return &_sfPerPixelLighting;
}

const SFBool *QuadTreeTerrainBase::getSFPerPixelLighting(void) const
{
    return &_sfPerPixelLighting;
}






/*------------------------------ access -----------------------------------*/

SizeT QuadTreeTerrainBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (HeightDataFieldMask & whichField))
    {
        returnValue += _sfHeightData.getBinSize();
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        returnValue += _sfHeightScale.getBinSize();
    }
    if(FieldBits::NoField != (HeightErrorFieldMask & whichField))
    {
        returnValue += _mfHeightError.getBinSize();
    }
    if(FieldBits::NoField != (HeightQuadFieldMask & whichField))
    {
        returnValue += _mfHeightQuad.getBinSize();
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (LevelFieldMask & whichField))
    {
        returnValue += _sfLevel.getBinSize();
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        returnValue += _sfDetail.getBinSize();
    }
    if(FieldBits::NoField != (BorderDetailFieldMask & whichField))
    {
        returnValue += _sfBorderDetail.getBinSize();
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        returnValue += _sfVertexSpacing.getBinSize();
    }
    if(FieldBits::NoField != (HeightVerticesFieldMask & whichField))
    {
        returnValue += _sfHeightVertices.getBinSize();
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        returnValue += _sfGeoMorphing.getBinSize();
    }
    if(FieldBits::NoField != (BoundMinFieldMask & whichField))
    {
        returnValue += _sfBoundMin.getBinSize();
    }
    if(FieldBits::NoField != (BoundMaxFieldMask & whichField))
    {
        returnValue += _sfBoundMax.getBinSize();
    }
    if(FieldBits::NoField != (EyePointFieldMask & whichField))
    {
        returnValue += _sfEyePoint.getBinSize();
    }
    if(FieldBits::NoField != (EyeHeightFieldMask & whichField))
    {
        returnValue += _sfEyeHeight.getBinSize();
    }
    if(FieldBits::NoField != (EyePointValidFieldMask & whichField))
    {
        returnValue += _sfEyePointValid.getBinSize();
    }
    if(FieldBits::NoField != (OriginXFieldMask & whichField))
    {
        returnValue += _sfOriginX.getBinSize();
    }
    if(FieldBits::NoField != (OriginYFieldMask & whichField))
    {
        returnValue += _sfOriginY.getBinSize();
    }
    if(FieldBits::NoField != (OriginTexXFieldMask & whichField))
    {
        returnValue += _sfOriginTexX.getBinSize();
    }
    if(FieldBits::NoField != (OriginTexYFieldMask & whichField))
    {
        returnValue += _sfOriginTexY.getBinSize();
    }
    if(FieldBits::NoField != (TexSpacingFieldMask & whichField))
    {
        returnValue += _sfTexSpacing.getBinSize();
    }
    if(FieldBits::NoField != (TexYSpacingFieldMask & whichField))
    {
        returnValue += _sfTexYSpacing.getBinSize();
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        returnValue += _sfUpdateTerrain.getBinSize();
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        returnValue += _sfPerPixelLighting.getBinSize();
    }

    return returnValue;
}

void QuadTreeTerrainBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (HeightDataFieldMask & whichField))
    {
        _sfHeightData.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        _sfHeightScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightErrorFieldMask & whichField))
    {
        _mfHeightError.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightQuadFieldMask & whichField))
    {
        _mfHeightQuad.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LevelFieldMask & whichField))
    {
        _sfLevel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        _sfDetail.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderDetailFieldMask & whichField))
    {
        _sfBorderDetail.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        _sfVertexSpacing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightVerticesFieldMask & whichField))
    {
        _sfHeightVertices.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        _sfGeoMorphing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BoundMinFieldMask & whichField))
    {
        _sfBoundMin.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BoundMaxFieldMask & whichField))
    {
        _sfBoundMax.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EyePointFieldMask & whichField))
    {
        _sfEyePoint.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EyeHeightFieldMask & whichField))
    {
        _sfEyeHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EyePointValidFieldMask & whichField))
    {
        _sfEyePointValid.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OriginXFieldMask & whichField))
    {
        _sfOriginX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OriginYFieldMask & whichField))
    {
        _sfOriginY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OriginTexXFieldMask & whichField))
    {
        _sfOriginTexX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OriginTexYFieldMask & whichField))
    {
        _sfOriginTexY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexSpacingFieldMask & whichField))
    {
        _sfTexSpacing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexYSpacingFieldMask & whichField))
    {
        _sfTexYSpacing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        _sfUpdateTerrain.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        _sfPerPixelLighting.copyToBin(pMem);
    }
}

void QuadTreeTerrainBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (HeightDataFieldMask & whichField))
    {
        editSField(HeightDataFieldMask);
        _sfHeightData.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        editSField(HeightScaleFieldMask);
        _sfHeightScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightErrorFieldMask & whichField))
    {
        editMField(HeightErrorFieldMask, _mfHeightError);
        _mfHeightError.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightQuadFieldMask & whichField))
    {
        editMField(HeightQuadFieldMask, _mfHeightQuad);
        _mfHeightQuad.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        editSField(WidthFieldMask);
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LevelFieldMask & whichField))
    {
        editSField(LevelFieldMask);
        _sfLevel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        editSField(DetailFieldMask);
        _sfDetail.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderDetailFieldMask & whichField))
    {
        editSField(BorderDetailFieldMask);
        _sfBorderDetail.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        editSField(VertexSpacingFieldMask);
        _sfVertexSpacing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightVerticesFieldMask & whichField))
    {
        editSField(HeightVerticesFieldMask);
        _sfHeightVertices.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        editSField(GeoMorphingFieldMask);
        _sfGeoMorphing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BoundMinFieldMask & whichField))
    {
        editSField(BoundMinFieldMask);
        _sfBoundMin.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BoundMaxFieldMask & whichField))
    {
        editSField(BoundMaxFieldMask);
        _sfBoundMax.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EyePointFieldMask & whichField))
    {
        editSField(EyePointFieldMask);
        _sfEyePoint.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EyeHeightFieldMask & whichField))
    {
        editSField(EyeHeightFieldMask);
        _sfEyeHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EyePointValidFieldMask & whichField))
    {
        editSField(EyePointValidFieldMask);
        _sfEyePointValid.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OriginXFieldMask & whichField))
    {
        editSField(OriginXFieldMask);
        _sfOriginX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OriginYFieldMask & whichField))
    {
        editSField(OriginYFieldMask);
        _sfOriginY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OriginTexXFieldMask & whichField))
    {
        editSField(OriginTexXFieldMask);
        _sfOriginTexX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OriginTexYFieldMask & whichField))
    {
        editSField(OriginTexYFieldMask);
        _sfOriginTexY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexSpacingFieldMask & whichField))
    {
        editSField(TexSpacingFieldMask);
        _sfTexSpacing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexYSpacingFieldMask & whichField))
    {
        editSField(TexYSpacingFieldMask);
        _sfTexYSpacing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        editSField(UpdateTerrainFieldMask);
        _sfUpdateTerrain.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        editSField(PerPixelLightingFieldMask);
        _sfPerPixelLighting.copyFromBin(pMem);
    }
}

//! create a new instance of the class
QuadTreeTerrainTransitPtr QuadTreeTerrainBase::createLocal(BitVector bFlags)
{
    QuadTreeTerrainTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<QuadTreeTerrain>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
QuadTreeTerrainTransitPtr QuadTreeTerrainBase::createDependent(BitVector bFlags)
{
    QuadTreeTerrainTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<QuadTreeTerrain>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
QuadTreeTerrainTransitPtr QuadTreeTerrainBase::create(void)
{
    QuadTreeTerrainTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<QuadTreeTerrain>(tmpPtr);
    }

    return fc;
}

QuadTreeTerrain *QuadTreeTerrainBase::createEmptyLocal(BitVector bFlags)
{
    QuadTreeTerrain *returnValue;

    newPtr<QuadTreeTerrain>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
QuadTreeTerrain *QuadTreeTerrainBase::createEmpty(void)
{
    QuadTreeTerrain *returnValue;

    newPtr<QuadTreeTerrain>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr QuadTreeTerrainBase::shallowCopyLocal(
    BitVector bFlags) const
{
    QuadTreeTerrain *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const QuadTreeTerrain *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr QuadTreeTerrainBase::shallowCopyDependent(
    BitVector bFlags) const
{
    QuadTreeTerrain *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const QuadTreeTerrain *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr QuadTreeTerrainBase::shallowCopy(void) const
{
    QuadTreeTerrain *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const QuadTreeTerrain *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

QuadTreeTerrainBase::QuadTreeTerrainBase(void) :
    Inherited(),
    _sfHeightData             (NULL),
    _sfHeightScale            (Real32(1.0f)),
    _mfHeightError            (),
    _mfHeightQuad             (),
    _sfWidth                  (Int32(0)),
    _sfLevel                  (Int32(1)),
    _sfDetail                 (Real32(22.0f)),
    _sfBorderDetail           (Int32(0)),
    _sfVertexSpacing          (Real32(0.1f)),
    _sfHeightVertices         (NULL),
    _sfGeoMorphing            (bool(false)),
    _sfBoundMin               (),
    _sfBoundMax               (),
    _sfEyePoint               (),
    _sfEyeHeight              (Real32(0.0f)),
    _sfEyePointValid          (bool(false)),
    _sfOriginX                (Real32(0.0f)),
    _sfOriginY                (Real32(0.0f)),
    _sfOriginTexX             (Real32(0.0f)),
    _sfOriginTexY             (Real32(0.0f)),
    _sfTexSpacing             (Real32(1.0f)),
    _sfTexYSpacing            (Real32(1.0f)),
    _sfUpdateTerrain          (bool(true)),
    _sfPerPixelLighting       (bool(true))
{
}

QuadTreeTerrainBase::QuadTreeTerrainBase(const QuadTreeTerrainBase &source) :
    Inherited(source),
    _sfHeightData             (NULL),
    _sfHeightScale            (source._sfHeightScale            ),
    _mfHeightError            (source._mfHeightError            ),
    _mfHeightQuad             (source._mfHeightQuad             ),
    _sfWidth                  (source._sfWidth                  ),
    _sfLevel                  (source._sfLevel                  ),
    _sfDetail                 (source._sfDetail                 ),
    _sfBorderDetail           (source._sfBorderDetail           ),
    _sfVertexSpacing          (source._sfVertexSpacing          ),
    _sfHeightVertices         (NULL),
    _sfGeoMorphing            (source._sfGeoMorphing            ),
    _sfBoundMin               (source._sfBoundMin               ),
    _sfBoundMax               (source._sfBoundMax               ),
    _sfEyePoint               (source._sfEyePoint               ),
    _sfEyeHeight              (source._sfEyeHeight              ),
    _sfEyePointValid          (source._sfEyePointValid          ),
    _sfOriginX                (source._sfOriginX                ),
    _sfOriginY                (source._sfOriginY                ),
    _sfOriginTexX             (source._sfOriginTexX             ),
    _sfOriginTexY             (source._sfOriginTexY             ),
    _sfTexSpacing             (source._sfTexSpacing             ),
    _sfTexYSpacing            (source._sfTexYSpacing            ),
    _sfUpdateTerrain          (source._sfUpdateTerrain          ),
    _sfPerPixelLighting       (source._sfPerPixelLighting       )
{
}


/*-------------------------- destructors ----------------------------------*/

QuadTreeTerrainBase::~QuadTreeTerrainBase(void)
{
}

void QuadTreeTerrainBase::onCreate(const QuadTreeTerrain *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        QuadTreeTerrain *pThis = static_cast<QuadTreeTerrain *>(this);

        pThis->setHeightData(source->getHeightData());

        pThis->setHeightVertices(source->getHeightVertices());
    }
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleHeightData      (void) const
{
    SFUnrecImagePtr::GetHandlePtr returnValue(
        new  SFUnrecImagePtr::GetHandle(
             &_sfHeightData,
             this->getType().getFieldDesc(HeightDataFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleHeightData     (void)
{
    SFUnrecImagePtr::EditHandlePtr returnValue(
        new  SFUnrecImagePtr::EditHandle(
             &_sfHeightData,
             this->getType().getFieldDesc(HeightDataFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&QuadTreeTerrain::setHeightData,
                    static_cast<QuadTreeTerrain *>(this), ::boost::placeholders::_1));

    editSField(HeightDataFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleHeightScale     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHeightScale,
             this->getType().getFieldDesc(HeightScaleFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleHeightScale    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHeightScale,
             this->getType().getFieldDesc(HeightScaleFieldId),
             this));


    editSField(HeightScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleHeightError     (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfHeightError,
             this->getType().getFieldDesc(HeightErrorFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleHeightError    (void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfHeightError,
             this->getType().getFieldDesc(HeightErrorFieldId),
             this));


    editMField(HeightErrorFieldMask, _mfHeightError);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleHeightQuad      (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfHeightQuad,
             this->getType().getFieldDesc(HeightQuadFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleHeightQuad     (void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfHeightQuad,
             this->getType().getFieldDesc(HeightQuadFieldId),
             this));


    editMField(HeightQuadFieldMask, _mfHeightQuad);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleWidth           (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleWidth          (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             this));


    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleLevel           (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfLevel,
             this->getType().getFieldDesc(LevelFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleLevel          (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfLevel,
             this->getType().getFieldDesc(LevelFieldId),
             this));


    editSField(LevelFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleDetail          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfDetail,
             this->getType().getFieldDesc(DetailFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleDetail         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfDetail,
             this->getType().getFieldDesc(DetailFieldId),
             this));


    editSField(DetailFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleBorderDetail    (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfBorderDetail,
             this->getType().getFieldDesc(BorderDetailFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleBorderDetail   (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfBorderDetail,
             this->getType().getFieldDesc(BorderDetailFieldId),
             this));


    editSField(BorderDetailFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleVertexSpacing   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfVertexSpacing,
             this->getType().getFieldDesc(VertexSpacingFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleVertexSpacing  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfVertexSpacing,
             this->getType().getFieldDesc(VertexSpacingFieldId),
             this));


    editSField(VertexSpacingFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleHeightVertices  (void) const
{
    SFUnrecGeoVectorPropertyPtr::GetHandlePtr returnValue(
        new  SFUnrecGeoVectorPropertyPtr::GetHandle(
             &_sfHeightVertices,
             this->getType().getFieldDesc(HeightVerticesFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleHeightVertices (void)
{
    SFUnrecGeoVectorPropertyPtr::EditHandlePtr returnValue(
        new  SFUnrecGeoVectorPropertyPtr::EditHandle(
             &_sfHeightVertices,
             this->getType().getFieldDesc(HeightVerticesFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&QuadTreeTerrain::setHeightVertices,
                    static_cast<QuadTreeTerrain *>(this), ::boost::placeholders::_1));

    editSField(HeightVerticesFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleGeoMorphing     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfGeoMorphing,
             this->getType().getFieldDesc(GeoMorphingFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleGeoMorphing    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfGeoMorphing,
             this->getType().getFieldDesc(GeoMorphingFieldId),
             this));


    editSField(GeoMorphingFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleBoundMin        (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfBoundMin,
             this->getType().getFieldDesc(BoundMinFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleBoundMin       (void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfBoundMin,
             this->getType().getFieldDesc(BoundMinFieldId),
             this));


    editSField(BoundMinFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleBoundMax        (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfBoundMax,
             this->getType().getFieldDesc(BoundMaxFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleBoundMax       (void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfBoundMax,
             this->getType().getFieldDesc(BoundMaxFieldId),
             this));


    editSField(BoundMaxFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleEyePoint        (void) const
{
    SFPnt3f::GetHandlePtr returnValue(
        new  SFPnt3f::GetHandle(
             &_sfEyePoint,
             this->getType().getFieldDesc(EyePointFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleEyePoint       (void)
{
    SFPnt3f::EditHandlePtr returnValue(
        new  SFPnt3f::EditHandle(
             &_sfEyePoint,
             this->getType().getFieldDesc(EyePointFieldId),
             this));


    editSField(EyePointFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleEyeHeight       (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfEyeHeight,
             this->getType().getFieldDesc(EyeHeightFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleEyeHeight      (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfEyeHeight,
             this->getType().getFieldDesc(EyeHeightFieldId),
             this));


    editSField(EyeHeightFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleEyePointValid   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEyePointValid,
             this->getType().getFieldDesc(EyePointValidFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleEyePointValid  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEyePointValid,
             this->getType().getFieldDesc(EyePointValidFieldId),
             this));


    editSField(EyePointValidFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleOriginX         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOriginX,
             this->getType().getFieldDesc(OriginXFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleOriginX        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOriginX,
             this->getType().getFieldDesc(OriginXFieldId),
             this));


    editSField(OriginXFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleOriginY         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOriginY,
             this->getType().getFieldDesc(OriginYFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleOriginY        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOriginY,
             this->getType().getFieldDesc(OriginYFieldId),
             this));


    editSField(OriginYFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleOriginTexX      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOriginTexX,
             this->getType().getFieldDesc(OriginTexXFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleOriginTexX     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOriginTexX,
             this->getType().getFieldDesc(OriginTexXFieldId),
             this));


    editSField(OriginTexXFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleOriginTexY      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOriginTexY,
             this->getType().getFieldDesc(OriginTexYFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleOriginTexY     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOriginTexY,
             this->getType().getFieldDesc(OriginTexYFieldId),
             this));


    editSField(OriginTexYFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleTexSpacing      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfTexSpacing,
             this->getType().getFieldDesc(TexSpacingFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleTexSpacing     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfTexSpacing,
             this->getType().getFieldDesc(TexSpacingFieldId),
             this));


    editSField(TexSpacingFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleTexYSpacing     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfTexYSpacing,
             this->getType().getFieldDesc(TexYSpacingFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleTexYSpacing    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfTexYSpacing,
             this->getType().getFieldDesc(TexYSpacingFieldId),
             this));


    editSField(TexYSpacingFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandleUpdateTerrain   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUpdateTerrain,
             this->getType().getFieldDesc(UpdateTerrainFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandleUpdateTerrain  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUpdateTerrain,
             this->getType().getFieldDesc(UpdateTerrainFieldId),
             this));


    editSField(UpdateTerrainFieldMask);

    return returnValue;
}

GetFieldHandlePtr QuadTreeTerrainBase::getHandlePerPixelLighting (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfPerPixelLighting,
             this->getType().getFieldDesc(PerPixelLightingFieldId),
             const_cast<QuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QuadTreeTerrainBase::editHandlePerPixelLighting(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfPerPixelLighting,
             this->getType().getFieldDesc(PerPixelLightingFieldId),
             this));


    editSField(PerPixelLightingFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void QuadTreeTerrainBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    QuadTreeTerrain *pThis = static_cast<QuadTreeTerrain *>(this);

    pThis->execSync(static_cast<QuadTreeTerrain *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *QuadTreeTerrainBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    QuadTreeTerrain *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const QuadTreeTerrain *>(pRefAspect),
                  dynamic_cast<const QuadTreeTerrain *>(this));

    return returnValue;
}
#endif

void QuadTreeTerrainBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<QuadTreeTerrain *>(this)->setHeightData(NULL);

    static_cast<QuadTreeTerrain *>(this)->setHeightVertices(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfHeightError.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfHeightQuad.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE
