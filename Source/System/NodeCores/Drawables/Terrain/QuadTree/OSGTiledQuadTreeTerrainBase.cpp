/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TiledQuadTreeTerrain!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGImage.h"                   // HeightTiles Class
#include "OSGMaterial.h"                // HeightTextures Class

#include "OSGTiledQuadTreeTerrainBase.h"
#include "OSGTiledQuadTreeTerrain.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TiledQuadTreeTerrain
    Tiled terrain node core.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Image *         TiledQuadTreeTerrainBase::_mfHeightTiles
    Terrain tile array.
*/

/*! \var Material *      TiledQuadTreeTerrainBase::_mfHeightTextures
    Terrain textures.
*/

/*! \var UInt32          TiledQuadTreeTerrainBase::_sfSizeX
    x-size of 2-dimensional tile array.
*/

/*! \var UInt32          TiledQuadTreeTerrainBase::_sfSizeY
    y-size of 2-dimensional tile array.
*/

/*! \var Real32          TiledQuadTreeTerrainBase::_sfHeightScale
    
*/

/*! \var Real32          TiledQuadTreeTerrainBase::_sfVertexSpacing
    
*/

/*! \var bool            TiledQuadTreeTerrainBase::_sfGeoMorphing
    
*/

/*! \var Real32          TiledQuadTreeTerrainBase::_sfDetail
    Detail of terrain tesselation.
*/

/*! \var Int32           TiledQuadTreeTerrainBase::_sfCurrentX
    
*/

/*! \var Int32           TiledQuadTreeTerrainBase::_sfCurrentY
    
*/

/*! \var Int32           TiledQuadTreeTerrainBase::_sfSizeROI
    Number of tiles (0, 1, 2, 3) around current eye point.
*/

/*! \var bool            TiledQuadTreeTerrainBase::_sfUpdate
    Perform any updates (tiling, terrain tiles).
*/

/*! \var bool            TiledQuadTreeTerrainBase::_sfUpdateTerrain
    Update terrain tiles in the next frame.
*/

/*! \var bool            TiledQuadTreeTerrainBase::_sfPerPixelLighting
    Do per-pixel lighting with normalmap; otherwise generate per-vertex normals.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<TiledQuadTreeTerrain *, nsOSG>::_type(
    "TiledQuadTreeTerrainPtr", 
    "MaterialGroupPtr", 
    TiledQuadTreeTerrain::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(TiledQuadTreeTerrain *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           TiledQuadTreeTerrain *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           TiledQuadTreeTerrain *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void TiledQuadTreeTerrainBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecImagePtr::Description(
        MFUnrecImagePtr::getClassType(),
        "heightTiles",
        "Terrain tile array.\n",
        HeightTilesFieldId, HeightTilesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleHeightTiles),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleHeightTiles));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecMaterialPtr::Description(
        MFUnrecMaterialPtr::getClassType(),
        "heightTextures",
        "Terrain textures.\n",
        HeightTexturesFieldId, HeightTexturesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleHeightTextures),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleHeightTextures));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "sizeX",
        "x-size of 2-dimensional tile array.\n",
        SizeXFieldId, SizeXFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleSizeX),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleSizeX));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "sizeY",
        "y-size of 2-dimensional tile array.\n",
        SizeYFieldId, SizeYFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleSizeY),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleSizeY));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "heightScale",
        "",
        HeightScaleFieldId, HeightScaleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleHeightScale),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleHeightScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "vertexSpacing",
        "",
        VertexSpacingFieldId, VertexSpacingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleVertexSpacing),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleVertexSpacing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "geoMorphing",
        "",
        GeoMorphingFieldId, GeoMorphingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleGeoMorphing),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleGeoMorphing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "detail",
        "Detail of terrain tesselation.\n",
        DetailFieldId, DetailFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleDetail),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleDetail));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "currentX",
        "",
        CurrentXFieldId, CurrentXFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleCurrentX),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleCurrentX));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "currentY",
        "",
        CurrentYFieldId, CurrentYFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleCurrentY),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleCurrentY));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "sizeROI",
        "Number of tiles (0, 1, 2, 3) around current eye point.\n",
        SizeROIFieldId, SizeROIFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleSizeROI),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleSizeROI));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "update",
        "Perform any updates (tiling, terrain tiles).\n",
        UpdateFieldId, UpdateFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleUpdate),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleUpdate));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "updateTerrain",
        "Update terrain tiles in the next frame.\n",
        UpdateTerrainFieldId, UpdateTerrainFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandleUpdateTerrain),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandleUpdateTerrain));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "perPixelLighting",
        "Do per-pixel lighting with normalmap; otherwise generate per-vertex normals.\n",
        PerPixelLightingFieldId, PerPixelLightingFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&TiledQuadTreeTerrain::editHandlePerPixelLighting),
        static_cast<FieldGetMethodSig >(&TiledQuadTreeTerrain::getHandlePerPixelLighting));

    oType.addInitialDesc(pDesc);
}


TiledQuadTreeTerrainBase::TypeObject TiledQuadTreeTerrainBase::_type(
    TiledQuadTreeTerrainBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&TiledQuadTreeTerrainBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&TiledQuadTreeTerrain::initMethod),
    reinterpret_cast<ExitContainerF>(&TiledQuadTreeTerrain::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&TiledQuadTreeTerrain::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"TiledQuadTreeTerrain\"\n"
    "   parent=\"MaterialGroup\"\n"
    "   library=\"Drawable\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   docGroupBase=\"GrpDrawablesTerrain\"\n"
    "   >\n"
    "  Tiled terrain node core.\n"
    "  <Field\n"
    "\t name=\"heightTiles\"\n"
    "\t type=\"ImagePtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tTerrain tile array.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"heightTextures\"\n"
    "\t type=\"MaterialPtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tTerrain textures.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"sizeX\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tx-size of 2-dimensional tile array.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"sizeY\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\ty-size of 2-dimensional tile array.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"heightScale\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"vertexSpacing\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0.1f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"geoMorphing\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"detail\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"22.0f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tDetail of terrain tesselation.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"currentX\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"currentY\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"sizeROI\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tNumber of tiles (0, 1, 2, 3) around current eye point.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"update\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tPerform any updates (tiling, terrain tiles).\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"updateTerrain\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"false\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tUpdate terrain tiles in the next frame.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"perPixelLighting\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "\tDo per-pixel lighting with normalmap; otherwise generate per-vertex normals.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "Tiled terrain node core.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TiledQuadTreeTerrainBase::getType(void)
{
    return _type;
}

const FieldContainerType &TiledQuadTreeTerrainBase::getType(void) const
{
    return _type;
}

UInt32 TiledQuadTreeTerrainBase::getContainerSize(void) const
{
    return sizeof(TiledQuadTreeTerrain);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TiledQuadTreeTerrain::_mfHeightTiles field.
const MFUnrecImagePtr *TiledQuadTreeTerrainBase::getMFHeightTiles(void) const
{
    return &_mfHeightTiles;
}

MFUnrecImagePtr     *TiledQuadTreeTerrainBase::editMFHeightTiles    (void)
{
    editMField(HeightTilesFieldMask, _mfHeightTiles);

    return &_mfHeightTiles;
}
Image * TiledQuadTreeTerrainBase::getHeightTiles(const UInt32 index) const
{
    return _mfHeightTiles[index];
}

//! Get the TiledQuadTreeTerrain::_mfHeightTextures field.
const MFUnrecMaterialPtr *TiledQuadTreeTerrainBase::getMFHeightTextures(void) const
{
    return &_mfHeightTextures;
}

MFUnrecMaterialPtr  *TiledQuadTreeTerrainBase::editMFHeightTextures (void)
{
    editMField(HeightTexturesFieldMask, _mfHeightTextures);

    return &_mfHeightTextures;
}
Material * TiledQuadTreeTerrainBase::getHeightTextures(const UInt32 index) const
{
    return _mfHeightTextures[index];
}

SFUInt32 *TiledQuadTreeTerrainBase::editSFSizeX(void)
{
    editSField(SizeXFieldMask);

    return &_sfSizeX;
}

const SFUInt32 *TiledQuadTreeTerrainBase::getSFSizeX(void) const
{
    return &_sfSizeX;
}


SFUInt32 *TiledQuadTreeTerrainBase::editSFSizeY(void)
{
    editSField(SizeYFieldMask);

    return &_sfSizeY;
}

const SFUInt32 *TiledQuadTreeTerrainBase::getSFSizeY(void) const
{
    return &_sfSizeY;
}


SFReal32 *TiledQuadTreeTerrainBase::editSFHeightScale(void)
{
    editSField(HeightScaleFieldMask);

    return &_sfHeightScale;
}

const SFReal32 *TiledQuadTreeTerrainBase::getSFHeightScale(void) const
{
    return &_sfHeightScale;
}


SFReal32 *TiledQuadTreeTerrainBase::editSFVertexSpacing(void)
{
    editSField(VertexSpacingFieldMask);

    return &_sfVertexSpacing;
}

const SFReal32 *TiledQuadTreeTerrainBase::getSFVertexSpacing(void) const
{
    return &_sfVertexSpacing;
}


SFBool *TiledQuadTreeTerrainBase::editSFGeoMorphing(void)
{
    editSField(GeoMorphingFieldMask);

    return &_sfGeoMorphing;
}

const SFBool *TiledQuadTreeTerrainBase::getSFGeoMorphing(void) const
{
    return &_sfGeoMorphing;
}


SFReal32 *TiledQuadTreeTerrainBase::editSFDetail(void)
{
    editSField(DetailFieldMask);

    return &_sfDetail;
}

const SFReal32 *TiledQuadTreeTerrainBase::getSFDetail(void) const
{
    return &_sfDetail;
}


SFInt32 *TiledQuadTreeTerrainBase::editSFCurrentX(void)
{
    editSField(CurrentXFieldMask);

    return &_sfCurrentX;
}

const SFInt32 *TiledQuadTreeTerrainBase::getSFCurrentX(void) const
{
    return &_sfCurrentX;
}


SFInt32 *TiledQuadTreeTerrainBase::editSFCurrentY(void)
{
    editSField(CurrentYFieldMask);

    return &_sfCurrentY;
}

const SFInt32 *TiledQuadTreeTerrainBase::getSFCurrentY(void) const
{
    return &_sfCurrentY;
}


SFInt32 *TiledQuadTreeTerrainBase::editSFSizeROI(void)
{
    editSField(SizeROIFieldMask);

    return &_sfSizeROI;
}

const SFInt32 *TiledQuadTreeTerrainBase::getSFSizeROI(void) const
{
    return &_sfSizeROI;
}


SFBool *TiledQuadTreeTerrainBase::editSFUpdate(void)
{
    editSField(UpdateFieldMask);

    return &_sfUpdate;
}

const SFBool *TiledQuadTreeTerrainBase::getSFUpdate(void) const
{
    return &_sfUpdate;
}


SFBool *TiledQuadTreeTerrainBase::editSFUpdateTerrain(void)
{
    editSField(UpdateTerrainFieldMask);

    return &_sfUpdateTerrain;
}

const SFBool *TiledQuadTreeTerrainBase::getSFUpdateTerrain(void) const
{
    return &_sfUpdateTerrain;
}


SFBool *TiledQuadTreeTerrainBase::editSFPerPixelLighting(void)
{
    editSField(PerPixelLightingFieldMask);

    return &_sfPerPixelLighting;
}

const SFBool *TiledQuadTreeTerrainBase::getSFPerPixelLighting(void) const
{
    return &_sfPerPixelLighting;
}




void TiledQuadTreeTerrainBase::pushToHeightTiles(Image * const value)
{
    editMField(HeightTilesFieldMask, _mfHeightTiles);

    _mfHeightTiles.push_back(value);
}

void TiledQuadTreeTerrainBase::assignHeightTiles(const MFUnrecImagePtr   &value)
{
    MFUnrecImagePtr  ::const_iterator elemIt  =
        value.begin();
    MFUnrecImagePtr  ::const_iterator elemEnd =
        value.end  ();

    static_cast<TiledQuadTreeTerrain *>(this)->clearHeightTiles();

    while(elemIt != elemEnd)
    {
        this->pushToHeightTiles(*elemIt);

        ++elemIt;
    }
}

void TiledQuadTreeTerrainBase::removeFromHeightTiles(UInt32 uiIndex)
{
    if(uiIndex < _mfHeightTiles.size())
    {
        editMField(HeightTilesFieldMask, _mfHeightTiles);

        _mfHeightTiles.erase(uiIndex);
    }
}

void TiledQuadTreeTerrainBase::removeObjFromHeightTiles(Image * const value)
{
    Int32 iElemIdx = _mfHeightTiles.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(HeightTilesFieldMask, _mfHeightTiles);

        _mfHeightTiles.erase(iElemIdx);
    }
}
void TiledQuadTreeTerrainBase::clearHeightTiles(void)
{
    editMField(HeightTilesFieldMask, _mfHeightTiles);


    _mfHeightTiles.clear();
}

void TiledQuadTreeTerrainBase::pushToHeightTextures(Material * const value)
{
    editMField(HeightTexturesFieldMask, _mfHeightTextures);

    _mfHeightTextures.push_back(value);
}

void TiledQuadTreeTerrainBase::assignHeightTextures(const MFUnrecMaterialPtr &value)
{
    MFUnrecMaterialPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecMaterialPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<TiledQuadTreeTerrain *>(this)->clearHeightTextures();

    while(elemIt != elemEnd)
    {
        this->pushToHeightTextures(*elemIt);

        ++elemIt;
    }
}

void TiledQuadTreeTerrainBase::removeFromHeightTextures(UInt32 uiIndex)
{
    if(uiIndex < _mfHeightTextures.size())
    {
        editMField(HeightTexturesFieldMask, _mfHeightTextures);

        _mfHeightTextures.erase(uiIndex);
    }
}

void TiledQuadTreeTerrainBase::removeObjFromHeightTextures(Material * const value)
{
    Int32 iElemIdx = _mfHeightTextures.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(HeightTexturesFieldMask, _mfHeightTextures);

        _mfHeightTextures.erase(iElemIdx);
    }
}
void TiledQuadTreeTerrainBase::clearHeightTextures(void)
{
    editMField(HeightTexturesFieldMask, _mfHeightTextures);


    _mfHeightTextures.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT TiledQuadTreeTerrainBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (HeightTilesFieldMask & whichField))
    {
        returnValue += _mfHeightTiles.getBinSize();
    }
    if(FieldBits::NoField != (HeightTexturesFieldMask & whichField))
    {
        returnValue += _mfHeightTextures.getBinSize();
    }
    if(FieldBits::NoField != (SizeXFieldMask & whichField))
    {
        returnValue += _sfSizeX.getBinSize();
    }
    if(FieldBits::NoField != (SizeYFieldMask & whichField))
    {
        returnValue += _sfSizeY.getBinSize();
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        returnValue += _sfHeightScale.getBinSize();
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        returnValue += _sfVertexSpacing.getBinSize();
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        returnValue += _sfGeoMorphing.getBinSize();
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        returnValue += _sfDetail.getBinSize();
    }
    if(FieldBits::NoField != (CurrentXFieldMask & whichField))
    {
        returnValue += _sfCurrentX.getBinSize();
    }
    if(FieldBits::NoField != (CurrentYFieldMask & whichField))
    {
        returnValue += _sfCurrentY.getBinSize();
    }
    if(FieldBits::NoField != (SizeROIFieldMask & whichField))
    {
        returnValue += _sfSizeROI.getBinSize();
    }
    if(FieldBits::NoField != (UpdateFieldMask & whichField))
    {
        returnValue += _sfUpdate.getBinSize();
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        returnValue += _sfUpdateTerrain.getBinSize();
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        returnValue += _sfPerPixelLighting.getBinSize();
    }

    return returnValue;
}

void TiledQuadTreeTerrainBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (HeightTilesFieldMask & whichField))
    {
        _mfHeightTiles.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightTexturesFieldMask & whichField))
    {
        _mfHeightTextures.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeXFieldMask & whichField))
    {
        _sfSizeX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeYFieldMask & whichField))
    {
        _sfSizeY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        _sfHeightScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        _sfVertexSpacing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        _sfGeoMorphing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        _sfDetail.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CurrentXFieldMask & whichField))
    {
        _sfCurrentX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CurrentYFieldMask & whichField))
    {
        _sfCurrentY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeROIFieldMask & whichField))
    {
        _sfSizeROI.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UpdateFieldMask & whichField))
    {
        _sfUpdate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        _sfUpdateTerrain.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        _sfPerPixelLighting.copyToBin(pMem);
    }
}

void TiledQuadTreeTerrainBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (HeightTilesFieldMask & whichField))
    {
        editMField(HeightTilesFieldMask, _mfHeightTiles);
        _mfHeightTiles.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightTexturesFieldMask & whichField))
    {
        editMField(HeightTexturesFieldMask, _mfHeightTextures);
        _mfHeightTextures.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeXFieldMask & whichField))
    {
        editSField(SizeXFieldMask);
        _sfSizeX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeYFieldMask & whichField))
    {
        editSField(SizeYFieldMask);
        _sfSizeY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        editSField(HeightScaleFieldMask);
        _sfHeightScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        editSField(VertexSpacingFieldMask);
        _sfVertexSpacing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        editSField(GeoMorphingFieldMask);
        _sfGeoMorphing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        editSField(DetailFieldMask);
        _sfDetail.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CurrentXFieldMask & whichField))
    {
        editSField(CurrentXFieldMask);
        _sfCurrentX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CurrentYFieldMask & whichField))
    {
        editSField(CurrentYFieldMask);
        _sfCurrentY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeROIFieldMask & whichField))
    {
        editSField(SizeROIFieldMask);
        _sfSizeROI.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UpdateFieldMask & whichField))
    {
        editSField(UpdateFieldMask);
        _sfUpdate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        editSField(UpdateTerrainFieldMask);
        _sfUpdateTerrain.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        editSField(PerPixelLightingFieldMask);
        _sfPerPixelLighting.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TiledQuadTreeTerrainTransitPtr TiledQuadTreeTerrainBase::createLocal(BitVector bFlags)
{
    TiledQuadTreeTerrainTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TiledQuadTreeTerrain>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
TiledQuadTreeTerrainTransitPtr TiledQuadTreeTerrainBase::createDependent(BitVector bFlags)
{
    TiledQuadTreeTerrainTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<TiledQuadTreeTerrain>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TiledQuadTreeTerrainTransitPtr TiledQuadTreeTerrainBase::create(void)
{
    TiledQuadTreeTerrainTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TiledQuadTreeTerrain>(tmpPtr);
    }

    return fc;
}

TiledQuadTreeTerrain *TiledQuadTreeTerrainBase::createEmptyLocal(BitVector bFlags)
{
    TiledQuadTreeTerrain *returnValue;

    newPtr<TiledQuadTreeTerrain>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
TiledQuadTreeTerrain *TiledQuadTreeTerrainBase::createEmpty(void)
{
    TiledQuadTreeTerrain *returnValue;

    newPtr<TiledQuadTreeTerrain>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr TiledQuadTreeTerrainBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TiledQuadTreeTerrain *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TiledQuadTreeTerrain *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TiledQuadTreeTerrainBase::shallowCopyDependent(
    BitVector bFlags) const
{
    TiledQuadTreeTerrain *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TiledQuadTreeTerrain *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr TiledQuadTreeTerrainBase::shallowCopy(void) const
{
    TiledQuadTreeTerrain *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const TiledQuadTreeTerrain *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

TiledQuadTreeTerrainBase::TiledQuadTreeTerrainBase(void) :
    Inherited(),
    _mfHeightTiles            (),
    _mfHeightTextures         (),
    _sfSizeX                  (UInt32(1)),
    _sfSizeY                  (UInt32(1)),
    _sfHeightScale            (Real32(1.0f)),
    _sfVertexSpacing          (Real32(0.1f)),
    _sfGeoMorphing            (bool(false)),
    _sfDetail                 (Real32(22.0f)),
    _sfCurrentX               (Int32(0)),
    _sfCurrentY               (Int32(0)),
    _sfSizeROI                (Int32(1)),
    _sfUpdate                 (bool(true)),
    _sfUpdateTerrain          (bool(false)),
    _sfPerPixelLighting       (bool(true))
{
}

TiledQuadTreeTerrainBase::TiledQuadTreeTerrainBase(const TiledQuadTreeTerrainBase &source) :
    Inherited(source),
    _mfHeightTiles            (),
    _mfHeightTextures         (),
    _sfSizeX                  (source._sfSizeX                  ),
    _sfSizeY                  (source._sfSizeY                  ),
    _sfHeightScale            (source._sfHeightScale            ),
    _sfVertexSpacing          (source._sfVertexSpacing          ),
    _sfGeoMorphing            (source._sfGeoMorphing            ),
    _sfDetail                 (source._sfDetail                 ),
    _sfCurrentX               (source._sfCurrentX               ),
    _sfCurrentY               (source._sfCurrentY               ),
    _sfSizeROI                (source._sfSizeROI                ),
    _sfUpdate                 (source._sfUpdate                 ),
    _sfUpdateTerrain          (source._sfUpdateTerrain          ),
    _sfPerPixelLighting       (source._sfPerPixelLighting       )
{
}


/*-------------------------- destructors ----------------------------------*/

TiledQuadTreeTerrainBase::~TiledQuadTreeTerrainBase(void)
{
}

void TiledQuadTreeTerrainBase::onCreate(const TiledQuadTreeTerrain *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TiledQuadTreeTerrain *pThis = static_cast<TiledQuadTreeTerrain *>(this);

        MFUnrecImagePtr::const_iterator HeightTilesIt  =
            source->_mfHeightTiles.begin();
        MFUnrecImagePtr::const_iterator HeightTilesEnd =
            source->_mfHeightTiles.end  ();

        while(HeightTilesIt != HeightTilesEnd)
        {
            pThis->pushToHeightTiles(*HeightTilesIt);

            ++HeightTilesIt;
        }

        MFUnrecMaterialPtr::const_iterator HeightTexturesIt  =
            source->_mfHeightTextures.begin();
        MFUnrecMaterialPtr::const_iterator HeightTexturesEnd =
            source->_mfHeightTextures.end  ();

        while(HeightTexturesIt != HeightTexturesEnd)
        {
            pThis->pushToHeightTextures(*HeightTexturesIt);

            ++HeightTexturesIt;
        }
    }
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleHeightTiles     (void) const
{
    MFUnrecImagePtr::GetHandlePtr returnValue(
        new  MFUnrecImagePtr::GetHandle(
             &_mfHeightTiles,
             this->getType().getFieldDesc(HeightTilesFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleHeightTiles    (void)
{
    MFUnrecImagePtr::EditHandlePtr returnValue(
        new  MFUnrecImagePtr::EditHandle(
             &_mfHeightTiles,
             this->getType().getFieldDesc(HeightTilesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&TiledQuadTreeTerrain::pushToHeightTiles,
                    static_cast<TiledQuadTreeTerrain *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&TiledQuadTreeTerrain::removeFromHeightTiles,
                    static_cast<TiledQuadTreeTerrain *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&TiledQuadTreeTerrain::removeObjFromHeightTiles,
                    static_cast<TiledQuadTreeTerrain *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&TiledQuadTreeTerrain::clearHeightTiles,
                    static_cast<TiledQuadTreeTerrain *>(this)));

    editMField(HeightTilesFieldMask, _mfHeightTiles);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleHeightTextures  (void) const
{
    MFUnrecMaterialPtr::GetHandlePtr returnValue(
        new  MFUnrecMaterialPtr::GetHandle(
             &_mfHeightTextures,
             this->getType().getFieldDesc(HeightTexturesFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleHeightTextures (void)
{
    MFUnrecMaterialPtr::EditHandlePtr returnValue(
        new  MFUnrecMaterialPtr::EditHandle(
             &_mfHeightTextures,
             this->getType().getFieldDesc(HeightTexturesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&TiledQuadTreeTerrain::pushToHeightTextures,
                    static_cast<TiledQuadTreeTerrain *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&TiledQuadTreeTerrain::removeFromHeightTextures,
                    static_cast<TiledQuadTreeTerrain *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&TiledQuadTreeTerrain::removeObjFromHeightTextures,
                    static_cast<TiledQuadTreeTerrain *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&TiledQuadTreeTerrain::clearHeightTextures,
                    static_cast<TiledQuadTreeTerrain *>(this)));

    editMField(HeightTexturesFieldMask, _mfHeightTextures);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleSizeX           (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSizeX,
             this->getType().getFieldDesc(SizeXFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleSizeX          (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSizeX,
             this->getType().getFieldDesc(SizeXFieldId),
             this));


    editSField(SizeXFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleSizeY           (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSizeY,
             this->getType().getFieldDesc(SizeYFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleSizeY          (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSizeY,
             this->getType().getFieldDesc(SizeYFieldId),
             this));


    editSField(SizeYFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleHeightScale     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfHeightScale,
             this->getType().getFieldDesc(HeightScaleFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleHeightScale    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfHeightScale,
             this->getType().getFieldDesc(HeightScaleFieldId),
             this));


    editSField(HeightScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleVertexSpacing   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfVertexSpacing,
             this->getType().getFieldDesc(VertexSpacingFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleVertexSpacing  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfVertexSpacing,
             this->getType().getFieldDesc(VertexSpacingFieldId),
             this));


    editSField(VertexSpacingFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleGeoMorphing     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfGeoMorphing,
             this->getType().getFieldDesc(GeoMorphingFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleGeoMorphing    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfGeoMorphing,
             this->getType().getFieldDesc(GeoMorphingFieldId),
             this));


    editSField(GeoMorphingFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleDetail          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfDetail,
             this->getType().getFieldDesc(DetailFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleDetail         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfDetail,
             this->getType().getFieldDesc(DetailFieldId),
             this));


    editSField(DetailFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleCurrentX        (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfCurrentX,
             this->getType().getFieldDesc(CurrentXFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleCurrentX       (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfCurrentX,
             this->getType().getFieldDesc(CurrentXFieldId),
             this));


    editSField(CurrentXFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleCurrentY        (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfCurrentY,
             this->getType().getFieldDesc(CurrentYFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleCurrentY       (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfCurrentY,
             this->getType().getFieldDesc(CurrentYFieldId),
             this));


    editSField(CurrentYFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleSizeROI         (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfSizeROI,
             this->getType().getFieldDesc(SizeROIFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleSizeROI        (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfSizeROI,
             this->getType().getFieldDesc(SizeROIFieldId),
             this));


    editSField(SizeROIFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleUpdate          (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUpdate,
             this->getType().getFieldDesc(UpdateFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleUpdate         (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUpdate,
             this->getType().getFieldDesc(UpdateFieldId),
             this));


    editSField(UpdateFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandleUpdateTerrain   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfUpdateTerrain,
             this->getType().getFieldDesc(UpdateTerrainFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandleUpdateTerrain  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfUpdateTerrain,
             this->getType().getFieldDesc(UpdateTerrainFieldId),
             this));


    editSField(UpdateTerrainFieldMask);

    return returnValue;
}

GetFieldHandlePtr TiledQuadTreeTerrainBase::getHandlePerPixelLighting (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfPerPixelLighting,
             this->getType().getFieldDesc(PerPixelLightingFieldId),
             const_cast<TiledQuadTreeTerrainBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr TiledQuadTreeTerrainBase::editHandlePerPixelLighting(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfPerPixelLighting,
             this->getType().getFieldDesc(PerPixelLightingFieldId),
             this));


    editSField(PerPixelLightingFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TiledQuadTreeTerrainBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    TiledQuadTreeTerrain *pThis = static_cast<TiledQuadTreeTerrain *>(this);

    pThis->execSync(static_cast<TiledQuadTreeTerrain *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TiledQuadTreeTerrainBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    TiledQuadTreeTerrain *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TiledQuadTreeTerrain *>(pRefAspect),
                  dynamic_cast<const TiledQuadTreeTerrain *>(this));

    return returnValue;
}
#endif

void TiledQuadTreeTerrainBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TiledQuadTreeTerrain *>(this)->clearHeightTiles();

    static_cast<TiledQuadTreeTerrain *>(this)->clearHeightTextures();


}


OSG_END_NAMESPACE
