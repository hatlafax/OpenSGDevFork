/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class HDR2StageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGSimpleSHLChunk.h"          // LuminanceMapShader Class
#include "OSGMaterialChunk.h"           // SharedMaterialChunk Class
#include "OSGChunkMaterial.h"           // BackgroundMaterial Class
#include "OSGDepthChunk.h"              // FinalScreenMaterialDepthChunk Class
#include "OSGFrameBufferObject.h"       // BackgroundRenderTarget Class
#include "OSGUniformBufferObjStd140Chunk.h" // HdrShaderData Class

#include "OSGHDR2StageDataBase.h"
#include "OSGHDR2StageData.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::HDR2StageData
    Data used for rendering by the HDR2Stage. For detail documentation see the associated Stage class.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var SimpleSHLChunk * HDR2StageDataBase::_sfLuminanceMapShader
    This shader calculates the luminance channel from the rendered scene. It uses the flag Use_ITU_R_BT_709
    to select the calculation method.
    Input: rendered scene from resolve stage.
    Uniforms: Use_ITU_R_BT_709
    Output: Single (red) channel luminance per fragment.
*/

/*! \var SimpleSHLChunk * HDR2StageDataBase::_sfAdaptLuminanceShader
    This shader slowly adjusts the scene luminance based on the previous scene luminance.
    Input0: Red channel of last log luminance map generated by this (adaptLuminance) shader.
    Input1: Red channel of last luminance map generated by the luminanceMap shader.
    Uniforms: TimeDelta, Tau
    Output: Single (red) channel of adapted log luminance per fragment. Adapt the luminance using Pattanaik's technique.
*/

/*! \var SimpleSHLChunk * HDR2StageDataBase::_sfThresholdShader
    This shader performce a bright pass and provides the input for the following bloom pass.
    Input0: Primary color input, i.e. the rendered scene texture.
    Input1: The adapted log luminance map.
    Input2: Depth map from the rendered scene.
    Uniforms: Most of the parameters of the Stage.
    Output: Bright passed color scene for the next bloom pass.
*/

/*! \var SimpleSHLChunk * HDR2StageDataBase::_sfScaleShader
    Perform scaling operations.
    Input: Primary color input
    Output: color output.
*/

/*! \var SimpleSHLChunk * HDR2StageDataBase::_sfBlurHorizShader
    This shader performce a gaussian blur pass of the provided scene texture in the given direction.
    Input: Primary color input from the threshold pass (incl. scaling)
    Uniforms: blurGaussSigma, numTaps, Direction
    Output: Color output of the blurred image.
*/

/*! \var SimpleSHLChunk * HDR2StageDataBase::_sfBlurVertShader
    This shader performce a gaussian blur pass of the provided scene texture in the given direction.
    Input: Primary color input from the horiz blur pass.
    Uniforms: blurGaussSigma, numTaps, Direction
    Output: Color output of the blurred image.
*/

/*! \var SimpleSHLChunk * HDR2StageDataBase::_sfCompositeShader
    The central tone mapping and composition shader. The tone mapped scene and the bloomed scene are
    combined.
    Input0: Primary color input of the rendered scene.
    Input1: Adapted log luminance map.
    Input2: Bloom map generated by the bloom/blur/scaling pass.
    Uniforms: Most of the parameters of the Stage.
    Output0: The final rendered scene in linear color space.
    Output1: Exposure map, i.e. the averaged (non log) luminance map of the scene.
*/

/*! \var SimpleSHLChunk * HDR2StageDataBase::_sfFinalScreenShader
    The final screen shader performs gamma correction and writes the the final destination color buffer.
    Additionally, it carries the original depth information to the final depth buffer.
*/

/*! \var MaterialChunk * HDR2StageDataBase::_sfSharedMaterialChunk
    
*/

/*! \var ChunkMaterial * HDR2StageDataBase::_sfBackgroundMaterial
    
*/

/*! \var ChunkMaterial * HDR2StageDataBase::_sfSceneMaterial
    
*/

/*! \var ChunkMaterial * HDR2StageDataBase::_sfLuminanceMapMaterial
    
*/

/*! \var ChunkMaterial * HDR2StageDataBase::_sfAdaptLuminanceMaterial
    
*/

/*! \var ChunkMaterial * HDR2StageDataBase::_sfThresholdMaterial
    
*/

/*! \var ChunkMaterial * HDR2StageDataBase::_mfScaleMaterial
    
*/

/*! \var ChunkMaterial * HDR2StageDataBase::_sfBlurHorizMaterial
    
*/

/*! \var ChunkMaterial * HDR2StageDataBase::_sfBlurVertMaterial
    
*/

/*! \var ChunkMaterial * HDR2StageDataBase::_sfCompositeMaterial
    
*/

/*! \var ChunkMaterial * HDR2StageDataBase::_sfFinalScreenMaterial
    
*/

/*! \var UInt32          HDR2StageDataBase::_sfCurrentAdaptLuminanceIdx
    
*/

/*! \var DepthChunk *    HDR2StageDataBase::_sfFinalScreenMaterialDepthChunk
    
*/

/*! \var Int32           HDR2StageDataBase::_sfWidth
    
*/

/*! \var Int32           HDR2StageDataBase::_sfHeight
    
*/

/*! \var FrameBufferObject * HDR2StageDataBase::_sfBackgroundRenderTarget
    
*/

/*! \var FrameBufferObject * HDR2StageDataBase::_sfSceneRenderTarget
    
*/

/*! \var FrameBufferObject * HDR2StageDataBase::_sfLuminanceRenderTarget
    
*/

/*! \var FrameBufferObject * HDR2StageDataBase::_mfAdaptLuminanceRenderTarget
    
*/

/*! \var FrameBufferObject * HDR2StageDataBase::_sfThresholdRenderTarget
    
*/

/*! \var FrameBufferObject * HDR2StageDataBase::_sfBlurHorizRenderTarget
    
*/

/*! \var FrameBufferObject * HDR2StageDataBase::_sfBlurVertRenderTarget
    
*/

/*! \var FrameBufferObject * HDR2StageDataBase::_mfScaleRenderTarget
    
*/

/*! \var FrameBufferObject * HDR2StageDataBase::_sfCompositeRenderTarget
    
*/

/*! \var UniformBufferObjStd140Chunk * HDR2StageDataBase::_sfHdrShaderData
    This uniform buffer object is used for communication with the shaders.
*/

/*! \var Real64          HDR2StageDataBase::_sfLastTime
    The time stamp of the last render call. Used for calculating of the delta time between successive render calls. 
    This delta time is used in combination with the user specified tau parameter for luminance ajustment.
*/

/*! \var Real64          HDR2StageDataBase::_sfCurrentTime
    The time stamp of the current render call. Used for calculating of the delta time between successive render calls. 
    This delta time is used in combination with the user specified tau parameter for luminance ajustment.
*/

/*! \var Real32          HDR2StageDataBase::_sfZNear
    The near plane value.
*/

/*! \var Real32          HDR2StageDataBase::_sfZFar
    The far plane value.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<HDR2StageData *, nsOSG>::_type(
    "HDR2StageDataPtr", 
    "StageDataPtr", 
    HDR2StageData::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(HDR2StageData *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void HDR2StageDataBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "luminanceMapShader",
        "This shader calculates the luminance channel from the rendered scene. It uses the flag Use_ITU_R_BT_709\n"
        "to select the calculation method.\n"
        "Input: rendered scene from resolve stage.\n"
        "Uniforms: Use_ITU_R_BT_709\n"
        "Output: Single (red) channel luminance per fragment.\n",
        LuminanceMapShaderFieldId, LuminanceMapShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleLuminanceMapShader),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleLuminanceMapShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "adaptLuminanceShader",
        "This shader slowly adjusts the scene luminance based on the previous scene luminance.\n"
        "Input0: Red channel of last log luminance map generated by this (adaptLuminance) shader.\n"
        "Input1: Red channel of last luminance map generated by the luminanceMap shader.\n"
        "Uniforms: TimeDelta, Tau\n"
        "Output: Single (red) channel of adapted log luminance per fragment. Adapt the luminance using Pattanaik's technique.\n",
        AdaptLuminanceShaderFieldId, AdaptLuminanceShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleAdaptLuminanceShader),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleAdaptLuminanceShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "thresholdShader",
        "This shader performce a bright pass and provides the input for the following bloom pass.\n"
        "Input0: Primary color input, i.e. the rendered scene texture.\n"
        "Input1: The adapted log luminance map.\n"
        "Input2: Depth map from the rendered scene.\n"
        "Uniforms: Most of the parameters of the Stage.\n"
        "Output: Bright passed color scene for the next bloom pass.\n",
        ThresholdShaderFieldId, ThresholdShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleThresholdShader),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleThresholdShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "scaleShader",
        "Perform scaling operations.\n"
        "Input: Primary color input\n"
        "Output: color output.\n",
        ScaleShaderFieldId, ScaleShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleScaleShader),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleScaleShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "blurHorizShader",
        "This shader performce a gaussian blur pass of the provided scene texture in the given direction.\n"
        "Input: Primary color input from the threshold pass (incl. scaling)\n"
        "Uniforms: blurGaussSigma, numTaps, Direction\n"
        "Output: Color output of the blurred image.\n",
        BlurHorizShaderFieldId, BlurHorizShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleBlurHorizShader),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleBlurHorizShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "blurVertShader",
        "This shader performce a gaussian blur pass of the provided scene texture in the given direction.\n"
        "Input: Primary color input from the horiz blur pass.\n"
        "Uniforms: blurGaussSigma, numTaps, Direction\n"
        "Output: Color output of the blurred image.\n",
        BlurVertShaderFieldId, BlurVertShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleBlurVertShader),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleBlurVertShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "compositeShader",
        "The central tone mapping and composition shader. The tone mapped scene and the bloomed scene are\n"
        "combined.\n"
        "Input0: Primary color input of the rendered scene.\n"
        "Input1: Adapted log luminance map.\n"
        "Input2: Bloom map generated by the bloom/blur/scaling pass.\n"
        "Uniforms: Most of the parameters of the Stage.\n"
        "Output0: The final rendered scene in linear color space.\n"
        "Output1: Exposure map, i.e. the averaged (non log) luminance map of the scene.\n",
        CompositeShaderFieldId, CompositeShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleCompositeShader),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleCompositeShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecSimpleSHLChunkPtr::Description(
        SFUnrecSimpleSHLChunkPtr::getClassType(),
        "finalScreenShader",
        "The final screen shader performs gamma correction and writes the the final destination color buffer.\n"
        "Additionally, it carries the original depth information to the final depth buffer.\n",
        FinalScreenShaderFieldId, FinalScreenShaderFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleFinalScreenShader),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleFinalScreenShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMaterialChunkPtr::Description(
        SFUnrecMaterialChunkPtr::getClassType(),
        "sharedMaterialChunk",
        "",
        SharedMaterialChunkFieldId, SharedMaterialChunkFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleSharedMaterialChunk),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleSharedMaterialChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "backgroundMaterial",
        "",
        BackgroundMaterialFieldId, BackgroundMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleBackgroundMaterial),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleBackgroundMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "sceneMaterial",
        "",
        SceneMaterialFieldId, SceneMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleSceneMaterial),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleSceneMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "luminanceMapMaterial",
        "",
        LuminanceMapMaterialFieldId, LuminanceMapMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleLuminanceMapMaterial),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleLuminanceMapMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "adaptLuminanceMaterial",
        "",
        AdaptLuminanceMaterialFieldId, AdaptLuminanceMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleAdaptLuminanceMaterial),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleAdaptLuminanceMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "thresholdMaterial",
        "",
        ThresholdMaterialFieldId, ThresholdMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleThresholdMaterial),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleThresholdMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChunkMaterialPtr::Description(
        MFUnrecChunkMaterialPtr::getClassType(),
        "scaleMaterial",
        "",
        ScaleMaterialFieldId, ScaleMaterialFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleScaleMaterial),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleScaleMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "blurHorizMaterial",
        "",
        BlurHorizMaterialFieldId, BlurHorizMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleBlurHorizMaterial),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleBlurHorizMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "blurVertMaterial",
        "",
        BlurVertMaterialFieldId, BlurVertMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleBlurVertMaterial),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleBlurVertMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "compositeMaterial",
        "",
        CompositeMaterialFieldId, CompositeMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleCompositeMaterial),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleCompositeMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "finalScreenMaterial",
        "",
        FinalScreenMaterialFieldId, FinalScreenMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleFinalScreenMaterial),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleFinalScreenMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "currentAdaptLuminanceIdx",
        "",
        CurrentAdaptLuminanceIdxFieldId, CurrentAdaptLuminanceIdxFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleCurrentAdaptLuminanceIdx),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleCurrentAdaptLuminanceIdx));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDepthChunkPtr::Description(
        SFUnrecDepthChunkPtr::getClassType(),
        "finalScreenMaterialDepthChunk",
        "",
        FinalScreenMaterialDepthChunkFieldId, FinalScreenMaterialDepthChunkFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleFinalScreenMaterialDepthChunk),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleFinalScreenMaterialDepthChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "width",
        "",
        WidthFieldId, WidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleWidth),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "height",
        "",
        HeightFieldId, HeightFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleHeight),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleHeight));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "backgroundRenderTarget",
        "",
        BackgroundRenderTargetFieldId, BackgroundRenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleBackgroundRenderTarget),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleBackgroundRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "sceneRenderTarget",
        "",
        SceneRenderTargetFieldId, SceneRenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleSceneRenderTarget),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleSceneRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "luminanceRenderTarget",
        "",
        LuminanceRenderTargetFieldId, LuminanceRenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleLuminanceRenderTarget),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleLuminanceRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecFrameBufferObjectPtr::Description(
        MFUnrecFrameBufferObjectPtr::getClassType(),
        "adaptLuminanceRenderTarget",
        "",
        AdaptLuminanceRenderTargetFieldId, AdaptLuminanceRenderTargetFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleAdaptLuminanceRenderTarget),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleAdaptLuminanceRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "thresholdRenderTarget",
        "",
        ThresholdRenderTargetFieldId, ThresholdRenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleThresholdRenderTarget),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleThresholdRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "blurHorizRenderTarget",
        "",
        BlurHorizRenderTargetFieldId, BlurHorizRenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleBlurHorizRenderTarget),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleBlurHorizRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "blurVertRenderTarget",
        "",
        BlurVertRenderTargetFieldId, BlurVertRenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleBlurVertRenderTarget),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleBlurVertRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecFrameBufferObjectPtr::Description(
        MFUnrecFrameBufferObjectPtr::getClassType(),
        "scaleRenderTarget",
        "",
        ScaleRenderTargetFieldId, ScaleRenderTargetFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleScaleRenderTarget),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleScaleRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "compositeRenderTarget",
        "",
        CompositeRenderTargetFieldId, CompositeRenderTargetFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleCompositeRenderTarget),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleCompositeRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecUniformBufferObjStd140ChunkPtr::Description(
        SFUnrecUniformBufferObjStd140ChunkPtr::getClassType(),
        "hdrShaderData",
        "This uniform buffer object is used for communication with the shaders.\n",
        HdrShaderDataFieldId, HdrShaderDataFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleHdrShaderData),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleHdrShaderData));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal64::Description(
        SFReal64::getClassType(),
        "lastTime",
        "The time stamp of the last render call. Used for calculating of the delta time between successive render calls. \n"
        "This delta time is used in combination with the user specified tau parameter for luminance ajustment.\n",
        LastTimeFieldId, LastTimeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleLastTime),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleLastTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal64::Description(
        SFReal64::getClassType(),
        "currentTime",
        "The time stamp of the current render call. Used for calculating of the delta time between successive render calls. \n"
        "This delta time is used in combination with the user specified tau parameter for luminance ajustment.\n",
        CurrentTimeFieldId, CurrentTimeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleCurrentTime),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleCurrentTime));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "zNear",
        "The near plane value.\n",
        ZNearFieldId, ZNearFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleZNear),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleZNear));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "zFar",
        "The far plane value.\n",
        ZFarFieldId, ZFarFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HDR2StageData::editHandleZFar),
        static_cast<FieldGetMethodSig >(&HDR2StageData::getHandleZFar));

    oType.addInitialDesc(pDesc);
}


HDR2StageDataBase::TypeObject HDR2StageDataBase::_type(
    HDR2StageDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&HDR2StageDataBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&HDR2StageData::initMethod),
    reinterpret_cast<ExitContainerF>(&HDR2StageData::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&HDR2StageData::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"HDR2StageData\"\n"
    "   parent=\"StageData\"\n"
    "   library=\"EffectGroups\"\n"
    "   pointerfieldtypes=\"none\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   isNodeCore=\"false\"\n"
    "   docGroupBase=\"GrpEffectsGroupsHDR\"\n"
    "   >\n"
    "  Data used for rendering by the HDR2Stage. For detail documentation see the associated Stage class.\n"
    "\n"
    "  <Field\n"
    "\t name=\"luminanceMapShader\"\n"
    "\t type=\"SimpleSHLChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "        This shader calculates the luminance channel from the rendered scene. It uses the flag Use_ITU_R_BT_709\n"
    "        to select the calculation method.\n"
    "        Input: rendered scene from resolve stage.\n"
    "        Uniforms: Use_ITU_R_BT_709\n"
    "        Output: Single (red) channel luminance per fragment.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"adaptLuminanceShader\"\n"
    "\t type=\"SimpleSHLChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "        This shader slowly adjusts the scene luminance based on the previous scene luminance.\n"
    "        Input0: Red channel of last log luminance map generated by this (adaptLuminance) shader.\n"
    "        Input1: Red channel of last luminance map generated by the luminanceMap shader.\n"
    "        Uniforms: TimeDelta, Tau\n"
    "        Output: Single (red) channel of adapted log luminance per fragment. Adapt the luminance using Pattanaik's technique.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"thresholdShader\"\n"
    "\t type=\"SimpleSHLChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "        This shader performce a bright pass and provides the input for the following bloom pass.\n"
    "        Input0: Primary color input, i.e. the rendered scene texture.\n"
    "        Input1: The adapted log luminance map.\n"
    "        Input2: Depth map from the rendered scene.\n"
    "        Uniforms: Most of the parameters of the Stage.\n"
    "        Output: Bright passed color scene for the next bloom pass.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"scaleShader\"\n"
    "\t type=\"SimpleSHLChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "        Perform scaling operations.\n"
    "        Input: Primary color input\n"
    "        Output: color output.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"blurHorizShader\"\n"
    "\t type=\"SimpleSHLChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "        This shader performce a gaussian blur pass of the provided scene texture in the given direction.\n"
    "        Input: Primary color input from the threshold pass (incl. scaling)\n"
    "        Uniforms: blurGaussSigma, numTaps, Direction\n"
    "        Output: Color output of the blurred image.\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"blurVertShader\"\n"
    "\t type=\"SimpleSHLChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "        This shader performce a gaussian blur pass of the provided scene texture in the given direction.\n"
    "        Input: Primary color input from the horiz blur pass.\n"
    "        Uniforms: blurGaussSigma, numTaps, Direction\n"
    "        Output: Color output of the blurred image.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"compositeShader\"\n"
    "\t type=\"SimpleSHLChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "        The central tone mapping and composition shader. The tone mapped scene and the bloomed scene are\n"
    "        combined.\n"
    "        Input0: Primary color input of the rendered scene.\n"
    "        Input1: Adapted log luminance map.\n"
    "        Input2: Bloom map generated by the bloom/blur/scaling pass.\n"
    "        Uniforms: Most of the parameters of the Stage.\n"
    "        Output0: The final rendered scene in linear color space.\n"
    "        Output1: Exposure map, i.e. the averaged (non log) luminance map of the scene.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"finalScreenShader\"\n"
    "\t type=\"SimpleSHLChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "        The final screen shader performs gamma correction and writes the the final destination color buffer.\n"
    "        Additionally, it carries the original depth information to the final depth buffer.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"sharedMaterialChunk\"\n"
    "\t type=\"MaterialChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"backgroundMaterial\"\n"
    "\t type=\"ChunkMaterialPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"sceneMaterial\"\n"
    "\t type=\"ChunkMaterialPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"luminanceMapMaterial\"\n"
    "\t type=\"ChunkMaterialPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"adaptLuminanceMaterial\"\n"
    "\t type=\"ChunkMaterialPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"thresholdMaterial\"\n"
    "\t type=\"ChunkMaterialPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"scaleMaterial\"\n"
    "\t type=\"ChunkMaterialPtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"blurHorizMaterial\"\n"
    "\t type=\"ChunkMaterialPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"blurVertMaterial\"\n"
    "\t type=\"ChunkMaterialPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"compositeMaterial\"\n"
    "\t type=\"ChunkMaterialPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"finalScreenMaterial\"\n"
    "\t type=\"ChunkMaterialPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"currentAdaptLuminanceIdx\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"finalScreenMaterialDepthChunk\"\n"
    "\t type=\"DepthChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"width\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"height\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"backgroundRenderTarget\"\n"
    "\t type=\"FrameBufferObjectPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"sceneRenderTarget\"\n"
    "\t type=\"FrameBufferObjectPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"luminanceRenderTarget\"\n"
    "\t type=\"FrameBufferObjectPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"adaptLuminanceRenderTarget\"\n"
    "\t type=\"FrameBufferObjectPtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"thresholdRenderTarget\"\n"
    "\t type=\"FrameBufferObjectPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"blurHorizRenderTarget\"\n"
    "\t type=\"FrameBufferObjectPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"blurVertRenderTarget\"\n"
    "\t type=\"FrameBufferObjectPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"scaleRenderTarget\"\n"
    "\t type=\"FrameBufferObjectPtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "<Field\n"
    "\t name=\"compositeRenderTarget\"\n"
    "\t type=\"FrameBufferObjectPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"hdrShaderData\"\n"
    "\t type=\"UniformBufferObjStd140ChunkPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"NULL\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "        This uniform buffer object is used for communication with the shaders.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"lastTime\"\n"
    "\t type=\"Real64\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"0.f\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "        The time stamp of the last render call. Used for calculating of the delta time between successive render calls. \n"
    "        This delta time is used in combination with the user specified tau parameter for luminance ajustment.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"currentTime\"\n"
    "\t type=\"Real64\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"0.f\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "        The time stamp of the current render call. Used for calculating of the delta time between successive render calls. \n"
    "        This delta time is used in combination with the user specified tau parameter for luminance ajustment.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"zNear\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"0.1f\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "         The near plane value.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"zFar\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"internal\"\n"
    "\t defaultValue=\"10.f\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "         The far plane value.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "Data used for rendering by the HDR2Stage. For detail documentation see the associated Stage class.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &HDR2StageDataBase::getType(void)
{
    return _type;
}

const FieldContainerType &HDR2StageDataBase::getType(void) const
{
    return _type;
}

UInt32 HDR2StageDataBase::getContainerSize(void) const
{
    return sizeof(HDR2StageData);
}

/*------------------------- decorator get ------------------------------*/


//! Get the HDR2StageData::_sfLuminanceMapShader field.
const SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::getSFLuminanceMapShader(void) const
{
    return &_sfLuminanceMapShader;
}

SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::editSFLuminanceMapShader(void)
{
    editSField(LuminanceMapShaderFieldMask);

    return &_sfLuminanceMapShader;
}

//! Get the value of the HDR2StageData::_sfLuminanceMapShader field.
SimpleSHLChunk * HDR2StageDataBase::getLuminanceMapShader(void) const
{
    return _sfLuminanceMapShader.getValue();
}

//! Set the value of the HDR2StageData::_sfLuminanceMapShader field.
void HDR2StageDataBase::setLuminanceMapShader(SimpleSHLChunk * const value)
{
    editSField(LuminanceMapShaderFieldMask);

    _sfLuminanceMapShader.setValue(value);
}


//! Get the HDR2StageData::_sfAdaptLuminanceShader field.
const SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::getSFAdaptLuminanceShader(void) const
{
    return &_sfAdaptLuminanceShader;
}

SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::editSFAdaptLuminanceShader(void)
{
    editSField(AdaptLuminanceShaderFieldMask);

    return &_sfAdaptLuminanceShader;
}

//! Get the value of the HDR2StageData::_sfAdaptLuminanceShader field.
SimpleSHLChunk * HDR2StageDataBase::getAdaptLuminanceShader(void) const
{
    return _sfAdaptLuminanceShader.getValue();
}

//! Set the value of the HDR2StageData::_sfAdaptLuminanceShader field.
void HDR2StageDataBase::setAdaptLuminanceShader(SimpleSHLChunk * const value)
{
    editSField(AdaptLuminanceShaderFieldMask);

    _sfAdaptLuminanceShader.setValue(value);
}


//! Get the HDR2StageData::_sfThresholdShader field.
const SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::getSFThresholdShader(void) const
{
    return &_sfThresholdShader;
}

SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::editSFThresholdShader(void)
{
    editSField(ThresholdShaderFieldMask);

    return &_sfThresholdShader;
}

//! Get the value of the HDR2StageData::_sfThresholdShader field.
SimpleSHLChunk * HDR2StageDataBase::getThresholdShader(void) const
{
    return _sfThresholdShader.getValue();
}

//! Set the value of the HDR2StageData::_sfThresholdShader field.
void HDR2StageDataBase::setThresholdShader(SimpleSHLChunk * const value)
{
    editSField(ThresholdShaderFieldMask);

    _sfThresholdShader.setValue(value);
}


//! Get the HDR2StageData::_sfScaleShader field.
const SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::getSFScaleShader(void) const
{
    return &_sfScaleShader;
}

SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::editSFScaleShader    (void)
{
    editSField(ScaleShaderFieldMask);

    return &_sfScaleShader;
}

//! Get the value of the HDR2StageData::_sfScaleShader field.
SimpleSHLChunk * HDR2StageDataBase::getScaleShader(void) const
{
    return _sfScaleShader.getValue();
}

//! Set the value of the HDR2StageData::_sfScaleShader field.
void HDR2StageDataBase::setScaleShader(SimpleSHLChunk * const value)
{
    editSField(ScaleShaderFieldMask);

    _sfScaleShader.setValue(value);
}


//! Get the HDR2StageData::_sfBlurHorizShader field.
const SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::getSFBlurHorizShader(void) const
{
    return &_sfBlurHorizShader;
}

SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::editSFBlurHorizShader(void)
{
    editSField(BlurHorizShaderFieldMask);

    return &_sfBlurHorizShader;
}

//! Get the value of the HDR2StageData::_sfBlurHorizShader field.
SimpleSHLChunk * HDR2StageDataBase::getBlurHorizShader(void) const
{
    return _sfBlurHorizShader.getValue();
}

//! Set the value of the HDR2StageData::_sfBlurHorizShader field.
void HDR2StageDataBase::setBlurHorizShader(SimpleSHLChunk * const value)
{
    editSField(BlurHorizShaderFieldMask);

    _sfBlurHorizShader.setValue(value);
}


//! Get the HDR2StageData::_sfBlurVertShader field.
const SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::getSFBlurVertShader(void) const
{
    return &_sfBlurVertShader;
}

SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::editSFBlurVertShader (void)
{
    editSField(BlurVertShaderFieldMask);

    return &_sfBlurVertShader;
}

//! Get the value of the HDR2StageData::_sfBlurVertShader field.
SimpleSHLChunk * HDR2StageDataBase::getBlurVertShader(void) const
{
    return _sfBlurVertShader.getValue();
}

//! Set the value of the HDR2StageData::_sfBlurVertShader field.
void HDR2StageDataBase::setBlurVertShader(SimpleSHLChunk * const value)
{
    editSField(BlurVertShaderFieldMask);

    _sfBlurVertShader.setValue(value);
}


//! Get the HDR2StageData::_sfCompositeShader field.
const SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::getSFCompositeShader(void) const
{
    return &_sfCompositeShader;
}

SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::editSFCompositeShader(void)
{
    editSField(CompositeShaderFieldMask);

    return &_sfCompositeShader;
}

//! Get the value of the HDR2StageData::_sfCompositeShader field.
SimpleSHLChunk * HDR2StageDataBase::getCompositeShader(void) const
{
    return _sfCompositeShader.getValue();
}

//! Set the value of the HDR2StageData::_sfCompositeShader field.
void HDR2StageDataBase::setCompositeShader(SimpleSHLChunk * const value)
{
    editSField(CompositeShaderFieldMask);

    _sfCompositeShader.setValue(value);
}


//! Get the HDR2StageData::_sfFinalScreenShader field.
const SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::getSFFinalScreenShader(void) const
{
    return &_sfFinalScreenShader;
}

SFUnrecSimpleSHLChunkPtr *HDR2StageDataBase::editSFFinalScreenShader(void)
{
    editSField(FinalScreenShaderFieldMask);

    return &_sfFinalScreenShader;
}

//! Get the value of the HDR2StageData::_sfFinalScreenShader field.
SimpleSHLChunk * HDR2StageDataBase::getFinalScreenShader(void) const
{
    return _sfFinalScreenShader.getValue();
}

//! Set the value of the HDR2StageData::_sfFinalScreenShader field.
void HDR2StageDataBase::setFinalScreenShader(SimpleSHLChunk * const value)
{
    editSField(FinalScreenShaderFieldMask);

    _sfFinalScreenShader.setValue(value);
}


//! Get the HDR2StageData::_sfSharedMaterialChunk field.
const SFUnrecMaterialChunkPtr *HDR2StageDataBase::getSFSharedMaterialChunk(void) const
{
    return &_sfSharedMaterialChunk;
}

SFUnrecMaterialChunkPtr *HDR2StageDataBase::editSFSharedMaterialChunk(void)
{
    editSField(SharedMaterialChunkFieldMask);

    return &_sfSharedMaterialChunk;
}

//! Get the value of the HDR2StageData::_sfSharedMaterialChunk field.
MaterialChunk * HDR2StageDataBase::getSharedMaterialChunk(void) const
{
    return _sfSharedMaterialChunk.getValue();
}

//! Set the value of the HDR2StageData::_sfSharedMaterialChunk field.
void HDR2StageDataBase::setSharedMaterialChunk(MaterialChunk * const value)
{
    editSField(SharedMaterialChunkFieldMask);

    _sfSharedMaterialChunk.setValue(value);
}


//! Get the HDR2StageData::_sfBackgroundMaterial field.
const SFUnrecChunkMaterialPtr *HDR2StageDataBase::getSFBackgroundMaterial(void) const
{
    return &_sfBackgroundMaterial;
}

SFUnrecChunkMaterialPtr *HDR2StageDataBase::editSFBackgroundMaterial(void)
{
    editSField(BackgroundMaterialFieldMask);

    return &_sfBackgroundMaterial;
}

//! Get the value of the HDR2StageData::_sfBackgroundMaterial field.
ChunkMaterial * HDR2StageDataBase::getBackgroundMaterial(void) const
{
    return _sfBackgroundMaterial.getValue();
}

//! Set the value of the HDR2StageData::_sfBackgroundMaterial field.
void HDR2StageDataBase::setBackgroundMaterial(ChunkMaterial * const value)
{
    editSField(BackgroundMaterialFieldMask);

    _sfBackgroundMaterial.setValue(value);
}


//! Get the HDR2StageData::_sfSceneMaterial field.
const SFUnrecChunkMaterialPtr *HDR2StageDataBase::getSFSceneMaterial(void) const
{
    return &_sfSceneMaterial;
}

SFUnrecChunkMaterialPtr *HDR2StageDataBase::editSFSceneMaterial  (void)
{
    editSField(SceneMaterialFieldMask);

    return &_sfSceneMaterial;
}

//! Get the value of the HDR2StageData::_sfSceneMaterial field.
ChunkMaterial * HDR2StageDataBase::getSceneMaterial(void) const
{
    return _sfSceneMaterial.getValue();
}

//! Set the value of the HDR2StageData::_sfSceneMaterial field.
void HDR2StageDataBase::setSceneMaterial(ChunkMaterial * const value)
{
    editSField(SceneMaterialFieldMask);

    _sfSceneMaterial.setValue(value);
}


//! Get the HDR2StageData::_sfLuminanceMapMaterial field.
const SFUnrecChunkMaterialPtr *HDR2StageDataBase::getSFLuminanceMapMaterial(void) const
{
    return &_sfLuminanceMapMaterial;
}

SFUnrecChunkMaterialPtr *HDR2StageDataBase::editSFLuminanceMapMaterial(void)
{
    editSField(LuminanceMapMaterialFieldMask);

    return &_sfLuminanceMapMaterial;
}

//! Get the value of the HDR2StageData::_sfLuminanceMapMaterial field.
ChunkMaterial * HDR2StageDataBase::getLuminanceMapMaterial(void) const
{
    return _sfLuminanceMapMaterial.getValue();
}

//! Set the value of the HDR2StageData::_sfLuminanceMapMaterial field.
void HDR2StageDataBase::setLuminanceMapMaterial(ChunkMaterial * const value)
{
    editSField(LuminanceMapMaterialFieldMask);

    _sfLuminanceMapMaterial.setValue(value);
}


//! Get the HDR2StageData::_sfAdaptLuminanceMaterial field.
const SFUnrecChunkMaterialPtr *HDR2StageDataBase::getSFAdaptLuminanceMaterial(void) const
{
    return &_sfAdaptLuminanceMaterial;
}

SFUnrecChunkMaterialPtr *HDR2StageDataBase::editSFAdaptLuminanceMaterial(void)
{
    editSField(AdaptLuminanceMaterialFieldMask);

    return &_sfAdaptLuminanceMaterial;
}

//! Get the value of the HDR2StageData::_sfAdaptLuminanceMaterial field.
ChunkMaterial * HDR2StageDataBase::getAdaptLuminanceMaterial(void) const
{
    return _sfAdaptLuminanceMaterial.getValue();
}

//! Set the value of the HDR2StageData::_sfAdaptLuminanceMaterial field.
void HDR2StageDataBase::setAdaptLuminanceMaterial(ChunkMaterial * const value)
{
    editSField(AdaptLuminanceMaterialFieldMask);

    _sfAdaptLuminanceMaterial.setValue(value);
}


//! Get the HDR2StageData::_sfThresholdMaterial field.
const SFUnrecChunkMaterialPtr *HDR2StageDataBase::getSFThresholdMaterial(void) const
{
    return &_sfThresholdMaterial;
}

SFUnrecChunkMaterialPtr *HDR2StageDataBase::editSFThresholdMaterial(void)
{
    editSField(ThresholdMaterialFieldMask);

    return &_sfThresholdMaterial;
}

//! Get the value of the HDR2StageData::_sfThresholdMaterial field.
ChunkMaterial * HDR2StageDataBase::getThresholdMaterial(void) const
{
    return _sfThresholdMaterial.getValue();
}

//! Set the value of the HDR2StageData::_sfThresholdMaterial field.
void HDR2StageDataBase::setThresholdMaterial(ChunkMaterial * const value)
{
    editSField(ThresholdMaterialFieldMask);

    _sfThresholdMaterial.setValue(value);
}


//! Get the HDR2StageData::_mfScaleMaterial field.
const MFUnrecChunkMaterialPtr *HDR2StageDataBase::getMFScaleMaterial(void) const
{
    return &_mfScaleMaterial;
}

MFUnrecChunkMaterialPtr *HDR2StageDataBase::editMFScaleMaterial  (void)
{
    editMField(ScaleMaterialFieldMask, _mfScaleMaterial);

    return &_mfScaleMaterial;
}
ChunkMaterial * HDR2StageDataBase::getScaleMaterial(const UInt32 index) const
{
    return _mfScaleMaterial[index];
}

//! Get the HDR2StageData::_sfBlurHorizMaterial field.
const SFUnrecChunkMaterialPtr *HDR2StageDataBase::getSFBlurHorizMaterial(void) const
{
    return &_sfBlurHorizMaterial;
}

SFUnrecChunkMaterialPtr *HDR2StageDataBase::editSFBlurHorizMaterial(void)
{
    editSField(BlurHorizMaterialFieldMask);

    return &_sfBlurHorizMaterial;
}

//! Get the value of the HDR2StageData::_sfBlurHorizMaterial field.
ChunkMaterial * HDR2StageDataBase::getBlurHorizMaterial(void) const
{
    return _sfBlurHorizMaterial.getValue();
}

//! Set the value of the HDR2StageData::_sfBlurHorizMaterial field.
void HDR2StageDataBase::setBlurHorizMaterial(ChunkMaterial * const value)
{
    editSField(BlurHorizMaterialFieldMask);

    _sfBlurHorizMaterial.setValue(value);
}


//! Get the HDR2StageData::_sfBlurVertMaterial field.
const SFUnrecChunkMaterialPtr *HDR2StageDataBase::getSFBlurVertMaterial(void) const
{
    return &_sfBlurVertMaterial;
}

SFUnrecChunkMaterialPtr *HDR2StageDataBase::editSFBlurVertMaterial(void)
{
    editSField(BlurVertMaterialFieldMask);

    return &_sfBlurVertMaterial;
}

//! Get the value of the HDR2StageData::_sfBlurVertMaterial field.
ChunkMaterial * HDR2StageDataBase::getBlurVertMaterial(void) const
{
    return _sfBlurVertMaterial.getValue();
}

//! Set the value of the HDR2StageData::_sfBlurVertMaterial field.
void HDR2StageDataBase::setBlurVertMaterial(ChunkMaterial * const value)
{
    editSField(BlurVertMaterialFieldMask);

    _sfBlurVertMaterial.setValue(value);
}


//! Get the HDR2StageData::_sfCompositeMaterial field.
const SFUnrecChunkMaterialPtr *HDR2StageDataBase::getSFCompositeMaterial(void) const
{
    return &_sfCompositeMaterial;
}

SFUnrecChunkMaterialPtr *HDR2StageDataBase::editSFCompositeMaterial(void)
{
    editSField(CompositeMaterialFieldMask);

    return &_sfCompositeMaterial;
}

//! Get the value of the HDR2StageData::_sfCompositeMaterial field.
ChunkMaterial * HDR2StageDataBase::getCompositeMaterial(void) const
{
    return _sfCompositeMaterial.getValue();
}

//! Set the value of the HDR2StageData::_sfCompositeMaterial field.
void HDR2StageDataBase::setCompositeMaterial(ChunkMaterial * const value)
{
    editSField(CompositeMaterialFieldMask);

    _sfCompositeMaterial.setValue(value);
}


//! Get the HDR2StageData::_sfFinalScreenMaterial field.
const SFUnrecChunkMaterialPtr *HDR2StageDataBase::getSFFinalScreenMaterial(void) const
{
    return &_sfFinalScreenMaterial;
}

SFUnrecChunkMaterialPtr *HDR2StageDataBase::editSFFinalScreenMaterial(void)
{
    editSField(FinalScreenMaterialFieldMask);

    return &_sfFinalScreenMaterial;
}

//! Get the value of the HDR2StageData::_sfFinalScreenMaterial field.
ChunkMaterial * HDR2StageDataBase::getFinalScreenMaterial(void) const
{
    return _sfFinalScreenMaterial.getValue();
}

//! Set the value of the HDR2StageData::_sfFinalScreenMaterial field.
void HDR2StageDataBase::setFinalScreenMaterial(ChunkMaterial * const value)
{
    editSField(FinalScreenMaterialFieldMask);

    _sfFinalScreenMaterial.setValue(value);
}


SFUInt32 *HDR2StageDataBase::editSFCurrentAdaptLuminanceIdx(void)
{
    editSField(CurrentAdaptLuminanceIdxFieldMask);

    return &_sfCurrentAdaptLuminanceIdx;
}

const SFUInt32 *HDR2StageDataBase::getSFCurrentAdaptLuminanceIdx(void) const
{
    return &_sfCurrentAdaptLuminanceIdx;
}


//! Get the HDR2StageData::_sfFinalScreenMaterialDepthChunk field.
const SFUnrecDepthChunkPtr *HDR2StageDataBase::getSFFinalScreenMaterialDepthChunk(void) const
{
    return &_sfFinalScreenMaterialDepthChunk;
}

SFUnrecDepthChunkPtr *HDR2StageDataBase::editSFFinalScreenMaterialDepthChunk(void)
{
    editSField(FinalScreenMaterialDepthChunkFieldMask);

    return &_sfFinalScreenMaterialDepthChunk;
}

//! Get the value of the HDR2StageData::_sfFinalScreenMaterialDepthChunk field.
DepthChunk * HDR2StageDataBase::getFinalScreenMaterialDepthChunk(void) const
{
    return _sfFinalScreenMaterialDepthChunk.getValue();
}

//! Set the value of the HDR2StageData::_sfFinalScreenMaterialDepthChunk field.
void HDR2StageDataBase::setFinalScreenMaterialDepthChunk(DepthChunk * const value)
{
    editSField(FinalScreenMaterialDepthChunkFieldMask);

    _sfFinalScreenMaterialDepthChunk.setValue(value);
}


SFInt32 *HDR2StageDataBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFInt32 *HDR2StageDataBase::getSFWidth(void) const
{
    return &_sfWidth;
}


SFInt32 *HDR2StageDataBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFInt32 *HDR2StageDataBase::getSFHeight(void) const
{
    return &_sfHeight;
}


//! Get the HDR2StageData::_sfBackgroundRenderTarget field.
const SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::getSFBackgroundRenderTarget(void) const
{
    return &_sfBackgroundRenderTarget;
}

SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::editSFBackgroundRenderTarget(void)
{
    editSField(BackgroundRenderTargetFieldMask);

    return &_sfBackgroundRenderTarget;
}

//! Get the value of the HDR2StageData::_sfBackgroundRenderTarget field.
FrameBufferObject * HDR2StageDataBase::getBackgroundRenderTarget(void) const
{
    return _sfBackgroundRenderTarget.getValue();
}

//! Set the value of the HDR2StageData::_sfBackgroundRenderTarget field.
void HDR2StageDataBase::setBackgroundRenderTarget(FrameBufferObject * const value)
{
    editSField(BackgroundRenderTargetFieldMask);

    _sfBackgroundRenderTarget.setValue(value);
}


//! Get the HDR2StageData::_sfSceneRenderTarget field.
const SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::getSFSceneRenderTarget(void) const
{
    return &_sfSceneRenderTarget;
}

SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::editSFSceneRenderTarget(void)
{
    editSField(SceneRenderTargetFieldMask);

    return &_sfSceneRenderTarget;
}

//! Get the value of the HDR2StageData::_sfSceneRenderTarget field.
FrameBufferObject * HDR2StageDataBase::getSceneRenderTarget(void) const
{
    return _sfSceneRenderTarget.getValue();
}

//! Set the value of the HDR2StageData::_sfSceneRenderTarget field.
void HDR2StageDataBase::setSceneRenderTarget(FrameBufferObject * const value)
{
    editSField(SceneRenderTargetFieldMask);

    _sfSceneRenderTarget.setValue(value);
}


//! Get the HDR2StageData::_sfLuminanceRenderTarget field.
const SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::getSFLuminanceRenderTarget(void) const
{
    return &_sfLuminanceRenderTarget;
}

SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::editSFLuminanceRenderTarget(void)
{
    editSField(LuminanceRenderTargetFieldMask);

    return &_sfLuminanceRenderTarget;
}

//! Get the value of the HDR2StageData::_sfLuminanceRenderTarget field.
FrameBufferObject * HDR2StageDataBase::getLuminanceRenderTarget(void) const
{
    return _sfLuminanceRenderTarget.getValue();
}

//! Set the value of the HDR2StageData::_sfLuminanceRenderTarget field.
void HDR2StageDataBase::setLuminanceRenderTarget(FrameBufferObject * const value)
{
    editSField(LuminanceRenderTargetFieldMask);

    _sfLuminanceRenderTarget.setValue(value);
}


//! Get the HDR2StageData::_mfAdaptLuminanceRenderTarget field.
const MFUnrecFrameBufferObjectPtr *HDR2StageDataBase::getMFAdaptLuminanceRenderTarget(void) const
{
    return &_mfAdaptLuminanceRenderTarget;
}

MFUnrecFrameBufferObjectPtr *HDR2StageDataBase::editMFAdaptLuminanceRenderTarget(void)
{
    editMField(AdaptLuminanceRenderTargetFieldMask, _mfAdaptLuminanceRenderTarget);

    return &_mfAdaptLuminanceRenderTarget;
}
FrameBufferObject * HDR2StageDataBase::getAdaptLuminanceRenderTarget(const UInt32 index) const
{
    return _mfAdaptLuminanceRenderTarget[index];
}

//! Get the HDR2StageData::_sfThresholdRenderTarget field.
const SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::getSFThresholdRenderTarget(void) const
{
    return &_sfThresholdRenderTarget;
}

SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::editSFThresholdRenderTarget(void)
{
    editSField(ThresholdRenderTargetFieldMask);

    return &_sfThresholdRenderTarget;
}

//! Get the value of the HDR2StageData::_sfThresholdRenderTarget field.
FrameBufferObject * HDR2StageDataBase::getThresholdRenderTarget(void) const
{
    return _sfThresholdRenderTarget.getValue();
}

//! Set the value of the HDR2StageData::_sfThresholdRenderTarget field.
void HDR2StageDataBase::setThresholdRenderTarget(FrameBufferObject * const value)
{
    editSField(ThresholdRenderTargetFieldMask);

    _sfThresholdRenderTarget.setValue(value);
}


//! Get the HDR2StageData::_sfBlurHorizRenderTarget field.
const SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::getSFBlurHorizRenderTarget(void) const
{
    return &_sfBlurHorizRenderTarget;
}

SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::editSFBlurHorizRenderTarget(void)
{
    editSField(BlurHorizRenderTargetFieldMask);

    return &_sfBlurHorizRenderTarget;
}

//! Get the value of the HDR2StageData::_sfBlurHorizRenderTarget field.
FrameBufferObject * HDR2StageDataBase::getBlurHorizRenderTarget(void) const
{
    return _sfBlurHorizRenderTarget.getValue();
}

//! Set the value of the HDR2StageData::_sfBlurHorizRenderTarget field.
void HDR2StageDataBase::setBlurHorizRenderTarget(FrameBufferObject * const value)
{
    editSField(BlurHorizRenderTargetFieldMask);

    _sfBlurHorizRenderTarget.setValue(value);
}


//! Get the HDR2StageData::_sfBlurVertRenderTarget field.
const SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::getSFBlurVertRenderTarget(void) const
{
    return &_sfBlurVertRenderTarget;
}

SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::editSFBlurVertRenderTarget(void)
{
    editSField(BlurVertRenderTargetFieldMask);

    return &_sfBlurVertRenderTarget;
}

//! Get the value of the HDR2StageData::_sfBlurVertRenderTarget field.
FrameBufferObject * HDR2StageDataBase::getBlurVertRenderTarget(void) const
{
    return _sfBlurVertRenderTarget.getValue();
}

//! Set the value of the HDR2StageData::_sfBlurVertRenderTarget field.
void HDR2StageDataBase::setBlurVertRenderTarget(FrameBufferObject * const value)
{
    editSField(BlurVertRenderTargetFieldMask);

    _sfBlurVertRenderTarget.setValue(value);
}


//! Get the HDR2StageData::_mfScaleRenderTarget field.
const MFUnrecFrameBufferObjectPtr *HDR2StageDataBase::getMFScaleRenderTarget(void) const
{
    return &_mfScaleRenderTarget;
}

MFUnrecFrameBufferObjectPtr *HDR2StageDataBase::editMFScaleRenderTarget(void)
{
    editMField(ScaleRenderTargetFieldMask, _mfScaleRenderTarget);

    return &_mfScaleRenderTarget;
}
FrameBufferObject * HDR2StageDataBase::getScaleRenderTarget(const UInt32 index) const
{
    return _mfScaleRenderTarget[index];
}

//! Get the HDR2StageData::_sfCompositeRenderTarget field.
const SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::getSFCompositeRenderTarget(void) const
{
    return &_sfCompositeRenderTarget;
}

SFUnrecFrameBufferObjectPtr *HDR2StageDataBase::editSFCompositeRenderTarget(void)
{
    editSField(CompositeRenderTargetFieldMask);

    return &_sfCompositeRenderTarget;
}

//! Get the value of the HDR2StageData::_sfCompositeRenderTarget field.
FrameBufferObject * HDR2StageDataBase::getCompositeRenderTarget(void) const
{
    return _sfCompositeRenderTarget.getValue();
}

//! Set the value of the HDR2StageData::_sfCompositeRenderTarget field.
void HDR2StageDataBase::setCompositeRenderTarget(FrameBufferObject * const value)
{
    editSField(CompositeRenderTargetFieldMask);

    _sfCompositeRenderTarget.setValue(value);
}


//! Get the HDR2StageData::_sfHdrShaderData field.
const SFUnrecUniformBufferObjStd140ChunkPtr *HDR2StageDataBase::getSFHdrShaderData(void) const
{
    return &_sfHdrShaderData;
}

SFUnrecUniformBufferObjStd140ChunkPtr *HDR2StageDataBase::editSFHdrShaderData  (void)
{
    editSField(HdrShaderDataFieldMask);

    return &_sfHdrShaderData;
}

//! Get the value of the HDR2StageData::_sfHdrShaderData field.
UniformBufferObjStd140Chunk * HDR2StageDataBase::getHdrShaderData(void) const
{
    return _sfHdrShaderData.getValue();
}

//! Set the value of the HDR2StageData::_sfHdrShaderData field.
void HDR2StageDataBase::setHdrShaderData(UniformBufferObjStd140Chunk * const value)
{
    editSField(HdrShaderDataFieldMask);

    _sfHdrShaderData.setValue(value);
}


SFReal64 *HDR2StageDataBase::editSFLastTime(void)
{
    editSField(LastTimeFieldMask);

    return &_sfLastTime;
}

const SFReal64 *HDR2StageDataBase::getSFLastTime(void) const
{
    return &_sfLastTime;
}


SFReal64 *HDR2StageDataBase::editSFCurrentTime(void)
{
    editSField(CurrentTimeFieldMask);

    return &_sfCurrentTime;
}

const SFReal64 *HDR2StageDataBase::getSFCurrentTime(void) const
{
    return &_sfCurrentTime;
}


SFReal32 *HDR2StageDataBase::editSFZNear(void)
{
    editSField(ZNearFieldMask);

    return &_sfZNear;
}

const SFReal32 *HDR2StageDataBase::getSFZNear(void) const
{
    return &_sfZNear;
}


SFReal32 *HDR2StageDataBase::editSFZFar(void)
{
    editSField(ZFarFieldMask);

    return &_sfZFar;
}

const SFReal32 *HDR2StageDataBase::getSFZFar(void) const
{
    return &_sfZFar;
}




void HDR2StageDataBase::pushToScaleMaterial(ChunkMaterial * const value)
{
    editMField(ScaleMaterialFieldMask, _mfScaleMaterial);

    _mfScaleMaterial.push_back(value);
}

void HDR2StageDataBase::assignScaleMaterial(const MFUnrecChunkMaterialPtr &value)
{
    MFUnrecChunkMaterialPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecChunkMaterialPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<HDR2StageData *>(this)->clearScaleMaterial();

    while(elemIt != elemEnd)
    {
        this->pushToScaleMaterial(*elemIt);

        ++elemIt;
    }
}

void HDR2StageDataBase::removeFromScaleMaterial(UInt32 uiIndex)
{
    if(uiIndex < _mfScaleMaterial.size())
    {
        editMField(ScaleMaterialFieldMask, _mfScaleMaterial);

        _mfScaleMaterial.erase(uiIndex);
    }
}

void HDR2StageDataBase::removeObjFromScaleMaterial(ChunkMaterial * const value)
{
    Int32 iElemIdx = _mfScaleMaterial.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ScaleMaterialFieldMask, _mfScaleMaterial);

        _mfScaleMaterial.erase(iElemIdx);
    }
}
void HDR2StageDataBase::clearScaleMaterial(void)
{
    editMField(ScaleMaterialFieldMask, _mfScaleMaterial);


    _mfScaleMaterial.clear();
}

void HDR2StageDataBase::pushToAdaptLuminanceRenderTarget(FrameBufferObject * const value)
{
    editMField(AdaptLuminanceRenderTargetFieldMask, _mfAdaptLuminanceRenderTarget);

    _mfAdaptLuminanceRenderTarget.push_back(value);
}

void HDR2StageDataBase::assignAdaptLuminanceRenderTarget(const MFUnrecFrameBufferObjectPtr &value)
{
    MFUnrecFrameBufferObjectPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecFrameBufferObjectPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<HDR2StageData *>(this)->clearAdaptLuminanceRenderTarget();

    while(elemIt != elemEnd)
    {
        this->pushToAdaptLuminanceRenderTarget(*elemIt);

        ++elemIt;
    }
}

void HDR2StageDataBase::removeFromAdaptLuminanceRenderTarget(UInt32 uiIndex)
{
    if(uiIndex < _mfAdaptLuminanceRenderTarget.size())
    {
        editMField(AdaptLuminanceRenderTargetFieldMask, _mfAdaptLuminanceRenderTarget);

        _mfAdaptLuminanceRenderTarget.erase(uiIndex);
    }
}

void HDR2StageDataBase::removeObjFromAdaptLuminanceRenderTarget(FrameBufferObject * const value)
{
    Int32 iElemIdx = _mfAdaptLuminanceRenderTarget.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(AdaptLuminanceRenderTargetFieldMask, _mfAdaptLuminanceRenderTarget);

        _mfAdaptLuminanceRenderTarget.erase(iElemIdx);
    }
}
void HDR2StageDataBase::clearAdaptLuminanceRenderTarget(void)
{
    editMField(AdaptLuminanceRenderTargetFieldMask, _mfAdaptLuminanceRenderTarget);


    _mfAdaptLuminanceRenderTarget.clear();
}

void HDR2StageDataBase::pushToScaleRenderTarget(FrameBufferObject * const value)
{
    editMField(ScaleRenderTargetFieldMask, _mfScaleRenderTarget);

    _mfScaleRenderTarget.push_back(value);
}

void HDR2StageDataBase::assignScaleRenderTarget(const MFUnrecFrameBufferObjectPtr &value)
{
    MFUnrecFrameBufferObjectPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecFrameBufferObjectPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<HDR2StageData *>(this)->clearScaleRenderTarget();

    while(elemIt != elemEnd)
    {
        this->pushToScaleRenderTarget(*elemIt);

        ++elemIt;
    }
}

void HDR2StageDataBase::removeFromScaleRenderTarget(UInt32 uiIndex)
{
    if(uiIndex < _mfScaleRenderTarget.size())
    {
        editMField(ScaleRenderTargetFieldMask, _mfScaleRenderTarget);

        _mfScaleRenderTarget.erase(uiIndex);
    }
}

void HDR2StageDataBase::removeObjFromScaleRenderTarget(FrameBufferObject * const value)
{
    Int32 iElemIdx = _mfScaleRenderTarget.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ScaleRenderTargetFieldMask, _mfScaleRenderTarget);

        _mfScaleRenderTarget.erase(iElemIdx);
    }
}
void HDR2StageDataBase::clearScaleRenderTarget(void)
{
    editMField(ScaleRenderTargetFieldMask, _mfScaleRenderTarget);


    _mfScaleRenderTarget.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT HDR2StageDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LuminanceMapShaderFieldMask & whichField))
    {
        returnValue += _sfLuminanceMapShader.getBinSize();
    }
    if(FieldBits::NoField != (AdaptLuminanceShaderFieldMask & whichField))
    {
        returnValue += _sfAdaptLuminanceShader.getBinSize();
    }
    if(FieldBits::NoField != (ThresholdShaderFieldMask & whichField))
    {
        returnValue += _sfThresholdShader.getBinSize();
    }
    if(FieldBits::NoField != (ScaleShaderFieldMask & whichField))
    {
        returnValue += _sfScaleShader.getBinSize();
    }
    if(FieldBits::NoField != (BlurHorizShaderFieldMask & whichField))
    {
        returnValue += _sfBlurHorizShader.getBinSize();
    }
    if(FieldBits::NoField != (BlurVertShaderFieldMask & whichField))
    {
        returnValue += _sfBlurVertShader.getBinSize();
    }
    if(FieldBits::NoField != (CompositeShaderFieldMask & whichField))
    {
        returnValue += _sfCompositeShader.getBinSize();
    }
    if(FieldBits::NoField != (FinalScreenShaderFieldMask & whichField))
    {
        returnValue += _sfFinalScreenShader.getBinSize();
    }
    if(FieldBits::NoField != (SharedMaterialChunkFieldMask & whichField))
    {
        returnValue += _sfSharedMaterialChunk.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundMaterialFieldMask & whichField))
    {
        returnValue += _sfBackgroundMaterial.getBinSize();
    }
    if(FieldBits::NoField != (SceneMaterialFieldMask & whichField))
    {
        returnValue += _sfSceneMaterial.getBinSize();
    }
    if(FieldBits::NoField != (LuminanceMapMaterialFieldMask & whichField))
    {
        returnValue += _sfLuminanceMapMaterial.getBinSize();
    }
    if(FieldBits::NoField != (AdaptLuminanceMaterialFieldMask & whichField))
    {
        returnValue += _sfAdaptLuminanceMaterial.getBinSize();
    }
    if(FieldBits::NoField != (ThresholdMaterialFieldMask & whichField))
    {
        returnValue += _sfThresholdMaterial.getBinSize();
    }
    if(FieldBits::NoField != (ScaleMaterialFieldMask & whichField))
    {
        returnValue += _mfScaleMaterial.getBinSize();
    }
    if(FieldBits::NoField != (BlurHorizMaterialFieldMask & whichField))
    {
        returnValue += _sfBlurHorizMaterial.getBinSize();
    }
    if(FieldBits::NoField != (BlurVertMaterialFieldMask & whichField))
    {
        returnValue += _sfBlurVertMaterial.getBinSize();
    }
    if(FieldBits::NoField != (CompositeMaterialFieldMask & whichField))
    {
        returnValue += _sfCompositeMaterial.getBinSize();
    }
    if(FieldBits::NoField != (FinalScreenMaterialFieldMask & whichField))
    {
        returnValue += _sfFinalScreenMaterial.getBinSize();
    }
    if(FieldBits::NoField != (CurrentAdaptLuminanceIdxFieldMask & whichField))
    {
        returnValue += _sfCurrentAdaptLuminanceIdx.getBinSize();
    }
    if(FieldBits::NoField != (FinalScreenMaterialDepthChunkFieldMask & whichField))
    {
        returnValue += _sfFinalScreenMaterialDepthChunk.getBinSize();
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundRenderTargetFieldMask & whichField))
    {
        returnValue += _sfBackgroundRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (SceneRenderTargetFieldMask & whichField))
    {
        returnValue += _sfSceneRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (LuminanceRenderTargetFieldMask & whichField))
    {
        returnValue += _sfLuminanceRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (AdaptLuminanceRenderTargetFieldMask & whichField))
    {
        returnValue += _mfAdaptLuminanceRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (ThresholdRenderTargetFieldMask & whichField))
    {
        returnValue += _sfThresholdRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (BlurHorizRenderTargetFieldMask & whichField))
    {
        returnValue += _sfBlurHorizRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (BlurVertRenderTargetFieldMask & whichField))
    {
        returnValue += _sfBlurVertRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (ScaleRenderTargetFieldMask & whichField))
    {
        returnValue += _mfScaleRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (CompositeRenderTargetFieldMask & whichField))
    {
        returnValue += _sfCompositeRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (HdrShaderDataFieldMask & whichField))
    {
        returnValue += _sfHdrShaderData.getBinSize();
    }
    if(FieldBits::NoField != (LastTimeFieldMask & whichField))
    {
        returnValue += _sfLastTime.getBinSize();
    }
    if(FieldBits::NoField != (CurrentTimeFieldMask & whichField))
    {
        returnValue += _sfCurrentTime.getBinSize();
    }
    if(FieldBits::NoField != (ZNearFieldMask & whichField))
    {
        returnValue += _sfZNear.getBinSize();
    }
    if(FieldBits::NoField != (ZFarFieldMask & whichField))
    {
        returnValue += _sfZFar.getBinSize();
    }

    return returnValue;
}

void HDR2StageDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LuminanceMapShaderFieldMask & whichField))
    {
        _sfLuminanceMapShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AdaptLuminanceShaderFieldMask & whichField))
    {
        _sfAdaptLuminanceShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ThresholdShaderFieldMask & whichField))
    {
        _sfThresholdShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleShaderFieldMask & whichField))
    {
        _sfScaleShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurHorizShaderFieldMask & whichField))
    {
        _sfBlurHorizShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurVertShaderFieldMask & whichField))
    {
        _sfBlurVertShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CompositeShaderFieldMask & whichField))
    {
        _sfCompositeShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FinalScreenShaderFieldMask & whichField))
    {
        _sfFinalScreenShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SharedMaterialChunkFieldMask & whichField))
    {
        _sfSharedMaterialChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundMaterialFieldMask & whichField))
    {
        _sfBackgroundMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneMaterialFieldMask & whichField))
    {
        _sfSceneMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LuminanceMapMaterialFieldMask & whichField))
    {
        _sfLuminanceMapMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AdaptLuminanceMaterialFieldMask & whichField))
    {
        _sfAdaptLuminanceMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ThresholdMaterialFieldMask & whichField))
    {
        _sfThresholdMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleMaterialFieldMask & whichField))
    {
        _mfScaleMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurHorizMaterialFieldMask & whichField))
    {
        _sfBlurHorizMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurVertMaterialFieldMask & whichField))
    {
        _sfBlurVertMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CompositeMaterialFieldMask & whichField))
    {
        _sfCompositeMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FinalScreenMaterialFieldMask & whichField))
    {
        _sfFinalScreenMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CurrentAdaptLuminanceIdxFieldMask & whichField))
    {
        _sfCurrentAdaptLuminanceIdx.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FinalScreenMaterialDepthChunkFieldMask & whichField))
    {
        _sfFinalScreenMaterialDepthChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundRenderTargetFieldMask & whichField))
    {
        _sfBackgroundRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SceneRenderTargetFieldMask & whichField))
    {
        _sfSceneRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LuminanceRenderTargetFieldMask & whichField))
    {
        _sfLuminanceRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AdaptLuminanceRenderTargetFieldMask & whichField))
    {
        _mfAdaptLuminanceRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ThresholdRenderTargetFieldMask & whichField))
    {
        _sfThresholdRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurHorizRenderTargetFieldMask & whichField))
    {
        _sfBlurHorizRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurVertRenderTargetFieldMask & whichField))
    {
        _sfBlurVertRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleRenderTargetFieldMask & whichField))
    {
        _mfScaleRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CompositeRenderTargetFieldMask & whichField))
    {
        _sfCompositeRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HdrShaderDataFieldMask & whichField))
    {
        _sfHdrShaderData.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LastTimeFieldMask & whichField))
    {
        _sfLastTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CurrentTimeFieldMask & whichField))
    {
        _sfCurrentTime.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ZNearFieldMask & whichField))
    {
        _sfZNear.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ZFarFieldMask & whichField))
    {
        _sfZFar.copyToBin(pMem);
    }
}

void HDR2StageDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LuminanceMapShaderFieldMask & whichField))
    {
        editSField(LuminanceMapShaderFieldMask);
        _sfLuminanceMapShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AdaptLuminanceShaderFieldMask & whichField))
    {
        editSField(AdaptLuminanceShaderFieldMask);
        _sfAdaptLuminanceShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ThresholdShaderFieldMask & whichField))
    {
        editSField(ThresholdShaderFieldMask);
        _sfThresholdShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleShaderFieldMask & whichField))
    {
        editSField(ScaleShaderFieldMask);
        _sfScaleShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurHorizShaderFieldMask & whichField))
    {
        editSField(BlurHorizShaderFieldMask);
        _sfBlurHorizShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurVertShaderFieldMask & whichField))
    {
        editSField(BlurVertShaderFieldMask);
        _sfBlurVertShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CompositeShaderFieldMask & whichField))
    {
        editSField(CompositeShaderFieldMask);
        _sfCompositeShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FinalScreenShaderFieldMask & whichField))
    {
        editSField(FinalScreenShaderFieldMask);
        _sfFinalScreenShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SharedMaterialChunkFieldMask & whichField))
    {
        editSField(SharedMaterialChunkFieldMask);
        _sfSharedMaterialChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundMaterialFieldMask & whichField))
    {
        editSField(BackgroundMaterialFieldMask);
        _sfBackgroundMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneMaterialFieldMask & whichField))
    {
        editSField(SceneMaterialFieldMask);
        _sfSceneMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LuminanceMapMaterialFieldMask & whichField))
    {
        editSField(LuminanceMapMaterialFieldMask);
        _sfLuminanceMapMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AdaptLuminanceMaterialFieldMask & whichField))
    {
        editSField(AdaptLuminanceMaterialFieldMask);
        _sfAdaptLuminanceMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ThresholdMaterialFieldMask & whichField))
    {
        editSField(ThresholdMaterialFieldMask);
        _sfThresholdMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleMaterialFieldMask & whichField))
    {
        editMField(ScaleMaterialFieldMask, _mfScaleMaterial);
        _mfScaleMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurHorizMaterialFieldMask & whichField))
    {
        editSField(BlurHorizMaterialFieldMask);
        _sfBlurHorizMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurVertMaterialFieldMask & whichField))
    {
        editSField(BlurVertMaterialFieldMask);
        _sfBlurVertMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CompositeMaterialFieldMask & whichField))
    {
        editSField(CompositeMaterialFieldMask);
        _sfCompositeMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FinalScreenMaterialFieldMask & whichField))
    {
        editSField(FinalScreenMaterialFieldMask);
        _sfFinalScreenMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CurrentAdaptLuminanceIdxFieldMask & whichField))
    {
        editSField(CurrentAdaptLuminanceIdxFieldMask);
        _sfCurrentAdaptLuminanceIdx.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FinalScreenMaterialDepthChunkFieldMask & whichField))
    {
        editSField(FinalScreenMaterialDepthChunkFieldMask);
        _sfFinalScreenMaterialDepthChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        editSField(WidthFieldMask);
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        editSField(HeightFieldMask);
        _sfHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundRenderTargetFieldMask & whichField))
    {
        editSField(BackgroundRenderTargetFieldMask);
        _sfBackgroundRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SceneRenderTargetFieldMask & whichField))
    {
        editSField(SceneRenderTargetFieldMask);
        _sfSceneRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LuminanceRenderTargetFieldMask & whichField))
    {
        editSField(LuminanceRenderTargetFieldMask);
        _sfLuminanceRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AdaptLuminanceRenderTargetFieldMask & whichField))
    {
        editMField(AdaptLuminanceRenderTargetFieldMask, _mfAdaptLuminanceRenderTarget);
        _mfAdaptLuminanceRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ThresholdRenderTargetFieldMask & whichField))
    {
        editSField(ThresholdRenderTargetFieldMask);
        _sfThresholdRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurHorizRenderTargetFieldMask & whichField))
    {
        editSField(BlurHorizRenderTargetFieldMask);
        _sfBlurHorizRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurVertRenderTargetFieldMask & whichField))
    {
        editSField(BlurVertRenderTargetFieldMask);
        _sfBlurVertRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleRenderTargetFieldMask & whichField))
    {
        editMField(ScaleRenderTargetFieldMask, _mfScaleRenderTarget);
        _mfScaleRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CompositeRenderTargetFieldMask & whichField))
    {
        editSField(CompositeRenderTargetFieldMask);
        _sfCompositeRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HdrShaderDataFieldMask & whichField))
    {
        editSField(HdrShaderDataFieldMask);
        _sfHdrShaderData.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LastTimeFieldMask & whichField))
    {
        editSField(LastTimeFieldMask);
        _sfLastTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CurrentTimeFieldMask & whichField))
    {
        editSField(CurrentTimeFieldMask);
        _sfCurrentTime.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ZNearFieldMask & whichField))
    {
        editSField(ZNearFieldMask);
        _sfZNear.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ZFarFieldMask & whichField))
    {
        editSField(ZFarFieldMask);
        _sfZFar.copyFromBin(pMem);
    }
}

//! create a new instance of the class
HDR2StageDataTransitPtr HDR2StageDataBase::createLocal(BitVector bFlags)
{
    HDR2StageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<HDR2StageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
HDR2StageDataTransitPtr HDR2StageDataBase::createDependent(BitVector bFlags)
{
    HDR2StageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<HDR2StageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
HDR2StageDataTransitPtr HDR2StageDataBase::create(void)
{
    HDR2StageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<HDR2StageData>(tmpPtr);
    }

    return fc;
}

HDR2StageData *HDR2StageDataBase::createEmptyLocal(BitVector bFlags)
{
    HDR2StageData *returnValue;

    newPtr<HDR2StageData>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
HDR2StageData *HDR2StageDataBase::createEmpty(void)
{
    HDR2StageData *returnValue;

    newPtr<HDR2StageData>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr HDR2StageDataBase::shallowCopyLocal(
    BitVector bFlags) const
{
    HDR2StageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const HDR2StageData *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr HDR2StageDataBase::shallowCopyDependent(
    BitVector bFlags) const
{
    HDR2StageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const HDR2StageData *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr HDR2StageDataBase::shallowCopy(void) const
{
    HDR2StageData *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const HDR2StageData *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

HDR2StageDataBase::HDR2StageDataBase(void) :
    Inherited(),
    _sfLuminanceMapShader     (NULL),
    _sfAdaptLuminanceShader   (NULL),
    _sfThresholdShader        (NULL),
    _sfScaleShader            (NULL),
    _sfBlurHorizShader        (NULL),
    _sfBlurVertShader         (NULL),
    _sfCompositeShader        (NULL),
    _sfFinalScreenShader      (NULL),
    _sfSharedMaterialChunk    (NULL),
    _sfBackgroundMaterial     (NULL),
    _sfSceneMaterial          (NULL),
    _sfLuminanceMapMaterial   (NULL),
    _sfAdaptLuminanceMaterial (NULL),
    _sfThresholdMaterial      (NULL),
    _mfScaleMaterial          (),
    _sfBlurHorizMaterial      (NULL),
    _sfBlurVertMaterial       (NULL),
    _sfCompositeMaterial      (NULL),
    _sfFinalScreenMaterial    (NULL),
    _sfCurrentAdaptLuminanceIdx(UInt32(0)),
    _sfFinalScreenMaterialDepthChunk(NULL),
    _sfWidth                  (Int32(0)),
    _sfHeight                 (Int32(0)),
    _sfBackgroundRenderTarget (NULL),
    _sfSceneRenderTarget      (NULL),
    _sfLuminanceRenderTarget  (NULL),
    _mfAdaptLuminanceRenderTarget(),
    _sfThresholdRenderTarget  (NULL),
    _sfBlurHorizRenderTarget  (NULL),
    _sfBlurVertRenderTarget   (NULL),
    _mfScaleRenderTarget      (),
    _sfCompositeRenderTarget  (NULL),
    _sfHdrShaderData          (NULL),
    _sfLastTime               (Real64(0.f)),
    _sfCurrentTime            (Real64(0.f)),
    _sfZNear                  (Real32(0.1f)),
    _sfZFar                   (Real32(10.f))
{
}

HDR2StageDataBase::HDR2StageDataBase(const HDR2StageDataBase &source) :
    Inherited(source),
    _sfLuminanceMapShader     (NULL),
    _sfAdaptLuminanceShader   (NULL),
    _sfThresholdShader        (NULL),
    _sfScaleShader            (NULL),
    _sfBlurHorizShader        (NULL),
    _sfBlurVertShader         (NULL),
    _sfCompositeShader        (NULL),
    _sfFinalScreenShader      (NULL),
    _sfSharedMaterialChunk    (NULL),
    _sfBackgroundMaterial     (NULL),
    _sfSceneMaterial          (NULL),
    _sfLuminanceMapMaterial   (NULL),
    _sfAdaptLuminanceMaterial (NULL),
    _sfThresholdMaterial      (NULL),
    _mfScaleMaterial          (),
    _sfBlurHorizMaterial      (NULL),
    _sfBlurVertMaterial       (NULL),
    _sfCompositeMaterial      (NULL),
    _sfFinalScreenMaterial    (NULL),
    _sfCurrentAdaptLuminanceIdx(source._sfCurrentAdaptLuminanceIdx),
    _sfFinalScreenMaterialDepthChunk(NULL),
    _sfWidth                  (source._sfWidth                  ),
    _sfHeight                 (source._sfHeight                 ),
    _sfBackgroundRenderTarget (NULL),
    _sfSceneRenderTarget      (NULL),
    _sfLuminanceRenderTarget  (NULL),
    _mfAdaptLuminanceRenderTarget(),
    _sfThresholdRenderTarget  (NULL),
    _sfBlurHorizRenderTarget  (NULL),
    _sfBlurVertRenderTarget   (NULL),
    _mfScaleRenderTarget      (),
    _sfCompositeRenderTarget  (NULL),
    _sfHdrShaderData          (NULL),
    _sfLastTime               (source._sfLastTime               ),
    _sfCurrentTime            (source._sfCurrentTime            ),
    _sfZNear                  (source._sfZNear                  ),
    _sfZFar                   (source._sfZFar                   )
{
}


/*-------------------------- destructors ----------------------------------*/

HDR2StageDataBase::~HDR2StageDataBase(void)
{
}

void HDR2StageDataBase::onCreate(const HDR2StageData *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        HDR2StageData *pThis = static_cast<HDR2StageData *>(this);

        pThis->setLuminanceMapShader(source->getLuminanceMapShader());

        pThis->setAdaptLuminanceShader(source->getAdaptLuminanceShader());

        pThis->setThresholdShader(source->getThresholdShader());

        pThis->setScaleShader(source->getScaleShader());

        pThis->setBlurHorizShader(source->getBlurHorizShader());

        pThis->setBlurVertShader(source->getBlurVertShader());

        pThis->setCompositeShader(source->getCompositeShader());

        pThis->setFinalScreenShader(source->getFinalScreenShader());

        pThis->setSharedMaterialChunk(source->getSharedMaterialChunk());

        pThis->setBackgroundMaterial(source->getBackgroundMaterial());

        pThis->setSceneMaterial(source->getSceneMaterial());

        pThis->setLuminanceMapMaterial(source->getLuminanceMapMaterial());

        pThis->setAdaptLuminanceMaterial(source->getAdaptLuminanceMaterial());

        pThis->setThresholdMaterial(source->getThresholdMaterial());

        MFUnrecChunkMaterialPtr::const_iterator ScaleMaterialIt  =
            source->_mfScaleMaterial.begin();
        MFUnrecChunkMaterialPtr::const_iterator ScaleMaterialEnd =
            source->_mfScaleMaterial.end  ();

        while(ScaleMaterialIt != ScaleMaterialEnd)
        {
            pThis->pushToScaleMaterial(*ScaleMaterialIt);

            ++ScaleMaterialIt;
        }

        pThis->setBlurHorizMaterial(source->getBlurHorizMaterial());

        pThis->setBlurVertMaterial(source->getBlurVertMaterial());

        pThis->setCompositeMaterial(source->getCompositeMaterial());

        pThis->setFinalScreenMaterial(source->getFinalScreenMaterial());

        pThis->setFinalScreenMaterialDepthChunk(source->getFinalScreenMaterialDepthChunk());

        pThis->setBackgroundRenderTarget(source->getBackgroundRenderTarget());

        pThis->setSceneRenderTarget(source->getSceneRenderTarget());

        pThis->setLuminanceRenderTarget(source->getLuminanceRenderTarget());

        MFUnrecFrameBufferObjectPtr::const_iterator AdaptLuminanceRenderTargetIt  =
            source->_mfAdaptLuminanceRenderTarget.begin();
        MFUnrecFrameBufferObjectPtr::const_iterator AdaptLuminanceRenderTargetEnd =
            source->_mfAdaptLuminanceRenderTarget.end  ();

        while(AdaptLuminanceRenderTargetIt != AdaptLuminanceRenderTargetEnd)
        {
            pThis->pushToAdaptLuminanceRenderTarget(*AdaptLuminanceRenderTargetIt);

            ++AdaptLuminanceRenderTargetIt;
        }

        pThis->setThresholdRenderTarget(source->getThresholdRenderTarget());

        pThis->setBlurHorizRenderTarget(source->getBlurHorizRenderTarget());

        pThis->setBlurVertRenderTarget(source->getBlurVertRenderTarget());

        MFUnrecFrameBufferObjectPtr::const_iterator ScaleRenderTargetIt  =
            source->_mfScaleRenderTarget.begin();
        MFUnrecFrameBufferObjectPtr::const_iterator ScaleRenderTargetEnd =
            source->_mfScaleRenderTarget.end  ();

        while(ScaleRenderTargetIt != ScaleRenderTargetEnd)
        {
            pThis->pushToScaleRenderTarget(*ScaleRenderTargetIt);

            ++ScaleRenderTargetIt;
        }

        pThis->setCompositeRenderTarget(source->getCompositeRenderTarget());

        pThis->setHdrShaderData(source->getHdrShaderData());
    }
}

GetFieldHandlePtr HDR2StageDataBase::getHandleLuminanceMapShader (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfLuminanceMapShader,
             this->getType().getFieldDesc(LuminanceMapShaderFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleLuminanceMapShader(void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfLuminanceMapShader,
             this->getType().getFieldDesc(LuminanceMapShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setLuminanceMapShader,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(LuminanceMapShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleAdaptLuminanceShader (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfAdaptLuminanceShader,
             this->getType().getFieldDesc(AdaptLuminanceShaderFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleAdaptLuminanceShader(void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfAdaptLuminanceShader,
             this->getType().getFieldDesc(AdaptLuminanceShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setAdaptLuminanceShader,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(AdaptLuminanceShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleThresholdShader (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfThresholdShader,
             this->getType().getFieldDesc(ThresholdShaderFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleThresholdShader(void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfThresholdShader,
             this->getType().getFieldDesc(ThresholdShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setThresholdShader,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(ThresholdShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleScaleShader     (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfScaleShader,
             this->getType().getFieldDesc(ScaleShaderFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleScaleShader    (void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfScaleShader,
             this->getType().getFieldDesc(ScaleShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setScaleShader,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(ScaleShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleBlurHorizShader (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfBlurHorizShader,
             this->getType().getFieldDesc(BlurHorizShaderFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleBlurHorizShader(void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfBlurHorizShader,
             this->getType().getFieldDesc(BlurHorizShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setBlurHorizShader,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(BlurHorizShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleBlurVertShader  (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfBlurVertShader,
             this->getType().getFieldDesc(BlurVertShaderFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleBlurVertShader (void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfBlurVertShader,
             this->getType().getFieldDesc(BlurVertShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setBlurVertShader,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(BlurVertShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleCompositeShader (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfCompositeShader,
             this->getType().getFieldDesc(CompositeShaderFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleCompositeShader(void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfCompositeShader,
             this->getType().getFieldDesc(CompositeShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setCompositeShader,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(CompositeShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleFinalScreenShader (void) const
{
    SFUnrecSimpleSHLChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::GetHandle(
             &_sfFinalScreenShader,
             this->getType().getFieldDesc(FinalScreenShaderFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleFinalScreenShader(void)
{
    SFUnrecSimpleSHLChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecSimpleSHLChunkPtr::EditHandle(
             &_sfFinalScreenShader,
             this->getType().getFieldDesc(FinalScreenShaderFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setFinalScreenShader,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(FinalScreenShaderFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleSharedMaterialChunk (void) const
{
    SFUnrecMaterialChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecMaterialChunkPtr::GetHandle(
             &_sfSharedMaterialChunk,
             this->getType().getFieldDesc(SharedMaterialChunkFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleSharedMaterialChunk(void)
{
    SFUnrecMaterialChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecMaterialChunkPtr::EditHandle(
             &_sfSharedMaterialChunk,
             this->getType().getFieldDesc(SharedMaterialChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setSharedMaterialChunk,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(SharedMaterialChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleBackgroundMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfBackgroundMaterial,
             this->getType().getFieldDesc(BackgroundMaterialFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleBackgroundMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfBackgroundMaterial,
             this->getType().getFieldDesc(BackgroundMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setBackgroundMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(BackgroundMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleSceneMaterial   (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfSceneMaterial,
             this->getType().getFieldDesc(SceneMaterialFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleSceneMaterial  (void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfSceneMaterial,
             this->getType().getFieldDesc(SceneMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setSceneMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(SceneMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleLuminanceMapMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfLuminanceMapMaterial,
             this->getType().getFieldDesc(LuminanceMapMaterialFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleLuminanceMapMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfLuminanceMapMaterial,
             this->getType().getFieldDesc(LuminanceMapMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setLuminanceMapMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(LuminanceMapMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleAdaptLuminanceMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfAdaptLuminanceMaterial,
             this->getType().getFieldDesc(AdaptLuminanceMaterialFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleAdaptLuminanceMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfAdaptLuminanceMaterial,
             this->getType().getFieldDesc(AdaptLuminanceMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setAdaptLuminanceMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(AdaptLuminanceMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleThresholdMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfThresholdMaterial,
             this->getType().getFieldDesc(ThresholdMaterialFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleThresholdMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfThresholdMaterial,
             this->getType().getFieldDesc(ThresholdMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setThresholdMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(ThresholdMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleScaleMaterial   (void) const
{
    MFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  MFUnrecChunkMaterialPtr::GetHandle(
             &_mfScaleMaterial,
             this->getType().getFieldDesc(ScaleMaterialFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleScaleMaterial  (void)
{
    MFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  MFUnrecChunkMaterialPtr::EditHandle(
             &_mfScaleMaterial,
             this->getType().getFieldDesc(ScaleMaterialFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&HDR2StageData::pushToScaleMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&HDR2StageData::removeFromScaleMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&HDR2StageData::removeObjFromScaleMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&HDR2StageData::clearScaleMaterial,
                    static_cast<HDR2StageData *>(this)));

    editMField(ScaleMaterialFieldMask, _mfScaleMaterial);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleBlurHorizMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfBlurHorizMaterial,
             this->getType().getFieldDesc(BlurHorizMaterialFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleBlurHorizMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfBlurHorizMaterial,
             this->getType().getFieldDesc(BlurHorizMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setBlurHorizMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(BlurHorizMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleBlurVertMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfBlurVertMaterial,
             this->getType().getFieldDesc(BlurVertMaterialFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleBlurVertMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfBlurVertMaterial,
             this->getType().getFieldDesc(BlurVertMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setBlurVertMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(BlurVertMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleCompositeMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfCompositeMaterial,
             this->getType().getFieldDesc(CompositeMaterialFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleCompositeMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfCompositeMaterial,
             this->getType().getFieldDesc(CompositeMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setCompositeMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(CompositeMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleFinalScreenMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfFinalScreenMaterial,
             this->getType().getFieldDesc(FinalScreenMaterialFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleFinalScreenMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfFinalScreenMaterial,
             this->getType().getFieldDesc(FinalScreenMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setFinalScreenMaterial,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(FinalScreenMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleCurrentAdaptLuminanceIdx (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfCurrentAdaptLuminanceIdx,
             this->getType().getFieldDesc(CurrentAdaptLuminanceIdxFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleCurrentAdaptLuminanceIdx(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfCurrentAdaptLuminanceIdx,
             this->getType().getFieldDesc(CurrentAdaptLuminanceIdxFieldId),
             this));


    editSField(CurrentAdaptLuminanceIdxFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleFinalScreenMaterialDepthChunk (void) const
{
    SFUnrecDepthChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecDepthChunkPtr::GetHandle(
             &_sfFinalScreenMaterialDepthChunk,
             this->getType().getFieldDesc(FinalScreenMaterialDepthChunkFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleFinalScreenMaterialDepthChunk(void)
{
    SFUnrecDepthChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecDepthChunkPtr::EditHandle(
             &_sfFinalScreenMaterialDepthChunk,
             this->getType().getFieldDesc(FinalScreenMaterialDepthChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setFinalScreenMaterialDepthChunk,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(FinalScreenMaterialDepthChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleWidth           (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleWidth          (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             this));


    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleHeight          (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleHeight         (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             this));


    editSField(HeightFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleBackgroundRenderTarget (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfBackgroundRenderTarget,
             this->getType().getFieldDesc(BackgroundRenderTargetFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleBackgroundRenderTarget(void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfBackgroundRenderTarget,
             this->getType().getFieldDesc(BackgroundRenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setBackgroundRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(BackgroundRenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleSceneRenderTarget (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfSceneRenderTarget,
             this->getType().getFieldDesc(SceneRenderTargetFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleSceneRenderTarget(void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfSceneRenderTarget,
             this->getType().getFieldDesc(SceneRenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setSceneRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(SceneRenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleLuminanceRenderTarget (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfLuminanceRenderTarget,
             this->getType().getFieldDesc(LuminanceRenderTargetFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleLuminanceRenderTarget(void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfLuminanceRenderTarget,
             this->getType().getFieldDesc(LuminanceRenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setLuminanceRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(LuminanceRenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleAdaptLuminanceRenderTarget (void) const
{
    MFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  MFUnrecFrameBufferObjectPtr::GetHandle(
             &_mfAdaptLuminanceRenderTarget,
             this->getType().getFieldDesc(AdaptLuminanceRenderTargetFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleAdaptLuminanceRenderTarget(void)
{
    MFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  MFUnrecFrameBufferObjectPtr::EditHandle(
             &_mfAdaptLuminanceRenderTarget,
             this->getType().getFieldDesc(AdaptLuminanceRenderTargetFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&HDR2StageData::pushToAdaptLuminanceRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&HDR2StageData::removeFromAdaptLuminanceRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&HDR2StageData::removeObjFromAdaptLuminanceRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&HDR2StageData::clearAdaptLuminanceRenderTarget,
                    static_cast<HDR2StageData *>(this)));

    editMField(AdaptLuminanceRenderTargetFieldMask, _mfAdaptLuminanceRenderTarget);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleThresholdRenderTarget (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfThresholdRenderTarget,
             this->getType().getFieldDesc(ThresholdRenderTargetFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleThresholdRenderTarget(void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfThresholdRenderTarget,
             this->getType().getFieldDesc(ThresholdRenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setThresholdRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(ThresholdRenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleBlurHorizRenderTarget (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfBlurHorizRenderTarget,
             this->getType().getFieldDesc(BlurHorizRenderTargetFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleBlurHorizRenderTarget(void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfBlurHorizRenderTarget,
             this->getType().getFieldDesc(BlurHorizRenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setBlurHorizRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(BlurHorizRenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleBlurVertRenderTarget (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfBlurVertRenderTarget,
             this->getType().getFieldDesc(BlurVertRenderTargetFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleBlurVertRenderTarget(void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfBlurVertRenderTarget,
             this->getType().getFieldDesc(BlurVertRenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setBlurVertRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(BlurVertRenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleScaleRenderTarget (void) const
{
    MFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  MFUnrecFrameBufferObjectPtr::GetHandle(
             &_mfScaleRenderTarget,
             this->getType().getFieldDesc(ScaleRenderTargetFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleScaleRenderTarget(void)
{
    MFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  MFUnrecFrameBufferObjectPtr::EditHandle(
             &_mfScaleRenderTarget,
             this->getType().getFieldDesc(ScaleRenderTargetFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&HDR2StageData::pushToScaleRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&HDR2StageData::removeFromScaleRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&HDR2StageData::removeObjFromScaleRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&HDR2StageData::clearScaleRenderTarget,
                    static_cast<HDR2StageData *>(this)));

    editMField(ScaleRenderTargetFieldMask, _mfScaleRenderTarget);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleCompositeRenderTarget (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfCompositeRenderTarget,
             this->getType().getFieldDesc(CompositeRenderTargetFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleCompositeRenderTarget(void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfCompositeRenderTarget,
             this->getType().getFieldDesc(CompositeRenderTargetFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setCompositeRenderTarget,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(CompositeRenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleHdrShaderData   (void) const
{
    SFUnrecUniformBufferObjStd140ChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecUniformBufferObjStd140ChunkPtr::GetHandle(
             &_sfHdrShaderData,
             this->getType().getFieldDesc(HdrShaderDataFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleHdrShaderData  (void)
{
    SFUnrecUniformBufferObjStd140ChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecUniformBufferObjStd140ChunkPtr::EditHandle(
             &_sfHdrShaderData,
             this->getType().getFieldDesc(HdrShaderDataFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HDR2StageData::setHdrShaderData,
                    static_cast<HDR2StageData *>(this), ::boost::placeholders::_1));

    editSField(HdrShaderDataFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleLastTime        (void) const
{
    SFReal64::GetHandlePtr returnValue(
        new  SFReal64::GetHandle(
             &_sfLastTime,
             this->getType().getFieldDesc(LastTimeFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleLastTime       (void)
{
    SFReal64::EditHandlePtr returnValue(
        new  SFReal64::EditHandle(
             &_sfLastTime,
             this->getType().getFieldDesc(LastTimeFieldId),
             this));


    editSField(LastTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleCurrentTime     (void) const
{
    SFReal64::GetHandlePtr returnValue(
        new  SFReal64::GetHandle(
             &_sfCurrentTime,
             this->getType().getFieldDesc(CurrentTimeFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleCurrentTime    (void)
{
    SFReal64::EditHandlePtr returnValue(
        new  SFReal64::EditHandle(
             &_sfCurrentTime,
             this->getType().getFieldDesc(CurrentTimeFieldId),
             this));


    editSField(CurrentTimeFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleZNear           (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfZNear,
             this->getType().getFieldDesc(ZNearFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleZNear          (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfZNear,
             this->getType().getFieldDesc(ZNearFieldId),
             this));


    editSField(ZNearFieldMask);

    return returnValue;
}

GetFieldHandlePtr HDR2StageDataBase::getHandleZFar            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfZFar,
             this->getType().getFieldDesc(ZFarFieldId),
             const_cast<HDR2StageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HDR2StageDataBase::editHandleZFar           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfZFar,
             this->getType().getFieldDesc(ZFarFieldId),
             this));


    editSField(ZFarFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void HDR2StageDataBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    HDR2StageData *pThis = static_cast<HDR2StageData *>(this);

    pThis->execSync(static_cast<HDR2StageData *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *HDR2StageDataBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    HDR2StageData *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const HDR2StageData *>(pRefAspect),
                  dynamic_cast<const HDR2StageData *>(this));

    return returnValue;
}
#endif

void HDR2StageDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<HDR2StageData *>(this)->setLuminanceMapShader(NULL);

    static_cast<HDR2StageData *>(this)->setAdaptLuminanceShader(NULL);

    static_cast<HDR2StageData *>(this)->setThresholdShader(NULL);

    static_cast<HDR2StageData *>(this)->setScaleShader(NULL);

    static_cast<HDR2StageData *>(this)->setBlurHorizShader(NULL);

    static_cast<HDR2StageData *>(this)->setBlurVertShader(NULL);

    static_cast<HDR2StageData *>(this)->setCompositeShader(NULL);

    static_cast<HDR2StageData *>(this)->setFinalScreenShader(NULL);

    static_cast<HDR2StageData *>(this)->setSharedMaterialChunk(NULL);

    static_cast<HDR2StageData *>(this)->setBackgroundMaterial(NULL);

    static_cast<HDR2StageData *>(this)->setSceneMaterial(NULL);

    static_cast<HDR2StageData *>(this)->setLuminanceMapMaterial(NULL);

    static_cast<HDR2StageData *>(this)->setAdaptLuminanceMaterial(NULL);

    static_cast<HDR2StageData *>(this)->setThresholdMaterial(NULL);

    static_cast<HDR2StageData *>(this)->clearScaleMaterial();

    static_cast<HDR2StageData *>(this)->setBlurHorizMaterial(NULL);

    static_cast<HDR2StageData *>(this)->setBlurVertMaterial(NULL);

    static_cast<HDR2StageData *>(this)->setCompositeMaterial(NULL);

    static_cast<HDR2StageData *>(this)->setFinalScreenMaterial(NULL);

    static_cast<HDR2StageData *>(this)->setFinalScreenMaterialDepthChunk(NULL);

    static_cast<HDR2StageData *>(this)->setBackgroundRenderTarget(NULL);

    static_cast<HDR2StageData *>(this)->setSceneRenderTarget(NULL);

    static_cast<HDR2StageData *>(this)->setLuminanceRenderTarget(NULL);

    static_cast<HDR2StageData *>(this)->clearAdaptLuminanceRenderTarget();

    static_cast<HDR2StageData *>(this)->setThresholdRenderTarget(NULL);

    static_cast<HDR2StageData *>(this)->setBlurHorizRenderTarget(NULL);

    static_cast<HDR2StageData *>(this)->setBlurVertRenderTarget(NULL);

    static_cast<HDR2StageData *>(this)->clearScaleRenderTarget();

    static_cast<HDR2StageData *>(this)->setCompositeRenderTarget(NULL);

    static_cast<HDR2StageData *>(this)->setHdrShaderData(NULL);


}


OSG_END_NAMESPACE
