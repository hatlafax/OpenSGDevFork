/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FishEyeProjector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"


#include "OSGGLEXT.h"                     // BufferFormat default header

#include "OSGGeometry.h"                // Geometries Class

#include "OSGFishEyeProjectorBase.h"
#include "OSGFishEyeProjector.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::FishEyeProjector
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          FishEyeProjectorBase::_sfMode
    
*/

/*! \var Geometry *      FishEyeProjectorBase::_mfGeometries
    
*/

/*! \var bool            FishEyeProjectorBase::_sfShowDomeIntensity
    
*/

/*! \var UInt32          FishEyeProjectorBase::_sfResolution
    
*/

/*! \var UInt32          FishEyeProjectorBase::_sfMeshRefinementLevel
    
*/

/*! \var GLenum          FishEyeProjectorBase::_sfBufferFormat
    
*/

/*! \var Real64          FishEyeProjectorBase::_sfDomeRadius
    
*/

/*! \var Real64          FishEyeProjectorBase::_sfMirrorRadius
    
*/

/*! \var Vec3d           FishEyeProjectorBase::_sfMirrorPos
    
*/

/*! \var Vec3d           FishEyeProjectorBase::_sfProjectorPos
    
*/

/*! \var Real64          FishEyeProjectorBase::_sfAspectRatio
    
*/

/*! \var Real64          FishEyeProjectorBase::_sfThrowDist
    
*/

/*! \var bool            FishEyeProjectorBase::_sfShowMesh
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<FishEyeProjector *, nsOSG>::_type(
    "FishEyeProjectorPtr", 
    "StagePtr", 
    FishEyeProjector::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(FishEyeProjector *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void FishEyeProjectorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "mode",
        "",
        ModeFieldId, ModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleMode),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleMode));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecGeometryPtr::Description(
        MFUnrecGeometryPtr::getClassType(),
        "geometries",
        "",
        GeometriesFieldId, GeometriesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleGeometries),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleGeometries));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "showDomeIntensity",
        "",
        ShowDomeIntensityFieldId, ShowDomeIntensityFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleShowDomeIntensity),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleShowDomeIntensity));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "resolution",
        "",
        ResolutionFieldId, ResolutionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleResolution),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleResolution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "meshRefinementLevel",
        "",
        MeshRefinementLevelFieldId, MeshRefinementLevelFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleMeshRefinementLevel),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleMeshRefinementLevel));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "bufferFormat",
        "",
        BufferFormatFieldId, BufferFormatFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleBufferFormat),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleBufferFormat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal64::Description(
        SFReal64::getClassType(),
        "domeRadius",
        "",
        DomeRadiusFieldId, DomeRadiusFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleDomeRadius),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleDomeRadius));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal64::Description(
        SFReal64::getClassType(),
        "mirrorRadius",
        "",
        MirrorRadiusFieldId, MirrorRadiusFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleMirrorRadius),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleMirrorRadius));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3d::Description(
        SFVec3d::getClassType(),
        "mirrorPos",
        "",
        MirrorPosFieldId, MirrorPosFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleMirrorPos),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleMirrorPos));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3d::Description(
        SFVec3d::getClassType(),
        "projectorPos",
        "",
        ProjectorPosFieldId, ProjectorPosFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleProjectorPos),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleProjectorPos));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal64::Description(
        SFReal64::getClassType(),
        "aspectRatio",
        "",
        AspectRatioFieldId, AspectRatioFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleAspectRatio),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleAspectRatio));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal64::Description(
        SFReal64::getClassType(),
        "throwDist",
        "",
        ThrowDistFieldId, ThrowDistFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleThrowDist),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleThrowDist));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "showMesh",
        "",
        ShowMeshFieldId, ShowMeshFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&FishEyeProjector::editHandleShowMesh),
        static_cast<FieldGetMethodSig >(&FishEyeProjector::getHandleShowMesh));

    oType.addInitialDesc(pDesc);
}


FishEyeProjectorBase::TypeObject FishEyeProjectorBase::_type(
    FishEyeProjectorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&FishEyeProjectorBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&FishEyeProjector::initMethod),
    reinterpret_cast<ExitContainerF>(&FishEyeProjector::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&FishEyeProjector::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"FishEyeProjector\"\n"
    "   parent=\"Stage\"\n"
    "   library=\"EffectGroups\"\n"
    "   pointerfieldtypes=\"none\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   isNodeCore=\"true\"\n"
    "   isBundle=\"false\"\n"
    "   docGroupBase=\"GrpEffectsGroupsProjectors\"\n"
    "   >\n"
    "  <Field\n"
    "\t name=\"mode\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0x0001\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"geometries\"\n"
    "\t type=\"Geometry\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "     category=\"pointer\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"showDomeIntensity\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"resolution\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"512\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"meshRefinementLevel\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"5\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"bufferFormat\"\n"
    "\t type=\"GLenum\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"GL_RGB\"\n"
    "\t defaultHeader=\"&quot;OSGGLEXT.h&quot;\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"domeRadius\"\n"
    "\t type=\"Real64\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"2.5\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"mirrorRadius\"\n"
    "\t type=\"Real64\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"0.3\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"mirrorPos\"\n"
    "\t type=\"Vec3d\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"2.4, 0.0, 0.0\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"projectorPos\"\n"
    "\t type=\"Vec3d\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1.85, 0.0, 0.0\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"aspectRatio\"\n"
    "\t type=\"Real64\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"4.0/3.0\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"throwDist\"\n"
    "\t type=\"Real64\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"1.5\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"showMesh\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"true\"\n"
    "\t access=\"public\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &FishEyeProjectorBase::getType(void)
{
    return _type;
}

const FieldContainerType &FishEyeProjectorBase::getType(void) const
{
    return _type;
}

UInt32 FishEyeProjectorBase::getContainerSize(void) const
{
    return sizeof(FishEyeProjector);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *FishEyeProjectorBase::editSFMode(void)
{
    editSField(ModeFieldMask);

    return &_sfMode;
}

const SFUInt32 *FishEyeProjectorBase::getSFMode(void) const
{
    return &_sfMode;
}


//! Get the FishEyeProjector::_mfGeometries field.
const MFUnrecGeometryPtr *FishEyeProjectorBase::getMFGeometries(void) const
{
    return &_mfGeometries;
}

MFUnrecGeometryPtr  *FishEyeProjectorBase::editMFGeometries     (void)
{
    editMField(GeometriesFieldMask, _mfGeometries);

    return &_mfGeometries;
}
Geometry * FishEyeProjectorBase::getGeometries(const UInt32 index) const
{
    return _mfGeometries[index];
}

SFBool *FishEyeProjectorBase::editSFShowDomeIntensity(void)
{
    editSField(ShowDomeIntensityFieldMask);

    return &_sfShowDomeIntensity;
}

const SFBool *FishEyeProjectorBase::getSFShowDomeIntensity(void) const
{
    return &_sfShowDomeIntensity;
}


SFUInt32 *FishEyeProjectorBase::editSFResolution(void)
{
    editSField(ResolutionFieldMask);

    return &_sfResolution;
}

const SFUInt32 *FishEyeProjectorBase::getSFResolution(void) const
{
    return &_sfResolution;
}


SFUInt32 *FishEyeProjectorBase::editSFMeshRefinementLevel(void)
{
    editSField(MeshRefinementLevelFieldMask);

    return &_sfMeshRefinementLevel;
}

const SFUInt32 *FishEyeProjectorBase::getSFMeshRefinementLevel(void) const
{
    return &_sfMeshRefinementLevel;
}


SFGLenum *FishEyeProjectorBase::editSFBufferFormat(void)
{
    editSField(BufferFormatFieldMask);

    return &_sfBufferFormat;
}

const SFGLenum *FishEyeProjectorBase::getSFBufferFormat(void) const
{
    return &_sfBufferFormat;
}


SFReal64 *FishEyeProjectorBase::editSFDomeRadius(void)
{
    editSField(DomeRadiusFieldMask);

    return &_sfDomeRadius;
}

const SFReal64 *FishEyeProjectorBase::getSFDomeRadius(void) const
{
    return &_sfDomeRadius;
}


SFReal64 *FishEyeProjectorBase::editSFMirrorRadius(void)
{
    editSField(MirrorRadiusFieldMask);

    return &_sfMirrorRadius;
}

const SFReal64 *FishEyeProjectorBase::getSFMirrorRadius(void) const
{
    return &_sfMirrorRadius;
}


SFVec3d *FishEyeProjectorBase::editSFMirrorPos(void)
{
    editSField(MirrorPosFieldMask);

    return &_sfMirrorPos;
}

const SFVec3d *FishEyeProjectorBase::getSFMirrorPos(void) const
{
    return &_sfMirrorPos;
}


SFVec3d *FishEyeProjectorBase::editSFProjectorPos(void)
{
    editSField(ProjectorPosFieldMask);

    return &_sfProjectorPos;
}

const SFVec3d *FishEyeProjectorBase::getSFProjectorPos(void) const
{
    return &_sfProjectorPos;
}


SFReal64 *FishEyeProjectorBase::editSFAspectRatio(void)
{
    editSField(AspectRatioFieldMask);

    return &_sfAspectRatio;
}

const SFReal64 *FishEyeProjectorBase::getSFAspectRatio(void) const
{
    return &_sfAspectRatio;
}


SFReal64 *FishEyeProjectorBase::editSFThrowDist(void)
{
    editSField(ThrowDistFieldMask);

    return &_sfThrowDist;
}

const SFReal64 *FishEyeProjectorBase::getSFThrowDist(void) const
{
    return &_sfThrowDist;
}


SFBool *FishEyeProjectorBase::editSFShowMesh(void)
{
    editSField(ShowMeshFieldMask);

    return &_sfShowMesh;
}

const SFBool *FishEyeProjectorBase::getSFShowMesh(void) const
{
    return &_sfShowMesh;
}




void FishEyeProjectorBase::pushToGeometries(Geometry * const value)
{
    editMField(GeometriesFieldMask, _mfGeometries);

    _mfGeometries.push_back(value);
}

void FishEyeProjectorBase::assignGeometries(const MFUnrecGeometryPtr &value)
{
    MFUnrecGeometryPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecGeometryPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<FishEyeProjector *>(this)->clearGeometries();

    while(elemIt != elemEnd)
    {
        this->pushToGeometries(*elemIt);

        ++elemIt;
    }
}

void FishEyeProjectorBase::removeFromGeometries(UInt32 uiIndex)
{
    if(uiIndex < _mfGeometries.size())
    {
        editMField(GeometriesFieldMask, _mfGeometries);

        _mfGeometries.erase(uiIndex);
    }
}

void FishEyeProjectorBase::removeObjFromGeometries(Geometry * const value)
{
    Int32 iElemIdx = _mfGeometries.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(GeometriesFieldMask, _mfGeometries);

        _mfGeometries.erase(iElemIdx);
    }
}
void FishEyeProjectorBase::clearGeometries(void)
{
    editMField(GeometriesFieldMask, _mfGeometries);


    _mfGeometries.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT FishEyeProjectorBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        returnValue += _sfMode.getBinSize();
    }
    if(FieldBits::NoField != (GeometriesFieldMask & whichField))
    {
        returnValue += _mfGeometries.getBinSize();
    }
    if(FieldBits::NoField != (ShowDomeIntensityFieldMask & whichField))
    {
        returnValue += _sfShowDomeIntensity.getBinSize();
    }
    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
    {
        returnValue += _sfResolution.getBinSize();
    }
    if(FieldBits::NoField != (MeshRefinementLevelFieldMask & whichField))
    {
        returnValue += _sfMeshRefinementLevel.getBinSize();
    }
    if(FieldBits::NoField != (BufferFormatFieldMask & whichField))
    {
        returnValue += _sfBufferFormat.getBinSize();
    }
    if(FieldBits::NoField != (DomeRadiusFieldMask & whichField))
    {
        returnValue += _sfDomeRadius.getBinSize();
    }
    if(FieldBits::NoField != (MirrorRadiusFieldMask & whichField))
    {
        returnValue += _sfMirrorRadius.getBinSize();
    }
    if(FieldBits::NoField != (MirrorPosFieldMask & whichField))
    {
        returnValue += _sfMirrorPos.getBinSize();
    }
    if(FieldBits::NoField != (ProjectorPosFieldMask & whichField))
    {
        returnValue += _sfProjectorPos.getBinSize();
    }
    if(FieldBits::NoField != (AspectRatioFieldMask & whichField))
    {
        returnValue += _sfAspectRatio.getBinSize();
    }
    if(FieldBits::NoField != (ThrowDistFieldMask & whichField))
    {
        returnValue += _sfThrowDist.getBinSize();
    }
    if(FieldBits::NoField != (ShowMeshFieldMask & whichField))
    {
        returnValue += _sfShowMesh.getBinSize();
    }

    return returnValue;
}

void FishEyeProjectorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        _sfMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GeometriesFieldMask & whichField))
    {
        _mfGeometries.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowDomeIntensityFieldMask & whichField))
    {
        _sfShowDomeIntensity.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
    {
        _sfResolution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MeshRefinementLevelFieldMask & whichField))
    {
        _sfMeshRefinementLevel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BufferFormatFieldMask & whichField))
    {
        _sfBufferFormat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DomeRadiusFieldMask & whichField))
    {
        _sfDomeRadius.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MirrorRadiusFieldMask & whichField))
    {
        _sfMirrorRadius.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MirrorPosFieldMask & whichField))
    {
        _sfMirrorPos.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ProjectorPosFieldMask & whichField))
    {
        _sfProjectorPos.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AspectRatioFieldMask & whichField))
    {
        _sfAspectRatio.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ThrowDistFieldMask & whichField))
    {
        _sfThrowDist.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShowMeshFieldMask & whichField))
    {
        _sfShowMesh.copyToBin(pMem);
    }
}

void FishEyeProjectorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ModeFieldMask & whichField))
    {
        editSField(ModeFieldMask);
        _sfMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GeometriesFieldMask & whichField))
    {
        editMField(GeometriesFieldMask, _mfGeometries);
        _mfGeometries.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowDomeIntensityFieldMask & whichField))
    {
        editSField(ShowDomeIntensityFieldMask);
        _sfShowDomeIntensity.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
    {
        editSField(ResolutionFieldMask);
        _sfResolution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MeshRefinementLevelFieldMask & whichField))
    {
        editSField(MeshRefinementLevelFieldMask);
        _sfMeshRefinementLevel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BufferFormatFieldMask & whichField))
    {
        editSField(BufferFormatFieldMask);
        _sfBufferFormat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DomeRadiusFieldMask & whichField))
    {
        editSField(DomeRadiusFieldMask);
        _sfDomeRadius.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MirrorRadiusFieldMask & whichField))
    {
        editSField(MirrorRadiusFieldMask);
        _sfMirrorRadius.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MirrorPosFieldMask & whichField))
    {
        editSField(MirrorPosFieldMask);
        _sfMirrorPos.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ProjectorPosFieldMask & whichField))
    {
        editSField(ProjectorPosFieldMask);
        _sfProjectorPos.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AspectRatioFieldMask & whichField))
    {
        editSField(AspectRatioFieldMask);
        _sfAspectRatio.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ThrowDistFieldMask & whichField))
    {
        editSField(ThrowDistFieldMask);
        _sfThrowDist.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShowMeshFieldMask & whichField))
    {
        editSField(ShowMeshFieldMask);
        _sfShowMesh.copyFromBin(pMem);
    }
}

//! create a new instance of the class
FishEyeProjectorTransitPtr FishEyeProjectorBase::createLocal(BitVector bFlags)
{
    FishEyeProjectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<FishEyeProjector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
FishEyeProjectorTransitPtr FishEyeProjectorBase::createDependent(BitVector bFlags)
{
    FishEyeProjectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<FishEyeProjector>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
FishEyeProjectorTransitPtr FishEyeProjectorBase::create(void)
{
    FishEyeProjectorTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<FishEyeProjector>(tmpPtr);
    }

    return fc;
}

FishEyeProjector *FishEyeProjectorBase::createEmptyLocal(BitVector bFlags)
{
    FishEyeProjector *returnValue;

    newPtr<FishEyeProjector>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
FishEyeProjector *FishEyeProjectorBase::createEmpty(void)
{
    FishEyeProjector *returnValue;

    newPtr<FishEyeProjector>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr FishEyeProjectorBase::shallowCopyLocal(
    BitVector bFlags) const
{
    FishEyeProjector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const FishEyeProjector *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr FishEyeProjectorBase::shallowCopyDependent(
    BitVector bFlags) const
{
    FishEyeProjector *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const FishEyeProjector *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr FishEyeProjectorBase::shallowCopy(void) const
{
    FishEyeProjector *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const FishEyeProjector *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

FishEyeProjectorBase::FishEyeProjectorBase(void) :
    Inherited(),
    _sfMode                   (UInt32(0x0001)),
    _mfGeometries             (),
    _sfShowDomeIntensity      (bool(true)),
    _sfResolution             (UInt32(512)),
    _sfMeshRefinementLevel    (UInt32(5)),
    _sfBufferFormat           (GLenum(GL_RGB)),
    _sfDomeRadius             (Real64(2.5)),
    _sfMirrorRadius           (Real64(0.3)),
    _sfMirrorPos              (Vec3d(2.4, 0.0, 0.0)),
    _sfProjectorPos           (Vec3d(1.85, 0.0, 0.0)),
    _sfAspectRatio            (Real64(4.0/3.0)),
    _sfThrowDist              (Real64(1.5)),
    _sfShowMesh               (bool(true))
{
}

FishEyeProjectorBase::FishEyeProjectorBase(const FishEyeProjectorBase &source) :
    Inherited(source),
    _sfMode                   (source._sfMode                   ),
    _mfGeometries             (),
    _sfShowDomeIntensity      (source._sfShowDomeIntensity      ),
    _sfResolution             (source._sfResolution             ),
    _sfMeshRefinementLevel    (source._sfMeshRefinementLevel    ),
    _sfBufferFormat           (source._sfBufferFormat           ),
    _sfDomeRadius             (source._sfDomeRadius             ),
    _sfMirrorRadius           (source._sfMirrorRadius           ),
    _sfMirrorPos              (source._sfMirrorPos              ),
    _sfProjectorPos           (source._sfProjectorPos           ),
    _sfAspectRatio            (source._sfAspectRatio            ),
    _sfThrowDist              (source._sfThrowDist              ),
    _sfShowMesh               (source._sfShowMesh               )
{
}


/*-------------------------- destructors ----------------------------------*/

FishEyeProjectorBase::~FishEyeProjectorBase(void)
{
}

void FishEyeProjectorBase::onCreate(const FishEyeProjector *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        FishEyeProjector *pThis = static_cast<FishEyeProjector *>(this);

        MFUnrecGeometryPtr::const_iterator GeometriesIt  =
            source->_mfGeometries.begin();
        MFUnrecGeometryPtr::const_iterator GeometriesEnd =
            source->_mfGeometries.end  ();

        while(GeometriesIt != GeometriesEnd)
        {
            pThis->pushToGeometries(*GeometriesIt);

            ++GeometriesIt;
        }
    }
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleMode            (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfMode,
             this->getType().getFieldDesc(ModeFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleMode           (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfMode,
             this->getType().getFieldDesc(ModeFieldId),
             this));


    editSField(ModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleGeometries      (void) const
{
    MFUnrecGeometryPtr::GetHandlePtr returnValue(
        new  MFUnrecGeometryPtr::GetHandle(
             &_mfGeometries,
             this->getType().getFieldDesc(GeometriesFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleGeometries     (void)
{
    MFUnrecGeometryPtr::EditHandlePtr returnValue(
        new  MFUnrecGeometryPtr::EditHandle(
             &_mfGeometries,
             this->getType().getFieldDesc(GeometriesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&FishEyeProjector::pushToGeometries,
                    static_cast<FishEyeProjector *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&FishEyeProjector::removeFromGeometries,
                    static_cast<FishEyeProjector *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&FishEyeProjector::removeObjFromGeometries,
                    static_cast<FishEyeProjector *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&FishEyeProjector::clearGeometries,
                    static_cast<FishEyeProjector *>(this)));

    editMField(GeometriesFieldMask, _mfGeometries);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleShowDomeIntensity (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowDomeIntensity,
             this->getType().getFieldDesc(ShowDomeIntensityFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleShowDomeIntensity(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowDomeIntensity,
             this->getType().getFieldDesc(ShowDomeIntensityFieldId),
             this));


    editSField(ShowDomeIntensityFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleResolution      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfResolution,
             this->getType().getFieldDesc(ResolutionFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleResolution     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfResolution,
             this->getType().getFieldDesc(ResolutionFieldId),
             this));


    editSField(ResolutionFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleMeshRefinementLevel (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfMeshRefinementLevel,
             this->getType().getFieldDesc(MeshRefinementLevelFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleMeshRefinementLevel(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfMeshRefinementLevel,
             this->getType().getFieldDesc(MeshRefinementLevelFieldId),
             this));


    editSField(MeshRefinementLevelFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleBufferFormat    (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfBufferFormat,
             this->getType().getFieldDesc(BufferFormatFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleBufferFormat   (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfBufferFormat,
             this->getType().getFieldDesc(BufferFormatFieldId),
             this));


    editSField(BufferFormatFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleDomeRadius      (void) const
{
    SFReal64::GetHandlePtr returnValue(
        new  SFReal64::GetHandle(
             &_sfDomeRadius,
             this->getType().getFieldDesc(DomeRadiusFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleDomeRadius     (void)
{
    SFReal64::EditHandlePtr returnValue(
        new  SFReal64::EditHandle(
             &_sfDomeRadius,
             this->getType().getFieldDesc(DomeRadiusFieldId),
             this));


    editSField(DomeRadiusFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleMirrorRadius    (void) const
{
    SFReal64::GetHandlePtr returnValue(
        new  SFReal64::GetHandle(
             &_sfMirrorRadius,
             this->getType().getFieldDesc(MirrorRadiusFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleMirrorRadius   (void)
{
    SFReal64::EditHandlePtr returnValue(
        new  SFReal64::EditHandle(
             &_sfMirrorRadius,
             this->getType().getFieldDesc(MirrorRadiusFieldId),
             this));


    editSField(MirrorRadiusFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleMirrorPos       (void) const
{
    SFVec3d::GetHandlePtr returnValue(
        new  SFVec3d::GetHandle(
             &_sfMirrorPos,
             this->getType().getFieldDesc(MirrorPosFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleMirrorPos      (void)
{
    SFVec3d::EditHandlePtr returnValue(
        new  SFVec3d::EditHandle(
             &_sfMirrorPos,
             this->getType().getFieldDesc(MirrorPosFieldId),
             this));


    editSField(MirrorPosFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleProjectorPos    (void) const
{
    SFVec3d::GetHandlePtr returnValue(
        new  SFVec3d::GetHandle(
             &_sfProjectorPos,
             this->getType().getFieldDesc(ProjectorPosFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleProjectorPos   (void)
{
    SFVec3d::EditHandlePtr returnValue(
        new  SFVec3d::EditHandle(
             &_sfProjectorPos,
             this->getType().getFieldDesc(ProjectorPosFieldId),
             this));


    editSField(ProjectorPosFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleAspectRatio     (void) const
{
    SFReal64::GetHandlePtr returnValue(
        new  SFReal64::GetHandle(
             &_sfAspectRatio,
             this->getType().getFieldDesc(AspectRatioFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleAspectRatio    (void)
{
    SFReal64::EditHandlePtr returnValue(
        new  SFReal64::EditHandle(
             &_sfAspectRatio,
             this->getType().getFieldDesc(AspectRatioFieldId),
             this));


    editSField(AspectRatioFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleThrowDist       (void) const
{
    SFReal64::GetHandlePtr returnValue(
        new  SFReal64::GetHandle(
             &_sfThrowDist,
             this->getType().getFieldDesc(ThrowDistFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleThrowDist      (void)
{
    SFReal64::EditHandlePtr returnValue(
        new  SFReal64::EditHandle(
             &_sfThrowDist,
             this->getType().getFieldDesc(ThrowDistFieldId),
             this));


    editSField(ThrowDistFieldMask);

    return returnValue;
}

GetFieldHandlePtr FishEyeProjectorBase::getHandleShowMesh        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfShowMesh,
             this->getType().getFieldDesc(ShowMeshFieldId),
             const_cast<FishEyeProjectorBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr FishEyeProjectorBase::editHandleShowMesh       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfShowMesh,
             this->getType().getFieldDesc(ShowMeshFieldId),
             this));


    editSField(ShowMeshFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void FishEyeProjectorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    FishEyeProjector *pThis = static_cast<FishEyeProjector *>(this);

    pThis->execSync(static_cast<FishEyeProjector *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *FishEyeProjectorBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    FishEyeProjector *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const FishEyeProjector *>(pRefAspect),
                  dynamic_cast<const FishEyeProjector *>(this));

    return returnValue;
}
#endif

void FishEyeProjectorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<FishEyeProjector *>(this)->clearGeometries();


}


OSG_END_NAMESPACE
