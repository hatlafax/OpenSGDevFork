/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Alexander Lang                                                   *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DepthPeelingStage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGDepthPeelingStageBase.h"
#include "OSGDepthPeelingStage.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DepthPeelingStage
    The DepthPeelingStage core provides Order-Independent Transparency via the Depth-Peeling algorithm. 
    It is based on the paper "Order Independent Transparency with Dual Depth Peeling" and the provided code 
    by Louis Bavoil.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt32          DepthPeelingStageBase::_sfNumPasses
    The number of the geometry render passes
*/

/*! \var UInt32          DepthPeelingStageBase::_sfDepthTexUnit
    The texture unit that can be used by the stage for binding the depth texture
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<DepthPeelingStage *, nsOSG>::_type(
    "DepthPeelingStagePtr", 
    "StagePtr", 
    DepthPeelingStage::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(DepthPeelingStage *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DepthPeelingStageBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "NumPasses",
        "The number of the geometry render passes\n",
        NumPassesFieldId, NumPassesFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStage::editHandleNumPasses),
        static_cast<FieldGetMethodSig >(&DepthPeelingStage::getHandleNumPasses));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "DepthTexUnit",
        "The texture unit that can be used by the stage for binding the depth texture\n",
        DepthTexUnitFieldId, DepthTexUnitFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStage::editHandleDepthTexUnit),
        static_cast<FieldGetMethodSig >(&DepthPeelingStage::getHandleDepthTexUnit));

    oType.addInitialDesc(pDesc);
}


DepthPeelingStageBase::TypeObject DepthPeelingStageBase::_type(
    DepthPeelingStageBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&DepthPeelingStageBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&DepthPeelingStage::initMethod),
    reinterpret_cast<ExitContainerF>(&DepthPeelingStage::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&DepthPeelingStage::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"DepthPeelingStage\"\n"
    "    parent=\"Stage\"\n"
    "    library=\"EffectGroups\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    "    authors=\"Alexander Lang\"\n"
    "    >\n"
    "    The DepthPeelingStage core provides Order-Independent Transparency via the Depth-Peeling algorithm. \n"
    "    It is based on the paper \"Order Independent Transparency with Dual Depth Peeling\" and the provided code \n"
    "    by Louis Bavoil.\n"
    "    <Field\n"
    "        name=\"NumPasses\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"4\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    The number of the geometry render passes\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"DepthTexUnit\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    The texture unit that can be used by the stage for binding the depth texture\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "The DepthPeelingStage core provides Order-Independent Transparency via the Depth-Peeling algorithm. \n"
    "It is based on the paper \"Order Independent Transparency with Dual Depth Peeling\" and the provided code \n"
    "by Louis Bavoil.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DepthPeelingStageBase::getType(void)
{
    return _type;
}

const FieldContainerType &DepthPeelingStageBase::getType(void) const
{
    return _type;
}

UInt32 DepthPeelingStageBase::getContainerSize(void) const
{
    return sizeof(DepthPeelingStage);
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *DepthPeelingStageBase::editSFNumPasses(void)
{
    editSField(NumPassesFieldMask);

    return &_sfNumPasses;
}

const SFUInt32 *DepthPeelingStageBase::getSFNumPasses(void) const
{
    return &_sfNumPasses;
}


SFUInt32 *DepthPeelingStageBase::editSFDepthTexUnit(void)
{
    editSField(DepthTexUnitFieldMask);

    return &_sfDepthTexUnit;
}

const SFUInt32 *DepthPeelingStageBase::getSFDepthTexUnit(void) const
{
    return &_sfDepthTexUnit;
}






/*------------------------------ access -----------------------------------*/

SizeT DepthPeelingStageBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (NumPassesFieldMask & whichField))
    {
        returnValue += _sfNumPasses.getBinSize();
    }
    if(FieldBits::NoField != (DepthTexUnitFieldMask & whichField))
    {
        returnValue += _sfDepthTexUnit.getBinSize();
    }

    return returnValue;
}

void DepthPeelingStageBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (NumPassesFieldMask & whichField))
    {
        _sfNumPasses.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DepthTexUnitFieldMask & whichField))
    {
        _sfDepthTexUnit.copyToBin(pMem);
    }
}

void DepthPeelingStageBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (NumPassesFieldMask & whichField))
    {
        editSField(NumPassesFieldMask);
        _sfNumPasses.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DepthTexUnitFieldMask & whichField))
    {
        editSField(DepthTexUnitFieldMask);
        _sfDepthTexUnit.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DepthPeelingStageTransitPtr DepthPeelingStageBase::createLocal(BitVector bFlags)
{
    DepthPeelingStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<DepthPeelingStage>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
DepthPeelingStageTransitPtr DepthPeelingStageBase::createDependent(BitVector bFlags)
{
    DepthPeelingStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<DepthPeelingStage>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
DepthPeelingStageTransitPtr DepthPeelingStageBase::create(void)
{
    DepthPeelingStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<DepthPeelingStage>(tmpPtr);
    }

    return fc;
}

DepthPeelingStage *DepthPeelingStageBase::createEmptyLocal(BitVector bFlags)
{
    DepthPeelingStage *returnValue;

    newPtr<DepthPeelingStage>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
DepthPeelingStage *DepthPeelingStageBase::createEmpty(void)
{
    DepthPeelingStage *returnValue;

    newPtr<DepthPeelingStage>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr DepthPeelingStageBase::shallowCopyLocal(
    BitVector bFlags) const
{
    DepthPeelingStage *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DepthPeelingStage *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr DepthPeelingStageBase::shallowCopyDependent(
    BitVector bFlags) const
{
    DepthPeelingStage *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DepthPeelingStage *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr DepthPeelingStageBase::shallowCopy(void) const
{
    DepthPeelingStage *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const DepthPeelingStage *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

DepthPeelingStageBase::DepthPeelingStageBase(void) :
    Inherited(),
    _sfNumPasses              (UInt32(4)),
    _sfDepthTexUnit           (UInt32(0))
{
}

DepthPeelingStageBase::DepthPeelingStageBase(const DepthPeelingStageBase &source) :
    Inherited(source),
    _sfNumPasses              (source._sfNumPasses              ),
    _sfDepthTexUnit           (source._sfDepthTexUnit           )
{
}


/*-------------------------- destructors ----------------------------------*/

DepthPeelingStageBase::~DepthPeelingStageBase(void)
{
}


GetFieldHandlePtr DepthPeelingStageBase::getHandleNumPasses       (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfNumPasses,
             this->getType().getFieldDesc(NumPassesFieldId),
             const_cast<DepthPeelingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageBase::editHandleNumPasses      (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfNumPasses,
             this->getType().getFieldDesc(NumPassesFieldId),
             this));


    editSField(NumPassesFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageBase::getHandleDepthTexUnit    (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfDepthTexUnit,
             this->getType().getFieldDesc(DepthTexUnitFieldId),
             const_cast<DepthPeelingStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageBase::editHandleDepthTexUnit   (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfDepthTexUnit,
             this->getType().getFieldDesc(DepthTexUnitFieldId),
             this));


    editSField(DepthTexUnitFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DepthPeelingStageBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DepthPeelingStage *pThis = static_cast<DepthPeelingStage *>(this);

    pThis->execSync(static_cast<DepthPeelingStage *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *DepthPeelingStageBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    DepthPeelingStage *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DepthPeelingStage *>(pRefAspect),
                  dynamic_cast<const DepthPeelingStage *>(this));

    return returnValue;
}
#endif

void DepthPeelingStageBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
