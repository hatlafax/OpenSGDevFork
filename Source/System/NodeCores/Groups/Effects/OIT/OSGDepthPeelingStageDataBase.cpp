/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: Alexander Lang                                                   *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DepthPeelingStageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGBackground.h"              // Background Class
#include "OSGFrameBufferObject.h"       // PeelPingFBO Class
#include "OSGChunkMaterial.h"           // BlendMaterial Class
#include "OSGDepthChunk.h"              // DepthChunk Class
#include "OSGShaderProgramVariableChunk.h" // SpvIsPeelChunk Class

#include "OSGDepthPeelingStageDataBase.h"
#include "OSGDepthPeelingStageData.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DepthPeelingStageData
    Data used for rendering by the Depth Peeling effect stage
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Int32           DepthPeelingStageDataBase::_sfWidth
    
*/

/*! \var Int32           DepthPeelingStageDataBase::_sfHeight
    
*/

/*! \var Background *    DepthPeelingStageDataBase::_sfBackground
    
*/

/*! \var FrameBufferObject * DepthPeelingStageDataBase::_sfPeelPingFBO
    
*/

/*! \var FrameBufferObject * DepthPeelingStageDataBase::_sfPeelPongFBO
    
*/

/*! \var FrameBufferObject * DepthPeelingStageDataBase::_sfBlendFBO
    
*/

/*! \var ChunkMaterial * DepthPeelingStageDataBase::_sfBlendMaterial
    
*/

/*! \var ChunkMaterial * DepthPeelingStageDataBase::_sfBlendFinalMaterial
    
*/

/*! \var ChunkMaterial * DepthPeelingStageDataBase::_sfPeelPingMaterial
    
*/

/*! \var ChunkMaterial * DepthPeelingStageDataBase::_sfPeelPongMaterial
    
*/

/*! \var DepthChunk *    DepthPeelingStageDataBase::_sfDepthChunk
    
*/

/*! \var ShaderProgramVariableChunk * DepthPeelingStageDataBase::_sfSpvIsPeelChunk
    
*/

/*! \var ShaderProgramVariableChunk * DepthPeelingStageDataBase::_sfSpvIsInitialChunk
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<DepthPeelingStageData *, nsOSG>::_type(
    "DepthPeelingStageDataPtr", 
    "StageDataPtr", 
    DepthPeelingStageData::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(DepthPeelingStageData *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void DepthPeelingStageDataBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "width",
        "",
        WidthFieldId, WidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandleWidth),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "height",
        "",
        HeightFieldId, HeightFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandleHeight),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandleHeight));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBackgroundPtr::Description(
        SFUnrecBackgroundPtr::getClassType(),
        "background",
        "",
        BackgroundFieldId, BackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandleBackground),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandleBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "peelPingFBO",
        "",
        PeelPingFBOFieldId, PeelPingFBOFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandlePeelPingFBO),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandlePeelPingFBO));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "peelPongFBO",
        "",
        PeelPongFBOFieldId, PeelPongFBOFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandlePeelPongFBO),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandlePeelPongFBO));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFrameBufferObjectPtr::Description(
        SFUnrecFrameBufferObjectPtr::getClassType(),
        "blendFBO",
        "",
        BlendFBOFieldId, BlendFBOFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandleBlendFBO),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandleBlendFBO));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "blendMaterial",
        "",
        BlendMaterialFieldId, BlendMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandleBlendMaterial),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandleBlendMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "blendFinalMaterial",
        "",
        BlendFinalMaterialFieldId, BlendFinalMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandleBlendFinalMaterial),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandleBlendFinalMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "peelPingMaterial",
        "",
        PeelPingMaterialFieldId, PeelPingMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandlePeelPingMaterial),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandlePeelPingMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChunkMaterialPtr::Description(
        SFUnrecChunkMaterialPtr::getClassType(),
        "peelPongMaterial",
        "",
        PeelPongMaterialFieldId, PeelPongMaterialFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandlePeelPongMaterial),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandlePeelPongMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecDepthChunkPtr::Description(
        SFUnrecDepthChunkPtr::getClassType(),
        "depthChunk",
        "",
        DepthChunkFieldId, DepthChunkFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandleDepthChunk),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandleDepthChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecShaderProgramVariableChunkPtr::Description(
        SFUnrecShaderProgramVariableChunkPtr::getClassType(),
        "spvIsPeelChunk",
        "",
        SpvIsPeelChunkFieldId, SpvIsPeelChunkFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandleSpvIsPeelChunk),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandleSpvIsPeelChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecShaderProgramVariableChunkPtr::Description(
        SFUnrecShaderProgramVariableChunkPtr::getClassType(),
        "spvIsInitialChunk",
        "",
        SpvIsInitialChunkFieldId, SpvIsInitialChunkFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&DepthPeelingStageData::editHandleSpvIsInitialChunk),
        static_cast<FieldGetMethodSig >(&DepthPeelingStageData::getHandleSpvIsInitialChunk));

    oType.addInitialDesc(pDesc);
}


DepthPeelingStageDataBase::TypeObject DepthPeelingStageDataBase::_type(
    DepthPeelingStageDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&DepthPeelingStageDataBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&DepthPeelingStageData::initMethod),
    reinterpret_cast<ExitContainerF>(&DepthPeelingStageData::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&DepthPeelingStageData::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"DepthPeelingStageData\"\n"
    "    parent=\"StageData\"\n"
    "    library=\"EffectGroups\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    docGroupBase=\"GrpEffectsGroupsOIT\"\n"
    "    authors=\"Alexander Lang\"\n"
    "    >\n"
    "    Data used for rendering by the Depth Peeling effect stage\n"
    "    <Field\n"
    "        name=\"width\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"height\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"background\"\n"
    "        type=\"BackgroundPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"peelPingFBO\"\n"
    "        type=\"FrameBufferObjectPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"peelPongFBO\"\n"
    "        type=\"FrameBufferObjectPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"blendFBO\"\n"
    "        type=\"FrameBufferObjectPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"blendMaterial\"\n"
    "        type=\"ChunkMaterialPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"blendFinalMaterial\"\n"
    "        type=\"ChunkMaterialPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"peelPingMaterial\"\n"
    "        type=\"ChunkMaterialPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"peelPongMaterial\"\n"
    "        type=\"ChunkMaterialPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "        <Field\n"
    "        name=\"depthChunk\"\n"
    "        type=\"DepthChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "        <Field\n"
    "        name=\"spvIsPeelChunk\"\n"
    "        type=\"ShaderProgramVariableChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "        <Field\n"
    "        name=\"spvIsInitialChunk\"\n"
    "        type=\"ShaderProgramVariableChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "Data used for rendering by the Depth Peeling effect stage\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DepthPeelingStageDataBase::getType(void)
{
    return _type;
}

const FieldContainerType &DepthPeelingStageDataBase::getType(void) const
{
    return _type;
}

UInt32 DepthPeelingStageDataBase::getContainerSize(void) const
{
    return sizeof(DepthPeelingStageData);
}

/*------------------------- decorator get ------------------------------*/


SFInt32 *DepthPeelingStageDataBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFInt32 *DepthPeelingStageDataBase::getSFWidth(void) const
{
    return &_sfWidth;
}


SFInt32 *DepthPeelingStageDataBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFInt32 *DepthPeelingStageDataBase::getSFHeight(void) const
{
    return &_sfHeight;
}


//! Get the DepthPeelingStageData::_sfBackground field.
const SFUnrecBackgroundPtr *DepthPeelingStageDataBase::getSFBackground(void) const
{
    return &_sfBackground;
}

SFUnrecBackgroundPtr *DepthPeelingStageDataBase::editSFBackground     (void)
{
    editSField(BackgroundFieldMask);

    return &_sfBackground;
}

//! Get the value of the DepthPeelingStageData::_sfBackground field.
Background * DepthPeelingStageDataBase::getBackground(void) const
{
    return _sfBackground.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfBackground field.
void DepthPeelingStageDataBase::setBackground(Background * const value)
{
    editSField(BackgroundFieldMask);

    _sfBackground.setValue(value);
}


//! Get the DepthPeelingStageData::_sfPeelPingFBO field.
const SFUnrecFrameBufferObjectPtr *DepthPeelingStageDataBase::getSFPeelPingFBO(void) const
{
    return &_sfPeelPingFBO;
}

SFUnrecFrameBufferObjectPtr *DepthPeelingStageDataBase::editSFPeelPingFBO    (void)
{
    editSField(PeelPingFBOFieldMask);

    return &_sfPeelPingFBO;
}

//! Get the value of the DepthPeelingStageData::_sfPeelPingFBO field.
FrameBufferObject * DepthPeelingStageDataBase::getPeelPingFBO(void) const
{
    return _sfPeelPingFBO.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfPeelPingFBO field.
void DepthPeelingStageDataBase::setPeelPingFBO(FrameBufferObject * const value)
{
    editSField(PeelPingFBOFieldMask);

    _sfPeelPingFBO.setValue(value);
}


//! Get the DepthPeelingStageData::_sfPeelPongFBO field.
const SFUnrecFrameBufferObjectPtr *DepthPeelingStageDataBase::getSFPeelPongFBO(void) const
{
    return &_sfPeelPongFBO;
}

SFUnrecFrameBufferObjectPtr *DepthPeelingStageDataBase::editSFPeelPongFBO    (void)
{
    editSField(PeelPongFBOFieldMask);

    return &_sfPeelPongFBO;
}

//! Get the value of the DepthPeelingStageData::_sfPeelPongFBO field.
FrameBufferObject * DepthPeelingStageDataBase::getPeelPongFBO(void) const
{
    return _sfPeelPongFBO.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfPeelPongFBO field.
void DepthPeelingStageDataBase::setPeelPongFBO(FrameBufferObject * const value)
{
    editSField(PeelPongFBOFieldMask);

    _sfPeelPongFBO.setValue(value);
}


//! Get the DepthPeelingStageData::_sfBlendFBO field.
const SFUnrecFrameBufferObjectPtr *DepthPeelingStageDataBase::getSFBlendFBO(void) const
{
    return &_sfBlendFBO;
}

SFUnrecFrameBufferObjectPtr *DepthPeelingStageDataBase::editSFBlendFBO       (void)
{
    editSField(BlendFBOFieldMask);

    return &_sfBlendFBO;
}

//! Get the value of the DepthPeelingStageData::_sfBlendFBO field.
FrameBufferObject * DepthPeelingStageDataBase::getBlendFBO(void) const
{
    return _sfBlendFBO.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfBlendFBO field.
void DepthPeelingStageDataBase::setBlendFBO(FrameBufferObject * const value)
{
    editSField(BlendFBOFieldMask);

    _sfBlendFBO.setValue(value);
}


//! Get the DepthPeelingStageData::_sfBlendMaterial field.
const SFUnrecChunkMaterialPtr *DepthPeelingStageDataBase::getSFBlendMaterial(void) const
{
    return &_sfBlendMaterial;
}

SFUnrecChunkMaterialPtr *DepthPeelingStageDataBase::editSFBlendMaterial  (void)
{
    editSField(BlendMaterialFieldMask);

    return &_sfBlendMaterial;
}

//! Get the value of the DepthPeelingStageData::_sfBlendMaterial field.
ChunkMaterial * DepthPeelingStageDataBase::getBlendMaterial(void) const
{
    return _sfBlendMaterial.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfBlendMaterial field.
void DepthPeelingStageDataBase::setBlendMaterial(ChunkMaterial * const value)
{
    editSField(BlendMaterialFieldMask);

    _sfBlendMaterial.setValue(value);
}


//! Get the DepthPeelingStageData::_sfBlendFinalMaterial field.
const SFUnrecChunkMaterialPtr *DepthPeelingStageDataBase::getSFBlendFinalMaterial(void) const
{
    return &_sfBlendFinalMaterial;
}

SFUnrecChunkMaterialPtr *DepthPeelingStageDataBase::editSFBlendFinalMaterial(void)
{
    editSField(BlendFinalMaterialFieldMask);

    return &_sfBlendFinalMaterial;
}

//! Get the value of the DepthPeelingStageData::_sfBlendFinalMaterial field.
ChunkMaterial * DepthPeelingStageDataBase::getBlendFinalMaterial(void) const
{
    return _sfBlendFinalMaterial.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfBlendFinalMaterial field.
void DepthPeelingStageDataBase::setBlendFinalMaterial(ChunkMaterial * const value)
{
    editSField(BlendFinalMaterialFieldMask);

    _sfBlendFinalMaterial.setValue(value);
}


//! Get the DepthPeelingStageData::_sfPeelPingMaterial field.
const SFUnrecChunkMaterialPtr *DepthPeelingStageDataBase::getSFPeelPingMaterial(void) const
{
    return &_sfPeelPingMaterial;
}

SFUnrecChunkMaterialPtr *DepthPeelingStageDataBase::editSFPeelPingMaterial(void)
{
    editSField(PeelPingMaterialFieldMask);

    return &_sfPeelPingMaterial;
}

//! Get the value of the DepthPeelingStageData::_sfPeelPingMaterial field.
ChunkMaterial * DepthPeelingStageDataBase::getPeelPingMaterial(void) const
{
    return _sfPeelPingMaterial.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfPeelPingMaterial field.
void DepthPeelingStageDataBase::setPeelPingMaterial(ChunkMaterial * const value)
{
    editSField(PeelPingMaterialFieldMask);

    _sfPeelPingMaterial.setValue(value);
}


//! Get the DepthPeelingStageData::_sfPeelPongMaterial field.
const SFUnrecChunkMaterialPtr *DepthPeelingStageDataBase::getSFPeelPongMaterial(void) const
{
    return &_sfPeelPongMaterial;
}

SFUnrecChunkMaterialPtr *DepthPeelingStageDataBase::editSFPeelPongMaterial(void)
{
    editSField(PeelPongMaterialFieldMask);

    return &_sfPeelPongMaterial;
}

//! Get the value of the DepthPeelingStageData::_sfPeelPongMaterial field.
ChunkMaterial * DepthPeelingStageDataBase::getPeelPongMaterial(void) const
{
    return _sfPeelPongMaterial.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfPeelPongMaterial field.
void DepthPeelingStageDataBase::setPeelPongMaterial(ChunkMaterial * const value)
{
    editSField(PeelPongMaterialFieldMask);

    _sfPeelPongMaterial.setValue(value);
}


//! Get the DepthPeelingStageData::_sfDepthChunk field.
const SFUnrecDepthChunkPtr *DepthPeelingStageDataBase::getSFDepthChunk(void) const
{
    return &_sfDepthChunk;
}

SFUnrecDepthChunkPtr *DepthPeelingStageDataBase::editSFDepthChunk     (void)
{
    editSField(DepthChunkFieldMask);

    return &_sfDepthChunk;
}

//! Get the value of the DepthPeelingStageData::_sfDepthChunk field.
DepthChunk * DepthPeelingStageDataBase::getDepthChunk(void) const
{
    return _sfDepthChunk.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfDepthChunk field.
void DepthPeelingStageDataBase::setDepthChunk(DepthChunk * const value)
{
    editSField(DepthChunkFieldMask);

    _sfDepthChunk.setValue(value);
}


//! Get the DepthPeelingStageData::_sfSpvIsPeelChunk field.
const SFUnrecShaderProgramVariableChunkPtr *DepthPeelingStageDataBase::getSFSpvIsPeelChunk(void) const
{
    return &_sfSpvIsPeelChunk;
}

SFUnrecShaderProgramVariableChunkPtr *DepthPeelingStageDataBase::editSFSpvIsPeelChunk (void)
{
    editSField(SpvIsPeelChunkFieldMask);

    return &_sfSpvIsPeelChunk;
}

//! Get the value of the DepthPeelingStageData::_sfSpvIsPeelChunk field.
ShaderProgramVariableChunk * DepthPeelingStageDataBase::getSpvIsPeelChunk(void) const
{
    return _sfSpvIsPeelChunk.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfSpvIsPeelChunk field.
void DepthPeelingStageDataBase::setSpvIsPeelChunk(ShaderProgramVariableChunk * const value)
{
    editSField(SpvIsPeelChunkFieldMask);

    _sfSpvIsPeelChunk.setValue(value);
}


//! Get the DepthPeelingStageData::_sfSpvIsInitialChunk field.
const SFUnrecShaderProgramVariableChunkPtr *DepthPeelingStageDataBase::getSFSpvIsInitialChunk(void) const
{
    return &_sfSpvIsInitialChunk;
}

SFUnrecShaderProgramVariableChunkPtr *DepthPeelingStageDataBase::editSFSpvIsInitialChunk(void)
{
    editSField(SpvIsInitialChunkFieldMask);

    return &_sfSpvIsInitialChunk;
}

//! Get the value of the DepthPeelingStageData::_sfSpvIsInitialChunk field.
ShaderProgramVariableChunk * DepthPeelingStageDataBase::getSpvIsInitialChunk(void) const
{
    return _sfSpvIsInitialChunk.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfSpvIsInitialChunk field.
void DepthPeelingStageDataBase::setSpvIsInitialChunk(ShaderProgramVariableChunk * const value)
{
    editSField(SpvIsInitialChunkFieldMask);

    _sfSpvIsInitialChunk.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT DepthPeelingStageDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        returnValue += _sfBackground.getBinSize();
    }
    if(FieldBits::NoField != (PeelPingFBOFieldMask & whichField))
    {
        returnValue += _sfPeelPingFBO.getBinSize();
    }
    if(FieldBits::NoField != (PeelPongFBOFieldMask & whichField))
    {
        returnValue += _sfPeelPongFBO.getBinSize();
    }
    if(FieldBits::NoField != (BlendFBOFieldMask & whichField))
    {
        returnValue += _sfBlendFBO.getBinSize();
    }
    if(FieldBits::NoField != (BlendMaterialFieldMask & whichField))
    {
        returnValue += _sfBlendMaterial.getBinSize();
    }
    if(FieldBits::NoField != (BlendFinalMaterialFieldMask & whichField))
    {
        returnValue += _sfBlendFinalMaterial.getBinSize();
    }
    if(FieldBits::NoField != (PeelPingMaterialFieldMask & whichField))
    {
        returnValue += _sfPeelPingMaterial.getBinSize();
    }
    if(FieldBits::NoField != (PeelPongMaterialFieldMask & whichField))
    {
        returnValue += _sfPeelPongMaterial.getBinSize();
    }
    if(FieldBits::NoField != (DepthChunkFieldMask & whichField))
    {
        returnValue += _sfDepthChunk.getBinSize();
    }
    if(FieldBits::NoField != (SpvIsPeelChunkFieldMask & whichField))
    {
        returnValue += _sfSpvIsPeelChunk.getBinSize();
    }
    if(FieldBits::NoField != (SpvIsInitialChunkFieldMask & whichField))
    {
        returnValue += _sfSpvIsInitialChunk.getBinSize();
    }

    return returnValue;
}

void DepthPeelingStageDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _sfBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PeelPingFBOFieldMask & whichField))
    {
        _sfPeelPingFBO.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PeelPongFBOFieldMask & whichField))
    {
        _sfPeelPongFBO.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlendFBOFieldMask & whichField))
    {
        _sfBlendFBO.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlendMaterialFieldMask & whichField))
    {
        _sfBlendMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlendFinalMaterialFieldMask & whichField))
    {
        _sfBlendFinalMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PeelPingMaterialFieldMask & whichField))
    {
        _sfPeelPingMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PeelPongMaterialFieldMask & whichField))
    {
        _sfPeelPongMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DepthChunkFieldMask & whichField))
    {
        _sfDepthChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SpvIsPeelChunkFieldMask & whichField))
    {
        _sfSpvIsPeelChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SpvIsInitialChunkFieldMask & whichField))
    {
        _sfSpvIsInitialChunk.copyToBin(pMem);
    }
}

void DepthPeelingStageDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        editSField(WidthFieldMask);
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        editSField(HeightFieldMask);
        _sfHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        editSField(BackgroundFieldMask);
        _sfBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PeelPingFBOFieldMask & whichField))
    {
        editSField(PeelPingFBOFieldMask);
        _sfPeelPingFBO.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PeelPongFBOFieldMask & whichField))
    {
        editSField(PeelPongFBOFieldMask);
        _sfPeelPongFBO.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlendFBOFieldMask & whichField))
    {
        editSField(BlendFBOFieldMask);
        _sfBlendFBO.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlendMaterialFieldMask & whichField))
    {
        editSField(BlendMaterialFieldMask);
        _sfBlendMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlendFinalMaterialFieldMask & whichField))
    {
        editSField(BlendFinalMaterialFieldMask);
        _sfBlendFinalMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PeelPingMaterialFieldMask & whichField))
    {
        editSField(PeelPingMaterialFieldMask);
        _sfPeelPingMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PeelPongMaterialFieldMask & whichField))
    {
        editSField(PeelPongMaterialFieldMask);
        _sfPeelPongMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DepthChunkFieldMask & whichField))
    {
        editSField(DepthChunkFieldMask);
        _sfDepthChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SpvIsPeelChunkFieldMask & whichField))
    {
        editSField(SpvIsPeelChunkFieldMask);
        _sfSpvIsPeelChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SpvIsInitialChunkFieldMask & whichField))
    {
        editSField(SpvIsInitialChunkFieldMask);
        _sfSpvIsInitialChunk.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DepthPeelingStageDataTransitPtr DepthPeelingStageDataBase::createLocal(BitVector bFlags)
{
    DepthPeelingStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<DepthPeelingStageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
DepthPeelingStageDataTransitPtr DepthPeelingStageDataBase::createDependent(BitVector bFlags)
{
    DepthPeelingStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<DepthPeelingStageData>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
DepthPeelingStageDataTransitPtr DepthPeelingStageDataBase::create(void)
{
    DepthPeelingStageDataTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<DepthPeelingStageData>(tmpPtr);
    }

    return fc;
}

DepthPeelingStageData *DepthPeelingStageDataBase::createEmptyLocal(BitVector bFlags)
{
    DepthPeelingStageData *returnValue;

    newPtr<DepthPeelingStageData>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
DepthPeelingStageData *DepthPeelingStageDataBase::createEmpty(void)
{
    DepthPeelingStageData *returnValue;

    newPtr<DepthPeelingStageData>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr DepthPeelingStageDataBase::shallowCopyLocal(
    BitVector bFlags) const
{
    DepthPeelingStageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DepthPeelingStageData *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr DepthPeelingStageDataBase::shallowCopyDependent(
    BitVector bFlags) const
{
    DepthPeelingStageData *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const DepthPeelingStageData *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr DepthPeelingStageDataBase::shallowCopy(void) const
{
    DepthPeelingStageData *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const DepthPeelingStageData *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

DepthPeelingStageDataBase::DepthPeelingStageDataBase(void) :
    Inherited(),
    _sfWidth                  (Int32(0)),
    _sfHeight                 (Int32(0)),
    _sfBackground             (NULL),
    _sfPeelPingFBO            (NULL),
    _sfPeelPongFBO            (NULL),
    _sfBlendFBO               (NULL),
    _sfBlendMaterial          (NULL),
    _sfBlendFinalMaterial     (NULL),
    _sfPeelPingMaterial       (NULL),
    _sfPeelPongMaterial       (NULL),
    _sfDepthChunk             (NULL),
    _sfSpvIsPeelChunk         (NULL),
    _sfSpvIsInitialChunk      (NULL)
{
}

DepthPeelingStageDataBase::DepthPeelingStageDataBase(const DepthPeelingStageDataBase &source) :
    Inherited(source),
    _sfWidth                  (source._sfWidth                  ),
    _sfHeight                 (source._sfHeight                 ),
    _sfBackground             (NULL),
    _sfPeelPingFBO            (NULL),
    _sfPeelPongFBO            (NULL),
    _sfBlendFBO               (NULL),
    _sfBlendMaterial          (NULL),
    _sfBlendFinalMaterial     (NULL),
    _sfPeelPingMaterial       (NULL),
    _sfPeelPongMaterial       (NULL),
    _sfDepthChunk             (NULL),
    _sfSpvIsPeelChunk         (NULL),
    _sfSpvIsInitialChunk      (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

DepthPeelingStageDataBase::~DepthPeelingStageDataBase(void)
{
}

void DepthPeelingStageDataBase::onCreate(const DepthPeelingStageData *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        DepthPeelingStageData *pThis = static_cast<DepthPeelingStageData *>(this);

        pThis->setBackground(source->getBackground());

        pThis->setPeelPingFBO(source->getPeelPingFBO());

        pThis->setPeelPongFBO(source->getPeelPongFBO());

        pThis->setBlendFBO(source->getBlendFBO());

        pThis->setBlendMaterial(source->getBlendMaterial());

        pThis->setBlendFinalMaterial(source->getBlendFinalMaterial());

        pThis->setPeelPingMaterial(source->getPeelPingMaterial());

        pThis->setPeelPongMaterial(source->getPeelPongMaterial());

        pThis->setDepthChunk(source->getDepthChunk());

        pThis->setSpvIsPeelChunk(source->getSpvIsPeelChunk());

        pThis->setSpvIsInitialChunk(source->getSpvIsInitialChunk());
    }
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandleWidth           (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandleWidth          (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             this));


    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandleHeight          (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandleHeight         (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             this));


    editSField(HeightFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandleBackground      (void) const
{
    SFUnrecBackgroundPtr::GetHandlePtr returnValue(
        new  SFUnrecBackgroundPtr::GetHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandleBackground     (void)
{
    SFUnrecBackgroundPtr::EditHandlePtr returnValue(
        new  SFUnrecBackgroundPtr::EditHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setBackground,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(BackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandlePeelPingFBO     (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfPeelPingFBO,
             this->getType().getFieldDesc(PeelPingFBOFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandlePeelPingFBO    (void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfPeelPingFBO,
             this->getType().getFieldDesc(PeelPingFBOFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setPeelPingFBO,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(PeelPingFBOFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandlePeelPongFBO     (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfPeelPongFBO,
             this->getType().getFieldDesc(PeelPongFBOFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandlePeelPongFBO    (void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfPeelPongFBO,
             this->getType().getFieldDesc(PeelPongFBOFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setPeelPongFBO,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(PeelPongFBOFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandleBlendFBO        (void) const
{
    SFUnrecFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::GetHandle(
             &_sfBlendFBO,
             this->getType().getFieldDesc(BlendFBOFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandleBlendFBO       (void)
{
    SFUnrecFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFUnrecFrameBufferObjectPtr::EditHandle(
             &_sfBlendFBO,
             this->getType().getFieldDesc(BlendFBOFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setBlendFBO,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(BlendFBOFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandleBlendMaterial   (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfBlendMaterial,
             this->getType().getFieldDesc(BlendMaterialFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandleBlendMaterial  (void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfBlendMaterial,
             this->getType().getFieldDesc(BlendMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setBlendMaterial,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(BlendMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandleBlendFinalMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfBlendFinalMaterial,
             this->getType().getFieldDesc(BlendFinalMaterialFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandleBlendFinalMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfBlendFinalMaterial,
             this->getType().getFieldDesc(BlendFinalMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setBlendFinalMaterial,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(BlendFinalMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandlePeelPingMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfPeelPingMaterial,
             this->getType().getFieldDesc(PeelPingMaterialFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandlePeelPingMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfPeelPingMaterial,
             this->getType().getFieldDesc(PeelPingMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setPeelPingMaterial,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(PeelPingMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandlePeelPongMaterial (void) const
{
    SFUnrecChunkMaterialPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::GetHandle(
             &_sfPeelPongMaterial,
             this->getType().getFieldDesc(PeelPongMaterialFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandlePeelPongMaterial(void)
{
    SFUnrecChunkMaterialPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkMaterialPtr::EditHandle(
             &_sfPeelPongMaterial,
             this->getType().getFieldDesc(PeelPongMaterialFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setPeelPongMaterial,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(PeelPongMaterialFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandleDepthChunk      (void) const
{
    SFUnrecDepthChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecDepthChunkPtr::GetHandle(
             &_sfDepthChunk,
             this->getType().getFieldDesc(DepthChunkFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandleDepthChunk     (void)
{
    SFUnrecDepthChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecDepthChunkPtr::EditHandle(
             &_sfDepthChunk,
             this->getType().getFieldDesc(DepthChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setDepthChunk,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(DepthChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandleSpvIsPeelChunk  (void) const
{
    SFUnrecShaderProgramVariableChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderProgramVariableChunkPtr::GetHandle(
             &_sfSpvIsPeelChunk,
             this->getType().getFieldDesc(SpvIsPeelChunkFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandleSpvIsPeelChunk (void)
{
    SFUnrecShaderProgramVariableChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderProgramVariableChunkPtr::EditHandle(
             &_sfSpvIsPeelChunk,
             this->getType().getFieldDesc(SpvIsPeelChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setSpvIsPeelChunk,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(SpvIsPeelChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr DepthPeelingStageDataBase::getHandleSpvIsInitialChunk (void) const
{
    SFUnrecShaderProgramVariableChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecShaderProgramVariableChunkPtr::GetHandle(
             &_sfSpvIsInitialChunk,
             this->getType().getFieldDesc(SpvIsInitialChunkFieldId),
             const_cast<DepthPeelingStageDataBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr DepthPeelingStageDataBase::editHandleSpvIsInitialChunk(void)
{
    SFUnrecShaderProgramVariableChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecShaderProgramVariableChunkPtr::EditHandle(
             &_sfSpvIsInitialChunk,
             this->getType().getFieldDesc(SpvIsInitialChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&DepthPeelingStageData::setSpvIsInitialChunk,
                    static_cast<DepthPeelingStageData *>(this), ::boost::placeholders::_1));

    editSField(SpvIsInitialChunkFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DepthPeelingStageDataBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    DepthPeelingStageData *pThis = static_cast<DepthPeelingStageData *>(this);

    pThis->execSync(static_cast<DepthPeelingStageData *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *DepthPeelingStageDataBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    DepthPeelingStageData *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DepthPeelingStageData *>(pRefAspect),
                  dynamic_cast<const DepthPeelingStageData *>(this));

    return returnValue;
}
#endif

void DepthPeelingStageDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<DepthPeelingStageData *>(this)->setBackground(NULL);

    static_cast<DepthPeelingStageData *>(this)->setPeelPingFBO(NULL);

    static_cast<DepthPeelingStageData *>(this)->setPeelPongFBO(NULL);

    static_cast<DepthPeelingStageData *>(this)->setBlendFBO(NULL);

    static_cast<DepthPeelingStageData *>(this)->setBlendMaterial(NULL);

    static_cast<DepthPeelingStageData *>(this)->setBlendFinalMaterial(NULL);

    static_cast<DepthPeelingStageData *>(this)->setPeelPingMaterial(NULL);

    static_cast<DepthPeelingStageData *>(this)->setPeelPongMaterial(NULL);

    static_cast<DepthPeelingStageData *>(this)->setDepthChunk(NULL);

    static_cast<DepthPeelingStageData *>(this)->setSpvIsPeelChunk(NULL);

    static_cast<DepthPeelingStageData *>(this)->setSpvIsInitialChunk(NULL);


}


OSG_END_NAMESPACE
