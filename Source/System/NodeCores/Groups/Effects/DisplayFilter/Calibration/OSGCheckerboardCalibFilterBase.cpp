/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CheckerboardCalibFilter!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGCheckerboardCalibFilterBase.h"
#include "OSGCheckerboardCalibFilter.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CheckerboardCalibFilter
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Color3f         CheckerboardCalibFilterBase::_sfColorBlack
    color black
*/

/*! \var Color3f         CheckerboardCalibFilterBase::_sfColorWhite
    color white
*/

/*! \var UInt32          CheckerboardCalibFilterBase::_sfResolution
    
*/

/*! \var bool            CheckerboardCalibFilterBase::_sfCenter
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<CheckerboardCalibFilter *, nsOSG>::_type(
    "CheckerboardCalibFilterPtr", 
    "CalibrationPatternFilterPtr", 
    CheckerboardCalibFilter::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(CheckerboardCalibFilter *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           CheckerboardCalibFilter *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           CheckerboardCalibFilter *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void CheckerboardCalibFilterBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFColor3f::Description(
        SFColor3f::getClassType(),
        "colorBlack",
        "color black\n",
        ColorBlackFieldId, ColorBlackFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CheckerboardCalibFilter::editHandleColorBlack),
        static_cast<FieldGetMethodSig >(&CheckerboardCalibFilter::getHandleColorBlack));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor3f::Description(
        SFColor3f::getClassType(),
        "colorWhite",
        "color white\n",
        ColorWhiteFieldId, ColorWhiteFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CheckerboardCalibFilter::editHandleColorWhite),
        static_cast<FieldGetMethodSig >(&CheckerboardCalibFilter::getHandleColorWhite));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "resolution",
        "",
        ResolutionFieldId, ResolutionFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CheckerboardCalibFilter::editHandleResolution),
        static_cast<FieldGetMethodSig >(&CheckerboardCalibFilter::getHandleResolution));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "center",
        "",
        CenterFieldId, CenterFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CheckerboardCalibFilter::editHandleCenter),
        static_cast<FieldGetMethodSig >(&CheckerboardCalibFilter::getHandleCenter));

    oType.addInitialDesc(pDesc);
}


CheckerboardCalibFilterBase::TypeObject CheckerboardCalibFilterBase::_type(
    CheckerboardCalibFilterBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&CheckerboardCalibFilterBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&CheckerboardCalibFilter::initMethod),
    reinterpret_cast<ExitContainerF>(&CheckerboardCalibFilter::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&CheckerboardCalibFilter::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"CheckerboardCalibFilter\"\n"
    "   parent=\"CalibrationPatternFilter\"\n"
    "   library=\"EffectGroups\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   docGroupBase=\"GrpEffectsGroupsDisplayFilter\"\n"
    "   >   \n"
    "\n"
    "  <Field\n"
    "     name=\"colorBlack\"\n"
    "     type=\"Color3f\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"0.f, 0.f, 0.f\"\n"
    "     >\n"
    "\tcolor black\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"colorWhite\"\n"
    "     type=\"Color3f\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"1.f, 1.f, 1.f\"\n"
    "     >\n"
    "\tcolor white\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "\t name=\"resolution\"\n"
    "\t type=\"UInt32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "     defaultValue=\"5\"\n"
    "\t >\n"
    "  </Field>\n"
    "\n"
    "  <Field\n"
    "\t name=\"center\"\n"
    "\t type=\"bool\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "     defaultValue=\"true\"\n"
    "\t >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CheckerboardCalibFilterBase::getType(void)
{
    return _type;
}

const FieldContainerType &CheckerboardCalibFilterBase::getType(void) const
{
    return _type;
}

UInt32 CheckerboardCalibFilterBase::getContainerSize(void) const
{
    return sizeof(CheckerboardCalibFilter);
}

/*------------------------- decorator get ------------------------------*/


SFColor3f *CheckerboardCalibFilterBase::editSFColorBlack(void)
{
    editSField(ColorBlackFieldMask);

    return &_sfColorBlack;
}

const SFColor3f *CheckerboardCalibFilterBase::getSFColorBlack(void) const
{
    return &_sfColorBlack;
}


SFColor3f *CheckerboardCalibFilterBase::editSFColorWhite(void)
{
    editSField(ColorWhiteFieldMask);

    return &_sfColorWhite;
}

const SFColor3f *CheckerboardCalibFilterBase::getSFColorWhite(void) const
{
    return &_sfColorWhite;
}


SFUInt32 *CheckerboardCalibFilterBase::editSFResolution(void)
{
    editSField(ResolutionFieldMask);

    return &_sfResolution;
}

const SFUInt32 *CheckerboardCalibFilterBase::getSFResolution(void) const
{
    return &_sfResolution;
}


SFBool *CheckerboardCalibFilterBase::editSFCenter(void)
{
    editSField(CenterFieldMask);

    return &_sfCenter;
}

const SFBool *CheckerboardCalibFilterBase::getSFCenter(void) const
{
    return &_sfCenter;
}






/*------------------------------ access -----------------------------------*/

SizeT CheckerboardCalibFilterBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ColorBlackFieldMask & whichField))
    {
        returnValue += _sfColorBlack.getBinSize();
    }
    if(FieldBits::NoField != (ColorWhiteFieldMask & whichField))
    {
        returnValue += _sfColorWhite.getBinSize();
    }
    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
    {
        returnValue += _sfResolution.getBinSize();
    }
    if(FieldBits::NoField != (CenterFieldMask & whichField))
    {
        returnValue += _sfCenter.getBinSize();
    }

    return returnValue;
}

void CheckerboardCalibFilterBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ColorBlackFieldMask & whichField))
    {
        _sfColorBlack.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorWhiteFieldMask & whichField))
    {
        _sfColorWhite.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
    {
        _sfResolution.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CenterFieldMask & whichField))
    {
        _sfCenter.copyToBin(pMem);
    }
}

void CheckerboardCalibFilterBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ColorBlackFieldMask & whichField))
    {
        editSField(ColorBlackFieldMask);
        _sfColorBlack.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorWhiteFieldMask & whichField))
    {
        editSField(ColorWhiteFieldMask);
        _sfColorWhite.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
    {
        editSField(ResolutionFieldMask);
        _sfResolution.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CenterFieldMask & whichField))
    {
        editSField(CenterFieldMask);
        _sfCenter.copyFromBin(pMem);
    }
}

//! create a new instance of the class
CheckerboardCalibFilterTransitPtr CheckerboardCalibFilterBase::createLocal(BitVector bFlags)
{
    CheckerboardCalibFilterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<CheckerboardCalibFilter>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
CheckerboardCalibFilterTransitPtr CheckerboardCalibFilterBase::createDependent(BitVector bFlags)
{
    CheckerboardCalibFilterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<CheckerboardCalibFilter>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
CheckerboardCalibFilterTransitPtr CheckerboardCalibFilterBase::create(void)
{
    CheckerboardCalibFilterTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<CheckerboardCalibFilter>(tmpPtr);
    }

    return fc;
}

CheckerboardCalibFilter *CheckerboardCalibFilterBase::createEmptyLocal(BitVector bFlags)
{
    CheckerboardCalibFilter *returnValue;

    newPtr<CheckerboardCalibFilter>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
CheckerboardCalibFilter *CheckerboardCalibFilterBase::createEmpty(void)
{
    CheckerboardCalibFilter *returnValue;

    newPtr<CheckerboardCalibFilter>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr CheckerboardCalibFilterBase::shallowCopyLocal(
    BitVector bFlags) const
{
    CheckerboardCalibFilter *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CheckerboardCalibFilter *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr CheckerboardCalibFilterBase::shallowCopyDependent(
    BitVector bFlags) const
{
    CheckerboardCalibFilter *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const CheckerboardCalibFilter *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr CheckerboardCalibFilterBase::shallowCopy(void) const
{
    CheckerboardCalibFilter *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const CheckerboardCalibFilter *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

CheckerboardCalibFilterBase::CheckerboardCalibFilterBase(void) :
    Inherited(),
    _sfColorBlack             (Color3f(0.f, 0.f, 0.f)),
    _sfColorWhite             (Color3f(1.f, 1.f, 1.f)),
    _sfResolution             (UInt32(5)),
    _sfCenter                 (bool(true))
{
}

CheckerboardCalibFilterBase::CheckerboardCalibFilterBase(const CheckerboardCalibFilterBase &source) :
    Inherited(source),
    _sfColorBlack             (source._sfColorBlack             ),
    _sfColorWhite             (source._sfColorWhite             ),
    _sfResolution             (source._sfResolution             ),
    _sfCenter                 (source._sfCenter                 )
{
}


/*-------------------------- destructors ----------------------------------*/

CheckerboardCalibFilterBase::~CheckerboardCalibFilterBase(void)
{
}


GetFieldHandlePtr CheckerboardCalibFilterBase::getHandleColorBlack      (void) const
{
    SFColor3f::GetHandlePtr returnValue(
        new  SFColor3f::GetHandle(
             &_sfColorBlack,
             this->getType().getFieldDesc(ColorBlackFieldId),
             const_cast<CheckerboardCalibFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CheckerboardCalibFilterBase::editHandleColorBlack     (void)
{
    SFColor3f::EditHandlePtr returnValue(
        new  SFColor3f::EditHandle(
             &_sfColorBlack,
             this->getType().getFieldDesc(ColorBlackFieldId),
             this));


    editSField(ColorBlackFieldMask);

    return returnValue;
}

GetFieldHandlePtr CheckerboardCalibFilterBase::getHandleColorWhite      (void) const
{
    SFColor3f::GetHandlePtr returnValue(
        new  SFColor3f::GetHandle(
             &_sfColorWhite,
             this->getType().getFieldDesc(ColorWhiteFieldId),
             const_cast<CheckerboardCalibFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CheckerboardCalibFilterBase::editHandleColorWhite     (void)
{
    SFColor3f::EditHandlePtr returnValue(
        new  SFColor3f::EditHandle(
             &_sfColorWhite,
             this->getType().getFieldDesc(ColorWhiteFieldId),
             this));


    editSField(ColorWhiteFieldMask);

    return returnValue;
}

GetFieldHandlePtr CheckerboardCalibFilterBase::getHandleResolution      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfResolution,
             this->getType().getFieldDesc(ResolutionFieldId),
             const_cast<CheckerboardCalibFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CheckerboardCalibFilterBase::editHandleResolution     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfResolution,
             this->getType().getFieldDesc(ResolutionFieldId),
             this));


    editSField(ResolutionFieldMask);

    return returnValue;
}

GetFieldHandlePtr CheckerboardCalibFilterBase::getHandleCenter          (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfCenter,
             this->getType().getFieldDesc(CenterFieldId),
             const_cast<CheckerboardCalibFilterBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr CheckerboardCalibFilterBase::editHandleCenter         (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfCenter,
             this->getType().getFieldDesc(CenterFieldId),
             this));


    editSField(CenterFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CheckerboardCalibFilterBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    CheckerboardCalibFilter *pThis = static_cast<CheckerboardCalibFilter *>(this);

    pThis->execSync(static_cast<CheckerboardCalibFilter *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *CheckerboardCalibFilterBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    CheckerboardCalibFilter *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const CheckerboardCalibFilter *>(pRefAspect),
                  dynamic_cast<const CheckerboardCalibFilter *>(this));

    return returnValue;
}
#endif

void CheckerboardCalibFilterBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
