/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShadowMapEngine!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGTextureObjChunk.h"         // ShadowTexChunk Class

#include "OSGShadowMapEngineBase.h"
#include "OSGShadowMapEngine.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ShadowMapEngine
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var TextureObjChunk * ShadowMapEngineBase::_sfShadowTexChunk
    Holds the generated shadow texture. If you leave this field empty an
    appropriate object will be created the first time the engine runs.
*/

/*! \var Int32           ShadowMapEngineBase::_sfWidth
    
*/

/*! \var Int32           ShadowMapEngineBase::_sfHeight
    
*/

/*! \var Real32          ShadowMapEngineBase::_sfOffsetBias
    
*/

/*! \var Real32          ShadowMapEngineBase::_sfOffsetFactor
    
*/

/*! \var UInt32          ShadowMapEngineBase::_sfShadowTravMask
    Traversal mask when generating the shadow map.  
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ShadowMapEngine *, nsOSG>::_type(
    "ShadowMapEnginePtr", 
    "LightEnginePtr", 
    ShadowMapEngine::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ShadowMapEngine *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ShadowMapEngine *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ShadowMapEngine *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ShadowMapEngineBase::classDescInserter(TypeObject &oType)
{
    Inherited::classDescInserter(oType);

    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecTextureObjChunkPtr::Description(
        SFUnrecTextureObjChunkPtr::getClassType(),
        "shadowTexChunk",
        "Holds the generated shadow texture. If you leave this field empty an\n"
        "appropriate object will be created the first time the engine runs.\n",
        ShadowTexChunkFieldId, ShadowTexChunkFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowMapEngine::editHandleShadowTexChunk),
        static_cast<FieldGetMethodSig >(&ShadowMapEngine::getHandleShadowTexChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "width",
        "",
        WidthFieldId, WidthFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowMapEngine::editHandleWidth),
        static_cast<FieldGetMethodSig >(&ShadowMapEngine::getHandleWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "height",
        "",
        HeightFieldId, HeightFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowMapEngine::editHandleHeight),
        static_cast<FieldGetMethodSig >(&ShadowMapEngine::getHandleHeight));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "offsetBias",
        "",
        OffsetBiasFieldId, OffsetBiasFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowMapEngine::editHandleOffsetBias),
        static_cast<FieldGetMethodSig >(&ShadowMapEngine::getHandleOffsetBias));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "offsetFactor",
        "",
        OffsetFactorFieldId, OffsetFactorFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowMapEngine::editHandleOffsetFactor),
        static_cast<FieldGetMethodSig >(&ShadowMapEngine::getHandleOffsetFactor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "shadowTravMask",
        "Traversal mask when generating the shadow map.  \n",
        ShadowTravMaskFieldId, ShadowTravMaskFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ShadowMapEngine::editHandleShadowTravMask),
        static_cast<FieldGetMethodSig >(&ShadowMapEngine::getHandleShadowTravMask));

    oType.addInitialDesc(pDesc);
}


ShadowMapEngineBase::TypeObject ShadowMapEngineBase::_type(
    ShadowMapEngineBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    NULL,
    reinterpret_cast<InitContainerF>(&ShadowMapEngine::initMethod),
    reinterpret_cast<ExitContainerF>(&ShadowMapEngine::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ShadowMapEngine::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"ShadowMapEngine\"\n"
    "   parent=\"LightEngine\"\n"
    "   mixinparent=\"ShadowMapEngineParent\"\n"
    "   library=\"Group\"\n"
    "   structure=\"abstract\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   isNodeCore=\"false\"\n"
    "   docGroupBase=\"GrpGroupLightShadowBase\"\n"
    "   >\n"
    "  <Field\n"
    "     name=\"shadowTexChunk\"\n"
    "     category=\"pointer\"\n"
    "     type=\"TextureObjChunk\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"NULL\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    Holds the generated shadow texture. If you leave this field empty an\n"
    "    appropriate object will be created the first time the engine runs.\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"width\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"512\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"height\"\n"
    "\t type=\"Int32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"512\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"offsetBias\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"4.f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"offsetFactor\"\n"
    "\t type=\"Real32\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t defaultValue=\"10.f\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"shadowTravMask\"\n"
    "     type=\"UInt32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"TypeTraits&lt;UInt32&gt;::BitsSet\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    Traversal mask when generating the shadow map.  \n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShadowMapEngineBase::getType(void)
{
    return _type;
}

const FieldContainerType &ShadowMapEngineBase::getType(void) const
{
    return _type;
}

UInt32 ShadowMapEngineBase::getContainerSize(void) const
{
    return sizeof(ShadowMapEngine);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ShadowMapEngine::_sfShadowTexChunk field.
const SFUnrecTextureObjChunkPtr *ShadowMapEngineBase::getSFShadowTexChunk(void) const
{
    return &_sfShadowTexChunk;
}

SFUnrecTextureObjChunkPtr *ShadowMapEngineBase::editSFShadowTexChunk (void)
{
    editSField(ShadowTexChunkFieldMask);

    return &_sfShadowTexChunk;
}

//! Get the value of the ShadowMapEngine::_sfShadowTexChunk field.
TextureObjChunk * ShadowMapEngineBase::getShadowTexChunk(void) const
{
    return _sfShadowTexChunk.getValue();
}

//! Set the value of the ShadowMapEngine::_sfShadowTexChunk field.
void ShadowMapEngineBase::setShadowTexChunk(TextureObjChunk * const value)
{
    editSField(ShadowTexChunkFieldMask);

    _sfShadowTexChunk.setValue(value);
}


SFInt32 *ShadowMapEngineBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFInt32 *ShadowMapEngineBase::getSFWidth(void) const
{
    return &_sfWidth;
}


SFInt32 *ShadowMapEngineBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFInt32 *ShadowMapEngineBase::getSFHeight(void) const
{
    return &_sfHeight;
}


SFReal32 *ShadowMapEngineBase::editSFOffsetBias(void)
{
    editSField(OffsetBiasFieldMask);

    return &_sfOffsetBias;
}

const SFReal32 *ShadowMapEngineBase::getSFOffsetBias(void) const
{
    return &_sfOffsetBias;
}


SFReal32 *ShadowMapEngineBase::editSFOffsetFactor(void)
{
    editSField(OffsetFactorFieldMask);

    return &_sfOffsetFactor;
}

const SFReal32 *ShadowMapEngineBase::getSFOffsetFactor(void) const
{
    return &_sfOffsetFactor;
}


SFUInt32 *ShadowMapEngineBase::editSFShadowTravMask(void)
{
    editSField(ShadowTravMaskFieldMask);

    return &_sfShadowTravMask;
}

const SFUInt32 *ShadowMapEngineBase::getSFShadowTravMask(void) const
{
    return &_sfShadowTravMask;
}






/*------------------------------ access -----------------------------------*/

SizeT ShadowMapEngineBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ShadowTexChunkFieldMask & whichField))
    {
        returnValue += _sfShadowTexChunk.getBinSize();
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }
    if(FieldBits::NoField != (OffsetBiasFieldMask & whichField))
    {
        returnValue += _sfOffsetBias.getBinSize();
    }
    if(FieldBits::NoField != (OffsetFactorFieldMask & whichField))
    {
        returnValue += _sfOffsetFactor.getBinSize();
    }
    if(FieldBits::NoField != (ShadowTravMaskFieldMask & whichField))
    {
        returnValue += _sfShadowTravMask.getBinSize();
    }

    return returnValue;
}

void ShadowMapEngineBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ShadowTexChunkFieldMask & whichField))
    {
        _sfShadowTexChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OffsetBiasFieldMask & whichField))
    {
        _sfOffsetBias.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OffsetFactorFieldMask & whichField))
    {
        _sfOffsetFactor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShadowTravMaskFieldMask & whichField))
    {
        _sfShadowTravMask.copyToBin(pMem);
    }
}

void ShadowMapEngineBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ShadowTexChunkFieldMask & whichField))
    {
        editSField(ShadowTexChunkFieldMask);
        _sfShadowTexChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        editSField(WidthFieldMask);
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        editSField(HeightFieldMask);
        _sfHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OffsetBiasFieldMask & whichField))
    {
        editSField(OffsetBiasFieldMask);
        _sfOffsetBias.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OffsetFactorFieldMask & whichField))
    {
        editSField(OffsetFactorFieldMask);
        _sfOffsetFactor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShadowTravMaskFieldMask & whichField))
    {
        editSField(ShadowTravMaskFieldMask);
        _sfShadowTravMask.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

ShadowMapEngineBase::ShadowMapEngineBase(void) :
    Inherited(),
    _sfShadowTexChunk         (NULL),
    _sfWidth                  (Int32(512)),
    _sfHeight                 (Int32(512)),
    _sfOffsetBias             (Real32(4.f)),
    _sfOffsetFactor           (Real32(10.f)),
    _sfShadowTravMask         (UInt32(TypeTraits<UInt32>::BitsSet))
{
}

ShadowMapEngineBase::ShadowMapEngineBase(const ShadowMapEngineBase &source) :
    Inherited(source),
    _sfShadowTexChunk         (NULL),
    _sfWidth                  (source._sfWidth                  ),
    _sfHeight                 (source._sfHeight                 ),
    _sfOffsetBias             (source._sfOffsetBias             ),
    _sfOffsetFactor           (source._sfOffsetFactor           ),
    _sfShadowTravMask         (source._sfShadowTravMask         )
{
}


/*-------------------------- destructors ----------------------------------*/

ShadowMapEngineBase::~ShadowMapEngineBase(void)
{
}

void ShadowMapEngineBase::onCreate(const ShadowMapEngine *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ShadowMapEngine *pThis = static_cast<ShadowMapEngine *>(this);

        pThis->setShadowTexChunk(source->getShadowTexChunk());
    }
}

GetFieldHandlePtr ShadowMapEngineBase::getHandleShadowTexChunk  (void) const
{
    SFUnrecTextureObjChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::GetHandle(
             &_sfShadowTexChunk,
             this->getType().getFieldDesc(ShadowTexChunkFieldId),
             const_cast<ShadowMapEngineBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShadowMapEngineBase::editHandleShadowTexChunk (void)
{
    SFUnrecTextureObjChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureObjChunkPtr::EditHandle(
             &_sfShadowTexChunk,
             this->getType().getFieldDesc(ShadowTexChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ShadowMapEngine::setShadowTexChunk,
                    static_cast<ShadowMapEngine *>(this), ::boost::placeholders::_1));

    editSField(ShadowTexChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowMapEngineBase::getHandleWidth           (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             const_cast<ShadowMapEngineBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShadowMapEngineBase::editHandleWidth          (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfWidth,
             this->getType().getFieldDesc(WidthFieldId),
             this));


    editSField(WidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowMapEngineBase::getHandleHeight          (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             const_cast<ShadowMapEngineBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShadowMapEngineBase::editHandleHeight         (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfHeight,
             this->getType().getFieldDesc(HeightFieldId),
             this));


    editSField(HeightFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowMapEngineBase::getHandleOffsetBias      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOffsetBias,
             this->getType().getFieldDesc(OffsetBiasFieldId),
             const_cast<ShadowMapEngineBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShadowMapEngineBase::editHandleOffsetBias     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOffsetBias,
             this->getType().getFieldDesc(OffsetBiasFieldId),
             this));


    editSField(OffsetBiasFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowMapEngineBase::getHandleOffsetFactor    (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfOffsetFactor,
             this->getType().getFieldDesc(OffsetFactorFieldId),
             const_cast<ShadowMapEngineBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShadowMapEngineBase::editHandleOffsetFactor   (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfOffsetFactor,
             this->getType().getFieldDesc(OffsetFactorFieldId),
             this));


    editSField(OffsetFactorFieldMask);

    return returnValue;
}

GetFieldHandlePtr ShadowMapEngineBase::getHandleShadowTravMask  (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfShadowTravMask,
             this->getType().getFieldDesc(ShadowTravMaskFieldId),
             const_cast<ShadowMapEngineBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ShadowMapEngineBase::editHandleShadowTravMask (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfShadowTravMask,
             this->getType().getFieldDesc(ShadowTravMaskFieldId),
             this));


    editSField(ShadowTravMaskFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ShadowMapEngineBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ShadowMapEngine *pThis = static_cast<ShadowMapEngine *>(this);

    pThis->execSync(static_cast<ShadowMapEngine *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void ShadowMapEngineBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ShadowMapEngine *>(this)->setShadowTexChunk(NULL);


}


OSG_END_NAMESPACE
