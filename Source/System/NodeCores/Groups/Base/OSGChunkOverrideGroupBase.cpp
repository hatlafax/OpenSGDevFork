/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ChunkOverrideGroup!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGChunkBlock.h"              // FallbackChunkBlock Class

#include "OSGChunkOverrideGroupBase.h"
#include "OSGChunkOverrideGroup.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ChunkOverrideGroup
    ChunkOverrideGroup is a simple group node that allows for material chunks
    to be set that will override all chunks stored in materials in the entire 
    subtree. Currently the last chunk override wins (note the difference to
    the material group). This might change in future.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var ChunkBlock *    ChunkOverrideGroupBase::_sfFallbackChunkBlock
    
*/

/*! \var bool            ChunkOverrideGroupBase::_sfSubOverride
    If true, the ChunkOverrideGroup group does not add new override chunks, 
    but subtract the chunks from the list of already defined override chunks.
    Basically, that allows to negate overrides at a deeper level in the scene graph.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<ChunkOverrideGroup *, nsOSG>::_type(
    "ChunkOverrideGroupPtr", 
    "GroupPtr", 
    ChunkOverrideGroup::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(ChunkOverrideGroup *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           ChunkOverrideGroup *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           ChunkOverrideGroup *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void ChunkOverrideGroupBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecChunkBlockPtr::Description(
        SFUnrecChunkBlockPtr::getClassType(),
        "fallbackChunkBlock",
        "",
        FallbackChunkBlockFieldId, FallbackChunkBlockFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ChunkOverrideGroup::editHandleFallbackChunkBlock),
        static_cast<FieldGetMethodSig >(&ChunkOverrideGroup::getHandleFallbackChunkBlock));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "subOverride",
        "If true, the ChunkOverrideGroup group does not add new override chunks, \n"
        "but subtract the chunks from the list of already defined override chunks.\n"
        "Basically, that allows to negate overrides at a deeper level in the scene graph.\n",
        SubOverrideFieldId, SubOverrideFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&ChunkOverrideGroup::editHandleSubOverride),
        static_cast<FieldGetMethodSig >(&ChunkOverrideGroup::getHandleSubOverride));

    oType.addInitialDesc(pDesc);
}


ChunkOverrideGroupBase::TypeObject ChunkOverrideGroupBase::_type(
    ChunkOverrideGroupBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&ChunkOverrideGroupBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&ChunkOverrideGroup::initMethod),
    reinterpret_cast<ExitContainerF>(&ChunkOverrideGroup::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&ChunkOverrideGroup::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"ChunkOverrideGroup\"\n"
    "   parent=\"Group\"\n"
    "   library=\"System\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   isNodeCore=\"true\"\n"
    "   docGroupBase=\"GrpSystemNodeCoreGroups\"\n"
    "   >\n"
    "\n"
    "  ChunkOverrideGroup is a simple group node that allows for material chunks\n"
    "  to be set that will override all chunks stored in materials in the entire \n"
    "  subtree. Currently the last chunk override wins (note the difference to\n"
    "  the material group). This might change in future.\n"
    "\n"
    "  <Field\n"
    "\t name=\"fallbackChunkBlock\"\n"
    "\t type=\"ChunkBlockPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "\t >\n"
    "  </Field>\n"
    "\n"
    "<Field\n"
    "        name=\"subOverride\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "\t>\n"
    "                If true, the ChunkOverrideGroup group does not add new override chunks, \n"
    "                but subtract the chunks from the list of already defined override chunks.\n"
    "                Basically, that allows to negate overrides at a deeper level in the scene graph.\n"
    "</Field>\n"
    "\n"
    "</FieldContainer>\n"
    "\n",
    "ChunkOverrideGroup is a simple group node that allows for material chunks\n"
    "to be set that will override all chunks stored in materials in the entire \n"
    "subtree. Currently the last chunk override wins (note the difference to\n"
    "the material group). This might change in future.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ChunkOverrideGroupBase::getType(void)
{
    return _type;
}

const FieldContainerType &ChunkOverrideGroupBase::getType(void) const
{
    return _type;
}

UInt32 ChunkOverrideGroupBase::getContainerSize(void) const
{
    return sizeof(ChunkOverrideGroup);
}

/*------------------------- decorator get ------------------------------*/


//! Get the ChunkOverrideGroup::_sfFallbackChunkBlock field.
const SFUnrecChunkBlockPtr *ChunkOverrideGroupBase::getSFFallbackChunkBlock(void) const
{
    return &_sfFallbackChunkBlock;
}

SFUnrecChunkBlockPtr *ChunkOverrideGroupBase::editSFFallbackChunkBlock(void)
{
    editSField(FallbackChunkBlockFieldMask);

    return &_sfFallbackChunkBlock;
}

//! Get the value of the ChunkOverrideGroup::_sfFallbackChunkBlock field.
ChunkBlock * ChunkOverrideGroupBase::getFallbackChunkBlock(void) const
{
    return _sfFallbackChunkBlock.getValue();
}

//! Set the value of the ChunkOverrideGroup::_sfFallbackChunkBlock field.
void ChunkOverrideGroupBase::setFallbackChunkBlock(ChunkBlock * const value)
{
    editSField(FallbackChunkBlockFieldMask);

    _sfFallbackChunkBlock.setValue(value);
}


SFBool *ChunkOverrideGroupBase::editSFSubOverride(void)
{
    editSField(SubOverrideFieldMask);

    return &_sfSubOverride;
}

const SFBool *ChunkOverrideGroupBase::getSFSubOverride(void) const
{
    return &_sfSubOverride;
}






/*------------------------------ access -----------------------------------*/

SizeT ChunkOverrideGroupBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (FallbackChunkBlockFieldMask & whichField))
    {
        returnValue += _sfFallbackChunkBlock.getBinSize();
    }
    if(FieldBits::NoField != (SubOverrideFieldMask & whichField))
    {
        returnValue += _sfSubOverride.getBinSize();
    }

    return returnValue;
}

void ChunkOverrideGroupBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (FallbackChunkBlockFieldMask & whichField))
    {
        _sfFallbackChunkBlock.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SubOverrideFieldMask & whichField))
    {
        _sfSubOverride.copyToBin(pMem);
    }
}

void ChunkOverrideGroupBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (FallbackChunkBlockFieldMask & whichField))
    {
        editSField(FallbackChunkBlockFieldMask);
        _sfFallbackChunkBlock.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SubOverrideFieldMask & whichField))
    {
        editSField(SubOverrideFieldMask);
        _sfSubOverride.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ChunkOverrideGroupTransitPtr ChunkOverrideGroupBase::createLocal(BitVector bFlags)
{
    ChunkOverrideGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ChunkOverrideGroup>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
ChunkOverrideGroupTransitPtr ChunkOverrideGroupBase::createDependent(BitVector bFlags)
{
    ChunkOverrideGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<ChunkOverrideGroup>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ChunkOverrideGroupTransitPtr ChunkOverrideGroupBase::create(void)
{
    ChunkOverrideGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ChunkOverrideGroup>(tmpPtr);
    }

    return fc;
}

ChunkOverrideGroup *ChunkOverrideGroupBase::createEmptyLocal(BitVector bFlags)
{
    ChunkOverrideGroup *returnValue;

    newPtr<ChunkOverrideGroup>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
ChunkOverrideGroup *ChunkOverrideGroupBase::createEmpty(void)
{
    ChunkOverrideGroup *returnValue;

    newPtr<ChunkOverrideGroup>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr ChunkOverrideGroupBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ChunkOverrideGroup *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ChunkOverrideGroup *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ChunkOverrideGroupBase::shallowCopyDependent(
    BitVector bFlags) const
{
    ChunkOverrideGroup *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ChunkOverrideGroup *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr ChunkOverrideGroupBase::shallowCopy(void) const
{
    ChunkOverrideGroup *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const ChunkOverrideGroup *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

ChunkOverrideGroupBase::ChunkOverrideGroupBase(void) :
    Inherited(),
    _sfFallbackChunkBlock     (NULL),
    _sfSubOverride            (bool(false))
{
}

ChunkOverrideGroupBase::ChunkOverrideGroupBase(const ChunkOverrideGroupBase &source) :
    Inherited(source),
    _sfFallbackChunkBlock     (NULL),
    _sfSubOverride            (source._sfSubOverride            )
{
}


/*-------------------------- destructors ----------------------------------*/

ChunkOverrideGroupBase::~ChunkOverrideGroupBase(void)
{
}

void ChunkOverrideGroupBase::onCreate(const ChunkOverrideGroup *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ChunkOverrideGroup *pThis = static_cast<ChunkOverrideGroup *>(this);

        pThis->setFallbackChunkBlock(source->getFallbackChunkBlock());
    }
}

GetFieldHandlePtr ChunkOverrideGroupBase::getHandleFallbackChunkBlock (void) const
{
    SFUnrecChunkBlockPtr::GetHandlePtr returnValue(
        new  SFUnrecChunkBlockPtr::GetHandle(
             &_sfFallbackChunkBlock,
             this->getType().getFieldDesc(FallbackChunkBlockFieldId),
             const_cast<ChunkOverrideGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ChunkOverrideGroupBase::editHandleFallbackChunkBlock(void)
{
    SFUnrecChunkBlockPtr::EditHandlePtr returnValue(
        new  SFUnrecChunkBlockPtr::EditHandle(
             &_sfFallbackChunkBlock,
             this->getType().getFieldDesc(FallbackChunkBlockFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&ChunkOverrideGroup::setFallbackChunkBlock,
                    static_cast<ChunkOverrideGroup *>(this), ::boost::placeholders::_1));

    editSField(FallbackChunkBlockFieldMask);

    return returnValue;
}

GetFieldHandlePtr ChunkOverrideGroupBase::getHandleSubOverride     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfSubOverride,
             this->getType().getFieldDesc(SubOverrideFieldId),
             const_cast<ChunkOverrideGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr ChunkOverrideGroupBase::editHandleSubOverride    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfSubOverride,
             this->getType().getFieldDesc(SubOverrideFieldId),
             this));


    editSField(SubOverrideFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ChunkOverrideGroupBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    ChunkOverrideGroup *pThis = static_cast<ChunkOverrideGroup *>(this);

    pThis->execSync(static_cast<ChunkOverrideGroup *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ChunkOverrideGroupBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    ChunkOverrideGroup *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ChunkOverrideGroup *>(pRefAspect),
                  dynamic_cast<const ChunkOverrideGroup *>(this));

    return returnValue;
}
#endif

void ChunkOverrideGroupBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ChunkOverrideGroup *>(this)->setFallbackChunkBlock(NULL);


}


OSG_END_NAMESPACE
