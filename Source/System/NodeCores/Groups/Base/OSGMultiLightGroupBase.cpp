/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MultiLightGroup!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGMultiLightChunk.h"         // MultiLightChunk Class

#include "OSGMultiLightGroupBase.h"
#include "OSGMultiLightGroup.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MultiLightGroup
    MultiLightGroup wraps a MultiLightChunk which overrides in the RenderAction.
    It shared the interface with the MultiLightChunk that makes it easy to use.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var bool            MultiLightGroupBase::_sfActivate
    If the MultiLight group is deactivated it does not perform any action on its own but act as a simple Group core.
*/

/*! \var MultiLightChunk * MultiLightGroupBase::_sfMultiLightChunk
    The multi light chunk.
*/

/*! \var UInt32          MultiLightGroupBase::_sfLightBindingPnt
    The fragment shader SSBO binding point for the multi light chunk.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<MultiLightGroup *, nsOSG>::_type(
    "MultiLightGroupPtr", 
    "GroupPtr", 
    MultiLightGroup::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(MultiLightGroup *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           MultiLightGroup *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           MultiLightGroup *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void MultiLightGroupBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "activate",
        "If the MultiLight group is deactivated it does not perform any action on its own but act as a simple Group core.\n",
        ActivateFieldId, ActivateFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiLightGroup::editHandleActivate),
        static_cast<FieldGetMethodSig >(&MultiLightGroup::getHandleActivate));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecMultiLightChunkPtr::Description(
        SFUnrecMultiLightChunkPtr::getClassType(),
        "multiLightChunk",
        "The multi light chunk.\n",
        MultiLightChunkFieldId, MultiLightChunkFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiLightGroup::editHandleMultiLightChunk),
        static_cast<FieldGetMethodSig >(&MultiLightGroup::getHandleMultiLightChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "lightBindingPnt",
        "The fragment shader SSBO binding point for the multi light chunk.\n",
        LightBindingPntFieldId, LightBindingPntFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&MultiLightGroup::editHandleLightBindingPnt),
        static_cast<FieldGetMethodSig >(&MultiLightGroup::getHandleLightBindingPnt));

    oType.addInitialDesc(pDesc);
}


MultiLightGroupBase::TypeObject MultiLightGroupBase::_type(
    MultiLightGroupBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&MultiLightGroupBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&MultiLightGroup::initMethod),
    reinterpret_cast<ExitContainerF>(&MultiLightGroup::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&MultiLightGroup::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"MultiLightGroup\"\n"
    "    parent=\"Group\"\n"
    "    library=\"System\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    "    isBundle=\"false\"   \n"
    "    >\n"
    "    MultiLightGroup wraps a MultiLightChunk which overrides in the RenderAction.\n"
    "    It shared the interface with the MultiLightChunk that makes it easy to use.\n"
    "\n"
    "    <Field\n"
    "        name=\"activate\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"true\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        If the MultiLight group is deactivated it does not perform any action on its own but act as a simple Group core.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"multiLightChunk\"\n"
    "        type=\"MultiLightChunkPtr\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"NULL\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The multi light chunk.\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name=\"lightBindingPnt\"\n"
    "        type=\"UInt32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1\"\n"
    "        access=\"public\"\n"
    "        >\n"
    "        The fragment shader SSBO binding point for the multi light chunk.\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    "MultiLightGroup wraps a MultiLightChunk which overrides in the RenderAction.\n"
    "It shared the interface with the MultiLightChunk that makes it easy to use.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MultiLightGroupBase::getType(void)
{
    return _type;
}

const FieldContainerType &MultiLightGroupBase::getType(void) const
{
    return _type;
}

UInt32 MultiLightGroupBase::getContainerSize(void) const
{
    return sizeof(MultiLightGroup);
}

/*------------------------- decorator get ------------------------------*/


SFBool *MultiLightGroupBase::editSFActivate(void)
{
    editSField(ActivateFieldMask);

    return &_sfActivate;
}

const SFBool *MultiLightGroupBase::getSFActivate(void) const
{
    return &_sfActivate;
}


//! Get the MultiLightGroup::_sfMultiLightChunk field.
const SFUnrecMultiLightChunkPtr *MultiLightGroupBase::getSFMultiLightChunk(void) const
{
    return &_sfMultiLightChunk;
}

SFUnrecMultiLightChunkPtr *MultiLightGroupBase::editSFMultiLightChunk(void)
{
    editSField(MultiLightChunkFieldMask);

    return &_sfMultiLightChunk;
}

//! Get the value of the MultiLightGroup::_sfMultiLightChunk field.
MultiLightChunk * MultiLightGroupBase::getMultiLightChunk(void) const
{
    return _sfMultiLightChunk.getValue();
}

//! Set the value of the MultiLightGroup::_sfMultiLightChunk field.
void MultiLightGroupBase::setMultiLightChunk(MultiLightChunk * const value)
{
    editSField(MultiLightChunkFieldMask);

    _sfMultiLightChunk.setValue(value);
}


SFUInt32 *MultiLightGroupBase::editSFLightBindingPnt(void)
{
    editSField(LightBindingPntFieldMask);

    return &_sfLightBindingPnt;
}

const SFUInt32 *MultiLightGroupBase::getSFLightBindingPnt(void) const
{
    return &_sfLightBindingPnt;
}






/*------------------------------ access -----------------------------------*/

SizeT MultiLightGroupBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ActivateFieldMask & whichField))
    {
        returnValue += _sfActivate.getBinSize();
    }
    if(FieldBits::NoField != (MultiLightChunkFieldMask & whichField))
    {
        returnValue += _sfMultiLightChunk.getBinSize();
    }
    if(FieldBits::NoField != (LightBindingPntFieldMask & whichField))
    {
        returnValue += _sfLightBindingPnt.getBinSize();
    }

    return returnValue;
}

void MultiLightGroupBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ActivateFieldMask & whichField))
    {
        _sfActivate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MultiLightChunkFieldMask & whichField))
    {
        _sfMultiLightChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightBindingPntFieldMask & whichField))
    {
        _sfLightBindingPnt.copyToBin(pMem);
    }
}

void MultiLightGroupBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ActivateFieldMask & whichField))
    {
        editSField(ActivateFieldMask);
        _sfActivate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MultiLightChunkFieldMask & whichField))
    {
        editSField(MultiLightChunkFieldMask);
        _sfMultiLightChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightBindingPntFieldMask & whichField))
    {
        editSField(LightBindingPntFieldMask);
        _sfLightBindingPnt.copyFromBin(pMem);
    }
}

//! create a new instance of the class
MultiLightGroupTransitPtr MultiLightGroupBase::createLocal(BitVector bFlags)
{
    MultiLightGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<MultiLightGroup>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
MultiLightGroupTransitPtr MultiLightGroupBase::createDependent(BitVector bFlags)
{
    MultiLightGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<MultiLightGroup>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
MultiLightGroupTransitPtr MultiLightGroupBase::create(void)
{
    MultiLightGroupTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<MultiLightGroup>(tmpPtr);
    }

    return fc;
}

MultiLightGroup *MultiLightGroupBase::createEmptyLocal(BitVector bFlags)
{
    MultiLightGroup *returnValue;

    newPtr<MultiLightGroup>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
MultiLightGroup *MultiLightGroupBase::createEmpty(void)
{
    MultiLightGroup *returnValue;

    newPtr<MultiLightGroup>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr MultiLightGroupBase::shallowCopyLocal(
    BitVector bFlags) const
{
    MultiLightGroup *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MultiLightGroup *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr MultiLightGroupBase::shallowCopyDependent(
    BitVector bFlags) const
{
    MultiLightGroup *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const MultiLightGroup *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr MultiLightGroupBase::shallowCopy(void) const
{
    MultiLightGroup *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const MultiLightGroup *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

MultiLightGroupBase::MultiLightGroupBase(void) :
    Inherited(),
    _sfActivate               (bool(true)),
    _sfMultiLightChunk        (NULL),
    _sfLightBindingPnt        (UInt32(1))
{
}

MultiLightGroupBase::MultiLightGroupBase(const MultiLightGroupBase &source) :
    Inherited(source),
    _sfActivate               (source._sfActivate               ),
    _sfMultiLightChunk        (NULL),
    _sfLightBindingPnt        (source._sfLightBindingPnt        )
{
}


/*-------------------------- destructors ----------------------------------*/

MultiLightGroupBase::~MultiLightGroupBase(void)
{
}

void MultiLightGroupBase::onCreate(const MultiLightGroup *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        MultiLightGroup *pThis = static_cast<MultiLightGroup *>(this);

        pThis->setMultiLightChunk(source->getMultiLightChunk());
    }
}

GetFieldHandlePtr MultiLightGroupBase::getHandleActivate        (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfActivate,
             this->getType().getFieldDesc(ActivateFieldId),
             const_cast<MultiLightGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiLightGroupBase::editHandleActivate       (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfActivate,
             this->getType().getFieldDesc(ActivateFieldId),
             this));


    editSField(ActivateFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiLightGroupBase::getHandleMultiLightChunk (void) const
{
    SFUnrecMultiLightChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecMultiLightChunkPtr::GetHandle(
             &_sfMultiLightChunk,
             this->getType().getFieldDesc(MultiLightChunkFieldId),
             const_cast<MultiLightGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiLightGroupBase::editHandleMultiLightChunk(void)
{
    SFUnrecMultiLightChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecMultiLightChunkPtr::EditHandle(
             &_sfMultiLightChunk,
             this->getType().getFieldDesc(MultiLightChunkFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&MultiLightGroup::setMultiLightChunk,
                    static_cast<MultiLightGroup *>(this), ::boost::placeholders::_1));

    editSField(MultiLightChunkFieldMask);

    return returnValue;
}

GetFieldHandlePtr MultiLightGroupBase::getHandleLightBindingPnt (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfLightBindingPnt,
             this->getType().getFieldDesc(LightBindingPntFieldId),
             const_cast<MultiLightGroupBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr MultiLightGroupBase::editHandleLightBindingPnt(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfLightBindingPnt,
             this->getType().getFieldDesc(LightBindingPntFieldId),
             this));


    editSField(LightBindingPntFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void MultiLightGroupBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    MultiLightGroup *pThis = static_cast<MultiLightGroup *>(this);

    pThis->execSync(static_cast<MultiLightGroup *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *MultiLightGroupBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    MultiLightGroup *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MultiLightGroup *>(pRefAspect),
                  dynamic_cast<const MultiLightGroup *>(this));

    return returnValue;
}
#endif

void MultiLightGroupBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<MultiLightGroup *>(this)->setMultiLightChunk(NULL);


}


OSG_END_NAMESPACE
