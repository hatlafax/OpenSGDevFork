/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleStage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGCamera.h"                  // Camera Class
#include "OSGBackground.h"              // Background Class
#include "OSGForeground.h"              // Foregrounds Class

#include "OSGSimpleStageBase.h"
#include "OSGSimpleStage.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SimpleStage
    Extension to the Stage core that provides for viewport support, a camera,
    backgrounds, and foreground. 
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Real32          SimpleStageBase::_sfLeft
    The left edge of the viewport. Values between 0 and 1 are relative to the
    size of the Window, values "1 are absolute pixel coordinates, value
    == -1 means the left border. All other values are illegal.
*/

/*! \var Real32          SimpleStageBase::_sfRight
    The right edge of the viewport. Values between 0 and 1 are relative to the
    size of the Window, values "1 are absolute pixel coordinates, value
    == -1 means the right border. All other values are illegal.
*/

/*! \var Real32          SimpleStageBase::_sfBottom
    The bottom edge of the viewport. Values between 0 and 1 are relative to
    the size of the Window, values "1 are absolute pixel coordinates,
    value == -1 means the bottom border. All other values are illegal.
*/

/*! \var Real32          SimpleStageBase::_sfTop
    The top edge of the viewport. Values between 0 and 1 are relative to the
    size of the Window, values "1 are absolute pixel coordinates, value
    == -1 means the top border. All other values are illegal.
*/

/*! \var Camera *        SimpleStageBase::_sfCamera
    The Camera used to render the viewport.
*/

/*! \var Background *    SimpleStageBase::_sfBackground
    The background used to clear this viewport.
*/

/*! \var Foreground *    SimpleStageBase::_mfForegrounds
    The foregrounds used by this viewport.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<SimpleStage *, nsOSG>::_type(
    "SimpleStagePtr", 
    "RenderCallbackStagePtr", 
    SimpleStage::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(SimpleStage *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SimpleStageBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "left",
        "The left edge of the viewport. Values between 0 and 1 are relative to the\n"
        "size of the Window, values \"1 are absolute pixel coordinates, value\n"
        "== -1 means the left border. All other values are illegal.\n",
        LeftFieldId, LeftFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleStage::editHandleLeft),
        static_cast<FieldGetMethodSig >(&SimpleStage::getHandleLeft));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "right",
        "The right edge of the viewport. Values between 0 and 1 are relative to the\n"
        "size of the Window, values \"1 are absolute pixel coordinates, value\n"
        "== -1 means the right border. All other values are illegal.\n",
        RightFieldId, RightFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleStage::editHandleRight),
        static_cast<FieldGetMethodSig >(&SimpleStage::getHandleRight));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "bottom",
        "The bottom edge of the viewport. Values between 0 and 1 are relative to\n"
        "the size of the Window, values \"1 are absolute pixel coordinates,\n"
        "value == -1 means the bottom border. All other values are illegal.\n",
        BottomFieldId, BottomFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleStage::editHandleBottom),
        static_cast<FieldGetMethodSig >(&SimpleStage::getHandleBottom));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "top",
        "The top edge of the viewport. Values between 0 and 1 are relative to the\n"
        "size of the Window, values \"1 are absolute pixel coordinates, value\n"
        "== -1 means the top border. All other values are illegal.\n",
        TopFieldId, TopFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleStage::editHandleTop),
        static_cast<FieldGetMethodSig >(&SimpleStage::getHandleTop));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecCameraPtr::Description(
        SFUnrecCameraPtr::getClassType(),
        "camera",
        "The Camera used to render the viewport.\n",
        CameraFieldId, CameraFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleStage::editHandleCamera),
        static_cast<FieldGetMethodSig >(&SimpleStage::getHandleCamera));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecBackgroundPtr::Description(
        SFUnrecBackgroundPtr::getClassType(),
        "background",
        "The background used to clear this viewport.\n",
        BackgroundFieldId, BackgroundFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleStage::editHandleBackground),
        static_cast<FieldGetMethodSig >(&SimpleStage::getHandleBackground));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecForegroundPtr::Description(
        MFUnrecForegroundPtr::getClassType(),
        "foregrounds",
        "The foregrounds used by this viewport.\n",
        ForegroundsFieldId, ForegroundsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SimpleStage::editHandleForegrounds),
        static_cast<FieldGetMethodSig >(&SimpleStage::getHandleForegrounds));

    oType.addInitialDesc(pDesc);
}


SimpleStageBase::TypeObject SimpleStageBase::_type(
    SimpleStageBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&SimpleStageBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&SimpleStage::initMethod),
    reinterpret_cast<ExitContainerF>(&SimpleStage::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&SimpleStage::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"SimpleStage\"\n"
    "   parent=\"RenderCallbackStage\"\n"
    "   library=\"Group\"\n"
    "   pointerfieldtypes=\"none\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   isNodeCore=\"true\"\n"
    "   docGroupBase=\"GrpGroupStage\"\n"
    "   >\n"
    "  Extension to the Stage core that provides for viewport support, a camera,\n"
    "  backgrounds, and foreground. \n"
    "  <Field\n"
    "     name=\"left\"\n"
    "     type=\"Real32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"0.f\"\n"
    "     >\n"
    "    The left edge of the viewport. Values between 0 and 1 are relative to the\n"
    "    size of the Window, values &quot; 1 are absolute pixel coordinates, value\n"
    "    == -1 means the left border. All other values are illegal.\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"right\"\n"
    "     type=\"Real32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"1.f\"\n"
    "     >\n"
    "    The right edge of the viewport. Values between 0 and 1 are relative to the\n"
    "    size of the Window, values &quot; 1 are absolute pixel coordinates, value\n"
    "    == -1 means the right border. All other values are illegal.\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"bottom\"\n"
    "     type=\"Real32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"0.f\"\n"
    "     >\n"
    "    The bottom edge of the viewport. Values between 0 and 1 are relative to\n"
    "    the size of the Window, values &quot; 1 are absolute pixel coordinates,\n"
    "    value == -1 means the bottom border. All other values are illegal.\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"top\"\n"
    "     type=\"Real32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     defaultValue=\"1.f\"\n"
    "     >\n"
    "    The top edge of the viewport. Values between 0 and 1 are relative to the\n"
    "    size of the Window, values &quot; 1 are absolute pixel coordinates, value\n"
    "    == -1 means the top border. All other values are illegal.\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"camera\"\n"
    "     type=\"CameraPtr\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    The Camera used to render the viewport.\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"background\"\n"
    "     type=\"BackgroundPtr\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    The background used to clear this viewport.\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"foregrounds\"\n"
    "     type=\"ForegroundPtr\"\n"
    "     cardinality=\"multi\"\n"
    "     visibility=\"external\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    The foregrounds used by this viewport.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "Extension to the Stage core that provides for viewport support, a camera,\n"
    "backgrounds, and foreground. \n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SimpleStageBase::getType(void)
{
    return _type;
}

const FieldContainerType &SimpleStageBase::getType(void) const
{
    return _type;
}

UInt32 SimpleStageBase::getContainerSize(void) const
{
    return sizeof(SimpleStage);
}

/*------------------------- decorator get ------------------------------*/


SFReal32 *SimpleStageBase::editSFLeft(void)
{
    editSField(LeftFieldMask);

    return &_sfLeft;
}

const SFReal32 *SimpleStageBase::getSFLeft(void) const
{
    return &_sfLeft;
}


SFReal32 *SimpleStageBase::editSFRight(void)
{
    editSField(RightFieldMask);

    return &_sfRight;
}

const SFReal32 *SimpleStageBase::getSFRight(void) const
{
    return &_sfRight;
}


SFReal32 *SimpleStageBase::editSFBottom(void)
{
    editSField(BottomFieldMask);

    return &_sfBottom;
}

const SFReal32 *SimpleStageBase::getSFBottom(void) const
{
    return &_sfBottom;
}


SFReal32 *SimpleStageBase::editSFTop(void)
{
    editSField(TopFieldMask);

    return &_sfTop;
}

const SFReal32 *SimpleStageBase::getSFTop(void) const
{
    return &_sfTop;
}


//! Get the SimpleStage::_sfCamera field.
const SFUnrecCameraPtr *SimpleStageBase::getSFCamera(void) const
{
    return &_sfCamera;
}

SFUnrecCameraPtr    *SimpleStageBase::editSFCamera         (void)
{
    editSField(CameraFieldMask);

    return &_sfCamera;
}

//! Get the value of the SimpleStage::_sfCamera field.
Camera * SimpleStageBase::getCamera(void) const
{
    return _sfCamera.getValue();
}

//! Set the value of the SimpleStage::_sfCamera field.
void SimpleStageBase::setCamera(Camera * const value)
{
    editSField(CameraFieldMask);

    _sfCamera.setValue(value);
}


//! Get the SimpleStage::_sfBackground field.
const SFUnrecBackgroundPtr *SimpleStageBase::getSFBackground(void) const
{
    return &_sfBackground;
}

SFUnrecBackgroundPtr *SimpleStageBase::editSFBackground     (void)
{
    editSField(BackgroundFieldMask);

    return &_sfBackground;
}

//! Get the value of the SimpleStage::_sfBackground field.
Background * SimpleStageBase::getBackground(void) const
{
    return _sfBackground.getValue();
}

//! Set the value of the SimpleStage::_sfBackground field.
void SimpleStageBase::setBackground(Background * const value)
{
    editSField(BackgroundFieldMask);

    _sfBackground.setValue(value);
}


//! Get the SimpleStage::_mfForegrounds field.
const MFUnrecForegroundPtr *SimpleStageBase::getMFForegrounds(void) const
{
    return &_mfForegrounds;
}

MFUnrecForegroundPtr *SimpleStageBase::editMFForegrounds    (void)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);

    return &_mfForegrounds;
}
Foreground * SimpleStageBase::getForegrounds(const UInt32 index) const
{
    return _mfForegrounds[index];
}



void SimpleStageBase::pushToForegrounds(Foreground * const value)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);

    _mfForegrounds.push_back(value);
}

void SimpleStageBase::assignForegrounds(const MFUnrecForegroundPtr &value)
{
    MFUnrecForegroundPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecForegroundPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<SimpleStage *>(this)->clearForegrounds();

    while(elemIt != elemEnd)
    {
        this->pushToForegrounds(*elemIt);

        ++elemIt;
    }
}

void SimpleStageBase::removeFromForegrounds(UInt32 uiIndex)
{
    if(uiIndex < _mfForegrounds.size())
    {
        editMField(ForegroundsFieldMask, _mfForegrounds);

        _mfForegrounds.erase(uiIndex);
    }
}

void SimpleStageBase::removeObjFromForegrounds(Foreground * const value)
{
    Int32 iElemIdx = _mfForegrounds.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ForegroundsFieldMask, _mfForegrounds);

        _mfForegrounds.erase(iElemIdx);
    }
}
void SimpleStageBase::clearForegrounds(void)
{
    editMField(ForegroundsFieldMask, _mfForegrounds);


    _mfForegrounds.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT SimpleStageBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        returnValue += _sfLeft.getBinSize();
    }
    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        returnValue += _sfRight.getBinSize();
    }
    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        returnValue += _sfBottom.getBinSize();
    }
    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        returnValue += _sfTop.getBinSize();
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        returnValue += _sfCamera.getBinSize();
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        returnValue += _sfBackground.getBinSize();
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        returnValue += _mfForegrounds.getBinSize();
    }

    return returnValue;
}

void SimpleStageBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        _sfLeft.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        _sfRight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        _sfBottom.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        _sfTop.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        _sfCamera.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        _sfBackground.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        _mfForegrounds.copyToBin(pMem);
    }
}

void SimpleStageBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
    {
        editSField(LeftFieldMask);
        _sfLeft.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RightFieldMask & whichField))
    {
        editSField(RightFieldMask);
        _sfRight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomFieldMask & whichField))
    {
        editSField(BottomFieldMask);
        _sfBottom.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TopFieldMask & whichField))
    {
        editSField(TopFieldMask);
        _sfTop.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        editSField(CameraFieldMask);
        _sfCamera.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
    {
        editSField(BackgroundFieldMask);
        _sfBackground.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ForegroundsFieldMask & whichField))
    {
        editMField(ForegroundsFieldMask, _mfForegrounds);
        _mfForegrounds.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SimpleStageTransitPtr SimpleStageBase::createLocal(BitVector bFlags)
{
    SimpleStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SimpleStage>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
SimpleStageTransitPtr SimpleStageBase::createDependent(BitVector bFlags)
{
    SimpleStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<SimpleStage>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SimpleStageTransitPtr SimpleStageBase::create(void)
{
    SimpleStageTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SimpleStage>(tmpPtr);
    }

    return fc;
}

SimpleStage *SimpleStageBase::createEmptyLocal(BitVector bFlags)
{
    SimpleStage *returnValue;

    newPtr<SimpleStage>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SimpleStage *SimpleStageBase::createEmpty(void)
{
    SimpleStage *returnValue;

    newPtr<SimpleStage>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SimpleStageBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SimpleStage *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SimpleStage *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SimpleStageBase::shallowCopyDependent(
    BitVector bFlags) const
{
    SimpleStage *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SimpleStage *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr SimpleStageBase::shallowCopy(void) const
{
    SimpleStage *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SimpleStage *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SimpleStageBase::SimpleStageBase(void) :
    Inherited(),
    _sfLeft                   (Real32(0.f)),
    _sfRight                  (Real32(1.f)),
    _sfBottom                 (Real32(0.f)),
    _sfTop                    (Real32(1.f)),
    _sfCamera                 (NULL),
    _sfBackground             (NULL),
    _mfForegrounds            ()
{
}

SimpleStageBase::SimpleStageBase(const SimpleStageBase &source) :
    Inherited(source),
    _sfLeft                   (source._sfLeft                   ),
    _sfRight                  (source._sfRight                  ),
    _sfBottom                 (source._sfBottom                 ),
    _sfTop                    (source._sfTop                    ),
    _sfCamera                 (NULL),
    _sfBackground             (NULL),
    _mfForegrounds            ()
{
}


/*-------------------------- destructors ----------------------------------*/

SimpleStageBase::~SimpleStageBase(void)
{
}

void SimpleStageBase::onCreate(const SimpleStage *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SimpleStage *pThis = static_cast<SimpleStage *>(this);

        pThis->setCamera(source->getCamera());

        pThis->setBackground(source->getBackground());

        MFUnrecForegroundPtr::const_iterator ForegroundsIt  =
            source->_mfForegrounds.begin();
        MFUnrecForegroundPtr::const_iterator ForegroundsEnd =
            source->_mfForegrounds.end  ();

        while(ForegroundsIt != ForegroundsEnd)
        {
            pThis->pushToForegrounds(*ForegroundsIt);

            ++ForegroundsIt;
        }
    }
}

GetFieldHandlePtr SimpleStageBase::getHandleLeft            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLeft,
             this->getType().getFieldDesc(LeftFieldId),
             const_cast<SimpleStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleStageBase::editHandleLeft           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLeft,
             this->getType().getFieldDesc(LeftFieldId),
             this));


    editSField(LeftFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStageBase::getHandleRight           (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfRight,
             this->getType().getFieldDesc(RightFieldId),
             const_cast<SimpleStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleStageBase::editHandleRight          (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfRight,
             this->getType().getFieldDesc(RightFieldId),
             this));


    editSField(RightFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStageBase::getHandleBottom          (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfBottom,
             this->getType().getFieldDesc(BottomFieldId),
             const_cast<SimpleStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleStageBase::editHandleBottom         (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfBottom,
             this->getType().getFieldDesc(BottomFieldId),
             this));


    editSField(BottomFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStageBase::getHandleTop             (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfTop,
             this->getType().getFieldDesc(TopFieldId),
             const_cast<SimpleStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleStageBase::editHandleTop            (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfTop,
             this->getType().getFieldDesc(TopFieldId),
             this));


    editSField(TopFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStageBase::getHandleCamera          (void) const
{
    SFUnrecCameraPtr::GetHandlePtr returnValue(
        new  SFUnrecCameraPtr::GetHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             const_cast<SimpleStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleStageBase::editHandleCamera         (void)
{
    SFUnrecCameraPtr::EditHandlePtr returnValue(
        new  SFUnrecCameraPtr::EditHandle(
             &_sfCamera,
             this->getType().getFieldDesc(CameraFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SimpleStage::setCamera,
                    static_cast<SimpleStage *>(this), ::boost::placeholders::_1));

    editSField(CameraFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStageBase::getHandleBackground      (void) const
{
    SFUnrecBackgroundPtr::GetHandlePtr returnValue(
        new  SFUnrecBackgroundPtr::GetHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             const_cast<SimpleStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleStageBase::editHandleBackground     (void)
{
    SFUnrecBackgroundPtr::EditHandlePtr returnValue(
        new  SFUnrecBackgroundPtr::EditHandle(
             &_sfBackground,
             this->getType().getFieldDesc(BackgroundFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&SimpleStage::setBackground,
                    static_cast<SimpleStage *>(this), ::boost::placeholders::_1));

    editSField(BackgroundFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStageBase::getHandleForegrounds     (void) const
{
    MFUnrecForegroundPtr::GetHandlePtr returnValue(
        new  MFUnrecForegroundPtr::GetHandle(
             &_mfForegrounds,
             this->getType().getFieldDesc(ForegroundsFieldId),
             const_cast<SimpleStageBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr SimpleStageBase::editHandleForegrounds    (void)
{
    MFUnrecForegroundPtr::EditHandlePtr returnValue(
        new  MFUnrecForegroundPtr::EditHandle(
             &_mfForegrounds,
             this->getType().getFieldDesc(ForegroundsFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&SimpleStage::pushToForegrounds,
                    static_cast<SimpleStage *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&SimpleStage::removeFromForegrounds,
                    static_cast<SimpleStage *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&SimpleStage::removeObjFromForegrounds,
                    static_cast<SimpleStage *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&SimpleStage::clearForegrounds,
                    static_cast<SimpleStage *>(this)));

    editMField(ForegroundsFieldMask, _mfForegrounds);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SimpleStageBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SimpleStage *pThis = static_cast<SimpleStage *>(this);

    pThis->execSync(static_cast<SimpleStage *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SimpleStageBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    SimpleStage *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SimpleStage *>(pRefAspect),
                  dynamic_cast<const SimpleStage *>(this));

    return returnValue;
}
#endif

void SimpleStageBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SimpleStage *>(this)->setCamera(NULL);

    static_cast<SimpleStage *>(this)->setBackground(NULL);

    static_cast<SimpleStage *>(this)->clearForegrounds();


}


OSG_END_NAMESPACE
