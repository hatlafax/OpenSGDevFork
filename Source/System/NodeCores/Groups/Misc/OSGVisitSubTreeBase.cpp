/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VisitSubTree!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGNode.h"                    // SubTreeRoot Class

#include "OSGVisitSubTreeBase.h"
#include "OSGVisitSubTree.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VisitSubTree
    VisitSubTree provides a way to point the renderer to another section of the
    scene graph for rendering. This is useful for multi-pass algorithms using
    OSG::Stage because it provides a way to render the same graph multiple times
    without duplicating the nodes.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Node *          VisitSubTreeBase::_sfSubTreeRoot
    Reference to the sub-graph to draw in place of this node.
    Whatever node is pointed to will be drawn here as if it was duplicated
    at this location.
*/

/*! \var UInt32          VisitSubTreeBase::_sfSubTreeTravMask
    This travmask will be used to update the action mask on traversal (and)
*/

/*! \var UInt32          VisitSubTreeBase::_sfTravMaskMode
    This defines how the travmask will be used to update the action mask on 
    traversal
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<VisitSubTree *, nsOSG>::_type(
    "VisitSubTreePtr", 
    "GroupPtr", 
    VisitSubTree::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(VisitSubTree *, nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void VisitSubTreeBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFWeakNodePtr::Description(
        SFWeakNodePtr::getClassType(),
        "subTreeRoot",
        "Reference to the sub-graph to draw in place of this node.\n"
        "Whatever node is pointed to will be drawn here as if it was duplicated\n"
        "at this location.\n",
        SubTreeRootFieldId, SubTreeRootFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FCustomAccess),
        static_cast<FieldEditMethodSig>(&VisitSubTree::editHandleSubTreeRoot),
        static_cast<FieldGetMethodSig >(&VisitSubTree::getHandleSubTreeRoot));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "subTreeTravMask",
        "This travmask will be used to update the action mask on traversal (and)\n",
        SubTreeTravMaskFieldId, SubTreeTravMaskFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VisitSubTree::editHandleSubTreeTravMask),
        static_cast<FieldGetMethodSig >(&VisitSubTree::getHandleSubTreeTravMask));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "travMaskMode",
        "This defines how the travmask will be used to update the action mask on \n"
        "traversal\n",
        TravMaskModeFieldId, TravMaskModeFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&VisitSubTree::editHandleTravMaskMode),
        static_cast<FieldGetMethodSig >(&VisitSubTree::getHandleTravMaskMode));

    oType.addInitialDesc(pDesc);
}


VisitSubTreeBase::TypeObject VisitSubTreeBase::_type(
    VisitSubTreeBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&VisitSubTreeBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&VisitSubTree::initMethod),
    reinterpret_cast<ExitContainerF>(&VisitSubTree::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&VisitSubTree::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"VisitSubTree\"\n"
    "   parent=\"Group\"\n"
    "   library=\"Group\"\n"
    "   pointerfieldtypes=\"none\"\n"
    "   structure=\"concrete\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   useLocalIncludes=\"false\"\n"
    "   isNodeCore=\"true\"\n"
    "   docGroupBase=\"GrpGroupMisc\"\n"
    "   >\n"
    "  VisitSubTree provides a way to point the renderer to another section of the\n"
    "  scene graph for rendering. This is useful for multi-pass algorithms using\n"
    "  OSG::Stage because it provides a way to render the same graph multiple times\n"
    "  without duplicating the nodes.\n"
    "  <Field\n"
    "     name=\"subTreeRoot\"\n"
    "     type=\"Node\"\n"
    "     category=\"weakpointer\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"NULL\"\n"
    "     access=\"protected\"\n"
    "     ptrFieldAccess = \"custom\"\n"
    "     >\n"
    "    Reference to the sub-graph to draw in place of this node.\n"
    "    Whatever node is pointed to will be drawn here as if it was duplicated\n"
    "    at this location.\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"subTreeTravMask\"\n"
    "     type=\"UInt32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"TypeTraits&lt;UInt32&gt;::getMax()\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    This travmask will be used to update the action mask on traversal (and)\n"
    "  </Field>\n"
    "  <Field\n"
    "     name=\"travMaskMode\"\n"
    "     type=\"UInt32\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     defaultValue=\"VisitSubTree::AndTravMask\"\n"
    "     access=\"public\"\n"
    "     >\n"
    "    This defines how the travmask will be used to update the action mask on \n"
    "    traversal\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "VisitSubTree provides a way to point the renderer to another section of the\n"
    "scene graph for rendering. This is useful for multi-pass algorithms using\n"
    "OSG::Stage because it provides a way to render the same graph multiple times\n"
    "without duplicating the nodes.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VisitSubTreeBase::getType(void)
{
    return _type;
}

const FieldContainerType &VisitSubTreeBase::getType(void) const
{
    return _type;
}

UInt32 VisitSubTreeBase::getContainerSize(void) const
{
    return sizeof(VisitSubTree);
}

/*------------------------- decorator get ------------------------------*/


//! Get the VisitSubTree::_sfSubTreeRoot field.
const SFWeakNodePtr *VisitSubTreeBase::getSFSubTreeRoot(void) const
{
    return &_sfSubTreeRoot;
}

//! Get the value of the VisitSubTree::_sfSubTreeRoot field.
Node * VisitSubTreeBase::getSubTreeRoot(void) const
{
    return _sfSubTreeRoot.getValue();
}



SFUInt32 *VisitSubTreeBase::editSFSubTreeTravMask(void)
{
    editSField(SubTreeTravMaskFieldMask);

    return &_sfSubTreeTravMask;
}

const SFUInt32 *VisitSubTreeBase::getSFSubTreeTravMask(void) const
{
    return &_sfSubTreeTravMask;
}


SFUInt32 *VisitSubTreeBase::editSFTravMaskMode(void)
{
    editSField(TravMaskModeFieldMask);

    return &_sfTravMaskMode;
}

const SFUInt32 *VisitSubTreeBase::getSFTravMaskMode(void) const
{
    return &_sfTravMaskMode;
}






/*------------------------------ access -----------------------------------*/

SizeT VisitSubTreeBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SubTreeRootFieldMask & whichField))
    {
        returnValue += _sfSubTreeRoot.getBinSize();
    }
    if(FieldBits::NoField != (SubTreeTravMaskFieldMask & whichField))
    {
        returnValue += _sfSubTreeTravMask.getBinSize();
    }
    if(FieldBits::NoField != (TravMaskModeFieldMask & whichField))
    {
        returnValue += _sfTravMaskMode.getBinSize();
    }

    return returnValue;
}

void VisitSubTreeBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SubTreeRootFieldMask & whichField))
    {
        _sfSubTreeRoot.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SubTreeTravMaskFieldMask & whichField))
    {
        _sfSubTreeTravMask.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TravMaskModeFieldMask & whichField))
    {
        _sfTravMaskMode.copyToBin(pMem);
    }
}

void VisitSubTreeBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SubTreeRootFieldMask & whichField))
    {
        editSField(SubTreeRootFieldMask);
        _sfSubTreeRoot.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SubTreeTravMaskFieldMask & whichField))
    {
        editSField(SubTreeTravMaskFieldMask);
        _sfSubTreeTravMask.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TravMaskModeFieldMask & whichField))
    {
        editSField(TravMaskModeFieldMask);
        _sfTravMaskMode.copyFromBin(pMem);
    }
}

//! create a new instance of the class
VisitSubTreeTransitPtr VisitSubTreeBase::createLocal(BitVector bFlags)
{
    VisitSubTreeTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<VisitSubTree>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
VisitSubTreeTransitPtr VisitSubTreeBase::createDependent(BitVector bFlags)
{
    VisitSubTreeTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<VisitSubTree>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
VisitSubTreeTransitPtr VisitSubTreeBase::create(void)
{
    VisitSubTreeTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<VisitSubTree>(tmpPtr);
    }

    return fc;
}

VisitSubTree *VisitSubTreeBase::createEmptyLocal(BitVector bFlags)
{
    VisitSubTree *returnValue;

    newPtr<VisitSubTree>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
VisitSubTree *VisitSubTreeBase::createEmpty(void)
{
    VisitSubTree *returnValue;

    newPtr<VisitSubTree>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr VisitSubTreeBase::shallowCopyLocal(
    BitVector bFlags) const
{
    VisitSubTree *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VisitSubTree *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr VisitSubTreeBase::shallowCopyDependent(
    BitVector bFlags) const
{
    VisitSubTree *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const VisitSubTree *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr VisitSubTreeBase::shallowCopy(void) const
{
    VisitSubTree *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const VisitSubTree *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

VisitSubTreeBase::VisitSubTreeBase(void) :
    Inherited(),
    _sfSubTreeRoot            (NULL),
    _sfSubTreeTravMask        (UInt32(TypeTraits<UInt32>::getMax())),
    _sfTravMaskMode           (UInt32(VisitSubTree::AndTravMask))
{
}

VisitSubTreeBase::VisitSubTreeBase(const VisitSubTreeBase &source) :
    Inherited(source),
    _sfSubTreeRoot            (NULL),
    _sfSubTreeTravMask        (source._sfSubTreeTravMask        ),
    _sfTravMaskMode           (source._sfTravMaskMode           )
{
}


/*-------------------------- destructors ----------------------------------*/

VisitSubTreeBase::~VisitSubTreeBase(void)
{
}

void VisitSubTreeBase::onCreate(const VisitSubTree *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        VisitSubTree *pThis = static_cast<VisitSubTree *>(this);

        pThis->setSubTreeRoot(source->getSubTreeRoot());
    }
}

GetFieldHandlePtr VisitSubTreeBase::getHandleSubTreeRoot     (void) const
{
    SFWeakNodePtr::GetHandlePtr returnValue(
        new  SFWeakNodePtr::GetHandle(
             &_sfSubTreeRoot,
             this->getType().getFieldDesc(SubTreeRootFieldId),
             const_cast<VisitSubTreeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VisitSubTreeBase::editHandleSubTreeRoot    (void)
{
    SFWeakNodePtr::EditHandlePtr returnValue(
        new  SFWeakNodePtr::EditHandle(
             &_sfSubTreeRoot,
             this->getType().getFieldDesc(SubTreeRootFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&VisitSubTree::setSubTreeRoot,
                    static_cast<VisitSubTree *>(this), ::boost::placeholders::_1));

    editSField(SubTreeRootFieldMask);

    return returnValue;
}

GetFieldHandlePtr VisitSubTreeBase::getHandleSubTreeTravMask (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSubTreeTravMask,
             this->getType().getFieldDesc(SubTreeTravMaskFieldId),
             const_cast<VisitSubTreeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VisitSubTreeBase::editHandleSubTreeTravMask(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSubTreeTravMask,
             this->getType().getFieldDesc(SubTreeTravMaskFieldId),
             this));


    editSField(SubTreeTravMaskFieldMask);

    return returnValue;
}

GetFieldHandlePtr VisitSubTreeBase::getHandleTravMaskMode    (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfTravMaskMode,
             this->getType().getFieldDesc(TravMaskModeFieldId),
             const_cast<VisitSubTreeBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr VisitSubTreeBase::editHandleTravMaskMode   (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfTravMaskMode,
             this->getType().getFieldDesc(TravMaskModeFieldId),
             this));


    editSField(TravMaskModeFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void VisitSubTreeBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    VisitSubTree *pThis = static_cast<VisitSubTree *>(this);

    pThis->execSync(static_cast<VisitSubTree *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *VisitSubTreeBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    VisitSubTree *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VisitSubTree *>(pRefAspect),
                  dynamic_cast<const VisitSubTree *>(this));

    return returnValue;
}
#endif

void VisitSubTreeBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<VisitSubTree *>(this)->setSubTreeRoot(NULL);


}


OSG_END_NAMESPACE
