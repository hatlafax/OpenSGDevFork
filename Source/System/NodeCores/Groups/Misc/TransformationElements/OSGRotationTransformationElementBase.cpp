/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: David Kabala (djkabala@gmail.com)                                *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RotationTransformationElement!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGRotationTransformationElementBase.h"
#include "OSGRotationTransformationElement.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::RotationTransformationElement
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var Vec3f           RotationTransformationElementBase::_sfAxis
    
*/

/*! \var Real32          RotationTransformationElementBase::_sfAngle
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<RotationTransformationElement *, nsOSG>::_type(
    "RotationTransformationElementPtr", 
    "TransformationElementPtr", 
    RotationTransformationElement::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(RotationTransformationElement *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           RotationTransformationElement *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           RotationTransformationElement *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void RotationTransformationElementBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "Axis",
        "",
        AxisFieldId, AxisFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RotationTransformationElement::editHandleAxis),
        static_cast<FieldGetMethodSig >(&RotationTransformationElement::getHandleAxis));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "Angle",
        "",
        AngleFieldId, AngleFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&RotationTransformationElement::editHandleAngle),
        static_cast<FieldGetMethodSig >(&RotationTransformationElement::getHandleAngle));

    oType.addInitialDesc(pDesc);
}


RotationTransformationElementBase::TypeObject RotationTransformationElementBase::_type(
    RotationTransformationElementBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&RotationTransformationElementBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&RotationTransformationElement::initMethod),
    reinterpret_cast<ExitContainerF>(&RotationTransformationElement::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&RotationTransformationElement::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"RotationTransformationElement\"\n"
    "    parent=\"TransformationElement\"\n"
    "    library=\"Group\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    authors=\"David Kabala (djkabala@gmail.com)                             \"\n"
    "    >\n"
    "  <Field\n"
    "      name=\"Axis\"\n"
    "      type=\"Vec3f\"\n"
    "      category=\"data\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      defaultValue=\"0.0f,1.0f,0.0f\"\n"
    "      >\n"
    "  </Field>\n"
    "  <Field\n"
    "      name=\"Angle\"\n"
    "      type=\"Real32\"\n"
    "      category=\"data\"\n"
    "      cardinality=\"single\"\n"
    "      visibility=\"external\"\n"
    "      access=\"public\"\n"
    "      defaultValue=\"0.0f\"\n"
    "      >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &RotationTransformationElementBase::getType(void)
{
    return _type;
}

const FieldContainerType &RotationTransformationElementBase::getType(void) const
{
    return _type;
}

UInt32 RotationTransformationElementBase::getContainerSize(void) const
{
    return sizeof(RotationTransformationElement);
}

/*------------------------- decorator get ------------------------------*/


SFVec3f *RotationTransformationElementBase::editSFAxis(void)
{
    editSField(AxisFieldMask);

    return &_sfAxis;
}

const SFVec3f *RotationTransformationElementBase::getSFAxis(void) const
{
    return &_sfAxis;
}


SFReal32 *RotationTransformationElementBase::editSFAngle(void)
{
    editSField(AngleFieldMask);

    return &_sfAngle;
}

const SFReal32 *RotationTransformationElementBase::getSFAngle(void) const
{
    return &_sfAngle;
}






/*------------------------------ access -----------------------------------*/

SizeT RotationTransformationElementBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        returnValue += _sfAxis.getBinSize();
    }
    if(FieldBits::NoField != (AngleFieldMask & whichField))
    {
        returnValue += _sfAngle.getBinSize();
    }

    return returnValue;
}

void RotationTransformationElementBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        _sfAxis.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AngleFieldMask & whichField))
    {
        _sfAngle.copyToBin(pMem);
    }
}

void RotationTransformationElementBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AxisFieldMask & whichField))
    {
        editSField(AxisFieldMask);
        _sfAxis.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AngleFieldMask & whichField))
    {
        editSField(AngleFieldMask);
        _sfAngle.copyFromBin(pMem);
    }
}

//! create a new instance of the class
RotationTransformationElementTransitPtr RotationTransformationElementBase::createLocal(BitVector bFlags)
{
    RotationTransformationElementTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<RotationTransformationElement>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
RotationTransformationElementTransitPtr RotationTransformationElementBase::createDependent(BitVector bFlags)
{
    RotationTransformationElementTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<RotationTransformationElement>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
RotationTransformationElementTransitPtr RotationTransformationElementBase::create(void)
{
    RotationTransformationElementTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<RotationTransformationElement>(tmpPtr);
    }

    return fc;
}

RotationTransformationElement *RotationTransformationElementBase::createEmptyLocal(BitVector bFlags)
{
    RotationTransformationElement *returnValue;

    newPtr<RotationTransformationElement>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
RotationTransformationElement *RotationTransformationElementBase::createEmpty(void)
{
    RotationTransformationElement *returnValue;

    newPtr<RotationTransformationElement>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr RotationTransformationElementBase::shallowCopyLocal(
    BitVector bFlags) const
{
    RotationTransformationElement *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const RotationTransformationElement *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr RotationTransformationElementBase::shallowCopyDependent(
    BitVector bFlags) const
{
    RotationTransformationElement *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const RotationTransformationElement *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr RotationTransformationElementBase::shallowCopy(void) const
{
    RotationTransformationElement *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const RotationTransformationElement *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

RotationTransformationElementBase::RotationTransformationElementBase(void) :
    Inherited(),
    _sfAxis                   (Vec3f(0.0f,1.0f,0.0f)),
    _sfAngle                  (Real32(0.0f))
{
}

RotationTransformationElementBase::RotationTransformationElementBase(const RotationTransformationElementBase &source) :
    Inherited(source),
    _sfAxis                   (source._sfAxis                   ),
    _sfAngle                  (source._sfAngle                  )
{
}


/*-------------------------- destructors ----------------------------------*/

RotationTransformationElementBase::~RotationTransformationElementBase(void)
{
}


GetFieldHandlePtr RotationTransformationElementBase::getHandleAxis            (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfAxis,
             this->getType().getFieldDesc(AxisFieldId),
             const_cast<RotationTransformationElementBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RotationTransformationElementBase::editHandleAxis           (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfAxis,
             this->getType().getFieldDesc(AxisFieldId),
             this));


    editSField(AxisFieldMask);

    return returnValue;
}

GetFieldHandlePtr RotationTransformationElementBase::getHandleAngle           (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAngle,
             this->getType().getFieldDesc(AngleFieldId),
             const_cast<RotationTransformationElementBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr RotationTransformationElementBase::editHandleAngle          (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAngle,
             this->getType().getFieldDesc(AngleFieldId),
             this));


    editSField(AngleFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void RotationTransformationElementBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    RotationTransformationElement *pThis = static_cast<RotationTransformationElement *>(this);

    pThis->execSync(static_cast<RotationTransformationElement *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *RotationTransformationElementBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    RotationTransformationElement *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const RotationTransformationElement *>(pRefAspect),
                  dynamic_cast<const RotationTransformationElement *>(this));

    return returnValue;
}
#endif

void RotationTransformationElementBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
