/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class WIN32Window!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"




#include "OSGWIN32WindowBase.h"
#include "OSGWIN32Window.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::WIN32Window
    The class for WIN32 windows.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var HWND            WIN32WindowBase::_sfHwnd
    
*/

/*! \var HDC             WIN32WindowBase::_sfHdc
    
*/

/*! \var HGLRC           WIN32WindowBase::_sfHglrc
    
*/

/*! \var Int32           WIN32WindowBase::_sfDummy0
    This field only exists so that all platform window types have the same
    number of fields.
    Otherwise transmitting field masks across a cluster is not possible.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<WIN32Window *, nsOSG>::_type(
    "WIN32WindowPtr", 
    "WindowPtr", 
    WIN32Window::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(WIN32Window *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           WIN32Window *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           WIN32Window *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void WIN32WindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFHWND::Description(
        SFHWND::getClassType(),
        "hwnd",
        "",
        HwndFieldId, HwndFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&WIN32Window::editHandleHwnd),
        static_cast<FieldGetMethodSig >(&WIN32Window::getHandleHwnd));

    oType.addInitialDesc(pDesc);

    pDesc = new SFHDC::Description(
        SFHDC::getClassType(),
        "hdc",
        "",
        HdcFieldId, HdcFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&WIN32Window::editHandleHdc),
        static_cast<FieldGetMethodSig >(&WIN32Window::getHandleHdc));

    oType.addInitialDesc(pDesc);

    pDesc = new SFHGLRC::Description(
        SFHGLRC::getClassType(),
        "hglrc",
        "",
        HglrcFieldId, HglrcFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&WIN32Window::editHandleHglrc),
        static_cast<FieldGetMethodSig >(&WIN32Window::getHandleHglrc));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dummy0",
        "This field only exists so that all platform window types have the same\n"
        "number of fields.\n"
        "Otherwise transmitting field masks across a cluster is not possible.\n",
        Dummy0FieldId, Dummy0FieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&WIN32Window::editHandleDummy0),
        static_cast<FieldGetMethodSig >(&WIN32Window::getHandleDummy0));

    oType.addInitialDesc(pDesc);
}


WIN32WindowBase::TypeObject WIN32WindowBase::_type(
    WIN32WindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&WIN32WindowBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&WIN32Window::initMethod),
    reinterpret_cast<ExitContainerF>(&WIN32Window::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&WIN32Window::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"WIN32Window\"\n"
    "    parent=\"Window\"\n"
    "    library=\"WindowWIN32\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    docGroupBase=\"GrpWindowWIN32\"\n"
    "    >\n"
    "    The class for WIN32 windows.\n"
    "    <Field\n"
    "        name=\"hwnd\"\n"
    "        type=\"HWND\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldHeader=\"OSGWIN32WindowDataFields.h\"\n"
    "        access=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"hdc\"\n"
    "        type=\"HDC\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldHeader=\"OSGWIN32WindowDataFields.h\"\n"
    "        access=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"hglrc\"\n"
    "        type=\"HGLRC\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"0\"\n"
    "        fieldHeader=\"OSGWIN32WindowDataFields.h\"\n"
    "        access=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "        >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dummy0\"\n"
    "        type=\"Int32\"\n"
    "        category=\"data\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"internal\"\n"
    "        defaultValue=\"0\"\n"
    "        access=\"public\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "        >\n"
    "        This field only exists so that all platform window types have the same\n"
    "        number of fields.\n"
    "        Otherwise transmitting field masks across a cluster is not possible.\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "The class for WIN32 windows.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &WIN32WindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &WIN32WindowBase::getType(void) const
{
    return _type;
}

UInt32 WIN32WindowBase::getContainerSize(void) const
{
    return sizeof(WIN32Window);
}

/*------------------------- decorator get ------------------------------*/


SFHWND *WIN32WindowBase::editSFHwnd(void)
{
    editSField(HwndFieldMask);

    return &_sfHwnd;
}

const SFHWND *WIN32WindowBase::getSFHwnd(void) const
{
    return &_sfHwnd;
}


SFHDC *WIN32WindowBase::editSFHdc(void)
{
    editSField(HdcFieldMask);

    return &_sfHdc;
}

const SFHDC *WIN32WindowBase::getSFHdc(void) const
{
    return &_sfHdc;
}


SFHGLRC *WIN32WindowBase::editSFHglrc(void)
{
    editSField(HglrcFieldMask);

    return &_sfHglrc;
}

const SFHGLRC *WIN32WindowBase::getSFHglrc(void) const
{
    return &_sfHglrc;
}


SFInt32 *WIN32WindowBase::editSFDummy0(void)
{
    editSField(Dummy0FieldMask);

    return &_sfDummy0;
}

const SFInt32 *WIN32WindowBase::getSFDummy0(void) const
{
    return &_sfDummy0;
}






/*------------------------------ access -----------------------------------*/

SizeT WIN32WindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (HwndFieldMask & whichField))
    {
        returnValue += _sfHwnd.getBinSize();
    }
    if(FieldBits::NoField != (HdcFieldMask & whichField))
    {
        returnValue += _sfHdc.getBinSize();
    }
    if(FieldBits::NoField != (HglrcFieldMask & whichField))
    {
        returnValue += _sfHglrc.getBinSize();
    }
    if(FieldBits::NoField != (Dummy0FieldMask & whichField))
    {
        returnValue += _sfDummy0.getBinSize();
    }

    return returnValue;
}

void WIN32WindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (HwndFieldMask & whichField))
    {
        _sfHwnd.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HdcFieldMask & whichField))
    {
        _sfHdc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HglrcFieldMask & whichField))
    {
        _sfHglrc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Dummy0FieldMask & whichField))
    {
        _sfDummy0.copyToBin(pMem);
    }
}

void WIN32WindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (HwndFieldMask & whichField))
    {
        editSField(HwndFieldMask);
        _sfHwnd.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HdcFieldMask & whichField))
    {
        editSField(HdcFieldMask);
        _sfHdc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HglrcFieldMask & whichField))
    {
        editSField(HglrcFieldMask);
        _sfHglrc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Dummy0FieldMask & whichField))
    {
        editSField(Dummy0FieldMask);
        _sfDummy0.copyFromBin(pMem);
    }
}

//! create a new instance of the class
WIN32WindowTransitPtr WIN32WindowBase::createLocal(BitVector bFlags)
{
    WIN32WindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<WIN32Window>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
WIN32WindowTransitPtr WIN32WindowBase::createDependent(BitVector bFlags)
{
    WIN32WindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<WIN32Window>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
WIN32WindowTransitPtr WIN32WindowBase::create(void)
{
    WIN32WindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<WIN32Window>(tmpPtr);
    }

    return fc;
}

WIN32Window *WIN32WindowBase::createEmptyLocal(BitVector bFlags)
{
    WIN32Window *returnValue;

    newPtr<WIN32Window>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
WIN32Window *WIN32WindowBase::createEmpty(void)
{
    WIN32Window *returnValue;

    newPtr<WIN32Window>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr WIN32WindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    WIN32Window *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const WIN32Window *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr WIN32WindowBase::shallowCopyDependent(
    BitVector bFlags) const
{
    WIN32Window *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const WIN32Window *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr WIN32WindowBase::shallowCopy(void) const
{
    WIN32Window *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const WIN32Window *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

WIN32WindowBase::WIN32WindowBase(void) :
    Inherited(),
    _sfHwnd                   (HWND(0)),
    _sfHdc                    (HDC(0)),
    _sfHglrc                  (HGLRC(0)),
    _sfDummy0                 (Int32(0))
{
}

WIN32WindowBase::WIN32WindowBase(const WIN32WindowBase &source) :
    Inherited(source),
    _sfHwnd                   (source._sfHwnd                   ),
    _sfHdc                    (source._sfHdc                    ),
    _sfHglrc                  (source._sfHglrc                  ),
    _sfDummy0                 (source._sfDummy0                 )
{
}


/*-------------------------- destructors ----------------------------------*/

WIN32WindowBase::~WIN32WindowBase(void)
{
}


GetFieldHandlePtr WIN32WindowBase::getHandleHwnd            (void) const
{
    SFHWND::GetHandlePtr returnValue(
        new  SFHWND::GetHandle(
             &_sfHwnd,
             this->getType().getFieldDesc(HwndFieldId),
             const_cast<WIN32WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WIN32WindowBase::editHandleHwnd           (void)
{
    SFHWND::EditHandlePtr returnValue(
        new  SFHWND::EditHandle(
             &_sfHwnd,
             this->getType().getFieldDesc(HwndFieldId),
             this));


    editSField(HwndFieldMask);

    return returnValue;
}

GetFieldHandlePtr WIN32WindowBase::getHandleHdc             (void) const
{
    SFHDC::GetHandlePtr returnValue(
        new  SFHDC::GetHandle(
             &_sfHdc,
             this->getType().getFieldDesc(HdcFieldId),
             const_cast<WIN32WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WIN32WindowBase::editHandleHdc            (void)
{
    SFHDC::EditHandlePtr returnValue(
        new  SFHDC::EditHandle(
             &_sfHdc,
             this->getType().getFieldDesc(HdcFieldId),
             this));


    editSField(HdcFieldMask);

    return returnValue;
}

GetFieldHandlePtr WIN32WindowBase::getHandleHglrc           (void) const
{
    SFHGLRC::GetHandlePtr returnValue(
        new  SFHGLRC::GetHandle(
             &_sfHglrc,
             this->getType().getFieldDesc(HglrcFieldId),
             const_cast<WIN32WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WIN32WindowBase::editHandleHglrc          (void)
{
    SFHGLRC::EditHandlePtr returnValue(
        new  SFHGLRC::EditHandle(
             &_sfHglrc,
             this->getType().getFieldDesc(HglrcFieldId),
             this));


    editSField(HglrcFieldMask);

    return returnValue;
}

GetFieldHandlePtr WIN32WindowBase::getHandleDummy0          (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDummy0,
             this->getType().getFieldDesc(Dummy0FieldId),
             const_cast<WIN32WindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr WIN32WindowBase::editHandleDummy0         (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDummy0,
             this->getType().getFieldDesc(Dummy0FieldId),
             this));


    editSField(Dummy0FieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void WIN32WindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    WIN32Window *pThis = static_cast<WIN32Window *>(this);

    pThis->execSync(static_cast<WIN32Window *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *WIN32WindowBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    WIN32Window *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const WIN32Window *>(pRefAspect),
                  dynamic_cast<const WIN32Window *>(this));

    return returnValue;
}
#endif

void WIN32WindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
