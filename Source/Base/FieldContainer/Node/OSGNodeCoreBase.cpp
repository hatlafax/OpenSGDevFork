/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class NodeCore!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // Parents Class

#include "OSGNodeCoreBase.h"
#include "OSGNodeCore.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::NodeCore
    Abstract base type for all cores, which define the behavior (semantics) of
    the node(s) they belong to.
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var FieldContainer * NodeCoreBase::_mfParents
    Parents of this core. Cores can have more than one parent, i.e. in general
    they may be used in more than one place in the scenegraph.
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<NodeCore *, nsOSG>::_type(
    "NodeCorePtr", 
    "AttachmentContainerPtr", 
    NodeCore::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(NodeCore *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           NodeCore *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           NodeCore *,
                           nsOSG)

DataType &FieldTraits< NodeCore *, nsOSG + 1 >::getType(void)
{
    return FieldTraits<NodeCore *, nsOSG>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      NodeCore *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      NodeCore *,
                      UnrecordedRefCountPolicy,
                      nsOSG + 1)


DataType &FieldTraits<NodeCore *, nsOSG + 2 >::getType(void)
{
    return FieldTraits<NodeCore *, nsOSG>::getType();
}


OSG_SFIELDTYPE_INST(ParentPointerSField,
                    NodeCore *,
                    NoRefCountPolicy,
                    nsOSG + 2);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerSField,
                         NodeCore *,
                         NoRefCountPolicy,
                         nsOSG + 2)


OSG_MFIELDTYPE_INST(ParentPointerMField,
                    NodeCore *,
                    NoRefCountPolicy,
                    2);

OSG_FIELD_DLLEXPORT_DEF3(ParentPointerMField,
                         NodeCore *,
                         NoRefCountPolicy,
                         2)


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void NodeCoreBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFParentFieldContainerPtr::Description(
        MFParentFieldContainerPtr::getClassType(),
        "Parents",
        "Parents of this core. Cores can have more than one parent, i.e. in general\n"
        "they may be used in more than one place in the scenegraph.\n",
        ParentsFieldId, ParentsFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&NodeCore::invalidEditField),
        static_cast     <FieldGetMethodSig >(&NodeCore::invalidGetField));

    oType.addInitialDesc(pDesc);
}


NodeCoreBase::TypeObject NodeCoreBase::_type(
    NodeCoreBase::getClassname(),
    Inherited::getClassname(),
    "NodeCore",
    nsOSG, //Namespace
    NULL,
    reinterpret_cast<InitContainerF>(&NodeCore::initMethod),
    reinterpret_cast<ExitContainerF>(&NodeCore::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&NodeCore::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"NodeCore\"\n"
    "   parent=\"AttachmentContainer\"\n"
    "   library=\"Base\"\n"
    "   structure=\"abstract\"\n"
    "   group=\"NodeCore\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   parentFields=\"both\"\n"
    "   childFields=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   isNodeCore=\"true\"\n"
    "   docGroupBase=\"GrpBaseFieldContainer\"\n"
    "   >\n"
    "  Abstract base type for all cores, which define the behavior (semantics) of\n"
    "  the node(s) they belong to.\n"
    "\n"
    "  <Field\n"
    "     name=\"Parents\"\n"
    "     category=\"parentpointer\"\n"
    "     type=\"FieldContainer\"\n"
    "     cardinality=\"multi\"\n"
    "     access=\"none\"\n"
    "     visibility=\"internal\"\n"
    "     >\n"
    "    Parents of this core. Cores can have more than one parent, i.e. in general\n"
    "    they may be used in more than one place in the scenegraph.\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    "Abstract base type for all cores, which define the behavior (semantics) of\n"
    "the node(s) they belong to.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &NodeCoreBase::getType(void)
{
    return _type;
}

const FieldContainerType &NodeCoreBase::getType(void) const
{
    return _type;
}

UInt32 NodeCoreBase::getContainerSize(void) const
{
    return sizeof(NodeCore);
}

/*------------------------- decorator get ------------------------------*/







/*------------------------------ access -----------------------------------*/

SizeT NodeCoreBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentsFieldMask & whichField))
    {
        returnValue += _mfParents.getBinSize();
    }

    return returnValue;
}

void NodeCoreBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentsFieldMask & whichField))
    {
        _mfParents.copyToBin(pMem);
    }
}

void NodeCoreBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentsFieldMask & whichField))
    {
        editMField(ParentsFieldMask, _mfParents);
        _mfParents.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

NodeCoreBase::NodeCoreBase(void) :
    Inherited(),
    _mfParents                ()
{
}

NodeCoreBase::NodeCoreBase(const NodeCoreBase &source) :
    Inherited(source),
    _mfParents                ()
{
}


/*-------------------------- destructors ----------------------------------*/

NodeCoreBase::~NodeCoreBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool NodeCoreBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentsFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            editMField(ParentsFieldMask, _mfParents);

            _mfParents.push_back(pTypedParent, childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool NodeCoreBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentsFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            Int32 iParentIdx = _mfParents.findIndex(pTypedParent);

            if(iParentIdx != -1)
            {
                editMField(ParentsFieldMask, _mfParents);

                _mfParents.erase(iParentIdx);

                return true;
            }

            SWARNING << "Child (["          << this
                     << "] id ["            << this->getId()
                     << "] type ["          << this->getType().getCName()
                     << "] parentFieldId [" << parentFieldId
                     << "]) - Parent (["    << pParent
                     << "] id ["            << pParent->getId()
                     << "] type ["          << pParent->getType().getCName()
                     << "]): link inconsistent!"
                     << std::endl;

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}



GetFieldHandlePtr NodeCoreBase::getHandleParents         (void) const
{
    MFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr NodeCoreBase::editHandleParents        (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void NodeCoreBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    NodeCore *pThis = static_cast<NodeCore *>(this);

    pThis->execSync(static_cast<NodeCore *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void NodeCoreBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
