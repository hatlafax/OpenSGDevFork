/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class StringToFieldContainerMap!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGKeyValue.h"                // Values Class

#include "OSGStringToFieldContainerMapBase.h"
#include "OSGStringToFieldContainerMap.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::StringToFieldContainerMap
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var KeyValue *      StringToFieldContainerMapBase::_mfValues
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<StringToFieldContainerMap *, nsOSG>::_type(
    "StringToFieldContainerMapPtr", 
    "FieldContainerPtr", 
    StringToFieldContainerMap::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(StringToFieldContainerMap *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           StringToFieldContainerMap *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           StringToFieldContainerMap *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void StringToFieldContainerMapBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecKeyValuePtr::Description(
        MFUnrecKeyValuePtr::getClassType(),
        "values",
        "",
        ValuesFieldId, ValuesFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&StringToFieldContainerMap::editHandleValues),
        static_cast<FieldGetMethodSig >(&StringToFieldContainerMap::getHandleValues));

    oType.addInitialDesc(pDesc);
}


StringToFieldContainerMapBase::TypeObject StringToFieldContainerMapBase::_type(
    StringToFieldContainerMapBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&StringToFieldContainerMapBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&StringToFieldContainerMap::initMethod),
    reinterpret_cast<ExitContainerF>(&StringToFieldContainerMap::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&StringToFieldContainerMap::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"StringToFieldContainerMap\"\n"
    "   parent=\"FieldContainer\"\n"
    "   library=\"Base\"\n"
    "   structure=\"concrete\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   childFields=\"none\"\n"
    "   docGroupBase=\"GrpBaseFieldContainer\"\n"
    ">\n"
    "  <Field\n"
    "\t name=\"values\"\n"
    "\t type=\"KeyValuePtr\"\n"
    "\t cardinality=\"multi\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"protected\"\n"
    "\t >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &StringToFieldContainerMapBase::getType(void)
{
    return _type;
}

const FieldContainerType &StringToFieldContainerMapBase::getType(void) const
{
    return _type;
}

UInt32 StringToFieldContainerMapBase::getContainerSize(void) const
{
    return sizeof(StringToFieldContainerMap);
}

/*------------------------- decorator get ------------------------------*/


//! Get the StringToFieldContainerMap::_mfValues field.
const MFUnrecKeyValuePtr *StringToFieldContainerMapBase::getMFValues(void) const
{
    return &_mfValues;
}

MFUnrecKeyValuePtr  *StringToFieldContainerMapBase::editMFValues         (void)
{
    editMField(ValuesFieldMask, _mfValues);

    return &_mfValues;
}
KeyValue * StringToFieldContainerMapBase::getValues(const UInt32 index) const
{
    return _mfValues[index];
}



void StringToFieldContainerMapBase::pushToValues(KeyValue * const value)
{
    editMField(ValuesFieldMask, _mfValues);

    _mfValues.push_back(value);
}

void StringToFieldContainerMapBase::assignValues   (const MFUnrecKeyValuePtr &value)
{
    MFUnrecKeyValuePtr::const_iterator elemIt  =
        value.begin();
    MFUnrecKeyValuePtr::const_iterator elemEnd =
        value.end  ();

    static_cast<StringToFieldContainerMap *>(this)->clearValues();

    while(elemIt != elemEnd)
    {
        this->pushToValues(*elemIt);

        ++elemIt;
    }
}

void StringToFieldContainerMapBase::removeFromValues(UInt32 uiIndex)
{
    if(uiIndex < _mfValues.size())
    {
        editMField(ValuesFieldMask, _mfValues);

        _mfValues.erase(uiIndex);
    }
}

void StringToFieldContainerMapBase::removeObjFromValues(KeyValue * const value)
{
    Int32 iElemIdx = _mfValues.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ValuesFieldMask, _mfValues);

        _mfValues.erase(iElemIdx);
    }
}
void StringToFieldContainerMapBase::clearValues(void)
{
    editMField(ValuesFieldMask, _mfValues);


    _mfValues.clear();
}



/*------------------------------ access -----------------------------------*/

SizeT StringToFieldContainerMapBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ValuesFieldMask & whichField))
    {
        returnValue += _mfValues.getBinSize();
    }

    return returnValue;
}

void StringToFieldContainerMapBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ValuesFieldMask & whichField))
    {
        _mfValues.copyToBin(pMem);
    }
}

void StringToFieldContainerMapBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ValuesFieldMask & whichField))
    {
        editMField(ValuesFieldMask, _mfValues);
        _mfValues.copyFromBin(pMem);
    }
}

//! create a new instance of the class
StringToFieldContainerMapTransitPtr StringToFieldContainerMapBase::createLocal(BitVector bFlags)
{
    StringToFieldContainerMapTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<StringToFieldContainerMap>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
StringToFieldContainerMapTransitPtr StringToFieldContainerMapBase::createDependent(BitVector bFlags)
{
    StringToFieldContainerMapTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<StringToFieldContainerMap>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
StringToFieldContainerMapTransitPtr StringToFieldContainerMapBase::create(void)
{
    StringToFieldContainerMapTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<StringToFieldContainerMap>(tmpPtr);
    }

    return fc;
}

StringToFieldContainerMap *StringToFieldContainerMapBase::createEmptyLocal(BitVector bFlags)
{
    StringToFieldContainerMap *returnValue;

    newPtr<StringToFieldContainerMap>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
StringToFieldContainerMap *StringToFieldContainerMapBase::createEmpty(void)
{
    StringToFieldContainerMap *returnValue;

    newPtr<StringToFieldContainerMap>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr StringToFieldContainerMapBase::shallowCopyLocal(
    BitVector bFlags) const
{
    StringToFieldContainerMap *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const StringToFieldContainerMap *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr StringToFieldContainerMapBase::shallowCopyDependent(
    BitVector bFlags) const
{
    StringToFieldContainerMap *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const StringToFieldContainerMap *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr StringToFieldContainerMapBase::shallowCopy(void) const
{
    StringToFieldContainerMap *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const StringToFieldContainerMap *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

StringToFieldContainerMapBase::StringToFieldContainerMapBase(void) :
    Inherited(),
    _mfValues                 ()
{
}

StringToFieldContainerMapBase::StringToFieldContainerMapBase(const StringToFieldContainerMapBase &source) :
    Inherited(source),
    _mfValues                 ()
{
}


/*-------------------------- destructors ----------------------------------*/

StringToFieldContainerMapBase::~StringToFieldContainerMapBase(void)
{
}

void StringToFieldContainerMapBase::onCreate(const StringToFieldContainerMap *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        StringToFieldContainerMap *pThis = static_cast<StringToFieldContainerMap *>(this);

        MFUnrecKeyValuePtr::const_iterator ValuesIt  =
            source->_mfValues.begin();
        MFUnrecKeyValuePtr::const_iterator ValuesEnd =
            source->_mfValues.end  ();

        while(ValuesIt != ValuesEnd)
        {
            pThis->pushToValues(*ValuesIt);

            ++ValuesIt;
        }
    }
}

GetFieldHandlePtr StringToFieldContainerMapBase::getHandleValues          (void) const
{
    MFUnrecKeyValuePtr::GetHandlePtr returnValue(
        new  MFUnrecKeyValuePtr::GetHandle(
             &_mfValues,
             this->getType().getFieldDesc(ValuesFieldId),
             const_cast<StringToFieldContainerMapBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr StringToFieldContainerMapBase::editHandleValues         (void)
{
    MFUnrecKeyValuePtr::EditHandlePtr returnValue(
        new  MFUnrecKeyValuePtr::EditHandle(
             &_mfValues,
             this->getType().getFieldDesc(ValuesFieldId),
             this));

    returnValue->setAddMethod(
        boost::bind(&StringToFieldContainerMap::pushToValues,
                    static_cast<StringToFieldContainerMap *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveMethod(
        boost::bind(&StringToFieldContainerMap::removeFromValues,
                    static_cast<StringToFieldContainerMap *>(this), ::boost::placeholders::_1));
    returnValue->setRemoveObjMethod(
        boost::bind(&StringToFieldContainerMap::removeObjFromValues,
                    static_cast<StringToFieldContainerMap *>(this), ::boost::placeholders::_1));
    returnValue->setClearMethod(
        boost::bind(&StringToFieldContainerMap::clearValues,
                    static_cast<StringToFieldContainerMap *>(this)));

    editMField(ValuesFieldMask, _mfValues);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void StringToFieldContainerMapBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    StringToFieldContainerMap *pThis = static_cast<StringToFieldContainerMap *>(this);

    pThis->execSync(static_cast<StringToFieldContainerMap *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *StringToFieldContainerMapBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    StringToFieldContainerMap *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const StringToFieldContainerMap *>(pRefAspect),
                  dynamic_cast<const StringToFieldContainerMap *>(this));

    return returnValue;
}
#endif

void StringToFieldContainerMapBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<StringToFieldContainerMap *>(this)->clearValues();


}


OSG_END_NAMESPACE
