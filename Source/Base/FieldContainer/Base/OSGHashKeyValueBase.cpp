/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class HashKeyValue!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>

#ifdef WIN32 
#pragma warning(disable: 4355) // turn off 'this' : used in base member initializer list warning
#pragma warning(disable: 4290) // disable exception specification warning
#endif

#include "OSGConfig.h"



#include "OSGFieldContainer.h"          // Value Class

#include "OSGHashKeyValueBase.h"
#include "OSGHashKeyValue.h"

#include <boost/bind/bind.hpp>

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::HashKeyValue
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var UInt64          HashKeyValueBase::_sfKey
    
*/

/*! \var FieldContainer * HashKeyValueBase::_sfValue
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
PointerType FieldTraits<HashKeyValue *, nsOSG>::_type(
    "HashKeyValuePtr", 
    "FieldContainerPtr", 
    HashKeyValue::getClassType(),
    nsOSG);
#endif

OSG_FIELDTRAITS_GETTYPE_NS(HashKeyValue *, nsOSG)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           HashKeyValue *,
                           nsOSG)

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           HashKeyValue *,
                           nsOSG)

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void HashKeyValueBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUInt64::Description(
        SFUInt64::getClassType(),
        "key",
        "",
        KeyFieldId, KeyFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HashKeyValue::editHandleKey),
        static_cast<FieldGetMethodSig >(&HashKeyValue::getHandleKey));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFieldContainerPtr::Description(
        SFUnrecFieldContainerPtr::getClassType(),
        "value",
        "",
        ValueFieldId, ValueFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&HashKeyValue::editHandleValue),
        static_cast<FieldGetMethodSig >(&HashKeyValue::getHandleValue));

    oType.addInitialDesc(pDesc);
}


HashKeyValueBase::TypeObject HashKeyValueBase::_type(
    HashKeyValueBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    nsOSG, //Namespace
    reinterpret_cast<PrototypeCreateF>(&HashKeyValueBase::createEmptyLocal),
    reinterpret_cast<InitContainerF>(&HashKeyValue::initMethod),
    reinterpret_cast<ExitContainerF>(&HashKeyValue::exitMethod),
    reinterpret_cast<InitalInsertDescFunc>(
        reinterpret_cast<void *>(&HashKeyValue::classDescInserter)),
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"HashKeyValue\"\n"
    "   parent=\"FieldContainer\"\n"
    "   library=\"Base\"\n"
    "   structure=\"concrete\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   docGroupBase=\"GrpBaseFieldContainer\"\n"
    ">\n"
    "  <Field\n"
    "\t name=\"key\"\n"
    "\t type=\"UInt64\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "         defaultValue=\"0\"\n"
    "\t >\n"
    "  </Field>\n"
    "  <Field\n"
    "\t name=\"value\"\n"
    "\t type=\"FieldContainerPtr\"\n"
    "\t cardinality=\"single\"\n"
    "\t visibility=\"external\"\n"
    "\t access=\"public\"\n"
    "         defaultValue=\"NULL\"\n"
    "\t >\n"
    "  </Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &HashKeyValueBase::getType(void)
{
    return _type;
}

const FieldContainerType &HashKeyValueBase::getType(void) const
{
    return _type;
}

UInt32 HashKeyValueBase::getContainerSize(void) const
{
    return sizeof(HashKeyValue);
}

/*------------------------- decorator get ------------------------------*/


SFUInt64 *HashKeyValueBase::editSFKey(void)
{
    editSField(KeyFieldMask);

    return &_sfKey;
}

const SFUInt64 *HashKeyValueBase::getSFKey(void) const
{
    return &_sfKey;
}


//! Get the HashKeyValue::_sfValue field.
const SFUnrecFieldContainerPtr *HashKeyValueBase::getSFValue(void) const
{
    return &_sfValue;
}

SFUnrecFieldContainerPtr *HashKeyValueBase::editSFValue          (void)
{
    editSField(ValueFieldMask);

    return &_sfValue;
}

//! Get the value of the HashKeyValue::_sfValue field.
FieldContainer * HashKeyValueBase::getValue(void) const
{
    return _sfValue.getValue();
}

//! Set the value of the HashKeyValue::_sfValue field.
void HashKeyValueBase::setValue(FieldContainer * const value)
{
    editSField(ValueFieldMask);

    _sfValue.setValue(value);
}






/*------------------------------ access -----------------------------------*/

SizeT HashKeyValueBase::getBinSize(ConstFieldMaskArg whichField)
{
    SizeT returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (KeyFieldMask & whichField))
    {
        returnValue += _sfKey.getBinSize();
    }
    if(FieldBits::NoField != (ValueFieldMask & whichField))
    {
        returnValue += _sfValue.getBinSize();
    }

    return returnValue;
}

void HashKeyValueBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (KeyFieldMask & whichField))
    {
        _sfKey.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ValueFieldMask & whichField))
    {
        _sfValue.copyToBin(pMem);
    }
}

void HashKeyValueBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (KeyFieldMask & whichField))
    {
        editSField(KeyFieldMask);
        _sfKey.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ValueFieldMask & whichField))
    {
        editSField(ValueFieldMask);
        _sfValue.copyFromBin(pMem);
    }
}

//! create a new instance of the class
HashKeyValueTransitPtr HashKeyValueBase::createLocal(BitVector bFlags)
{
    HashKeyValueTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<HashKeyValue>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
HashKeyValueTransitPtr HashKeyValueBase::createDependent(BitVector bFlags)
{
    HashKeyValueTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<HashKeyValue>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
HashKeyValueTransitPtr HashKeyValueBase::create(void)
{
    HashKeyValueTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<HashKeyValue>(tmpPtr);
    }

    return fc;
}

HashKeyValue *HashKeyValueBase::createEmptyLocal(BitVector bFlags)
{
    HashKeyValue *returnValue;

    newPtr<HashKeyValue>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
HashKeyValue *HashKeyValueBase::createEmpty(void)
{
    HashKeyValue *returnValue;

    newPtr<HashKeyValue>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr HashKeyValueBase::shallowCopyLocal(
    BitVector bFlags) const
{
    HashKeyValue *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const HashKeyValue *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr HashKeyValueBase::shallowCopyDependent(
    BitVector bFlags) const
{
    HashKeyValue *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const HashKeyValue *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr HashKeyValueBase::shallowCopy(void) const
{
    HashKeyValue *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const HashKeyValue *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

HashKeyValueBase::HashKeyValueBase(void) :
    Inherited(),
    _sfKey                    (UInt64(0)),
    _sfValue                  (NULL)
{
}

HashKeyValueBase::HashKeyValueBase(const HashKeyValueBase &source) :
    Inherited(source),
    _sfKey                    (source._sfKey                    ),
    _sfValue                  (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

HashKeyValueBase::~HashKeyValueBase(void)
{
}

void HashKeyValueBase::onCreate(const HashKeyValue *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        HashKeyValue *pThis = static_cast<HashKeyValue *>(this);

        pThis->setValue(source->getValue());
    }
}

GetFieldHandlePtr HashKeyValueBase::getHandleKey             (void) const
{
    SFUInt64::GetHandlePtr returnValue(
        new  SFUInt64::GetHandle(
             &_sfKey,
             this->getType().getFieldDesc(KeyFieldId),
             const_cast<HashKeyValueBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HashKeyValueBase::editHandleKey            (void)
{
    SFUInt64::EditHandlePtr returnValue(
        new  SFUInt64::EditHandle(
             &_sfKey,
             this->getType().getFieldDesc(KeyFieldId),
             this));


    editSField(KeyFieldMask);

    return returnValue;
}

GetFieldHandlePtr HashKeyValueBase::getHandleValue           (void) const
{
    SFUnrecFieldContainerPtr::GetHandlePtr returnValue(
        new  SFUnrecFieldContainerPtr::GetHandle(
             &_sfValue,
             this->getType().getFieldDesc(ValueFieldId),
             const_cast<HashKeyValueBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr HashKeyValueBase::editHandleValue          (void)
{
    SFUnrecFieldContainerPtr::EditHandlePtr returnValue(
        new  SFUnrecFieldContainerPtr::EditHandle(
             &_sfValue,
             this->getType().getFieldDesc(ValueFieldId),
             this));

    returnValue->setSetMethod(
        boost::bind(&HashKeyValue::setValue,
                    static_cast<HashKeyValue *>(this), ::boost::placeholders::_1));

    editSField(ValueFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void HashKeyValueBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    HashKeyValue *pThis = static_cast<HashKeyValue *>(this);

    pThis->execSync(static_cast<HashKeyValue *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *HashKeyValueBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
    HashKeyValue *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const HashKeyValue *>(pRefAspect),
                  dynamic_cast<const HashKeyValue *>(this));

    return returnValue;
}
#endif

void HashKeyValueBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<HashKeyValue *>(this)->setValue(NULL);


}


OSG_END_NAMESPACE
